/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";const t=new WeakMap,e=e=>"function"==typeof e&&t.has(e),s="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,i=(t,e,s=null)=>{for(;e!==s;){const s=e.nextSibling;t.removeChild(e),e=s}},n={},r={},o=`{{lit-${String(Math.random()).slice(2)}}}`,a=`\x3c!--${o}--\x3e`,l=new RegExp(`${o}|${a}`),h="$lit$";class c{constructor(t,e){this.parts=[],this.element=e;const s=[],i=[],n=document.createTreeWalker(e.content,133,null,!1);let r=0,a=-1,c=0;const{strings:p,values:{length:m}}=t;for(;c<m;){const t=n.nextNode();if(null!==t){if(a++,1===t.nodeType){if(t.hasAttributes()){const e=t.attributes,{length:s}=e;let i=0;for(let t=0;t<s;t++)d(e[t].name,h)&&i++;for(;i-- >0;){const e=p[c],s=_.exec(e)[2],i=s.toLowerCase()+h,n=t.getAttribute(i);t.removeAttribute(i);const r=n.split(l);this.parts.push({type:"attribute",index:a,name:s,strings:r}),c+=r.length-1}}"TEMPLATE"===t.tagName&&(i.push(t),n.currentNode=t.content)}else if(3===t.nodeType){const e=t.data;if(e.indexOf(o)>=0){const i=t.parentNode,n=e.split(l),r=n.length-1;for(let e=0;e<r;e++){let s,r=n[e];if(""===r)s=u();else{const t=_.exec(r);null!==t&&d(t[2],h)&&(r=r.slice(0,t.index)+t[1]+t[2].slice(0,-h.length)+t[3]),s=document.createTextNode(r)}i.insertBefore(s,t),this.parts.push({type:"node",index:++a})}""===n[r]?(i.insertBefore(u(),t),s.push(t)):t.data=n[r],c+=r}}else if(8===t.nodeType)if(t.data===o){const e=t.parentNode;null!==t.previousSibling&&a!==r||(a++,e.insertBefore(u(),t)),r=a,this.parts.push({type:"node",index:a}),null===t.nextSibling?t.data="":(s.push(t),a--),c++}else{let e=-1;for(;-1!==(e=t.data.indexOf(o,e+1));)this.parts.push({type:"node",index:-1}),c++}}else n.currentNode=i.pop()}for(const t of s)t.parentNode.removeChild(t)}}const d=(t,e)=>{const s=t.length-e.length;return s>=0&&t.slice(s)===e},p=t=>-1!==t.index,u=()=>document.createComment(""),_=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;class m{constructor(t,e,s){this.__parts=[],this.template=t,this.processor=e,this.options=s}update(t){let e=0;for(const s of this.__parts)void 0!==s&&s.setValue(t[e]),e++;for(const t of this.__parts)void 0!==t&&t.commit()}_clone(){const t=s?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),e=[],i=this.template.parts,n=document.createTreeWalker(t,133,null,!1);let r,o=0,a=0,l=n.nextNode();for(;o<i.length;)if(r=i[o],p(r)){for(;a<r.index;)a++,"TEMPLATE"===l.nodeName&&(e.push(l),n.currentNode=l.content),null===(l=n.nextNode())&&(n.currentNode=e.pop(),l=n.nextNode());if("node"===r.type){const t=this.processor.handleTextExpression(this.options);t.insertAfterNode(l.previousSibling),this.__parts.push(t)}else this.__parts.push(...this.processor.handleAttributeExpressions(l,r.name,r.strings,this.options));o++}else this.__parts.push(void 0),o++;return s&&(document.adoptNode(t),customElements.upgrade(t)),t}}const f=window.trustedTypes&&trustedTypes.createPolicy("lit-html",{createHTML:t=>t}),g=` ${o} `;class v{constructor(t,e,s,i){this.strings=t,this.values=e,this.type=s,this.processor=i}getHTML(){const t=this.strings.length-1;let e="",s=!1;for(let i=0;i<t;i++){const t=this.strings[i],n=t.lastIndexOf("\x3c!--");s=(n>-1||s)&&-1===t.indexOf("--\x3e",n+1);const r=_.exec(t);e+=null===r?t+(s?g:a):t.substr(0,r.index)+r[1]+r[2]+h+r[3]+o}return e+=this.strings[t],e}getTemplateElement(){const t=document.createElement("template");let e=this.getHTML();return void 0!==f&&(e=f.createHTML(e)),t.innerHTML=e,t}}const y=t=>null===t||!("object"==typeof t||"function"==typeof t),b=t=>Array.isArray(t)||!(!t||!t[Symbol.iterator]);class z{constructor(t,e,s){this.dirty=!0,this.element=t,this.name=e,this.strings=s,this.parts=[];for(let t=0;t<s.length-1;t++)this.parts[t]=this._createPart()}_createPart(){return new w(this)}_getValue(){const t=this.strings,e=t.length-1,s=this.parts;if(1===e&&""===t[0]&&""===t[1]){const t=s[0].value;if("symbol"==typeof t)return String(t);if("string"==typeof t||!b(t))return t}let i="";for(let n=0;n<e;n++){i+=t[n];const e=s[n];if(void 0!==e){const t=e.value;if(y(t)||!b(t))i+="string"==typeof t?t:String(t);else for(const e of t)i+="string"==typeof e?e:String(e)}}return i+=t[e],i}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class w{constructor(t){this.value=void 0,this.committer=t}setValue(t){t===n||y(t)&&t===this.value||(this.value=t,e(t)||(this.committer.dirty=!0))}commit(){for(;e(this.value);){const t=this.value;this.value=n,t(this)}this.value!==n&&this.committer.commit()}}class C{constructor(t){this.value=void 0,this.__pendingValue=void 0,this.options=t}appendInto(t){this.startNode=t.appendChild(u()),this.endNode=t.appendChild(u())}insertAfterNode(t){this.startNode=t,this.endNode=t.nextSibling}appendIntoPart(t){t.__insert(this.startNode=u()),t.__insert(this.endNode=u())}insertAfterPart(t){t.__insert(this.startNode=u()),this.endNode=t.endNode,t.endNode=this.startNode}setValue(t){this.__pendingValue=t}commit(){if(null===this.startNode.parentNode)return;for(;e(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=n,t(this)}const t=this.__pendingValue;t!==n&&(y(t)?t!==this.value&&this.__commitText(t):t instanceof v?this.__commitTemplateResult(t):t instanceof Node?this.__commitNode(t):b(t)?this.__commitIterable(t):t===r?(this.value=r,this.clear()):this.__commitText(t))}__insert(t){this.endNode.parentNode.insertBefore(t,this.endNode)}__commitNode(t){this.value!==t&&(this.clear(),this.__insert(t),this.value=t)}__commitText(t){const e=this.startNode.nextSibling,s="string"==typeof(t=null==t?"":t)?t:String(t);e===this.endNode.previousSibling&&3===e.nodeType?e.data=s:this.__commitNode(document.createTextNode(s)),this.value=t}__commitTemplateResult(t){const e=this.options.templateFactory(t);if(this.value instanceof m&&this.value.template===e)this.value.update(t.values);else{const s=new m(e,t.processor,this.options),i=s._clone();s.update(t.values),this.__commitNode(i),this.value=s}}__commitIterable(t){Array.isArray(this.value)||(this.value=[],this.clear());const e=this.value;let s,i=0;for(const n of t)s=e[i],void 0===s&&(s=new C(this.options),e.push(s),0===i?s.appendIntoPart(this):s.insertAfterPart(e[i-1])),s.setValue(n),s.commit(),i++;i<e.length&&(e.length=i,this.clear(s&&s.endNode))}clear(t=this.startNode){i(this.startNode.parentNode,t.nextSibling,this.endNode)}}class M{constructor(t,e,s){if(this.value=void 0,this.__pendingValue=void 0,2!==s.length||""!==s[0]||""!==s[1])throw new Error("Boolean attributes can only contain a single expression");this.element=t,this.name=e,this.strings=s}setValue(t){this.__pendingValue=t}commit(){for(;e(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=n,t(this)}if(this.__pendingValue===n)return;const t=!!this.__pendingValue;this.value!==t&&(t?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=t),this.__pendingValue=n}}class x extends z{constructor(t,e,s){super(t,e,s),this.single=2===s.length&&""===s[0]&&""===s[1]}_createPart(){return new S(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class S extends w{}let H=!1;(()=>{try{const t={get capture(){return H=!0,!1}};window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){}})();class P{constructor(t,e,s){this.value=void 0,this.__pendingValue=void 0,this.element=t,this.eventName=e,this.eventContext=s,this.__boundHandleEvent=t=>this.handleEvent(t)}setValue(t){this.__pendingValue=t}commit(){for(;e(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=n,t(this)}if(this.__pendingValue===n)return;const t=this.__pendingValue,s=this.value,i=null==t||null!=s&&(t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive),r=null!=t&&(null==s||i);i&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),r&&(this.__options=L(t),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=t,this.__pendingValue=n}handleEvent(t){"function"==typeof this.value?this.value.call(this.eventContext||this.element,t):this.value.handleEvent(t)}}const L=t=>t&&(H?{capture:t.capture,passive:t.passive,once:t.once}:t.capture),V=new class{handleAttributeExpressions(t,e,s,i){const n=e[0];return"."===n?new x(t,e.slice(1),s).parts:"@"===n?[new P(t,e.slice(1),i.eventContext)]:"?"===n?[new M(t,e.slice(1),s)]:new z(t,e,s).parts}handleTextExpression(t){return new C(t)}};function E(t){let e=T.get(t.type);void 0===e&&(e={stringsArray:new WeakMap,keyString:new Map},T.set(t.type,e));let s=e.stringsArray.get(t.strings);if(void 0!==s)return s;const i=t.strings.join(o);return s=e.keyString.get(i),void 0===s&&(s=new c(t,t.getTemplateElement()),e.keyString.set(i,s)),e.stringsArray.set(t.strings,s),s}const T=new Map,O=new WeakMap,A=(t,e,s)=>{let n=O.get(e);void 0===n&&(i(e,e.firstChild),O.set(e,n=new C(Object.assign({templateFactory:E},s))),n.appendInto(e)),n.setValue(t),n.commit()};"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.3.0");const k=(t,...e)=>new v(t,e,"html",V);class N{constructor(t){this._listener_id_ref=1,this._listeners={},this._state=t}get state(){return this._state}emit(t){this._state=t;for(let e of Object.keys(this._listeners))try{this._listeners[`${e}`](t)}catch(t){console.log(`Listener ${e} do not have try catch bloc. It throws error which is not caught in its pure function.`),console.error(t)}}_listen(t){let e=`${this._listener_id_ref}`;return this._listeners[e]=t,this._listener_id_ref++,e}_stopListening(t){t&&this._listeners[t]&&delete this._listeners[t]}}class I extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});let t=this.getAttribute("use");this._useAttr=I.parseUseAttribute(t)}get useAttribute(){return this._useAttr}static parseUseAttribute(t){if(t){let e={},s=t.split(";");for(let t of s){let s=t.split(":");2===s.length&&(e[s[0].trim()]=s[1].trim())}return e}}}class D extends I{constructor(t){super(),this.blocs=t}connectedCallback(){this._build()}_findBloc(t){for(let e of this.blocs)if(e.constructor.name===t.name)return e}static of(t,e,s=(t=>!0)){var i;let n=e;for(;n;){if(s(n))if(n instanceof D){let e=n._findBloc(t);if(e)return e}else if(n instanceof R&&(null===(i=n.bloc)||void 0===i?void 0:i.constructor.name)===t.name)return n.bloc;let e=n.parentNode;e instanceof ShadowRoot&&(e=e.host),n=e}}_build(){let t=this.builder();A(t,this.shadowRoot)}}class R extends I{constructor(t,e){super(),this.blocType=t,this._configs={buildWhen:(t,e)=>e!==t,...e}}get bloc(){return this._bloc}get state(){var t;return null===(t=this.bloc)||void 0===t?void 0:t.state}connectedCallback(){this._initialize()}_initialize(){if(this._bloc=this._configs.useThisBloc?this._configs.useThisBloc:D.of(this.blocType,this),!this._bloc)throw`No parent found which has ${this.blocType.name} bloc`;this._prevState=this._bloc.state,this._subscriptionId=this._bloc._listen((t=>{this._configs.buildWhen(this._prevState,t)&&(this._prevState=t,this._build(t))})),this._build(this._prevState)}disconnectedCallback(){this._bloc._stopListening(this._subscriptionId)}_build(t){let e=this.builder(t);A(e,this.shadowRoot)}}class ${constructor(){this.primaryColor="#ff2052",this.secondaryColor="#4e00ec",this.iconColor="#ffffff",this.backgroundColor="#ededed",this.cornerRadius="4px",this.input_bg_color="#00000054",this.input_height="50px",this.input_padding="5px 10px",this.input_cursor_color="#ffffff",this.input_text_color="#ffffff",this.input_place_holder_color="#d2d2d2",this.input_icon_color="#ffffff",this.button_disable_color="#0000008c",this.snack_bar_bg="#000000b3",this.glass_black="#0000008c",this.P_font_size="1em",this.H3_font_size="1.3em",this.H2_font_size="1.6em",this.H1_font_size="2em",this.H5_font_size="0.7em",this.H6_font_size="0.5em",this.color="black",this.tab_inactive_color="#dbdbdb",this.tab_inactive_icon_color="#919191"}}class F extends N{constructor(t){super(t)}changeTheme(t){this.emit(t)}}class B extends D{constructor(t){super([new F(t)]),document.useThemTheme=t}builder(){return k`<div style="width:100%; height: 100%;"><slot></slot></div>`}}class j extends N{constructor(t){super(t)}}class U extends j{constructor(){super(0)}}class q extends R{constructor(t,e){super(t,e);let s=document.useThemTheme;this._theme={...s,...this.useAttribute}}get theme(){return this._theme}}class Y extends N{constructor(){super(void 0)}}window.customElements.define("lay-them",class extends R{constructor(){super(Y,{useThisBloc:new Y});let t=this.getAttribute("in");t=t?t.toLowerCase():"column",this.lay_them_in=t;let e=this.getAttribute("ma");e=e?e.toLowerCase():"center",this.main_axis_alignment=e;let s=this.getAttribute("ca");s=s?s.toLowerCase():"stack"===t?"center":"stretch",this.cross_axis_alignment=s}builder(t){return k`
    <style>
      .container{
          width: 100%;
          height: 100%;
        overflow: auto;
      }
      .flex{
          display: flex;
          flex-wrap: nowrap;
          height: 100%;
          flex-direction: ${(()=>"stack"==this.lay_them_in?"column":this.lay_them_in)()};
          justify-content: ${this.main_axis_alignment};
          align-items: ${this.cross_axis_alignment};
          flex-wrap: nowrap;
          height: 100%;
          position: ${(()=>"stack"==this.lay_them_in?"relative":"static")()};
      }
      
      ${(()=>"stack"==this.lay_them_in?"::slotted(div){position: absolute;}":"")()}
    </style>
    <div class="container">
      <div class="flex" id="flex">
          <slot></slot>
      </div>
    </div>`}});class G extends N{constructor(){super({showMenu:!1,showSnackbar:!1})}toggleMenu(){let t={...this.state};t.showMenu=!t.showMenu,this.emit(t)}postMessageToSnackBar(t,e=4e3){let s={...this.state};s.showSnackbar=!0,s.snackBarMessage=t,this.emit(s),setTimeout((()=>{let t={...this.state};t.showSnackbar=!1,t.snackBarMessage=void 0,this.emit(t)}),e)}}customElements.define("ut-scaffold",class extends q{constructor(){super(G,{useThisBloc:new G}),this.toggleMenuBar=()=>{var t;null===(t=this.bloc)||void 0===t||t.toggleMenu()}}builder(t){return k`
        <!-- TODO menu bar-->
        <style>
            .appbar {
                min-height: 60px;
                width: 100%;
            }
            .expanded{
                width:100%; 
                height:100%; 
            }
            .glass{
                background-color: ${this.theme.glass_black};
            }
            .snack-bar{
                background-color: ${this.theme.snack_bar_bg};position: fixed; bottom: 50px; padding:10px 20px; max-width: 90%; color: white;
            }
        </style>
<div class="expanded">
    <lay-them in="stack">
        <div class="expanded">
            <lay-them for="base of scaffold">
                <div class="appbar">
                    <lay-them in="stack">
                        <div style="height: 60px; position: fixed; width: 100%; box-shadow: 0px 0px 10px black;">
                            <slot name="appbar-bg">
                                <svg version="1.1" viewBox="0 0 100 100" preserveAspectRatio="none" height="100%" width="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                                    <defs>
                                        <linearGradient id="linearGradient850" x1="-28.773" x2="119.68" y1="53.936" y2="50.846" gradientUnits="userSpaceOnUse">
                                            <stop stop-color="${this.theme.secondaryColor}" offset="0"></stop>
                                            <stop stop-color="${this.theme.primaryColor}" offset="1"></stop>
                                        </linearGradient>
                                    </defs>
                                    <rect width="100" height="100" fill="url(#linearGradient850)" stroke-linejoin="round" stroke-width="2.1354"></rect>
                                </svg>
                            </slot>
                        </div>
                        <div>
                            <slot name="title"></slot>
                        </div>
                        <div style="position: absolute; left : 10px;">
                            <ut-scaffold-menu-button></ut-scaffold-menu-button>
                        </div>
                </lay-them>
                </div>
                <div class="body" style="flex: 1 1 auto; overflow-y: auto;">
                    <slot name="body"></slot>
                </div>
            </lay-them>
        </div>
        <div class="expanded glass" style="display: ${t.showMenu?"block":"none"};">
            <lay-them in="row" ca="stretch" ma="flex-start">
                <div style="background-color: white; flex: 2 1 auto; max-width: 70%; box-shadow: 0px 0px 30px black;">
                    <slot name="menu"></slot>
                </div>
                <div style="flex: 1 1 auto;" @click=${this.toggleMenuBar}></div>
            </lay-them>
        </div>
        <div class="snack-bar" style="border-radius: ${this.theme.cornerRadius}; display: ${t.showSnackbar?"block":"none"};">
            <div style="color:white; font-size: ${this.theme.P_font_size};">${t.snackBarMessage}</div>
        </div>
    </lay-them>
</div>
        `}}),customElements.define("ut-scaffold-menu-button",class extends q{constructor(){super(G),this.toggleMenuBar=()=>{setTimeout((()=>{var t;null===(t=this.bloc)||void 0===t||t.toggleMenu()}),300),this.shadowRoot.querySelector("#animateTransform5322").beginElement()}}builder(t){return k`<svg
        width="10mm"
        height="10mm"
        viewBox="0 0 25 25"
        version="1.1"
        id="svg845"
        preserveAspectRatio="xMidYMid"
        anigen:version="0.8.1"
        @click=${this.toggleMenuBar}>
        <g
            id="icon"
            transform="translate(-1.5748032e-7,1.4999999)"
            onclick="">
            <rect
            style="fill:${this.theme.iconColor};stroke-width:1.92378;stroke-linejoin:round;stroke-opacity:0.658819"
            id="rect835"
            width="15"
            height="2"
            x="5"
            y="5" />
            <rect
            style="fill:${this.theme.iconColor};stroke-width:1.92378;stroke-linejoin:round;stroke-opacity:0.658819"
            id="rect837"
            width="15"
            height="2"
            x="5"
            y="10" />
            <rect
            style="fill:${this.theme.iconColor};stroke-width:1.92378;stroke-linejoin:round;stroke-opacity:0.658819"
            id="rect839"
            width="15"
            height="2"
            x="5"
            y="15" />
            <animateTransform
            attributeName="transform"
            attributeType="auto"
            type="rotate"
            values="0 12.50589307470144 10.997459956419888;180 12.50589307470144 10.997459956419888"
            calcMode="spline"
            keyTimes="0;1"
            keySplines="0 0 1 1"
            dur="0.3s"
            begin="indefinite"
            repeatCount="1"
            additive="sum"
            accumulate="none"
            fill="freeze"
            id="animateTransform5322" />
        </g>
        </svg>`}});class W extends N{constructor(t){super(t)}changeLanguage(t){this.emit(t)}getText(t){if(t){let e=t.toLowerCase();return this.state[e]||t}}}class J extends D{builder(){return k`<div style="width:100%; height: 100%;"><slot></slot></div>`}constructor(t){super([new W(t)])}}class X extends q{constructor(){super(W),this._font_size="1em"}builder(t){return k`<span style="font-size: ${this._font_size}; color: ${this.theme.color}">${X._getText(this.textContent,t)}</span>`}set font_size(t){this._font_size=t}static _getText(t,e){if(t){let s=t.toLowerCase();return e[s]?e[s]:t}}}customElements.define("ut-p",class extends X{constructor(){super(),this.font_size=this.theme.P_font_size}}),customElements.define("ut-h1",class extends X{constructor(){super(),this.font_size=this.theme.H1_font_size}}),customElements.define("ut-h2",class extends X{constructor(){super(),this.font_size=this.theme.H2_font_size}}),customElements.define("ut-h3",class extends X{constructor(){super(),this.font_size=this.theme.H3_font_size}}),customElements.define("ut-h5",class extends X{constructor(){super(),this.font_size=this.theme.H5_font_size}}),customElements.define("ut-h6",class extends X{constructor(){super(),this.font_size=this.theme.H6_font_size}}),customElements.define("ut-ex",class extends q{constructor(){super(U,{useThisBloc:new U})}builder(t){return k`<div style="width:100%; height: 100%;"><slot></slot></div>`}});class K extends N{constructor(){super({})}postMessage(t,e){this.state[t]=e,this.emit({...this.state})}}class Z extends N{constructor(t){super(t)}disableAnInput(t){this.state.areDisabled||(this.state.areDisabled=new Set),this.state.areDisabled.add(t),this.emit({...this.state})}enableAnInput(t){this.state.areDisabled&&this.state.delete(t),this.emit({...this.state})}isDisabled(t){return!!this.state.areDisabled&&this.state.areDisabled.has(t)}_basicOnChange(t){return e=>{this.state[t]=e,this.emit({...this.state})}}}class Q extends q{constructor(t){super(t),this.type=t;let e=this.getAttribute("name");if(!e)throw"Every form Input Widget must be given a name attribute.";this.name=e}get disabled(){return!this.bloc||this.bloc.isDisabled(this.name)}connectedCallback(){var t,e,s;super.connectedCallback(),this.messageBloc=D.of(K,this),this.validator=null===(t=this.bloc)||void 0===t?void 0:t.validatorFunctionGiver(this.name),this.postOnChange=null===(e=this.bloc)||void 0===e?void 0:e.postOnChangeFunctionGiver(this.name);let i=null===(s=this.bloc)||void 0===s?void 0:s._basicOnChange(this.name);i&&(this.onChange=t=>{var e;try{if(i(t),this.validator){let s=this.validator(t);null===(e=this.messageBloc)||void 0===e||e.postMessage(this.name,s),this.postOnChange&&this.postOnChange(t,s)}}catch(t){console.error(t)}})}}customElements.define("form-message",class extends q{constructor(){super(K);let t=this.getAttribute("for");if(!t)throw"No for attribute present on a form message";this.name=t}builder(t){let e=t[this.name];return k`<span>${e}</span>`}});class tt extends D{builder(){return k`<div><slot></slot></div>`}constructor(t){super([new K,t])}}class et extends Q{constructor(t){super(t),this.value=!1,this._ON_animate=()=>{this.shadowRoot.querySelector("#on_switch_color").beginElement(),this.shadowRoot.querySelector("#on_base_move").beginElement()},this._OFF_animate=()=>{this.shadowRoot.querySelector("#off_switch_color").beginElement(),this.shadowRoot.querySelector("#off_base_move").beginElement()},this.toggle=()=>{this.disabled||(this.value?this._OFF_animate():this._ON_animate(),this.value=!this.value,this.onChange(this.value))}}builder(t){let e=this.disabled?this.theme.backgroundColor:"#ffffff";return k`
<svg @click=${this.toggle}
 xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
 xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" 
 width="12mm" height="8mm" version="1.1" id="svg21" viewBox="0 0 170 90" preserveAspectRatio="xMidYMid" 
 xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:anigen="http://www.anigen.org/namespace"
  anigen:version="0.8.1">
  <defs id="defs15">
    <linearGradient id="linearGradient850" x1="-28.773" x2="119.68" y1="53.936" y2="50.846" gradientUnits="userSpaceOnUse">
        <stop stop-color=${this.theme.secondaryColor} offset="0"></stop>
        <stop stop-color=${this.theme.primaryColor} offset="1"></stop>
    </linearGradient>
    <filter id="filter915" color-interpolation-filters="sRGB">
      <feFlood flood-color="rgb(0,0,0)" flood-opacity=".41176" result="flood" id="feFlood4"></feFlood>
      <feComposite in="flood" in2="SourceGraphic" operator="in" result="composite1" id="feComposite6"></feComposite>
      <feGaussianBlur in="composite1" result="blur" stdDeviation="16.1038" id="feGaussianBlur8"></feGaussianBlur>
      <feOffset dx="1.6" dy="1.8" result="offset" id="feOffset10"></feOffset>
      <feComposite in="SourceGraphic" in2="offset" result="composite2" id="feComposite12"></feComposite>
    </filter>
  </defs>
  <g id="base-animation">
    <rect id="toggle-button-base" x="3.6e-07" y="1.3968" width="167.37" height="83.685997" rx="39.641998" ry="41.841999" fill="${this.theme.input_bg_color}" stroke-linejoin="round" stroke-opacity="0.65882" stroke-width="0.42366">
      <animate attributeType="auto" attributeName="fill" values="${this.theme.input_bg_color};${this.theme.primaryColor}" calcMode="spline" keyTimes="0;1" keySplines="0 0 1 1" dur="0.2s" begin="indefinite" 
      repeatCount="1" additive="replace" accumulate="none" fill="freeze" id="on_switch_color"></animate>
      <animate attributeType="auto" attributeName="fill" values="${this.theme.primaryColor};${this.theme.input_bg_color}" calcMode="spline" keyTimes="0;1" keySplines="0 0 1 1" dur="0.2s" begin="indefinite" 
      repeatCount="1" additive="replace" accumulate="none" fill="freeze" id="off_switch_color"></animate>
    </rect>
  </g>
  <g id="switch-animation">
    <circle id="switch" transform="matrix(0.28025,0,0,0.28025,53.809,1.3968)" cx="250.24001" cy="148.7" r="128.07001" fill="${e}" filter="url(#filter915)" stroke-linejoin="round" stroke-opacity="0.65882" stroke-width="2.0532"></circle>
  <animateTransform attributeName="transform" attributeType="auto" type="translate" values="0 0;-81.68950659534471 0" calcMode="spline" keyTimes="0;1" 
  keySplines="0 0 1 1" dur="0.2s" begin="indefinite" repeatCount="1" additive="replace" accumulate="none" fill="freeze" id="on_base_move"></animateTransform>
  <animateTransform attributeName="transform" attributeType="auto" type="translate" values="0 0;81.68950659534471 0" calcMode="spline" keyTimes="0;1" 
  keySplines="0 0 1 1" dur="0.2s" begin="indefinite" repeatCount="1" additive="sum" accumulate="none" fill="freeze" id="off_base_move"></animateTransform>
  </g>
</svg>
        `}}class st extends Q{constructor(t){super(t),this.value={start:0,end:0},this.isDraging=!1,this._drag_ON=t=>{this.isDraging=!0},this._drag_OFF=t=>{this.isDraging=!1},this._drag=t=>{if(this.isDraging){let e=this.posMin+this.handleRadius,s=this.posMax-this.handleRadius;t<e?t=e:t>s&&(t=s)}else console.log("no drag on");return t},this._start_drag=t=>{if(!this.disabled){let e=t.changedTouches[0].clientX;e=this._drag(e),e>this.posEnd&&(e=this.posEnd-2*this.handleRadius);let s=this.posMax-3*this.handleRadius;e>=s&&(e=s),this.setStartPos(e),this.setActiveStart(e),this._postChange()}},this._end_drag=t=>{if(!this.disabled){let e=t.changedTouches[0].clientX;e=this._drag(e),e<this.posStart&&(e=this.posStart+2*this.handleRadius);let s=this.posMin+3*this.handleRadius;e<=s&&(e=s),this.setEndPos(e),this.setActiveEnd(e),this._postChange()}},this._start_dragHandler={handleEvent:this._start_drag,passive:!0},this._end_dragHandler={handleEvent:this._end_drag,passive:!0},this.posMax=0,this.posMin=0,this.posStart=0,this.posEnd=0,this.width=0;let e=this.getAttribute("max"),s=this.getAttribute("min");if(this.handleRadius=12,!e||!s)throw"Not all attributes provided for a range selector: min and max";this.max=Number(e),this.min=Number(s);let i=this.getAttribute("isint");this.isint=!!i,this.start_color=this.theme.primaryColor,this.end_color=this.theme.secondaryColor,this.base_color=this.theme.input_bg_color}builder(t){return this.disabled?(this.start_color=this.base_color,this.end_color=this.base_color):(this.start_color=this.theme.primaryColor,this.end_color=this.theme.secondaryColor),k`
        <style>
           .no-select{
            user-select: none;
           }
        </style>
      <lay-them in="row" ma="center">
         <div class="no-select" style="font-weight: bold;  font-size: ${this.theme.H3_font_size};">${this.isint?this.value.start:this.value.start.toFixed(2)}</div>
      </lay-them>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   width="100%"
   height="50px"
   version="1.1"
   id="svg8">
  <defs
     id="defs2">
    <linearGradient
       id="linearGradient1197">
      <stop
         style="stop-color:${this.end_color};stop-opacity:1"
         offset="0"
         id="stop1193" />
      <stop
         style="stop-color:${this.start_color};stop-opacity:1"
         offset="1"
         id="stop1195" />
    </linearGradient>
    <filter
       style="color-interpolation-filters:sRGB;"
       id="filter1157">
      <feFlood
         flood-opacity="0.666667"
         flood-color="rgb(0,0,0)"
         result="flood"
         id="feFlood1147" />
      <feComposite
         in="flood"
         in2="SourceGraphic"
         operator="in"
         result="composite1"
         id="feComposite1149" />
      <feGaussianBlur
         in="composite1"
         stdDeviation="0.989644"
         result="blur"
         id="feGaussianBlur1151" />
      <feOffset
         dx="0"
         dy="0"
         result="offset"
         id="feOffset1153" />
      <feComposite
         in="SourceGraphic"
         in2="offset"
         operator="over"
         result="composite2"
         id="feComposite1155" />
    </filter>
    <linearGradient
       xlink:href="#linearGradient1197"
       id="linearGradient1199"
       x1="13.141692"
       y1="15.874999"
       x2="500"
       y2="15.874999"
       gradientUnits="userSpaceOnUse" />
    <filter
       style="color-interpolation-filters:sRGB;"
       id="filter1261"
       height="1.6700000000000004"
       width="1.5700000000000003"
       x="-0.30000000000000016"
       y="-0.30000000000000016">
      <feFlood
         flood-opacity="0.666667"
         flood-color="rgb(0,0,0)"
         result="flood"
         id="feFlood1251" />
      <feComposite
         in="flood"
         in2="SourceGraphic"
         operator="in"
         result="composite1"
         id="feComposite1253" />
      <feGaussianBlur
         in="composite1"
         stdDeviation="4.58947"
         result="blur"
         id="feGaussianBlur1255" />
      <feOffset
         dx="0"
         dy="0"
         result="offset"
         id="feOffset1257" />
      <feComposite
         in="SourceGraphic"
         in2="offset"
         operator="over"
         result="composite2"
         id="feComposite1259" />
    </filter>
  </defs>
  <metadata
     id="metadata5">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     id="layer1">
    <rect
       style="fill:${this.base_color};stroke-width:0.477727;stroke-linejoin:round;stroke-opacity:0.658819"
       id="base"
       width="100%"
       height="5"
       x="0"
       y="20" />
    <!-- <rect
       style="fill:url(#linearGradient1199);fill-opacity:1;stroke-width:0.477727;stroke-linejoin:round;stroke-opacity:0.658819"
       id="active-range"
       width="100%"
       height="15"
       x="0"
       y="50" /> -->
       <path
       id="acrange"
       style="fill:url(#linearGradient1199);"
       d=""
       id="path833" />
    <circle
       style="fill:${this.end_color};stroke:#ffffff;stroke-width: 4;"
       id="start-handle"
       cy="25"
       r="${this.handleRadius}"
       @touchstart=${this._drag_ON}
       @touchend=${this._drag_OFF}
       @touchmove=${this._start_dragHandler}
       />
    <circle
       style="fill:${this.start_color};stroke:#ffffff;stroke-width: 4;"
       id="end-handle"
       cy="25"
       r="${this.handleRadius}"
       @touchstart=${this._drag_ON}
       @touchend=${this._drag_OFF}
       @touchmove=${this._end_dragHandler}/>
  </g>
</svg>
<lay-them in="row" ma="space-between">
   <div class="no-select"><ut-p>${this.min}</ut-p></div>
   <div class="no-select" style="font-weight: bold;  font-size: ${this.theme.H3_font_size};">${this.isint?this.value.end:this.value.end.toFixed(2)}</div>
   <div class="no-select"><ut-p>${this.max}</ut-p></div>
</lay-them>
        `}_postChange(){let t=this.positionToValue(this.posEnd),e=this.positionToValue(this.posStart);this.isint&&(t=Math.floor(t),e=Math.floor(e)),this.value={start:e,end:t},this.onChange(this.value)}valueToPercentage(t){return(t-(this.min+this.handleRadius/this.width))/(this.max-this.min-2*this.handleRadius/this.width)*100}percentageToPosition(t){return this.handleRadius+t*(this.posMax-this.posMin-2*this.handleRadius)/100}positionToValue(t){return this.min+(this.max-this.min)/(this.width-2*this.handleRadius)*(t-this.handleRadius)}connectedCallback(){var t,e,s,i,n,r,o;if(super.connectedCallback(),this.start=null===(t=this.bloc)||void 0===t?void 0:t.state.priceRange.start,this.end=null===(e=this.bloc)||void 0===e?void 0:e.state.priceRange.end,!(0==this.start||this.start&&this.start>=0&&0==this.end||this.end&&this.end>=0))throw`No start and end provided for range selector in form initialization for : ${this.name}`;if(this.start>this.end)throw`For a range selector start cannot be less then end value, please check initialization of rang selector: ${this.name}`;if(this.start<this.min)throw`Start ${this.start} cannot be less than min value ${this.min}, check form init values for this range selector`;if(this.end>this.max)throw`End ${this.end} cannot be more than max value ${this.max}, check form init values for this range selector`;let a=null===(i=null===(s=this.shadowRoot)||void 0===s?void 0:s.querySelector("#svg8"))||void 0===i?void 0:i.clientWidth,l=null===(r=null===(n=this.shadowRoot)||void 0===n?void 0:n.querySelector("#svg8"))||void 0===r?void 0:r.clientLeft;this.posMin=l,this.posMax=a+this.posMin,this.width=this.posMax-this.posMin;let h=this.percentageToPosition(this.valueToPercentage(this.start));this.setStartPos(h);let c=this.percentageToPosition(this.valueToPercentage(this.end));this.setEndPos(c),this.value={start:this.start,end:this.end},null===(o=this.bloc)||void 0===o||o.emit({...this.bloc.state}),this.setActiveStart(h)}setStartPos(t){var e,s;null===(s=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector("#start-handle"))||void 0===s||s.setAttribute("cx",`${t}`),this.posStart=t}setActiveStart(t){var e,s;let i=this.posEnd-this.posStart,n=`m ${t},20 h ${i} v 5 h -${i} z`;null===(s=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector("#acrange"))||void 0===s||s.setAttribute("d",n)}setActiveEnd(t){var e,s;let i=this.posStart-this.posMin,n=`m ${i},20 h ${t-i} v 5 h ${i-t} z`;null===(s=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector("#acrange"))||void 0===s||s.setAttribute("d",n)}setEndPos(t){var e,s;null===(s=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector("#end-handle"))||void 0===s||s.setAttribute("cx",`${t}`),this.posEnd=t}}class it{static shadeColor(t,e){let s=parseInt(t.substring(1,3),16),i=parseInt(t.substring(3,5),16),n=parseInt(t.substring(5,7),16);return s=Math.floor(s*(100+e)/100),i=Math.floor(i*(100+e)/100),n=Math.floor(n*(100+e)/100),s=s<255?s:255,i=i<255?i:255,n=n<255?n:255,"#"+(1==s.toString(16).length?"0"+s.toString(16):s.toString(16))+(1==i.toString(16).length?"0"+i.toString(16):i.toString(16))+(1==n.toString(16).length?"0"+n.toString(16):n.toString(16))}}class nt extends q{constructor(t,e){if(super(t,e),this.buttonAction=()=>{this.onPress()},this.bgColor="#ffffff",this.useAttribute){let t=this.useAttribute["background-color"];t&&(this.bgColor=t)}this.onPressButtonColor=it.shadeColor(this.bgColor,20),this.light=it.shadeColor(this.bgColor,80)}isDisabled(){return!!this.hasAttribute("disabled")}builder(t){return k`
            <style>
                .ripple {
                background-position: center;
                transition: background 0.8s;
                }
                .ripple:hover {
                    background: ${this.onPressButtonColor} radial-gradient(circle, transparent 1%, ${this.onPressButtonColor} 1%) center/15000%;
                }
                .ripple:active {
                    background-color: ${this.light};
                    background-size: 100%;
                    transition: background 0s;
                }
                .button{
                    box-shadow: 0px 4px 12px 0px #0000009e;
                    display: flex;
                    flex-direction: column;
                    flex-wrap: nowrap;
                    justify-content: center;
                    align-items: stretch;
                    user-select: none; 
                    min-height: 50px;
                    text-align: center; 
                    background-color: ${this.isDisabled()?this.theme.button_disable_color:this.bgColor};
                    border-radius:${this.theme.cornerRadius}
                }
                .button:active{
                    box-shadow: 0px 0px 0px 0px #0000009e
                }
            </style>
            <div class="${(()=>this.isDisabled()?"button":"ripple button")()}" style="" @click=${()=>{this.isDisabled()||this.buttonAction()}}><slot></slot></div>
        `}}const rt=!(window.ShadyDOM&&window.ShadyDOM.inUse);let ot,at;function lt(t){ot=(!t||!t.shimcssproperties)&&(rt||Boolean(!navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)&&window.CSS&&CSS.supports&&CSS.supports("box-shadow","0 0 0 var(--foo)")))}window.ShadyCSS&&void 0!==window.ShadyCSS.cssBuild&&(at=window.ShadyCSS.cssBuild);const ht=Boolean(window.ShadyCSS&&window.ShadyCSS.disableRuntime);window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?ot=window.ShadyCSS.nativeCss:window.ShadyCSS?(lt(window.ShadyCSS),window.ShadyCSS=void 0):lt(window.WebComponents&&window.WebComponents.flags);const ct=ot;class dt{constructor(){this.start=0,this.end=0,this.previous=null,this.parent=null,this.rules=null,this.parsedCssText="",this.cssText="",this.atRule=!1,this.type=0,this.keyframesName="",this.selector="",this.parsedSelector=""}}function pt(t){return ut(function(t){let e=new dt;e.start=0,e.end=t.length;let s=e;for(let i=0,n=t.length;i<n;i++)if(t[i]===ft){s.rules||(s.rules=[]);let t=s,e=t.rules[t.rules.length-1]||null;s=new dt,s.start=i+1,s.parent=t,s.previous=e,t.rules.push(s)}else t[i]===gt&&(s.end=i+1,s=s.parent||e);return e}(t=t.replace(vt.comments,"").replace(vt.port,"")),t)}function ut(t,e){let s=e.substring(t.start,t.end-1);if(t.parsedCssText=t.cssText=s.trim(),t.parent){let i=t.previous?t.previous.end:t.parent.start;s=e.substring(i,t.start-1),s=function(t){return t.replace(/\\([0-9a-f]{1,6})\s/gi,(function(){let t=arguments[1],e=6-t.length;for(;e--;)t="0"+t;return"\\"+t}))}(s),s=s.replace(vt.multipleSpaces," "),s=s.substring(s.lastIndexOf(";")+1);let n=t.parsedSelector=t.selector=s.trim();t.atRule=0===n.indexOf(zt),t.atRule?0===n.indexOf(bt)?t.type=mt.MEDIA_RULE:n.match(vt.keyframesRule)&&(t.type=mt.KEYFRAMES_RULE,t.keyframesName=t.selector.split(vt.multipleSpaces).pop()):0===n.indexOf(yt)?t.type=mt.MIXIN_RULE:t.type=mt.STYLE_RULE}let i=t.rules;if(i)for(let t,s=0,n=i.length;s<n&&(t=i[s]);s++)ut(t,e);return t}function _t(t,e,s=""){let i="";if(t.cssText||t.rules){let s=t.rules;if(s&&!function(t){let e=t[0];return Boolean(e)&&Boolean(e.selector)&&0===e.selector.indexOf(yt)}(s))for(let t,n=0,r=s.length;n<r&&(t=s[n]);n++)i=_t(t,e,i);else i=e?t.cssText:function(t){return function(t){return t.replace(vt.mixinApply,"").replace(vt.varApply,"")}(t=function(t){return t.replace(vt.customProp,"").replace(vt.mixinProp,"")}(t))}(t.cssText),i=i.trim(),i&&(i="  "+i+"\n")}return i&&(t.selector&&(s+=t.selector+" "+ft+"\n"),s+=i,t.selector&&(s+=gt+"\n\n")),s}const mt={STYLE_RULE:1,KEYFRAMES_RULE:7,MEDIA_RULE:4,MIXIN_RULE:1e3},ft="{",gt="}",vt={comments:/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,port:/@import[^;]*;/gim,customProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,mixinProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,mixinApply:/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,varApply:/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,keyframesRule:/^@[^\s]*keyframes/,multipleSpaces:/\s+/g},yt="--",bt="@media",zt="@",wt=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,Ct=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi,Mt=/@media\s(.*)/,xt=new Set;function St(t){const e=t.textContent;if(!xt.has(e)){xt.add(e);const t=document.createElement("style");t.setAttribute("shady-unscoped",""),t.textContent=e,document.head.appendChild(t)}}function Ht(t){return t.hasAttribute("shady-unscoped")}function Pt(t,e){return t?("string"==typeof t&&(t=pt(t)),e&&Vt(t,e),_t(t,ct)):""}function Lt(t){return!t.__cssRules&&t.textContent&&(t.__cssRules=pt(t.textContent)),t.__cssRules||null}function Vt(t,e,s,i){if(!t)return;let n=!1,r=t.type;if(i&&r===mt.MEDIA_RULE){let e=t.selector.match(Mt);e&&(window.matchMedia(e[1]).matches||(n=!0))}r===mt.STYLE_RULE?e(t):s&&r===mt.KEYFRAMES_RULE?s(t):r===mt.MIXIN_RULE&&(n=!0);let o=t.rules;if(o&&!n)for(let t,n=0,r=o.length;n<r&&(t=o[n]);n++)Vt(t,e,s,i)}function Et(t,e){let s=t.indexOf("var(");if(-1===s)return e(t,"","","");let i=function(t,e){let s=0;for(let i=e,n=t.length;i<n;i++)if("("===t[i])s++;else if(")"===t[i]&&0==--s)return i;return-1}(t,s+3),n=t.substring(s+4,i),r=t.substring(0,s),o=Et(t.substring(i+1),e),a=n.indexOf(",");return-1===a?e(r,n.trim(),"",o):e(r,n.substring(0,a).trim(),n.substring(a+1).trim(),o)}window.ShadyDOM&&window.ShadyDOM.wrap;const Tt="css-build";function Ot(t){return""!==function(t){if(void 0!==at)return at;if(void 0===t.__cssBuild){const e=t.getAttribute(Tt);if(e)t.__cssBuild=e;else{const e=function(t){const e="template"===t.localName?t.content.firstChild:t.firstChild;if(e instanceof Comment){const t=e.textContent.trim().split(":");if(t[0]===Tt)return t[1]}return""}(t);""!==e&&function(t){const e="template"===t.localName?t.content.firstChild:t.firstChild;e.parentNode.removeChild(e)}(t),t.__cssBuild=e}}return t.__cssBuild||""}(t)}function At(t,e){for(let s in e)null===s?t.style.removeProperty(s):t.style.setProperty(s,e[s])}function kt(t,e){const s=window.getComputedStyle(t).getPropertyValue(e);return s?s.trim():""}const Nt=/;\s*/m,It=/^\s*(initial)|(inherit)\s*$/,Dt=/\s*!important/;class Rt{constructor(){this._map={}}set(t,e){t=t.trim(),this._map[t]={properties:e,dependants:{}}}get(t){return t=t.trim(),this._map[t]||null}}let $t=null;class Ft{constructor(){this._currentElement=null,this._measureElement=null,this._map=new Rt}detectMixin(t){return function(t){const e=Ct.test(t)||wt.test(t);return Ct.lastIndex=0,wt.lastIndex=0,e}(t)}gatherStyles(t){const e=function(t){const e=[],s=t.querySelectorAll("style");for(let t=0;t<s.length;t++){const i=s[t];Ht(i)?rt||(St(i),i.parentNode.removeChild(i)):(e.push(i.textContent),i.parentNode.removeChild(i))}return e.join("").trim()}(t.content);if(e){const s=document.createElement("style");return s.textContent=e,t.content.insertBefore(s,t.content.firstChild),s}return null}transformTemplate(t,e){void 0===t._gatheredStyle&&(t._gatheredStyle=this.gatherStyles(t));const s=t._gatheredStyle;return s?this.transformStyle(s,e):null}transformStyle(t,e=""){let s=Lt(t);return this.transformRules(s,e),t.textContent=Pt(s),s}transformCustomStyle(t){let e=Lt(t);return Vt(e,(t=>{":root"===t.selector&&(t.selector="html"),this.transformRule(t)})),t.textContent=Pt(e),e}transformRules(t,e){this._currentElement=e,Vt(t,(t=>{this.transformRule(t)})),this._currentElement=null}transformRule(t){t.cssText=this.transformCssText(t.parsedCssText,t),":root"===t.selector&&(t.selector=":host > *")}transformCssText(t,e){return t=t.replace(wt,((t,s,i,n)=>this._produceCssProperties(t,s,i,n,e))),this._consumeCssProperties(t,e)}_getInitialValueForProperty(t){return this._measureElement||(this._measureElement=document.createElement("meta"),this._measureElement.setAttribute("apply-shim-measure",""),this._measureElement.style.all="initial",document.head.appendChild(this._measureElement)),window.getComputedStyle(this._measureElement).getPropertyValue(t)}_fallbacksFromPreviousRules(t){let e=t;for(;e.parent;)e=e.parent;const s={};let i=!1;return Vt(e,(e=>{i=i||e===t,i||e.selector===t.selector&&Object.assign(s,this._cssTextToMap(e.parsedCssText))})),s}_consumeCssProperties(t,e){let s=null;for(;s=Ct.exec(t);){let i=s[0],n=s[1],r=s.index,o=r+i.indexOf("@apply"),a=r+i.length,l=t.slice(0,o),h=t.slice(a),c=e?this._fallbacksFromPreviousRules(e):{};Object.assign(c,this._cssTextToMap(l));let d=this._atApplyToCssProperties(n,c);t=`${l}${d}${h}`,Ct.lastIndex=r+d.length}return t}_atApplyToCssProperties(t,e){t=t.replace(Nt,"");let s=[],i=this._map.get(t);if(i||(this._map.set(t,{}),i=this._map.get(t)),i){let n,r,o;this._currentElement&&(i.dependants[this._currentElement]=!0);const a=i.properties;for(n in a)o=e&&e[n],r=[n,": var(",t,"_-_",n],o&&r.push(",",o.replace(Dt,"")),r.push(")"),Dt.test(a[n])&&r.push(" !important"),s.push(r.join(""))}return s.join("; ")}_replaceInitialOrInherit(t,e){let s=It.exec(e);return s&&(e=s[1]?this._getInitialValueForProperty(t):"apply-shim-inherit"),e}_cssTextToMap(t,e=!1){let s,i,n=t.split(";"),r={};for(let t,o,a=0;a<n.length;a++)t=n[a],t&&(o=t.split(":"),o.length>1&&(s=o[0].trim(),i=o.slice(1).join(":"),e&&(i=this._replaceInitialOrInherit(s,i)),r[s]=i));return r}_invalidateMixinEntry(t){if($t)for(let e in t.dependants)e!==this._currentElement&&$t(e)}_produceCssProperties(t,e,s,i,n){if(s&&Et(s,((t,e)=>{e&&this._map.get(e)&&(i=`@apply ${e};`)})),!i)return t;let r=this._consumeCssProperties(""+i,n),o=t.slice(0,t.indexOf("--")),a=this._cssTextToMap(r,!0),l=a,h=this._map.get(e),c=h&&h.properties;c?l=Object.assign(Object.create(c),a):this._map.set(e,l);let d,p,u=[],_=!1;for(d in l)p=a[d],void 0===p&&(p="initial"),c&&!(d in c)&&(_=!0),u.push(`${e}_-_${d}: ${p}`);return _&&this._invalidateMixinEntry(h),h&&(h.properties=l),s&&(o=`${t};${o}`),`${o}${u.join("; ")};`}}Ft.prototype.detectMixin=Ft.prototype.detectMixin,Ft.prototype.transformStyle=Ft.prototype.transformStyle,Ft.prototype.transformCustomStyle=Ft.prototype.transformCustomStyle,Ft.prototype.transformRules=Ft.prototype.transformRules,Ft.prototype.transformRule=Ft.prototype.transformRule,Ft.prototype.transformTemplate=Ft.prototype.transformTemplate,Ft.prototype._separator="_-_",Object.defineProperty(Ft.prototype,"invalidCallback",{get:()=>$t,set(t){$t=t}});const Bt=Ft,jt={},Ut="_applyShimCurrentVersion",qt="_applyShimNextVersion",Yt="_applyShimValidatingVersion",Gt=Promise.resolve();function Wt(t){let e=jt[t];e&&function(t){t[Ut]=t[Ut]||0,t[Yt]=t[Yt]||0,t[qt]=(t[qt]||0)+1}(e)}function Jt(t){return t[Ut]===t[qt]}let Xt,Kt=null,Zt=window.HTMLImports&&window.HTMLImports.whenReady||null;function Qt(t){requestAnimationFrame((function(){Zt?Zt(t):(Kt||(Kt=new Promise((t=>{Xt=t})),"complete"===document.readyState?Xt():document.addEventListener("readystatechange",(()=>{"complete"===document.readyState&&Xt()}))),Kt.then((function(){t&&t()})))}))}const te="__seenByShadyCSS",ee="__shadyCSSCachedStyle";let se=null,ie=null;class ne{constructor(){this.customStyles=[],this.enqueued=!1,Qt((()=>{window.ShadyCSS.flushCustomStyles&&window.ShadyCSS.flushCustomStyles()}))}enqueueDocumentValidation(){!this.enqueued&&ie&&(this.enqueued=!0,Qt(ie))}addCustomStyle(t){t[te]||(t[te]=!0,this.customStyles.push(t),this.enqueueDocumentValidation())}getStyleForCustomStyle(t){if(t[ee])return t[ee];let e;return e=t.getStyle?t.getStyle():t,e}processStyles(){const t=this.customStyles;for(let e=0;e<t.length;e++){const s=t[e];if(s[ee])continue;const i=this.getStyleForCustomStyle(s);if(i){const t=i.__appliedElement||i;se&&se(t),s[ee]=t}}return t}}ne.prototype.addCustomStyle=ne.prototype.addCustomStyle,ne.prototype.getStyleForCustomStyle=ne.prototype.getStyleForCustomStyle,ne.prototype.processStyles=ne.prototype.processStyles,Object.defineProperties(ne.prototype,{transformCallback:{get:()=>se,set(t){se=t}},validateCallback:{get:()=>ie,set(t){let e=!1;ie||(e=!0),ie=t,e&&this.enqueueDocumentValidation()}}});const re=new Bt;class oe{constructor(){this.customStyleInterface=null,re.invalidCallback=Wt}ensure(){this.customStyleInterface||window.ShadyCSS.CustomStyleInterface&&(this.customStyleInterface=window.ShadyCSS.CustomStyleInterface,this.customStyleInterface.transformCallback=t=>{re.transformCustomStyle(t)},this.customStyleInterface.validateCallback=()=>{requestAnimationFrame((()=>{this.customStyleInterface.enqueued&&this.flushCustomStyles()}))})}prepareTemplate(t,e){if(this.ensure(),Ot(t))return;jt[e]=t;let s=re.transformTemplate(t,e);t._styleAst=s}flushCustomStyles(){if(this.ensure(),!this.customStyleInterface)return;let t=this.customStyleInterface.processStyles();if(this.customStyleInterface.enqueued){for(let e=0;e<t.length;e++){let s=t[e],i=this.customStyleInterface.getStyleForCustomStyle(s);i&&re.transformCustomStyle(i)}this.customStyleInterface.enqueued=!1}}styleSubtree(t,e){if(this.ensure(),e&&At(t,e),t.shadowRoot){this.styleElement(t);let e=t.shadowRoot.children||t.shadowRoot.childNodes;for(let t=0;t<e.length;t++)this.styleSubtree(e[t])}else{let e=t.children||t.childNodes;for(let t=0;t<e.length;t++)this.styleSubtree(e[t])}}styleElement(t){this.ensure();let{is:e}=function(t){let e=t.localName,s="",i="";return e?e.indexOf("-")>-1?s=e:(i=e,s=t.getAttribute&&t.getAttribute("is")||""):(s=t.is,i=t.extends),{is:s,typeExtension:i}}(t),s=jt[e];if((!s||!Ot(s))&&s&&!Jt(s)){(function(t){return!Jt(t)&&t[Yt]===t[qt]})(s)||(this.prepareTemplate(s,e),function(t){t[Yt]=t[qt],t._validating||(t._validating=!0,Gt.then((function(){t[Ut]=t[qt],t._validating=!1})))}(s));let i=t.shadowRoot;if(i){let t=i.querySelector("style");t&&(t.__cssRules=s._styleAst,t.textContent=Pt(s._styleAst))}}}styleDocument(t){this.ensure(),this.styleSubtree(document.body,t)}}if(!window.ShadyCSS||!window.ShadyCSS.ScopingShim){const t=new oe;let e=window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface;window.ShadyCSS={prepareTemplate(e,s,i){t.flushCustomStyles(),t.prepareTemplate(e,s)},prepareTemplateStyles(t,e,s){window.ShadyCSS.prepareTemplate(t,e,s)},prepareTemplateDom(t,e){},styleSubtree(e,s){t.flushCustomStyles(),t.styleSubtree(e,s)},styleElement(e){t.flushCustomStyles(),t.styleElement(e)},styleDocument(e){t.flushCustomStyles(),t.styleDocument(e)},getComputedStyleValue:(t,e)=>kt(t,e),flushCustomStyles(){t.flushCustomStyles()},nativeCss:ct,nativeShadow:rt,cssBuild:at,disableRuntime:ht},e&&(window.ShadyCSS.CustomStyleInterface=e)}window.ShadyCSS.ApplyShim=re,window.JSCompiler_renameProperty=function(t,e){return t};let ae,le,he=/(url\()([^)]*)(\))/g,ce=/(^\/[^\/])|(^#)|(^[\w-\d]*:)/;function de(t,e){if(t&&ce.test(t))return t;if("//"===t)return t;if(void 0===ae){ae=!1;try{const t=new URL("b","http://a");t.pathname="c%20d",ae="http://a/c%20d"===t.href}catch(t){}}if(e||(e=document.baseURI||window.location.href),ae)try{return new URL(t,e).href}catch(e){return t}return le||(le=document.implementation.createHTMLDocument("temp"),le.base=le.createElement("base"),le.head.appendChild(le.base),le.anchor=le.createElement("a"),le.body.appendChild(le.anchor)),le.base.href=e,le.anchor.href=t,le.anchor.href||t}function pe(t,e){return t.replace(he,(function(t,s,i,n){return s+"'"+de(i.replace(/["']/g,""),e)+"'"+n}))}function ue(t){return t.substring(0,t.lastIndexOf("/")+1)}const _e=!window.ShadyDOM||!window.ShadyDOM.inUse,me=(Boolean(!window.ShadyCSS||window.ShadyCSS.nativeCss),window.customElements.polyfillWrapFlushCallback,_e&&"adoptedStyleSheets"in Document.prototype&&"replaceSync"in CSSStyleSheet.prototype&&(()=>{try{const t=new CSSStyleSheet;t.replaceSync("");const e=document.createElement("div");return e.attachShadow({mode:"open"}),e.shadowRoot.adoptedStyleSheets=[t],e.shadowRoot.adoptedStyleSheets[0]===t}catch(t){return!1}})());let fe=window.Polymer&&window.Polymer.rootPath||ue(document.baseURI||window.location.href),ge=window.Polymer&&window.Polymer.sanitizeDOMValue||void 0,ve=window.Polymer&&window.Polymer.setPassiveTouchGestures||!1,ye=window.Polymer&&window.Polymer.strictTemplatePolicy||!1,be=window.Polymer&&window.Polymer.allowTemplateFromDomModule||!1,ze=window.Polymer&&window.Polymer.legacyOptimizations||!1,we=window.Polymer&&window.Polymer.legacyWarnings||!1,Ce=window.Polymer&&window.Polymer.syncInitialRender||!1,Me=window.Polymer&&window.Polymer.legacyUndefined||!1,xe=window.Polymer&&window.Polymer.orderedComputed||!1,Se=window.Polymer&&window.Polymer.removeNestedTemplates||!1,He=window.Polymer&&window.Polymer.fastDomIf||!1,Pe=window.Polymer&&window.Polymer.suppressTemplateNotifications||!1,Le=window.Polymer&&window.Polymer.legacyNoObservedAttributes||!1,Ve=window.Polymer&&window.Polymer.useAdoptedStyleSheetsWithBuiltCSS||!1,Ee=0;function Te(){}Te.prototype.__mixinApplications,Te.prototype.__mixinSet;const Oe=function(t){let e=t.__mixinApplications;e||(e=new WeakMap,t.__mixinApplications=e);let s=Ee++;return function(i){let n=i.__mixinSet;if(n&&n[s])return i;let r=e,o=r.get(i);if(!o){o=t(i),r.set(i,o);let e=Object.create(o.__mixinSet||n||null);e[s]=!0,o.__mixinSet=e}return o}};let Ae={},ke={};function Ne(t,e){Ae[t]=ke[t.toLowerCase()]=e}function Ie(t){return Ae[t]||ke[t.toLowerCase()]}class De extends HTMLElement{static get observedAttributes(){return["id"]}static import(t,e){if(t){let s=Ie(t);return s&&e?s.querySelector(e):s}return null}attributeChangedCallback(t,e,s,i){e!==s&&this.register()}get assetpath(){if(!this.__assetpath){const t=window.HTMLImports&&HTMLImports.importForElement?HTMLImports.importForElement(this)||document:this.ownerDocument,e=de(this.getAttribute("assetpath")||"",t.baseURI);this.__assetpath=ue(e)}return this.__assetpath}register(t){if(t=t||this.id){if(ye&&void 0!==Ie(t))throw Ne(t,null),new Error(`strictTemplatePolicy: dom-module ${t} re-registered`);this.id=t,Ne(t,this),(e=this).querySelector("style")&&console.warn("dom-module %s has style outside template",e.id)}var e}}De.prototype.modules=Ae,customElements.define("dom-module",De);const Re="shady-unscoped";function $e(t){return De.import(t)}function Fe(t){const e=pe((t.body?t.body:t).textContent,t.baseURI),s=document.createElement("style");return s.textContent=e,s}function Be(t){const e=t.trim().split(/\s+/),s=[];for(let t=0;t<e.length;t++)s.push(...je(e[t]));return s}function je(t){const e=$e(t);if(!e)return console.warn("Could not find style data in module named",t),[];if(void 0===e._styles){const t=[];t.push(...qe(e));const s=e.querySelector("template");s&&t.push(...Ue(s,e.assetpath)),e._styles=t}return e._styles}function Ue(t,e){if(!t._styles){const s=[],i=t.content.querySelectorAll("style");for(let t=0;t<i.length;t++){let n=i[t],r=n.getAttribute("include");r&&s.push(...Be(r).filter((function(t,e,s){return s.indexOf(t)===e}))),e&&(n.textContent=pe(n.textContent,e)),s.push(n)}t._styles=s}return t._styles}function qe(t){const e=[],s=t.querySelectorAll("link[rel=import][type~=css]");for(let t=0;t<s.length;t++){let i=s[t];if(i.import){const t=i.import,s=i.hasAttribute(Re);if(s&&!t._unscopedStyle){const e=Fe(t);e.setAttribute(Re,""),t._unscopedStyle=e}else t._style||(t._style=Fe(t));e.push(s?t._unscopedStyle:t._style)}}return e}function Ye(t){let e=$e(t);if(e&&void 0===e._cssText){let t=function(t){let e="",s=qe(t);for(let t=0;t<s.length;t++)e+=s[t].textContent;return e}(e),s=e.querySelector("template");s&&(t+=function(t,e){let s="";const i=Ue(t,e);for(let t=0;t<i.length;t++){let e=i[t];e.parentNode&&e.parentNode.removeChild(e),s+=e.textContent}return s}(s,e.assetpath)),e._cssText=t||null}return e||console.warn("Could not find style data in module named",t),e&&e._cssText||""}const Ge=window.ShadyDOM&&window.ShadyDOM.noPatch&&window.ShadyDOM.wrap?window.ShadyDOM.wrap:window.ShadyDOM?t=>ShadyDOM.patch(t):t=>t;function We(t){return t.indexOf(".")>=0}function Je(t){let e=t.indexOf(".");return-1===e?t:t.slice(0,e)}function Xe(t,e){return 0===t.indexOf(e+".")}function Ke(t,e){return 0===e.indexOf(t+".")}function Ze(t,e,s){return e+s.slice(t.length)}function Qe(t){if(Array.isArray(t)){let e=[];for(let s=0;s<t.length;s++){let i=t[s].toString().split(".");for(let t=0;t<i.length;t++)e.push(i[t])}return e.join(".")}return t}function ts(t){return Array.isArray(t)?Qe(t).split("."):t.toString().split(".")}function es(t,e,s){let i=t,n=ts(e);for(let t=0;t<n.length;t++){if(!i)return;i=i[n[t]]}return s&&(s.path=n.join(".")),i}function ss(t,e,s){let i=t,n=ts(e),r=n[n.length-1];if(n.length>1){for(let t=0;t<n.length-1;t++)if(i=i[n[t]],!i)return;i[r]=s}else i[e]=s;return n.join(".")}const is={},ns=/-[a-z]/g,rs=/([A-Z])/g;function os(t){return is[t]||(is[t]=t.indexOf("-")<0?t:t.replace(ns,(t=>t[1].toUpperCase())))}function as(t){return is[t]||(is[t]=t.replace(rs,"-$1").toLowerCase())}let ls=0,hs=0,cs=[],ds=0,ps=!1,us=document.createTextNode("");new window.MutationObserver((function(){ps=!1;const t=cs.length;for(let e=0;e<t;e++){let t=cs[e];if(t)try{t()}catch(t){setTimeout((()=>{throw t}))}}cs.splice(0,t),hs+=t})).observe(us,{characterData:!0});const _s={after:t=>({run:e=>window.setTimeout(e,t),cancel(t){window.clearTimeout(t)}}),run:(t,e)=>window.setTimeout(t,e),cancel(t){window.clearTimeout(t)}},ms={run:t=>(ps||(ps=!0,us.textContent=ds++),cs.push(t),ls++),cancel(t){const e=t-hs;if(e>=0){if(!cs[e])throw new Error("invalid async handle: "+t);cs[e]=null}}},fs=ms,gs=Oe((t=>class extends t{static createProperties(t){const e=this.prototype;for(let s in t)s in e||e._createPropertyAccessor(s)}static attributeNameForProperty(t){return t.toLowerCase()}static typeForProperty(t){}_createPropertyAccessor(t,e){this._addPropertyToAttributeMap(t),this.hasOwnProperty(JSCompiler_renameProperty("__dataHasAccessor",this))||(this.__dataHasAccessor=Object.assign({},this.__dataHasAccessor)),this.__dataHasAccessor[t]||(this.__dataHasAccessor[t]=!0,this._definePropertyAccessor(t,e))}_addPropertyToAttributeMap(t){this.hasOwnProperty(JSCompiler_renameProperty("__dataAttributes",this))||(this.__dataAttributes=Object.assign({},this.__dataAttributes));let e=this.__dataAttributes[t];return e||(e=this.constructor.attributeNameForProperty(t),this.__dataAttributes[e]=t),e}_definePropertyAccessor(t,e){Object.defineProperty(this,t,{get(){return this.__data[t]},set:e?function(){}:function(e){this._setPendingProperty(t,e,!0)&&this._invalidateProperties()}})}constructor(){super(),this.__dataEnabled=!1,this.__dataReady=!1,this.__dataInvalid=!1,this.__data={},this.__dataPending=null,this.__dataOld=null,this.__dataInstanceProps=null,this.__dataCounter=0,this.__serializing=!1,this._initializeProperties()}ready(){this.__dataReady=!0,this._flushProperties()}_initializeProperties(){for(let t in this.__dataHasAccessor)this.hasOwnProperty(t)&&(this.__dataInstanceProps=this.__dataInstanceProps||{},this.__dataInstanceProps[t]=this[t],delete this[t])}_initializeInstanceProperties(t){Object.assign(this,t)}_setProperty(t,e){this._setPendingProperty(t,e)&&this._invalidateProperties()}_getProperty(t){return this.__data[t]}_setPendingProperty(t,e,s){let i=this.__data[t],n=this._shouldPropertyChange(t,e,i);return n&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),this.__dataOld&&!(t in this.__dataOld)&&(this.__dataOld[t]=i),this.__data[t]=e,this.__dataPending[t]=e),n}_isPropertyPending(t){return!(!this.__dataPending||!this.__dataPending.hasOwnProperty(t))}_invalidateProperties(){!this.__dataInvalid&&this.__dataReady&&(this.__dataInvalid=!0,fs.run((()=>{this.__dataInvalid&&(this.__dataInvalid=!1,this._flushProperties())})))}_enableProperties(){this.__dataEnabled||(this.__dataEnabled=!0,this.__dataInstanceProps&&(this._initializeInstanceProperties(this.__dataInstanceProps),this.__dataInstanceProps=null),this.ready())}_flushProperties(){this.__dataCounter++;const t=this.__data,e=this.__dataPending,s=this.__dataOld;this._shouldPropertiesChange(t,e,s)&&(this.__dataPending=null,this.__dataOld=null,this._propertiesChanged(t,e,s)),this.__dataCounter--}_shouldPropertiesChange(t,e,s){return Boolean(e)}_propertiesChanged(t,e,s){}_shouldPropertyChange(t,e,s){return s!==e&&(s==s||e==e)}attributeChangedCallback(t,e,s,i){e!==s&&this._attributeToProperty(t,s),super.attributeChangedCallback&&super.attributeChangedCallback(t,e,s,i)}_attributeToProperty(t,e,s){if(!this.__serializing){const i=this.__dataAttributes,n=i&&i[t]||t;this[n]=this._deserializeValue(e,s||this.constructor.typeForProperty(n))}}_propertyToAttribute(t,e,s){this.__serializing=!0,s=arguments.length<3?this[t]:s,this._valueToNodeAttribute(this,s,e||this.constructor.attributeNameForProperty(t)),this.__serializing=!1}_valueToNodeAttribute(t,e,s){const i=this._serializeValue(e);"class"!==s&&"name"!==s&&"slot"!==s||(t=Ge(t)),void 0===i?t.removeAttribute(s):t.setAttribute(s,i)}_serializeValue(t){switch(typeof t){case"boolean":return t?"":void 0;default:return null!=t?t.toString():void 0}}_deserializeValue(t,e){switch(e){case Boolean:return null!==t;case Number:return Number(t);default:return t}}})),vs={};let ys=HTMLElement.prototype;for(;ys;){let t=Object.getOwnPropertyNames(ys);for(let e=0;e<t.length;e++)vs[t[e]]=!0;ys=Object.getPrototypeOf(ys)}const bs=Oe((t=>{const e=gs(t);return class extends e{static createPropertiesForAttributes(){let t=this.observedAttributes;for(let e=0;e<t.length;e++)this.prototype._createPropertyAccessor(os(t[e]))}static attributeNameForProperty(t){return as(t)}_initializeProperties(){this.__dataProto&&(this._initializeProtoProperties(this.__dataProto),this.__dataProto=null),super._initializeProperties()}_initializeProtoProperties(t){for(let e in t)this._setProperty(e,t[e])}_ensureAttribute(t,e){this.hasAttribute(t)||this._valueToNodeAttribute(this,e,t)}_serializeValue(t){switch(typeof t){case"object":if(t instanceof Date)return t.toString();if(t)try{return JSON.stringify(t)}catch(t){return""}default:return super._serializeValue(t)}}_deserializeValue(t,e){let s;switch(e){case Object:try{s=JSON.parse(t)}catch(e){s=t}break;case Array:try{s=JSON.parse(t)}catch(e){s=null,console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${t}`)}break;case Date:s=isNaN(t)?String(t):Number(t),s=new Date(s);break;default:s=super._deserializeValue(t,e)}return s}_definePropertyAccessor(t,e){!function(t,e){if(!vs[e]){let s=t[e];void 0!==s&&(t.__data?t._setPendingProperty(e,s):(t.__dataProto?t.hasOwnProperty(JSCompiler_renameProperty("__dataProto",t))||(t.__dataProto=Object.create(t.__dataProto)):t.__dataProto={},t.__dataProto[e]=s))}}(this,t),super._definePropertyAccessor(t,e)}_hasAccessor(t){return this.__dataHasAccessor&&this.__dataHasAccessor[t]}_isPropertyPending(t){return Boolean(this.__dataPending&&t in this.__dataPending)}}})),zs={"dom-if":!0,"dom-repeat":!0};let ws=!1,Cs=!1;function Ms(t){let e=t.getAttribute("is");if(e&&zs[e]){let s=t;for(s.removeAttribute("is"),t=s.ownerDocument.createElement(e),s.parentNode.replaceChild(t,s),t.appendChild(s);s.attributes.length;)t.setAttribute(s.attributes[0].name,s.attributes[0].value),s.removeAttribute(s.attributes[0].name)}return t}function xs(t,e){let s=e.parentInfo&&xs(t,e.parentInfo);if(!s)return t;for(let t=s.firstChild,i=0;t;t=t.nextSibling)if(e.parentIndex===i++)return t}function Ss(t,e,s,i){i.id&&(e[i.id]=s)}function Hs(t,e,s){if(s.events&&s.events.length)for(let i,n=0,r=s.events;n<r.length&&(i=r[n]);n++)t._addMethodEventListenerToNode(e,i.name,i.value,t)}function Ps(t,e,s,i){s.templateInfo&&(e._templateInfo=s.templateInfo,e._parentTemplateInfo=i)}const Ls=Oe((t=>class extends t{static _parseTemplate(t,e){if(!t._templateInfo){let s=t._templateInfo={};s.nodeInfoList=[],s.nestedTemplate=Boolean(e),s.stripWhiteSpace=e&&e.stripWhiteSpace||t.hasAttribute("strip-whitespace"),this._parseTemplateContent(t,s,{parent:null})}return t._templateInfo}static _parseTemplateContent(t,e,s){return this._parseTemplateNode(t.content,e,s)}static _parseTemplateNode(t,e,s){let i=!1,n=t;return"template"!=n.localName||n.hasAttribute("preserve-content")?"slot"===n.localName&&(e.hasInsertionPoint=!0):i=this._parseTemplateNestedTemplate(n,e,s)||i,function(t){(function(){if(!ws){ws=!0;const t=document.createElement("textarea");t.placeholder="a",Cs=t.placeholder===t.textContent}return Cs})()&&"textarea"===t.localName&&t.placeholder&&t.placeholder===t.textContent&&(t.textContent=null)}(n),n.firstChild&&this._parseTemplateChildNodes(n,e,s),n.hasAttributes&&n.hasAttributes()&&(i=this._parseTemplateNodeAttributes(n,e,s)||i),i||s.noted}static _parseTemplateChildNodes(t,e,s){if("script"!==t.localName&&"style"!==t.localName)for(let i,n=t.firstChild,r=0;n;n=i){if("template"==n.localName&&(n=Ms(n)),i=n.nextSibling,n.nodeType===Node.TEXT_NODE){let s=i;for(;s&&s.nodeType===Node.TEXT_NODE;)n.textContent+=s.textContent,i=s.nextSibling,t.removeChild(s),s=i;if(e.stripWhiteSpace&&!n.textContent.trim()){t.removeChild(n);continue}}let o={parentIndex:r,parentInfo:s};this._parseTemplateNode(n,e,o)&&(o.infoIndex=e.nodeInfoList.push(o)-1),n.parentNode&&r++}}static _parseTemplateNestedTemplate(t,e,s){let i=t,n=this._parseTemplate(i,e);return(n.content=i.content.ownerDocument.createDocumentFragment()).appendChild(i.content),s.templateInfo=n,!0}static _parseTemplateNodeAttributes(t,e,s){let i=!1,n=Array.from(t.attributes);for(let r,o=n.length-1;r=n[o];o--)i=this._parseTemplateNodeAttribute(t,e,s,r.name,r.value)||i;return i}static _parseTemplateNodeAttribute(t,e,s,i,n){return"on-"===i.slice(0,3)?(t.removeAttribute(i),s.events=s.events||[],s.events.push({name:i.slice(3),value:n}),!0):"id"===i&&(s.id=n,!0)}static _contentForTemplate(t){let e=t._templateInfo;return e&&e.content||t.content}_stampTemplate(t,e){t&&!t.content&&window.HTMLTemplateElement&&HTMLTemplateElement.decorate&&HTMLTemplateElement.decorate(t);let s=(e=e||this.constructor._parseTemplate(t)).nodeInfoList,i=e.content||t.content,n=document.importNode(i,!0);n.__noInsertionPoint=!e.hasInsertionPoint;let r=n.nodeList=new Array(s.length);n.$={};for(let t,i=0,o=s.length;i<o&&(t=s[i]);i++){let s=r[i]=xs(n,t);Ss(0,n.$,s,t),Ps(0,s,t,e),Hs(this,s,t)}return n=n,n}_addMethodEventListenerToNode(t,e,s,i){let n=function(t,e,s){return t=t._methodHost||t,function(e){t[s]?t[s](e,e.detail):console.warn("listener method `"+s+"` not defined")}}(i=i||t,0,s);return this._addEventListenerToNode(t,e,n),n}_addEventListenerToNode(t,e,s){t.addEventListener(e,s)}_removeEventListenerFromNode(t,e,s){t.removeEventListener(e,s)}}));let Vs=0;const Es=[],Ts={COMPUTE:"__computeEffects",REFLECT:"__reflectEffects",NOTIFY:"__notifyEffects",PROPAGATE:"__propagateEffects",OBSERVE:"__observeEffects",READ_ONLY:"__readOnly"},Os=/[A-Z]/;function As(t,e,s){let i=t[e];if(i){if(!t.hasOwnProperty(e)&&(i=t[e]=Object.create(t[e]),s))for(let t in i){let e=i[t],s=i[t]=Array(e.length);for(let t=0;t<e.length;t++)s[t]=e[t]}}else i=t[e]={};return i}function ks(t,e,s,i,n,r){if(e){let o=!1;const a=Vs++;for(let l in s){let h=e[n?Je(l):l];if(h)for(let e,c=0,d=h.length;c<d&&(e=h[c]);c++)e.info&&e.info.lastRun===a||n&&!Is(l,e.trigger)||(e.info&&(e.info.lastRun=a),e.fn(t,l,s,i,e.info,n,r),o=!0)}return o}return!1}function Ns(t,e,s,i,n,r,o,a){let l=!1,h=e[o?Je(i):i];if(h)for(let e,c=0,d=h.length;c<d&&(e=h[c]);c++)e.info&&e.info.lastRun===s||o&&!Is(i,e.trigger)||(e.info&&(e.info.lastRun=s),e.fn(t,i,n,r,e.info,o,a),l=!0);return l}function Is(t,e){if(e){let s=e.name;return s==t||!(!e.structured||!Xe(s,t))||!(!e.wildcard||!Ke(s,t))}return!0}function Ds(t,e,s,i,n){let r="string"==typeof n.method?t[n.method]:n.method,o=n.property;r?r.call(t,t.__data[o],i[o]):n.dynamicFn||console.warn("observer method `"+n.method+"` not defined")}function Rs(t,e,s){let i=Je(e);return i!==e&&($s(t,as(i)+"-changed",s[e],e),!0)}function $s(t,e,s,i){let n={value:s,queueProperty:!0};i&&(n.path=i),Ge(t).dispatchEvent(new CustomEvent(e,{detail:n}))}function Fs(t,e,s,i,n,r){let o=(r?Je(e):e)!=e?e:null,a=o?es(t,o):t.__data[e];o&&void 0===a&&(a=s[e]),$s(t,n.eventName,a,o)}function Bs(t,e,s,i,n){let r=t.__data[e];ge&&(r=ge(r,n.attrName,"attribute",t)),t._propertyToAttribute(e,n.attrName,r)}const js=(t,e,s)=>{let i=0,n=e.length-1,r=-1;for(;i<=n;){const o=i+n>>1,a=s.get(e[o].methodInfo)-s.get(t.methodInfo);if(a<0)i=o+1;else{if(!(a>0)){r=o;break}n=o-1}}r<0&&(r=n+1),e.splice(r,0,t)},Us=(t,e,s,i,n)=>{const r=e[n?Je(t):t];if(r)for(let e=0;e<r.length;e++){const o=r[e];o.info.lastRun===Vs||n&&!Is(t,o.trigger)||(o.info.lastRun=Vs,js(o.info,s,i))}};function qs(t,e,s,i,n){let r=Zs(t,e,s,0,n);if(r===Es)return!1;let o=n.methodInfo;return t.__dataHasAccessor&&t.__dataHasAccessor[o]?t._setPendingProperty(o,r,!0):(t[o]=r,!1)}function Ys(t,e,s,i,n,r,o){s.bindings=s.bindings||[];let a={kind:i,target:n,parts:r,literal:o,isCompound:1!==r.length};if(s.bindings.push(a),function(t){return Boolean(t.target)&&"attribute"!=t.kind&&"text"!=t.kind&&!t.isCompound&&"{"===t.parts[0].mode}(a)){let{event:t,negate:e}=a.parts[0];a.listenerEvent=t||as(n)+"-changed",a.listenerNegate=e}let l=e.nodeInfoList.length;for(let s=0;s<a.parts.length;s++){let i=a.parts[s];i.compoundIndex=s,Gs(t,e,a,i,l)}}function Gs(t,e,s,i,n){if(!i.literal)if("attribute"===s.kind&&"-"===s.target[0])console.warn("Cannot set attribute "+s.target+' because "-" is not a valid attribute starting character');else{let r=i.dependencies,o={index:n,binding:s,part:i,evaluator:t};for(let s=0;s<r.length;s++){let i=r[s];"string"==typeof i&&(i=ii(i),i.wildcard=!0),t._addTemplatePropertyEffect(e,i.rootProperty,{fn:Ws,info:o,trigger:i})}}}function Ws(t,e,s,i,n,r,o){let a=o[n.index],l=n.binding,h=n.part;if(r&&h.source&&e.length>h.source.length&&"property"==l.kind&&!l.isCompound&&a.__isPropertyEffectsClient&&a.__dataHasAccessor&&a.__dataHasAccessor[l.target]){let i=s[e];e=Ze(h.source,l.target,e),a._setPendingPropertyOrPath(e,i,!1,!0)&&t._enqueueClient(a)}else{let o=n.evaluator._evaluateBinding(t,h,e,s,i,r);o!==Es&&function(t,e,s,i,n){if(n=function(t,e,s,i){if(s.isCompound){let n=t.__dataCompoundStorage[s.target];n[i.compoundIndex]=e,e=n.join("")}return"attribute"!==s.kind&&("textContent"!==s.target&&("value"!==s.target||"input"!==t.localName&&"textarea"!==t.localName)||(e=null==e?"":e)),e}(e,n,s,i),ge&&(n=ge(n,s.target,s.kind,e)),"attribute"==s.kind)t._valueToNodeAttribute(e,n,s.target);else{let i=s.target;e.__isPropertyEffectsClient&&e.__dataHasAccessor&&e.__dataHasAccessor[i]?e[Ts.READ_ONLY]&&e[Ts.READ_ONLY][i]||e._setPendingProperty(i,n)&&t._enqueueClient(e):t._setUnmanagedPropertyToNode(e,i,n)}}(t,a,l,h,o)}}function Js(t,e){if(e.isCompound){let s=t.__dataCompoundStorage||(t.__dataCompoundStorage={}),i=e.parts,n=new Array(i.length);for(let t=0;t<i.length;t++)n[t]=i[t].literal;let r=e.target;s[r]=n,e.literal&&"property"==e.kind&&("className"===r&&(t=Ge(t)),t[r]=e.literal)}}function Xs(t,e,s){if(s.listenerEvent){let i=s.parts[0];t.addEventListener(s.listenerEvent,(function(t){!function(t,e,s,i,n){let r,o=t.detail,a=o&&o.path;a?(i=Ze(s,i,a),r=o&&o.value):r=t.currentTarget[s],r=n?!r:r,e[Ts.READ_ONLY]&&e[Ts.READ_ONLY][i]||!e._setPendingPropertyOrPath(i,r,!0,Boolean(a))||o&&o.queueProperty||e._invalidateProperties()}(t,e,s.target,i.source,i.negate)}))}}function Ks(t,e,s,i,n,r){r=e.static||r&&("object"!=typeof r||r[e.methodName]);let o={methodName:e.methodName,args:e.args,methodInfo:n,dynamicFn:r};for(let n,r=0;r<e.args.length&&(n=e.args[r]);r++)n.literal||t._addPropertyEffect(n.rootProperty,s,{fn:i,info:o,trigger:n});return r&&t._addPropertyEffect(e.methodName,s,{fn:i,info:o}),o}function Zs(t,e,s,i,n){let r=t._methodHost||t,o=r[n.methodName];if(o){let i=t._marshalArgs(n.args,e,s);return i===Es?Es:o.apply(r,i)}n.dynamicFn||console.warn("method `"+n.methodName+"` not defined")}const Qs=[],ti=new RegExp("(\\[\\[|{{)\\s*(?:(!)\\s*)?((?:[a-zA-Z_$][\\w.:$\\-*]*)\\s*(?:\\(\\s*(?:(?:(?:((?:[a-zA-Z_$][\\w.:$\\-*]*)|(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\\\]|\\\\.)*')|(?:\"(?:[^\"\\\\]|\\\\.)*\")))\\s*)(?:,\\s*(?:((?:[a-zA-Z_$][\\w.:$\\-*]*)|(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\\\]|\\\\.)*')|(?:\"(?:[^\"\\\\]|\\\\.)*\")))\\s*))*)?)\\)\\s*)?)(?:]]|}})","g");function ei(t){let e="";for(let s=0;s<t.length;s++)e+=t[s].literal||"";return e}function si(t){let e=t.match(/([^\s]+?)\(([\s\S]*)\)/);if(e){let t={methodName:e[1],static:!0,args:Qs};return e[2].trim()?function(t,e){return e.args=t.map((function(t){let s=ii(t);return s.literal||(e.static=!1),s}),this),e}(e[2].replace(/\\,/g,"&comma;").split(","),t):t}return null}function ii(t){let e=t.trim().replace(/&comma;/g,",").replace(/\\(.)/g,"$1"),s={name:e,value:"",literal:!1},i=e[0];switch("-"===i&&(i=e[1]),i>="0"&&i<="9"&&(i="#"),i){case"'":case'"':s.value=e.slice(1,-1),s.literal=!0;break;case"#":s.value=Number(e),s.literal=!0}return s.literal||(s.rootProperty=Je(e),s.structured=We(e),s.structured&&(s.wildcard=".*"==e.slice(-2),s.wildcard&&(s.name=e.slice(0,-2)))),s}function ni(t,e,s){let i=es(t,s);return void 0===i&&(i=e[s]),i}function ri(t,e,s,i){const n={indexSplices:i};Me&&!t._overrideLegacyUndefined&&(e.splices=n),t.notifyPath(s+".splices",n),t.notifyPath(s+".length",e.length),Me&&!t._overrideLegacyUndefined&&(n.indexSplices=[])}function oi(t,e,s,i,n,r){ri(t,e,s,[{index:i,addedCount:n,removed:r,object:e,type:"splice"}])}const ai=Oe((t=>{const e=Ls(bs(t));return class extends e{constructor(){super(),this.__isPropertyEffectsClient=!0,this.__dataClientsReady,this.__dataPendingClients,this.__dataToNotify,this.__dataLinkedPaths,this.__dataHasPaths,this.__dataCompoundStorage,this.__dataHost,this.__dataTemp,this.__dataClientsInitialized,this.__data,this.__dataPending,this.__dataOld,this.__computeEffects,this.__computeInfo,this.__reflectEffects,this.__notifyEffects,this.__propagateEffects,this.__observeEffects,this.__readOnly,this.__templateInfo,this._overrideLegacyUndefined}get PROPERTY_EFFECT_TYPES(){return Ts}_initializeProperties(){super._initializeProperties(),this._registerHost(),this.__dataClientsReady=!1,this.__dataPendingClients=null,this.__dataToNotify=null,this.__dataLinkedPaths=null,this.__dataHasPaths=!1,this.__dataCompoundStorage=this.__dataCompoundStorage||null,this.__dataHost=this.__dataHost||null,this.__dataTemp={},this.__dataClientsInitialized=!1}_registerHost(){if(li.length){let t=li[li.length-1];t._enqueueClient(this),this.__dataHost=t}}_initializeProtoProperties(t){this.__data=Object.create(t),this.__dataPending=Object.create(t),this.__dataOld={}}_initializeInstanceProperties(t){let e=this[Ts.READ_ONLY];for(let s in t)e&&e[s]||(this.__dataPending=this.__dataPending||{},this.__dataOld=this.__dataOld||{},this.__data[s]=this.__dataPending[s]=t[s])}_addPropertyEffect(t,e,s){this._createPropertyAccessor(t,e==Ts.READ_ONLY);let i=As(this,e,!0)[t];i||(i=this[e][t]=[]),i.push(s)}_removePropertyEffect(t,e,s){let i=As(this,e,!0)[t],n=i.indexOf(s);n>=0&&i.splice(n,1)}_hasPropertyEffect(t,e){let s=this[e];return Boolean(s&&s[t])}_hasReadOnlyEffect(t){return this._hasPropertyEffect(t,Ts.READ_ONLY)}_hasNotifyEffect(t){return this._hasPropertyEffect(t,Ts.NOTIFY)}_hasReflectEffect(t){return this._hasPropertyEffect(t,Ts.REFLECT)}_hasComputedEffect(t){return this._hasPropertyEffect(t,Ts.COMPUTE)}_setPendingPropertyOrPath(t,e,s,i){if(i||Je(Array.isArray(t)?t[0]:t)!==t){if(!i){let s=es(this,t);if(!(t=ss(this,t,e))||!super._shouldPropertyChange(t,e,s))return!1}if(this.__dataHasPaths=!0,this._setPendingProperty(t,e,s))return function(t,e,s){let i=t.__dataLinkedPaths;if(i){let n;for(let r in i){let o=i[r];Ke(r,e)?(n=Ze(r,o,e),t._setPendingPropertyOrPath(n,s,!0,!0)):Ke(o,e)&&(n=Ze(o,r,e),t._setPendingPropertyOrPath(n,s,!0,!0))}}}(this,t,e),!0}else{if(this.__dataHasAccessor&&this.__dataHasAccessor[t])return this._setPendingProperty(t,e,s);this[t]=e}return!1}_setUnmanagedPropertyToNode(t,e,s){s===t[e]&&"object"!=typeof s||("className"===e&&(t=Ge(t)),t[e]=s)}_setPendingProperty(t,e,s){let i=this.__dataHasPaths&&We(t),n=i?this.__dataTemp:this.__data;return!!this._shouldPropertyChange(t,e,n[t])&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),t in this.__dataOld||(this.__dataOld[t]=this.__data[t]),i?this.__dataTemp[t]=e:this.__data[t]=e,this.__dataPending[t]=e,(i||this[Ts.NOTIFY]&&this[Ts.NOTIFY][t])&&(this.__dataToNotify=this.__dataToNotify||{},this.__dataToNotify[t]=s),!0)}_setProperty(t,e){this._setPendingProperty(t,e,!0)&&this._invalidateProperties()}_invalidateProperties(){this.__dataReady&&this._flushProperties()}_enqueueClient(t){this.__dataPendingClients=this.__dataPendingClients||[],t!==this&&this.__dataPendingClients.push(t)}_flushClients(){this.__dataClientsReady?this.__enableOrFlushClients():(this.__dataClientsReady=!0,this._readyClients(),this.__dataReady=!0)}__enableOrFlushClients(){let t=this.__dataPendingClients;if(t){this.__dataPendingClients=null;for(let e=0;e<t.length;e++){let s=t[e];s.__dataEnabled?s.__dataPending&&s._flushProperties():s._enableProperties()}}}_readyClients(){this.__enableOrFlushClients()}setProperties(t,e){for(let s in t)!e&&this[Ts.READ_ONLY]&&this[Ts.READ_ONLY][s]||this._setPendingPropertyOrPath(s,t[s],!0);this._invalidateProperties()}ready(){this._flushProperties(),this.__dataClientsReady||this._flushClients(),this.__dataPending&&this._flushProperties()}_propertiesChanged(t,e,s){let i,n=this.__dataHasPaths;this.__dataHasPaths=!1,function(t,e,s,i){let n=t[Ts.COMPUTE];if(n)if(xe){Vs++;const r=function(t){let e=t.constructor.__orderedComputedDeps;if(!e){e=new Map;const s=t[Ts.COMPUTE];let i,{counts:n,ready:r,total:o}=function(t){const e=t.__computeInfo,s={},i=t[Ts.COMPUTE],n=[];let r=0;for(let t in e){const i=e[t];r+=s[t]=i.args.filter((t=>!t.literal)).length+(i.dynamicFn?1:0)}for(let t in i)e[t]||n.push(t);return{counts:s,ready:n,total:r}}(t);for(;i=r.shift();){e.set(i,e.size);const t=s[i];t&&t.forEach((t=>{const e=t.info.methodInfo;--o,0==--n[e]&&r.push(e)}))}if(0!==o){const e=t;console.warn(`Computed graph for ${e.localName} incomplete; circular?`)}t.constructor.__orderedComputedDeps=e}return e}(t),o=[];for(let t in e)Us(t,n,o,r,i);let a;for(;a=o.shift();)qs(t,"",e,0,a)&&Us(a.methodInfo,n,o,r,i);Object.assign(s,t.__dataOld),Object.assign(e,t.__dataPending),t.__dataPending=null}else{let r=e;for(;ks(t,n,r,s,i);)Object.assign(s,t.__dataOld),Object.assign(e,t.__dataPending),r=t.__dataPending,t.__dataPending=null}}(this,e,s,n),i=this.__dataToNotify,this.__dataToNotify=null,this._propagatePropertyChanges(e,s,n),this._flushClients(),ks(this,this[Ts.REFLECT],e,s,n),ks(this,this[Ts.OBSERVE],e,s,n),i&&function(t,e,s,i,n){let r,o,a=t[Ts.NOTIFY],l=Vs++;for(let o in e)e[o]&&(a&&Ns(t,a,l,o,s,i,n)||n&&Rs(t,o,s))&&(r=!0);r&&(o=t.__dataHost)&&o._invalidateProperties&&o._invalidateProperties()}(this,i,e,s,n),1==this.__dataCounter&&(this.__dataTemp={})}_propagatePropertyChanges(t,e,s){this[Ts.PROPAGATE]&&ks(this,this[Ts.PROPAGATE],t,e,s),this.__templateInfo&&this._runEffectsForTemplate(this.__templateInfo,t,e,s)}_runEffectsForTemplate(t,e,s,i){const n=(e,i)=>{ks(this,t.propertyEffects,e,s,i,t.nodeList);for(let n=t.firstChild;n;n=n.nextSibling)this._runEffectsForTemplate(n,e,s,i)};t.runEffects?t.runEffects(n,e,i):n(e,i)}linkPaths(t,e){t=Qe(t),e=Qe(e),this.__dataLinkedPaths=this.__dataLinkedPaths||{},this.__dataLinkedPaths[t]=e}unlinkPaths(t){t=Qe(t),this.__dataLinkedPaths&&delete this.__dataLinkedPaths[t]}notifySplices(t,e){let s={path:""};ri(this,es(this,t,s),s.path,e)}get(t,e){return es(e||this,t)}set(t,e,s){s?ss(s,t,e):this[Ts.READ_ONLY]&&this[Ts.READ_ONLY][t]||this._setPendingPropertyOrPath(t,e,!0)&&this._invalidateProperties()}push(t,...e){let s={path:""},i=es(this,t,s),n=i.length,r=i.push(...e);return e.length&&oi(this,i,s.path,n,e.length,[]),r}pop(t){let e={path:""},s=es(this,t,e),i=Boolean(s.length),n=s.pop();return i&&oi(this,s,e.path,s.length,0,[n]),n}splice(t,e,s,...i){let n,r={path:""},o=es(this,t,r);return e<0?e=o.length-Math.floor(-e):e&&(e=Math.floor(e)),n=2===arguments.length?o.splice(e):o.splice(e,s,...i),(i.length||n.length)&&oi(this,o,r.path,e,i.length,n),n}shift(t){let e={path:""},s=es(this,t,e),i=Boolean(s.length),n=s.shift();return i&&oi(this,s,e.path,0,0,[n]),n}unshift(t,...e){let s={path:""},i=es(this,t,s),n=i.unshift(...e);return e.length&&oi(this,i,s.path,0,e.length,[]),n}notifyPath(t,e){let s;if(1==arguments.length){let i={path:""};e=es(this,t,i),s=i.path}else s=Array.isArray(t)?Qe(t):t;this._setPendingPropertyOrPath(s,e,!0,!0)&&this._invalidateProperties()}_createReadOnlyProperty(t,e){var s;this._addPropertyEffect(t,Ts.READ_ONLY),e&&(this["_set"+(s=t,s[0].toUpperCase()+s.substring(1))]=function(e){this._setProperty(t,e)})}_createPropertyObserver(t,e,s){let i={property:t,method:e,dynamicFn:Boolean(s)};this._addPropertyEffect(t,Ts.OBSERVE,{fn:Ds,info:i,trigger:{name:t}}),s&&this._addPropertyEffect(e,Ts.OBSERVE,{fn:Ds,info:i,trigger:{name:e}})}_createMethodObserver(t,e){let s=si(t);if(!s)throw new Error("Malformed observer expression '"+t+"'");Ks(this,s,Ts.OBSERVE,Zs,null,e)}_createNotifyingProperty(t){this._addPropertyEffect(t,Ts.NOTIFY,{fn:Fs,info:{eventName:as(t)+"-changed",property:t}})}_createReflectedProperty(t){let e=this.constructor.attributeNameForProperty(t);"-"===e[0]?console.warn("Property "+t+" cannot be reflected to attribute "+e+' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.'):this._addPropertyEffect(t,Ts.REFLECT,{fn:Bs,info:{attrName:e}})}_createComputedProperty(t,e,s){let i=si(e);if(!i)throw new Error("Malformed computed expression '"+e+"'");const n=Ks(this,i,Ts.COMPUTE,qs,t,s);As(this,"__computeInfo")[t]=n}_marshalArgs(t,e,s){const i=this.__data,n=[];for(let r=0,o=t.length;r<o;r++){let{name:o,structured:a,wildcard:l,value:h,literal:c}=t[r];if(!c)if(l){const t=Ke(o,e),n=ni(i,s,t?e:o);h={path:t?e:o,value:n,base:t?es(i,o):n}}else h=a?ni(i,s,o):i[o];if(Me&&!this._overrideLegacyUndefined&&void 0===h&&t.length>1)return Es;n[r]=h}return n}static addPropertyEffect(t,e,s){this.prototype._addPropertyEffect(t,e,s)}static createPropertyObserver(t,e,s){this.prototype._createPropertyObserver(t,e,s)}static createMethodObserver(t,e){this.prototype._createMethodObserver(t,e)}static createNotifyingProperty(t){this.prototype._createNotifyingProperty(t)}static createReadOnlyProperty(t,e){this.prototype._createReadOnlyProperty(t,e)}static createReflectedProperty(t){this.prototype._createReflectedProperty(t)}static createComputedProperty(t,e,s){this.prototype._createComputedProperty(t,e,s)}static bindTemplate(t){return this.prototype._bindTemplate(t)}_bindTemplate(t,e){let s=this.constructor._parseTemplate(t),i=this.__preBoundTemplateInfo==s;if(!i)for(let t in s.propertyEffects)this._createPropertyAccessor(t);if(e)if(s=Object.create(s),s.wasPreBound=i,this.__templateInfo){const e=t._parentTemplateInfo||this.__templateInfo,i=e.lastChild;s.parent=e,e.lastChild=s,s.previousSibling=i,i?i.nextSibling=s:e.firstChild=s}else this.__templateInfo=s;else this.__preBoundTemplateInfo=s;return s}static _addTemplatePropertyEffect(t,e,s){(t.hostProps=t.hostProps||{})[e]=!0;let i=t.propertyEffects=t.propertyEffects||{};(i[e]=i[e]||[]).push(s)}_stampTemplate(t,e){e=e||this._bindTemplate(t,!0),li.push(this);let s=super._stampTemplate(t,e);if(li.pop(),e.nodeList=s.nodeList,!e.wasPreBound){let t=e.childNodes=[];for(let e=s.firstChild;e;e=e.nextSibling)t.push(e)}return s.templateInfo=e,function(t,e){let{nodeList:s,nodeInfoList:i}=e;if(i.length)for(let e=0;e<i.length;e++){let n=i[e],r=s[e],o=n.bindings;if(o)for(let e=0;e<o.length;e++){let s=o[e];Js(r,s),Xs(r,t,s)}r.__dataHost=t}}(this,e),this.__dataClientsReady&&(this._runEffectsForTemplate(e,this.__data,null,!1),this._flushClients()),s}_removeBoundDom(t){const e=t.templateInfo,{previousSibling:s,nextSibling:i,parent:n}=e;s?s.nextSibling=i:n&&(n.firstChild=i),i?i.previousSibling=s:n&&(n.lastChild=s),e.nextSibling=e.previousSibling=null;let r=e.childNodes;for(let t=0;t<r.length;t++){let e=r[t];Ge(Ge(e).parentNode).removeChild(e)}}static _parseTemplateNode(t,s,i){let n=e._parseTemplateNode.call(this,t,s,i);if(t.nodeType===Node.TEXT_NODE){let e=this._parseBindings(t.textContent,s);e&&(t.textContent=ei(e)||" ",Ys(this,s,i,"text","textContent",e),n=!0)}return n}static _parseTemplateNodeAttribute(t,s,i,n,r){let o=this._parseBindings(r,s);if(o){let e=n,r="property";Os.test(n)?r="attribute":"$"==n[n.length-1]&&(n=n.slice(0,-1),r="attribute");let a=ei(o);return a&&"attribute"==r&&("class"==n&&t.hasAttribute("class")&&(a+=" "+t.getAttribute(n)),t.setAttribute(n,a)),"attribute"==r&&"disable-upgrade$"==e&&t.setAttribute(n,""),"input"===t.localName&&"value"===e&&t.setAttribute(e,""),t.removeAttribute(e),"property"===r&&(n=os(n)),Ys(this,s,i,r,n,o,a),!0}return e._parseTemplateNodeAttribute.call(this,t,s,i,n,r)}static _parseTemplateNestedTemplate(t,s,i){let n=e._parseTemplateNestedTemplate.call(this,t,s,i);const r=t.parentNode,o=i.templateInfo,a="dom-if"===r.localName,l="dom-repeat"===r.localName;Se&&(a||l)&&(r.removeChild(t),(i=i.parentInfo).templateInfo=o,i.noted=!0,n=!1);let h=o.hostProps;if(He&&a)h&&(s.hostProps=Object.assign(s.hostProps||{},h),Se||(i.parentInfo.noted=!0));else{let t="{";for(let e in h)Ys(this,s,i,"property","_host_"+e,[{mode:t,source:e,dependencies:[e],hostProp:!0}])}return n}static _parseBindings(t,e){let s,i=[],n=0;for(;null!==(s=ti.exec(t));){s.index>n&&i.push({literal:t.slice(n,s.index)});let r=s[1][0],o=Boolean(s[2]),a=s[3].trim(),l=!1,h="",c=-1;"{"==r&&(c=a.indexOf("::"))>0&&(h=a.substring(c+2),a=a.substring(0,c),l=!0);let d=si(a),p=[];if(d){let{args:t,methodName:s}=d;for(let e=0;e<t.length;e++){let s=t[e];s.literal||p.push(s)}let i=e.dynamicFns;(i&&i[s]||d.static)&&(p.push(s),d.dynamicFn=!0)}else p.push(a);i.push({source:a,mode:r,negate:o,customEvent:l,signature:d,dependencies:p,event:h}),n=ti.lastIndex}if(n&&n<t.length){let e=t.substring(n);e&&i.push({literal:e})}return i.length?i:null}static _evaluateBinding(t,e,s,i,n,r){let o;return o=e.signature?Zs(t,s,i,0,e.signature):s!=e.source?es(t,e.source):r&&We(s)?es(t,s):t.__data[s],e.negate&&(o=!o),o}}})),li=[],hi=[];function ci(t){hi.push(t)}const di=Oe((t=>{const e=gs(t);function s(t){const e=Object.getPrototypeOf(t);return e.prototype instanceof n?e:null}function i(t){if(!t.hasOwnProperty(JSCompiler_renameProperty("__ownProperties",t))){let e=null;if(t.hasOwnProperty(JSCompiler_renameProperty("properties",t))){const s=t.properties;s&&(e=function(t){const e={};for(let s in t){const i=t[s];e[s]="function"==typeof i?{type:i}:i}return e}(s))}t.__ownProperties=e}return t.__ownProperties}class n extends e{static get observedAttributes(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__observedAttributes",this))){ci(this.prototype);const t=this._properties;this.__observedAttributes=t?Object.keys(t).map((t=>this.prototype._addPropertyToAttributeMap(t))):[]}return this.__observedAttributes}static finalize(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__finalized",this))){const t=s(this);t&&t.finalize(),this.__finalized=!0,this._finalizeClass()}}static _finalizeClass(){const t=i(this);t&&this.createProperties(t)}static get _properties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__properties",this))){const t=s(this);this.__properties=Object.assign({},t&&t._properties,i(this))}return this.__properties}static typeForProperty(t){const e=this._properties[t];return e&&e.type}_initializeProperties(){this.constructor.finalize(),super._initializeProperties()}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this._enableProperties()}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback()}}return n})),pi=window.ShadyCSS&&window.ShadyCSS.cssBuild,ui=Oe((t=>{const e=di(ai(t));function s(t,e,s,i){s.computed&&(s.readOnly=!0),s.computed&&(t._hasReadOnlyEffect(e)?console.warn(`Cannot redefine computed property '${e}'.`):t._createComputedProperty(e,s.computed,i)),s.readOnly&&!t._hasReadOnlyEffect(e)?t._createReadOnlyProperty(e,!s.computed):!1===s.readOnly&&t._hasReadOnlyEffect(e)&&console.warn(`Cannot make readOnly property '${e}' non-readOnly.`),s.reflectToAttribute&&!t._hasReflectEffect(e)?t._createReflectedProperty(e):!1===s.reflectToAttribute&&t._hasReflectEffect(e)&&console.warn(`Cannot make reflected property '${e}' non-reflected.`),s.notify&&!t._hasNotifyEffect(e)?t._createNotifyingProperty(e):!1===s.notify&&t._hasNotifyEffect(e)&&console.warn(`Cannot make notify property '${e}' non-notify.`),s.observer&&t._createPropertyObserver(e,s.observer,i[s.observer]),t._addPropertyToAttributeMap(e)}return class extends e{static get polymerElementVersion(){return"3.4.1"}static _finalizeClass(){e._finalizeClass.call(this);const t=((s=this).hasOwnProperty(JSCompiler_renameProperty("__ownObservers",s))||(s.__ownObservers=s.hasOwnProperty(JSCompiler_renameProperty("observers",s))?s.observers:null),s.__ownObservers);var s;t&&this.createObservers(t,this._properties),this._prepareTemplate()}static _prepareTemplate(){let t=this.template;t&&("string"==typeof t?(console.error("template getter must return HTMLTemplateElement"),t=null):ze||(t=t.cloneNode(!0))),this.prototype._template=t}static createProperties(t){for(let e in t)s(this.prototype,e,t[e],t)}static createObservers(t,e){const s=this.prototype;for(let i=0;i<t.length;i++)s._createMethodObserver(t[i],e)}static get template(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_template",this))){const t=this.prototype.hasOwnProperty(JSCompiler_renameProperty("_template",this.prototype))?this.prototype._template:void 0;this._template=void 0!==t?t:this.hasOwnProperty(JSCompiler_renameProperty("is",this))&&function(t){let e=null;if(t&&(!ye||be)&&(e=De.import(t,"template"),ye&&!e))throw new Error(`strictTemplatePolicy: expecting dom-module or null template for ${t}`);return e}(this.is)||Object.getPrototypeOf(this.prototype).constructor.template}return this._template}static set template(t){this._template=t}static get importPath(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_importPath",this))){const t=this.importMeta;if(t)this._importPath=ue(t.url);else{const t=De.import(this.is);this._importPath=t&&t.assetpath||Object.getPrototypeOf(this.prototype).constructor.importPath}}return this._importPath}constructor(){super(),this._template,this._importPath,this.rootPath,this.importPath,this.root,this.$}_initializeProperties(){this.constructor.finalize(),this.constructor._finalizeTemplate(this.localName),super._initializeProperties(),this.rootPath=fe,this.importPath=this.constructor.importPath;let t=function(t){if(!t.hasOwnProperty(JSCompiler_renameProperty("__propertyDefaults",t))){t.__propertyDefaults=null;let e=t._properties;for(let s in e){let i=e[s];"value"in i&&(t.__propertyDefaults=t.__propertyDefaults||{},t.__propertyDefaults[s]=i)}}return t.__propertyDefaults}(this.constructor);if(t)for(let e in t){let s=t[e];if(this._canApplyPropertyDefault(e)){let t="function"==typeof s.value?s.value.call(this):s.value;this._hasAccessor(e)?this._setPendingProperty(e,t,!0):this[e]=t}}}_canApplyPropertyDefault(t){return!this.hasOwnProperty(t)}static _processStyleText(t,e){return pe(t,e)}static _finalizeTemplate(t){const e=this.prototype._template;if(e&&!e.__polymerFinalized){e.__polymerFinalized=!0;const s=this.importPath;(function(t,e,s,i){if(!pi){const n=e.content.querySelectorAll("style"),r=Ue(e),o=function(t){let e=$e(t);return e?qe(e):[]}(s),a=e.content.firstElementChild;for(let s=0;s<o.length;s++){let n=o[s];n.textContent=t._processStyleText(n.textContent,i),e.content.insertBefore(n,a)}let l=0;for(let e=0;e<r.length;e++){let s=r[e],o=n[l];o!==s?(s=s.cloneNode(!0),o.parentNode.insertBefore(s,o)):l++,s.textContent=t._processStyleText(s.textContent,i)}}if(window.ShadyCSS&&window.ShadyCSS.prepareTemplate(e,s),Ve&&pi&&me){const s=e.content.querySelectorAll("style");if(s){let e="";Array.from(s).forEach((t=>{e+=t.textContent,t.parentNode.removeChild(t)})),t._styleSheet=new CSSStyleSheet,t._styleSheet.replaceSync(e)}}})(this,e,t,s?de(s):""),this.prototype._bindTemplate(e)}}connectedCallback(){window.ShadyCSS&&this._template&&window.ShadyCSS.styleElement(this),super.connectedCallback()}ready(){this._template&&(this.root=this._stampTemplate(this._template),this.$=this.root.$),super.ready()}_readyClients(){this._template&&(this.root=this._attachDom(this.root)),super._readyClients()}_attachDom(t){const e=Ge(this);if(e.attachShadow)return t?(e.shadowRoot||(e.attachShadow({mode:"open",shadyUpgradeFragment:t}),e.shadowRoot.appendChild(t),this.constructor._styleSheet&&(e.shadowRoot.adoptedStyleSheets=[this.constructor._styleSheet])),Ce&&window.ShadyDOM&&window.ShadyDOM.flushInitial(e.shadowRoot),e.shadowRoot):null;throw new Error("ShadowDOM not available. PolymerElement can create dom as children instead of in ShadowDOM by setting `this.root = this;` before `ready`.")}updateStyles(t){window.ShadyCSS&&window.ShadyCSS.styleSubtree(this,t)}resolveUrl(t,e){return!e&&this.importPath&&(e=de(this.importPath)),de(t,e)}static _parseTemplateContent(t,s,i){return s.dynamicFns=s.dynamicFns||this._properties,e._parseTemplateContent.call(this,t,s,i)}static _addTemplatePropertyEffect(t,s,i){return!we||s in this._properties||i.info.part.signature&&i.info.part.signature.static||i.info.part.hostProp||t.nestedTemplate||console.warn(`Property '${s}' used in template but not declared in 'properties'; attribute will not be observed.`),e._addTemplatePropertyEffect.call(this,t,s,i)}}}));class _i{constructor(){this._asyncModule=null,this._callback=null,this._timer=null}setConfig(t,e){this._asyncModule=t,this._callback=e,this._timer=this._asyncModule.run((()=>{this._timer=null,mi.delete(this),this._callback()}))}cancel(){this.isActive()&&(this._cancelAsync(),mi.delete(this))}_cancelAsync(){this.isActive()&&(this._asyncModule.cancel(this._timer),this._timer=null)}flush(){this.isActive()&&(this.cancel(),this._callback())}isActive(){return null!=this._timer}static debounce(t,e,s){return t instanceof _i?t._cancelAsync():t=new _i,t.setConfig(e,s),t}}let mi=new Set;const fi=function(t){mi.add(t)},gi=function(){const t=Boolean(mi.size);return mi.forEach((t=>{try{t.flush()}catch(t){setTimeout((()=>{throw t}))}})),t};let vi="string"==typeof document.head.style.touchAction,yi="__polymerGestures",bi="__polymerGesturesHandled",zi="__polymerGesturesTouchAction",wi=["mousedown","mousemove","mouseup","click"],Ci=[0,1,4,2],Mi=function(){try{return 1===new MouseEvent("test",{buttons:1}).buttons}catch(t){return!1}}();function xi(t){return wi.indexOf(t)>-1}let Si=!1;function Hi(t){if(!xi(t)&&"touchend"!==t)return vi&&Si&&ve?{passive:!0}:void 0}!function(){try{let t=Object.defineProperty({},"passive",{get(){Si=!0}});window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(t){}}();let Pi=navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);const Li=[],Vi={button:!0,input:!0,keygen:!0,meter:!0,output:!0,textarea:!0,progress:!0,select:!0},Ei={button:!0,command:!0,fieldset:!0,input:!0,keygen:!0,optgroup:!0,option:!0,select:!0,textarea:!0};function Ti(t){let e=Array.prototype.slice.call(t.labels||[]);if(!e.length){e=[];let s=t.getRootNode();if(t.id){let i=s.querySelectorAll(`label[for = ${t.id}]`);for(let t=0;t<i.length;t++)e.push(i[t])}}return e}let Oi=function(t){let e=t.sourceCapabilities;var s;if((!e||e.firesTouchEvents)&&(t[bi]={skip:!0},"click"===t.type)){let e=!1,i=Ri(t);for(let t=0;t<i.length;t++){if(i[t].nodeType===Node.ELEMENT_NODE)if("label"===i[t].localName)Li.push(i[t]);else if(s=i[t],Vi[s.localName]){let s=Ti(i[t]);for(let t=0;t<s.length;t++)e=e||Li.indexOf(s[t])>-1}if(i[t]===Ni.mouse.target)return}if(e)return;t.preventDefault(),t.stopPropagation()}};function Ai(t){let e=Pi?["click"]:wi;for(let s,i=0;i<e.length;i++)s=e[i],t?(Li.length=0,document.addEventListener(s,Oi,!0)):document.removeEventListener(s,Oi,!0)}function ki(t){let e=t.type;if(!xi(e))return!1;if("mousemove"===e){let e=void 0===t.buttons?1:t.buttons;return t instanceof window.MouseEvent&&!Mi&&(e=Ci[t.which]||0),Boolean(1&e)}return 0===(void 0===t.button?0:t.button)}let Ni={mouse:{target:null,mouseIgnoreJob:null},touch:{x:0,y:0,id:-1,scrollDecided:!1}};function Ii(t,e,s){t.movefn=e,t.upfn=s,document.addEventListener("mousemove",e),document.addEventListener("mouseup",s)}function Di(t){document.removeEventListener("mousemove",t.movefn),document.removeEventListener("mouseup",t.upfn),t.movefn=null,t.upfn=null}document.addEventListener("touchend",(function(t){Ni.mouse.mouseIgnoreJob||Ai(!0),Ni.mouse.target=Ri(t)[0],Ni.mouse.mouseIgnoreJob=_i.debounce(Ni.mouse.mouseIgnoreJob,_s.after(2500),(function(){Ai(),Ni.mouse.target=null,Ni.mouse.mouseIgnoreJob=null}))}),!!Si&&{passive:!0});const Ri=window.ShadyDOM&&window.ShadyDOM.noPatch?window.ShadyDOM.composedPath:t=>t.composedPath&&t.composedPath()||[],$i={},Fi=[];function Bi(t){const e=Ri(t);return e.length>0?e[0]:t.target}function ji(t){let e,s=t.type,i=t.currentTarget[yi];if(!i)return;let n=i[s];if(n){if(!t[bi]&&(t[bi]={},"touch"===s.slice(0,5))){let e=(t=t).changedTouches[0];if("touchstart"===s&&1===t.touches.length&&(Ni.touch.id=e.identifier),Ni.touch.id!==e.identifier)return;vi||"touchstart"!==s&&"touchmove"!==s||function(t){let e=t.changedTouches[0],s=t.type;if("touchstart"===s)Ni.touch.x=e.clientX,Ni.touch.y=e.clientY,Ni.touch.scrollDecided=!1;else if("touchmove"===s){if(Ni.touch.scrollDecided)return;Ni.touch.scrollDecided=!0;let s=function(t){let e="auto",s=Ri(t);for(let t,i=0;i<s.length;i++)if(t=s[i],t[zi]){e=t[zi];break}return e}(t),i=!1,n=Math.abs(Ni.touch.x-e.clientX),r=Math.abs(Ni.touch.y-e.clientY);t.cancelable&&("none"===s?i=!0:"pan-x"===s?i=r>n:"pan-y"===s&&(i=n>r)),i?t.preventDefault():Gi("track")}}(t)}if(e=t[bi],!e.skip){for(let s,i=0;i<Fi.length;i++)s=Fi[i],n[s.name]&&!e[s.name]&&s.flow&&s.flow.start.indexOf(t.type)>-1&&s.reset&&s.reset();for(let i,r=0;r<Fi.length;r++)i=Fi[r],n[i.name]&&!e[i.name]&&(e[i.name]=!0,i[s](t))}}}function Ui(t){Fi.push(t);for(let e=0;e<t.emits.length;e++)$i[t.emits[e]]=t}function qi(t,e){vi&&t instanceof HTMLElement&&ms.run((()=>{t.style.touchAction=e})),t[zi]=e}function Yi(t,e,s){let i=new Event(e,{bubbles:!0,cancelable:!0,composed:!0});if(i.detail=s,Ge(t).dispatchEvent(i),i.defaultPrevented){let t=s.preventer||s.sourceEvent;t&&t.preventDefault&&t.preventDefault()}}function Gi(t){let e=function(t){for(let e,s=0;s<Fi.length;s++){e=Fi[s];for(let s,i=0;i<e.emits.length;i++)if(s=e.emits[i],s===t)return e}return null}(t);e.info&&(e.info.prevent=!0)}function Wi(t,e,s,i){e&&Yi(e,t,{x:s.clientX,y:s.clientY,sourceEvent:s,preventer:i,prevent:function(t){return Gi(t)}})}function Ji(t,e,s){if(t.prevent)return!1;if(t.started)return!0;let i=Math.abs(t.x-e),n=Math.abs(t.y-s);return i>=5||n>=5}function Xi(t,e,s){if(!e)return;let i,n=t.moves[t.moves.length-2],r=t.moves[t.moves.length-1],o=r.x-t.x,a=r.y-t.y,l=0;n&&(i=r.x-n.x,l=r.y-n.y),Yi(e,"track",{state:t.state,x:s.clientX,y:s.clientY,dx:o,dy:a,ddx:i,ddy:l,sourceEvent:s,hover:function(){return function(t,e){let s=document.elementFromPoint(t,e),i=s;for(;i&&i.shadowRoot&&!window.ShadyDOM;){let n=i;if(i=i.shadowRoot.elementFromPoint(t,e),n===i)break;i&&(s=i)}return s}(s.clientX,s.clientY)}})}function Ki(t,e,s){let i=Math.abs(e.clientX-t.x),n=Math.abs(e.clientY-t.y),r=Bi(s||e);!r||Ei[r.localName]&&r.hasAttribute("disabled")||(isNaN(i)||isNaN(n)||i<=25&&n<=25||function(t){if("click"===t.type){if(0===t.detail)return!0;let e=Bi(t);if(!e.nodeType||e.nodeType!==Node.ELEMENT_NODE)return!0;let s=e.getBoundingClientRect(),i=t.pageX,n=t.pageY;return!(i>=s.left&&i<=s.right&&n>=s.top&&n<=s.bottom)}return!1}(e))&&(t.prevent||Yi(r,"tap",{x:e.clientX,y:e.clientY,sourceEvent:e,preventer:s}))}Ui({name:"downup",deps:["mousedown","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["down","up"],info:{movefn:null,upfn:null},reset:function(){Di(this.info)},mousedown:function(t){if(!ki(t))return;let e=Bi(t),s=this;Ii(this.info,(function(t){ki(t)||(Wi("up",e,t),Di(s.info))}),(function(t){ki(t)&&Wi("up",e,t),Di(s.info)})),Wi("down",e,t)},touchstart:function(t){Wi("down",Bi(t),t.changedTouches[0],t)},touchend:function(t){Wi("up",Bi(t),t.changedTouches[0],t)}}),Ui({name:"track",touchAction:"none",deps:["mousedown","touchstart","touchmove","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["track"],info:{x:0,y:0,state:"start",started:!1,moves:[],addMove:function(t){this.moves.length>2&&this.moves.shift(),this.moves.push(t)},movefn:null,upfn:null,prevent:!1},reset:function(){this.info.state="start",this.info.started=!1,this.info.moves=[],this.info.x=0,this.info.y=0,this.info.prevent=!1,Di(this.info)},mousedown:function(t){if(!ki(t))return;let e=Bi(t),s=this,i=function(t){let i=t.clientX,n=t.clientY;Ji(s.info,i,n)&&(s.info.state=s.info.started?"mouseup"===t.type?"end":"track":"start","start"===s.info.state&&Gi("tap"),s.info.addMove({x:i,y:n}),ki(t)||(s.info.state="end",Di(s.info)),e&&Xi(s.info,e,t),s.info.started=!0)};Ii(this.info,i,(function(t){s.info.started&&i(t),Di(s.info)})),this.info.x=t.clientX,this.info.y=t.clientY},touchstart:function(t){let e=t.changedTouches[0];this.info.x=e.clientX,this.info.y=e.clientY},touchmove:function(t){let e=Bi(t),s=t.changedTouches[0],i=s.clientX,n=s.clientY;Ji(this.info,i,n)&&("start"===this.info.state&&Gi("tap"),this.info.addMove({x:i,y:n}),Xi(this.info,e,s),this.info.state="track",this.info.started=!0)},touchend:function(t){let e=Bi(t),s=t.changedTouches[0];this.info.started&&(this.info.state="end",this.info.addMove({x:s.clientX,y:s.clientY}),Xi(this.info,e,s))}}),Ui({name:"tap",deps:["mousedown","click","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["click","touchend"]},emits:["tap"],info:{x:NaN,y:NaN,prevent:!1},reset:function(){this.info.x=NaN,this.info.y=NaN,this.info.prevent=!1},mousedown:function(t){ki(t)&&(this.info.x=t.clientX,this.info.y=t.clientY)},click:function(t){ki(t)&&Ki(this.info,t)},touchstart:function(t){const e=t.changedTouches[0];this.info.x=e.clientX,this.info.y=e.clientY},touchend:function(t){Ki(this.info,t.changedTouches[0],t)}});const Zi=Oe((t=>class extends t{_addEventListenerToNode(t,e,s){(function(t,e,s){return!!$i[e]&&(function(t,e,s){let i=$i[e],n=i.deps,r=i.name,o=t[yi];o||(t[yi]=o={});for(let e,s,i=0;i<n.length;i++)e=n[i],Pi&&xi(e)&&"click"!==e||(s=o[e],s||(o[e]=s={_count:0}),0===s._count&&t.addEventListener(e,ji,Hi(e)),s[r]=(s[r]||0)+1,s._count=(s._count||0)+1);t.addEventListener(e,s),i.touchAction&&qi(t,i.touchAction)}(t,e,s),!0)})(t,e,s)||super._addEventListenerToNode(t,e,s)}_removeEventListenerFromNode(t,e,s){(function(t,e,s){return!!$i[e]&&(function(t,e,s){let i=$i[e],n=i.deps,r=i.name,o=t[yi];if(o)for(let e,s,i=0;i<n.length;i++)e=n[i],s=o[e],s&&s[r]&&(s[r]=(s[r]||1)-1,s._count=(s._count||1)-1,0===s._count&&t.removeEventListener(e,ji,Hi(e)));t.removeEventListener(e,s)}(t,e,s),!0)})(t,e,s)||super._removeEventListenerFromNode(t,e,s)}})),Qi=/:host\(:dir\((ltr|rtl)\)\)/g,tn=/([\s\w-#\.\[\]\*]*):dir\((ltr|rtl)\)/g,en=/:dir\((?:ltr|rtl)\)/,sn=Boolean(window.ShadyDOM&&window.ShadyDOM.inUse),nn=[];let rn=null,on="";function an(){on=document.documentElement.getAttribute("dir")}function ln(t){t.__autoDirOptOut||t.setAttribute("dir",on)}function hn(){an(),on=document.documentElement.getAttribute("dir");for(let t=0;t<nn.length;t++)ln(nn[t])}const cn=Oe((t=>{sn||rn||(an(),rn=new MutationObserver(hn),rn.observe(document.documentElement,{attributes:!0,attributeFilter:["dir"]}));const e=bs(t);class s extends e{static _processStyleText(t,s){return t=e._processStyleText.call(this,t,s),!sn&&en.test(t)&&(t=this._replaceDirInCssText(t),this.__activateDir=!0),t}static _replaceDirInCssText(t){let e=t;return e=e.replace(Qi,':host([dir="$1"])'),e=e.replace(tn,':host([dir="$2"]) $1'),e}constructor(){super(),this.__autoDirOptOut=!1}ready(){super.ready(),this.__autoDirOptOut=this.hasAttribute("dir")}connectedCallback(){e.prototype.connectedCallback&&super.connectedCallback(),this.constructor.__activateDir&&(rn&&rn.takeRecords().length&&hn(),nn.push(this),ln(this))}disconnectedCallback(){if(e.prototype.disconnectedCallback&&super.disconnectedCallback(),this.constructor.__activateDir){const t=nn.indexOf(this);t>-1&&nn.splice(t,1)}}}return s.__activateDir=!1,s}));function dn(){document.body.removeAttribute("unresolved")}function pn(t,e,s){return{index:t,removed:e,addedCount:s}}function un(t,e){return function(t,e,s,i,n,r){let o,a=0,l=0,h=Math.min(s-e,r-n);if(0==e&&0==n&&(a=function(t,e,s){for(let i=0;i<s;i++)if(!_n(t[i],e[i]))return i;return s}(t,i,h)),s==t.length&&r==i.length&&(l=function(t,e,s){let i=t.length,n=e.length,r=0;for(;r<s&&_n(t[--i],e[--n]);)r++;return r}(t,i,h-a)),n+=a,r-=l,(s-=l)-(e+=a)==0&&r-n==0)return[];if(e==s){for(o=pn(e,[],0);n<r;)o.removed.push(i[n++]);return[o]}if(n==r)return[pn(e,[],s-e)];let c=function(t){let e=t.length-1,s=t[0].length-1,i=t[e][s],n=[];for(;e>0||s>0;){if(0==e){n.push(2),s--;continue}if(0==s){n.push(3),e--;continue}let r,o=t[e-1][s-1],a=t[e-1][s],l=t[e][s-1];r=a<l?a<o?a:o:l<o?l:o,r==o?(o==i?n.push(0):(n.push(1),i=o),e--,s--):r==a?(n.push(3),e--,i=a):(n.push(2),s--,i=l)}return n.reverse(),n}(function(t,e,s,i,n,r){let o=r-n+1,a=s-e+1,l=new Array(o);for(let t=0;t<o;t++)l[t]=new Array(a),l[t][0]=t;for(let t=0;t<a;t++)l[0][t]=t;for(let s=1;s<o;s++)for(let r=1;r<a;r++)if(_n(t[e+r-1],i[n+s-1]))l[s][r]=l[s-1][r-1];else{let t=l[s-1][r]+1,e=l[s][r-1]+1;l[s][r]=t<e?t:e}return l}(t,e,s,i,n,r));o=void 0;let d=[],p=e,u=n;for(let t=0;t<c.length;t++)switch(c[t]){case 0:o&&(d.push(o),o=void 0),p++,u++;break;case 1:o||(o=pn(p,[],0)),o.addedCount++,p++,o.removed.push(i[u]),u++;break;case 2:o||(o=pn(p,[],0)),o.addedCount++,p++;break;case 3:o||(o=pn(p,[],0)),o.removed.push(i[u]),u++}return o&&d.push(o),d}(t,0,t.length,e,0,e.length)}function _n(t,e){return t===e}function mn(t){return"slot"===t.localName}"interactive"===document.readyState||"complete"===document.readyState?dn():window.addEventListener("DOMContentLoaded",dn);let fn=class{static getFlattenedNodes(t){const e=Ge(t);return mn(t)?(t=t,e.assignedNodes({flatten:!0})):Array.from(e.childNodes).map((t=>mn(t)?Ge(t=t).assignedNodes({flatten:!0}):[t])).reduce(((t,e)=>t.concat(e)),[])}constructor(t,e){this._shadyChildrenObserver=null,this._nativeChildrenObserver=null,this._connected=!1,this._target=t,this.callback=e,this._effectiveNodes=[],this._observer=null,this._scheduled=!1,this._boundSchedule=()=>{this._schedule()},this.connect(),this._schedule()}connect(){mn(this._target)?this._listenSlots([this._target]):Ge(this._target).children&&(this._listenSlots(Ge(this._target).children),window.ShadyDOM?this._shadyChildrenObserver=window.ShadyDOM.observeChildren(this._target,(t=>{this._processMutations(t)})):(this._nativeChildrenObserver=new MutationObserver((t=>{this._processMutations(t)})),this._nativeChildrenObserver.observe(this._target,{childList:!0}))),this._connected=!0}disconnect(){mn(this._target)?this._unlistenSlots([this._target]):Ge(this._target).children&&(this._unlistenSlots(Ge(this._target).children),window.ShadyDOM&&this._shadyChildrenObserver?(window.ShadyDOM.unobserveChildren(this._shadyChildrenObserver),this._shadyChildrenObserver=null):this._nativeChildrenObserver&&(this._nativeChildrenObserver.disconnect(),this._nativeChildrenObserver=null)),this._connected=!1}_schedule(){this._scheduled||(this._scheduled=!0,ms.run((()=>this.flush())))}_processMutations(t){this._processSlotMutations(t),this.flush()}_processSlotMutations(t){if(t)for(let e=0;e<t.length;e++){let s=t[e];s.addedNodes&&this._listenSlots(s.addedNodes),s.removedNodes&&this._unlistenSlots(s.removedNodes)}}flush(){if(!this._connected)return!1;window.ShadyDOM&&ShadyDOM.flush(),this._nativeChildrenObserver?this._processSlotMutations(this._nativeChildrenObserver.takeRecords()):this._shadyChildrenObserver&&this._processSlotMutations(this._shadyChildrenObserver.takeRecords()),this._scheduled=!1;let t={target:this._target,addedNodes:[],removedNodes:[]},e=this.constructor.getFlattenedNodes(this._target),s=un(e,this._effectiveNodes);for(let e,i=0;i<s.length&&(e=s[i]);i++)for(let s,i=0;i<e.removed.length&&(s=e.removed[i]);i++)t.removedNodes.push(s);for(let i,n=0;n<s.length&&(i=s[n]);n++)for(let s=i.index;s<i.index+i.addedCount;s++)t.addedNodes.push(e[s]);this._effectiveNodes=e;let i=!1;return(t.addedNodes.length||t.removedNodes.length)&&(i=!0,this.callback.call(this._target,t)),i}_listenSlots(t){for(let e=0;e<t.length;e++){let s=t[e];mn(s)&&s.addEventListener("slotchange",this._boundSchedule)}}_unlistenSlots(t){for(let e=0;e<t.length;e++){let s=t[e];mn(s)&&s.removeEventListener("slotchange",this._boundSchedule)}}};const gn=function(){let t,e;do{t=window.ShadyDOM&&ShadyDOM.flush(),window.ShadyCSS&&window.ShadyCSS.ScopingShim&&window.ShadyCSS.ScopingShim.flush(),e=gi()}while(t||e)},vn=Element.prototype,yn=vn.matches||vn.matchesSelector||vn.mozMatchesSelector||vn.msMatchesSelector||vn.oMatchesSelector||vn.webkitMatchesSelector,bn=function(t,e){return yn.call(t,e)};class zn{constructor(t){window.ShadyDOM&&window.ShadyDOM.inUse&&window.ShadyDOM.patch(t),this.node=t}observeNodes(t){return new fn(this.node,t)}unobserveNodes(t){t.disconnect()}notifyObserver(){}deepContains(t){if(Ge(this.node).contains(t))return!0;let e=t,s=t.ownerDocument;for(;e&&e!==s&&e!==this.node;)e=Ge(e).parentNode||Ge(e).host;return e===this.node}getOwnerRoot(){return Ge(this.node).getRootNode()}getDistributedNodes(){return"slot"===this.node.localName?Ge(this.node).assignedNodes({flatten:!0}):[]}getDestinationInsertionPoints(){let t=[],e=Ge(this.node).assignedSlot;for(;e;)t.push(e),e=Ge(e).assignedSlot;return t}importNode(t,e){let s=this.node instanceof Document?this.node:this.node.ownerDocument;return Ge(s).importNode(t,e)}getEffectiveChildNodes(){return fn.getFlattenedNodes(this.node)}queryDistributedElements(t){let e=this.getEffectiveChildNodes(),s=[];for(let i,n=0,r=e.length;n<r&&(i=e[n]);n++)i.nodeType===Node.ELEMENT_NODE&&bn(i,t)&&s.push(i);return s}get activeElement(){let t=this.node;return void 0!==t._activeElement?t._activeElement:t.activeElement}}function wn(t,e){for(let s=0;s<e.length;s++){let i=e[s];Object.defineProperty(t,i,{get:function(){return this.node[i]},configurable:!0})}}class Cn{constructor(t){this.event=t}get rootTarget(){return this.path[0]}get localTarget(){return this.event.target}get path(){return this.event.composedPath()}}zn.prototype.cloneNode,zn.prototype.appendChild,zn.prototype.insertBefore,zn.prototype.removeChild,zn.prototype.replaceChild,zn.prototype.setAttribute,zn.prototype.removeAttribute,zn.prototype.querySelector,zn.prototype.querySelectorAll,zn.prototype.parentNode,zn.prototype.firstChild,zn.prototype.lastChild,zn.prototype.nextSibling,zn.prototype.previousSibling,zn.prototype.firstElementChild,zn.prototype.lastElementChild,zn.prototype.nextElementSibling,zn.prototype.previousElementSibling,zn.prototype.childNodes,zn.prototype.children,zn.prototype.classList,zn.prototype.textContent,zn.prototype.innerHTML;let Mn=zn;if(window.ShadyDOM&&window.ShadyDOM.inUse&&window.ShadyDOM.noPatch&&window.ShadyDOM.Wrapper){class t extends window.ShadyDOM.Wrapper{}Object.getOwnPropertyNames(zn.prototype).forEach((e=>{"activeElement"!=e&&(t.prototype[e]=zn.prototype[e])})),wn(t.prototype,["classList"]),Mn=t,Object.defineProperties(Cn.prototype,{localTarget:{get(){const t=this.event.currentTarget,e=t&&xn(t).getOwnerRoot(),s=this.path;for(let t=0;t<s.length;t++){const i=s[t];if(xn(i).getOwnerRoot()===e)return i}},configurable:!0},path:{get(){return window.ShadyDOM.composedPath(this.event)},configurable:!0}})}else!function(t,e){for(let s=0;s<e.length;s++){let i=e[s];t[i]=function(){return this.node[i].apply(this.node,arguments)}}}(zn.prototype,["cloneNode","appendChild","insertBefore","removeChild","replaceChild","setAttribute","removeAttribute","querySelector","querySelectorAll"]),wn(zn.prototype,["parentNode","firstChild","lastChild","nextSibling","previousSibling","firstElementChild","lastElementChild","nextElementSibling","previousElementSibling","childNodes","children","classList"]),function(t,e){for(let s=0;s<e.length;s++){let i=e[s];Object.defineProperty(t,i,{get:function(){return this.node[i]},set:function(t){this.node[i]=t},configurable:!0})}}(zn.prototype,["textContent","innerHTML","className"]);const xn=function(t){if((t=t||document)instanceof Mn)return t;if(t instanceof Cn)return t;let e=t.__domApi;return e||(e=t instanceof Event?new Cn(t):new Mn(t),t.__domApi=e),e},Sn=window.ShadyDOM,Hn=window.ShadyCSS;function Pn(t,e){return Ge(t).getRootNode()===e}const Ln="disable-upgrade",Vn=t=>{for(;t;){const e=Object.getOwnPropertyDescriptor(t,"observedAttributes");if(e)return e.get;t=Object.getPrototypeOf(t.prototype).constructor}return()=>[]},En=(Oe((t=>{const e=ui(t);let s=Vn(e);return class extends e{constructor(){super(),this.__isUpgradeDisabled}static get observedAttributes(){return s.call(this).concat(Ln)}_initializeProperties(){this.hasAttribute(Ln)?this.__isUpgradeDisabled=!0:super._initializeProperties()}_enableProperties(){this.__isUpgradeDisabled||super._enableProperties()}_canApplyPropertyDefault(t){return super._canApplyPropertyDefault(t)&&!(this.__isUpgradeDisabled&&this._isPropertyPending(t))}attributeChangedCallback(t,e,s,i){t==Ln?this.__isUpgradeDisabled&&null==s&&(super._initializeProperties(),this.__isUpgradeDisabled=!1,Ge(this).isConnected&&super.connectedCallback()):super.attributeChangedCallback(t,e,s,i)}connectedCallback(){this.__isUpgradeDisabled||super.connectedCallback()}disconnectedCallback(){this.__isUpgradeDisabled||super.disconnectedCallback()}}})),"disable-upgrade");let Tn=window.ShadyCSS;const On=Oe((t=>{const e=Zi(ui(t)),s=pi?e:cn(e),i=Vn(s),n={x:"pan-x",y:"pan-y",none:"none",all:"auto"};class r extends s{constructor(){super(),this.isAttached,this.__boundListeners,this._debouncers,this.__isUpgradeDisabled,this.__needsAttributesAtConnected,this._legacyForceObservedAttributes}static get importMeta(){return this.prototype.importMeta}created(){}__attributeReaction(t,e,s){(this.__dataAttributes&&this.__dataAttributes[t]||t===En)&&this.attributeChangedCallback(t,e,s,null)}setAttribute(t,e){if(Le&&!this._legacyForceObservedAttributes){const s=this.getAttribute(t);super.setAttribute(t,e),this.__attributeReaction(t,s,String(e))}else super.setAttribute(t,e)}removeAttribute(t){if(Le&&!this._legacyForceObservedAttributes){const e=this.getAttribute(t);super.removeAttribute(t),this.__attributeReaction(t,e,null)}else super.removeAttribute(t)}static get observedAttributes(){return Le&&!this.prototype._legacyForceObservedAttributes?(this.hasOwnProperty(JSCompiler_renameProperty("__observedAttributes",this))||(this.__observedAttributes=[],ci(this.prototype)),this.__observedAttributes):i.call(this).concat(En)}_enableProperties(){this.__isUpgradeDisabled||super._enableProperties()}_canApplyPropertyDefault(t){return super._canApplyPropertyDefault(t)&&!(this.__isUpgradeDisabled&&this._isPropertyPending(t))}connectedCallback(){this.__needsAttributesAtConnected&&this._takeAttributes(),this.__isUpgradeDisabled||(super.connectedCallback(),this.isAttached=!0,this.attached())}attached(){}disconnectedCallback(){this.__isUpgradeDisabled||(super.disconnectedCallback(),this.isAttached=!1,this.detached())}detached(){}attributeChangedCallback(t,e,s,i){e!==s&&(t==En?this.__isUpgradeDisabled&&null==s&&(this._initializeProperties(),this.__isUpgradeDisabled=!1,Ge(this).isConnected&&this.connectedCallback()):(super.attributeChangedCallback(t,e,s,i),this.attributeChanged(t,e,s)))}attributeChanged(t,e,s){}_initializeProperties(){if(ze&&this.hasAttribute(En))this.__isUpgradeDisabled=!0;else{let t=Object.getPrototypeOf(this);t.hasOwnProperty(JSCompiler_renameProperty("__hasRegisterFinished",t))||(this._registered(),t.__hasRegisterFinished=!0),super._initializeProperties(),this.root=this,this.created(),Le&&!this._legacyForceObservedAttributes&&(this.hasAttributes()?this._takeAttributes():this.parentNode||(this.__needsAttributesAtConnected=!0)),this._applyListeners()}}_takeAttributes(){const t=this.attributes;for(let e=0,s=t.length;e<s;e++){const s=t[e];this.__attributeReaction(s.name,null,s.value)}}_registered(){}ready(){this._ensureAttributes(),super.ready()}_ensureAttributes(){}_applyListeners(){}serialize(t){return this._serializeValue(t)}deserialize(t,e){return this._deserializeValue(t,e)}reflectPropertyToAttribute(t,e,s){this._propertyToAttribute(t,e,s)}serializeValueToAttribute(t,e,s){this._valueToNodeAttribute(s||this,t,e)}extend(t,e){if(!t||!e)return t||e;let s=Object.getOwnPropertyNames(e);for(let i,n=0;n<s.length&&(i=s[n]);n++){let s=Object.getOwnPropertyDescriptor(e,i);s&&Object.defineProperty(t,i,s)}return t}mixin(t,e){for(let s in e)t[s]=e[s];return t}chainObject(t,e){return t&&e&&t!==e&&(t.__proto__=e),t}instanceTemplate(t){let e=this.constructor._contentForTemplate(t);return document.importNode(e,!0)}fire(t,e,s){s=s||{},e=null==e?{}:e;let i=new Event(t,{bubbles:void 0===s.bubbles||s.bubbles,cancelable:Boolean(s.cancelable),composed:void 0===s.composed||s.composed});i.detail=e;let n=s.node||this;return Ge(n).dispatchEvent(i),i}listen(t,e,s){t=t||this;let i=this.__boundListeners||(this.__boundListeners=new WeakMap),n=i.get(t);n||(n={},i.set(t,n));let r=e+s;n[r]||(n[r]=this._addMethodEventListenerToNode(t,e,s,this))}unlisten(t,e,s){t=t||this;let i=this.__boundListeners&&this.__boundListeners.get(t),n=e+s,r=i&&i[n];r&&(this._removeEventListenerFromNode(t,e,r),i[n]=null)}setScrollDirection(t,e){qi(e||this,n[t]||"auto")}$$(t){return this.root.querySelector(t)}get domHost(){let t=Ge(this).getRootNode();return t instanceof DocumentFragment?t.host:t}distributeContent(){const t=xn(this);window.ShadyDOM&&t.shadowRoot&&ShadyDOM.flush()}getEffectiveChildNodes(){return xn(this).getEffectiveChildNodes()}queryDistributedElements(t){return xn(this).queryDistributedElements(t)}getEffectiveChildren(){return this.getEffectiveChildNodes().filter((function(t){return t.nodeType===Node.ELEMENT_NODE}))}getEffectiveTextContent(){let t=this.getEffectiveChildNodes(),e=[];for(let s,i=0;s=t[i];i++)s.nodeType!==Node.COMMENT_NODE&&e.push(s.textContent);return e.join("")}queryEffectiveChildren(t){let e=this.queryDistributedElements(t);return e&&e[0]}queryAllEffectiveChildren(t){return this.queryDistributedElements(t)}getContentChildNodes(t){let e=this.root.querySelector(t||"slot");return e?xn(e).getDistributedNodes():[]}getContentChildren(t){return this.getContentChildNodes(t).filter((function(t){return t.nodeType===Node.ELEMENT_NODE}))}isLightDescendant(t){const e=this;return e!==t&&Ge(e).contains(t)&&Ge(e).getRootNode()===Ge(t).getRootNode()}isLocalDescendant(t){return this.root===Ge(t).getRootNode()}scopeSubtree(t,e=!1){return function(t,e=!1){if(!Sn||!Hn)return null;if(!Sn.handlesDynamicScoping)return null;const s=Hn.ScopingShim;if(!s)return null;const i=s.scopeForNode(t),n=Ge(t).getRootNode(),r=t=>{if(!Pn(t,n))return;const e=Array.from(Sn.nativeMethods.querySelectorAll.call(t,"*"));e.push(t);for(let t=0;t<e.length;t++){const r=e[t];if(!Pn(r,n))continue;const o=s.currentScopeForNode(r);o!==i&&(""!==o&&s.unscopeNode(r,o),s.scopeNode(r,i))}};if(r(t),e){const e=new MutationObserver((t=>{for(let e=0;e<t.length;e++){const s=t[e];for(let t=0;t<s.addedNodes.length;t++){const e=s.addedNodes[t];e.nodeType===Node.ELEMENT_NODE&&r(e)}}}));return e.observe(t,{childList:!0,subtree:!0}),e}return null}(t,e)}getComputedStyleValue(t){return Tn.getComputedStyleValue(this,t)}debounce(t,e,s){return this._debouncers=this._debouncers||{},this._debouncers[t]=_i.debounce(this._debouncers[t],s>0?_s.after(s):ms,e.bind(this))}isDebouncerActive(t){this._debouncers=this._debouncers||{};let e=this._debouncers[t];return!(!e||!e.isActive())}flushDebouncer(t){this._debouncers=this._debouncers||{};let e=this._debouncers[t];e&&e.flush()}cancelDebouncer(t){this._debouncers=this._debouncers||{};let e=this._debouncers[t];e&&e.cancel()}async(t,e){return e>0?_s.run(t.bind(this),e):~ms.run(t.bind(this))}cancelAsync(t){t<0?ms.cancel(~t):_s.cancel(t)}create(t,e){let s=document.createElement(t);if(e)if(s.setProperties)s.setProperties(e);else for(let t in e)s[t]=e[t];return s}elementMatches(t,e){return bn(e||this,t)}toggleAttribute(t,e){let s=this;return 3===arguments.length&&(s=arguments[2]),1==arguments.length&&(e=!s.hasAttribute(t)),e?(Ge(s).setAttribute(t,""),!0):(Ge(s).removeAttribute(t),!1)}toggleClass(t,e,s){s=s||this,1==arguments.length&&(e=!s.classList.contains(t)),e?s.classList.add(t):s.classList.remove(t)}transform(t,e){(e=e||this).style.webkitTransform=t,e.style.transform=t}translate3d(t,e,s,i){i=i||this,this.transform("translate3d("+t+","+e+","+s+")",i)}arrayDelete(t,e){let s;if(Array.isArray(t)){if(s=t.indexOf(e),s>=0)return t.splice(s,1)}else if(s=es(this,t).indexOf(e),s>=0)return this.splice(t,s,1);return null}_logger(t,e){switch(Array.isArray(e)&&1===e.length&&Array.isArray(e[0])&&(e=e[0]),t){case"log":case"warn":case"error":console[t](...e)}}_log(...t){this._logger("log",t)}_warn(...t){this._logger("warn",t)}_error(...t){this._logger("error",t)}_logf(t,...e){return["[%s::%s]",this.is,t,...e]}}return r.prototype.is="",r})),An={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,listeners:!0,hostAttributes:!0},kn={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,behaviors:!0,_noAccessors:!0},Nn=Object.assign({listeners:!0,hostAttributes:!0,properties:!0,observers:!0},kn);function In(t,e,s,i){!function(t,e,s){const i=t._noAccessors,n=Object.getOwnPropertyNames(t);for(let r=0;r<n.length;r++){let o=n[r];if(!(o in s))if(i)e[o]=t[o];else{let s=Object.getOwnPropertyDescriptor(t,o);s&&(s.configurable=!0,Object.defineProperty(e,o,s))}}}(e,t,i);for(let t in An)e[t]&&(s[t]=s[t]||[],s[t].push(e[t]))}function Dn(t,e,s){e=e||[];for(let i=t.length-1;i>=0;i--){let n=t[i];n?Array.isArray(n)?Dn(n,e):e.indexOf(n)<0&&(!s||s.indexOf(n)<0)&&e.unshift(n):console.warn("behavior is null, check for missing or 404 import")}return e}function Rn(t,e){for(const s in e){const i=t[s],n=e[s];t[s]=!("value"in n)&&i&&"value"in i?Object.assign({value:i.value},n):n}}const $n=On(HTMLElement);function Fn(t,e,s){let i;const n={};class r extends e{static _finalizeClass(){if(this.hasOwnProperty(JSCompiler_renameProperty("generatedFrom",this))){if(i)for(let t,e=0;e<i.length;e++)t=i[e],t.properties&&this.createProperties(t.properties),t.observers&&this.createObservers(t.observers,t.properties);t.properties&&this.createProperties(t.properties),t.observers&&this.createObservers(t.observers,t.properties),this._prepareTemplate()}else e._finalizeClass.call(this)}static get properties(){const e={};if(i)for(let t=0;t<i.length;t++)Rn(e,i[t].properties);return Rn(e,t.properties),e}static get observers(){let e=[];if(i)for(let t,s=0;s<i.length;s++)t=i[s],t.observers&&(e=e.concat(t.observers));return t.observers&&(e=e.concat(t.observers)),e}created(){super.created();const t=n.created;if(t)for(let e=0;e<t.length;e++)t[e].call(this)}_registered(){const t=r.prototype;if(!t.hasOwnProperty(JSCompiler_renameProperty("__hasRegisterFinished",t))){t.__hasRegisterFinished=!0,super._registered(),ze&&o(t);const e=Object.getPrototypeOf(this);let s=n.beforeRegister;if(s)for(let t=0;t<s.length;t++)s[t].call(e);if(s=n.registered,s)for(let t=0;t<s.length;t++)s[t].call(e)}}_applyListeners(){super._applyListeners();const t=n.listeners;if(t)for(let e=0;e<t.length;e++){const s=t[e];if(s)for(let t in s)this._addMethodEventListenerToNode(this,t,s[t])}}_ensureAttributes(){const t=n.hostAttributes;if(t)for(let e=t.length-1;e>=0;e--){const s=t[e];for(let t in s)this._ensureAttribute(t,s[t])}super._ensureAttributes()}ready(){super.ready();let t=n.ready;if(t)for(let e=0;e<t.length;e++)t[e].call(this)}attached(){super.attached();let t=n.attached;if(t)for(let e=0;e<t.length;e++)t[e].call(this)}detached(){super.detached();let t=n.detached;if(t)for(let e=0;e<t.length;e++)t[e].call(this)}attributeChanged(t,e,s){super.attributeChanged();let i=n.attributeChanged;if(i)for(let n=0;n<i.length;n++)i[n].call(this,t,e,s)}}if(s){Array.isArray(s)||(s=[s]);let t=e.prototype.behaviors;i=Dn(s,null,t),r.prototype.behaviors=t?t.concat(s):i}const o=e=>{i&&function(t,e,s){for(let i=0;i<e.length;i++)In(t,e[i],s,Nn)}(e,i,n),In(e,t,n,kn)};return ze||o(r.prototype),r.generatedFrom=t,r}const Bn=function(t){let e;return e="function"==typeof t?t:Bn.Class(t),t._legacyForceObservedAttributes&&(e.prototype._legacyForceObservedAttributes=t._legacyForceObservedAttributes),customElements.define(e.is,e),e};function jn(t,e,s,i,n){let r;n&&(r="object"==typeof s&&null!==s,r&&(i=t.__dataTemp[e]));let o=i!==s&&(i==i||s==s);return r&&o&&(t.__dataTemp[e]=s),o}Bn.Class=function(t,e){t||console.warn("Polymer.Class requires `info` argument");let s=e?e($n):$n;return s=Fn(t,s,t.behaviors),s.is=s.prototype.is=t.is,s};const Un=Oe((t=>class extends t{_shouldPropertyChange(t,e,s){return jn(this,t,e,s,!0)}})),qn=Oe((t=>class extends t{static get properties(){return{mutableData:Boolean}}_shouldPropertyChange(t,e,s){return jn(this,t,e,s,this.mutableData)}}));Un._mutablePropertyChange=jn;let Yn=null;function Gn(){return Yn}Gn.prototype=Object.create(HTMLTemplateElement.prototype,{constructor:{value:Gn,writable:!0}});const Wn=ai(Gn),Jn=Un(Wn),Xn=ai(class{});function Kn(t,e){for(let s=0;s<e.length;s++){let i=e[s];if(Boolean(t)!=Boolean(i.__hideTemplateChildren__))if(i.nodeType===Node.TEXT_NODE)t?(i.__polymerTextContent__=i.textContent,i.textContent=""):i.textContent=i.__polymerTextContent__;else if("slot"===i.localName)if(t)i.__polymerReplaced__=document.createComment("hidden-slot"),Ge(Ge(i).parentNode).replaceChild(i.__polymerReplaced__,i);else{const t=i.__polymerReplaced__;t&&Ge(Ge(t).parentNode).replaceChild(i,t)}else i.style&&(t?(i.__polymerDisplay__=i.style.display,i.style.display="none"):i.style.display=i.__polymerDisplay__);i.__hideTemplateChildren__=t,i._showHideChildren&&i._showHideChildren(t)}}class Zn extends Xn{constructor(t){super(),this._configureProperties(t),this.root=this._stampTemplate(this.__dataHost);let e=[];this.children=e;for(let t=this.root.firstChild;t;t=t.nextSibling)e.push(t),t.__templatizeInstance=this;this.__templatizeOwner&&this.__templatizeOwner.__hideTemplateChildren__&&this._showHideChildren(!0);let s=this.__templatizeOptions;(t&&s.instanceProps||!s.instanceProps)&&this._enableProperties()}_configureProperties(t){if(this.__templatizeOptions.forwardHostProp)for(let t in this.__hostProps)this._setPendingProperty(t,this.__dataHost["_host_"+t]);for(let e in t)this._setPendingProperty(e,t[e])}forwardHostProp(t,e){this._setPendingPropertyOrPath(t,e,!1,!0)&&this.__dataHost._enqueueClient(this)}_addEventListenerToNode(t,e,s){if(this._methodHost&&this.__templatizeOptions.parentModel)this._methodHost._addEventListenerToNode(t,e,(t=>{t.model=this,s(t)}));else{let i=this.__dataHost.__dataHost;i&&i._addEventListenerToNode(t,e,s)}}_showHideChildren(t){Kn(t,this.children)}_setUnmanagedPropertyToNode(t,e,s){t.__hideTemplateChildren__&&t.nodeType==Node.TEXT_NODE&&"textContent"==e?t.__polymerTextContent__=s:super._setUnmanagedPropertyToNode(t,e,s)}get parentModel(){let t=this.__parentModel;if(!t){let e;t=this;do{t=t.__dataHost.__dataHost}while((e=t.__templatizeOptions)&&!e.parentModel);this.__parentModel=t}return t}dispatchEvent(t){return!0}}Zn.prototype.__dataHost,Zn.prototype.__templatizeOptions,Zn.prototype._methodHost,Zn.prototype.__templatizeOwner,Zn.prototype.__hostProps;const Qn=Un(Zn);function tr(t){let e=t.__dataHost;return e&&e._methodHost||e}function er(t,e){return function(t,s,i){e.call(t.__templatizeOwner,s.substring("_host_".length),i[s])}}function sr(t,e){return function(t,s,i){e.call(t.__templatizeOwner,t,s,i[s])}}function ir(t,e,s){if(ye&&!tr(t))throw new Error("strictTemplatePolicy: template owner not trusted");if(s=s||{},t.__templatizeOwner)throw new Error("A <template> can only be templatized once");t.__templatizeOwner=e;let i=(e?e.constructor:Zn)._parseTemplate(t),n=i.templatizeInstanceClass;n||(n=function(t,e,s){let i=s.mutableData?Qn:Zn;ir.mixin&&(i=ir.mixin(i));let n=class extends i{};return n.prototype.__templatizeOptions=s,n.prototype._bindTemplate(t),function(t,e,s,i){let n=s.hostProps||{};for(let e in i.instanceProps){delete n[e];let s=i.notifyInstanceProp;s&&t.prototype._addPropertyEffect(e,t.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:sr(0,s)})}if(i.forwardHostProp&&e.__dataHost)for(let e in n)s.hasHostProps||(s.hasHostProps=!0),t.prototype._addPropertyEffect(e,t.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:function(t,e,s){t.__dataHost._setPendingPropertyOrPath("_host_"+e,s[e],!0,!0)}})}(n,t,e,s),n}(t,i,s),i.templatizeInstanceClass=n);const r=tr(t);!function(t,e,s,i){let n=s.forwardHostProp;if(n&&e.hasHostProps){const r="template"==t.localName;let o=e.templatizeTemplateClass;if(!o){if(r){let t=s.mutableData?Jn:Wn;class i extends t{}o=e.templatizeTemplateClass=i}else{const s=t.constructor;class i extends s{}o=e.templatizeTemplateClass=i}let a=e.hostProps;for(let t in a)o.prototype._addPropertyEffect("_host_"+t,o.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,{fn:er(0,n)}),o.prototype._createNotifyingProperty("_host_"+t);we&&i&&function(t,e,s){const i=s.constructor._properties,{propertyEffects:n}=t,{instanceProps:r}=e;for(let t in n)if(!(i[t]||r&&r[t])){const e=n[t];for(let s=0;s<e.length;s++){const{part:i}=e[s].info;if(!i.signature||!i.signature.static){console.warn(`Property '${t}' used in template but not declared in 'properties'; attribute will not be observed.`);break}}}}(e,s,i)}if(t.__dataProto&&Object.assign(t.__data,t.__dataProto),r)!function(t,e){Yn=t,Object.setPrototypeOf(t,e.prototype),new e,Yn=null}(t,o),t.__dataTemp={},t.__dataPending=null,t.__dataOld=null,t._enableProperties();else{Object.setPrototypeOf(t,o.prototype);const s=e.hostProps;for(let e in s)if(e="_host_"+e,e in t){const s=t[e];delete t[e],t.__data[e]=s}}}}(t,i,s,r);let o=class extends n{};return o.prototype._methodHost=r,o.prototype.__dataHost=t,o.prototype.__templatizeOwner=e,o.prototype.__hostProps=i.hostProps,o=o,o}let nr=!1;function rr(){if(ze&&!_e){if(!nr){nr=!0;const t=document.createElement("style");t.textContent="dom-bind,dom-if,dom-repeat{display:none;}",document.head.appendChild(t)}return!0}return!1}const or=Zi(qn(ai(HTMLElement)));customElements.define("dom-bind",class extends or{static get observedAttributes(){return["mutable-data"]}constructor(){if(super(),ye)throw new Error("strictTemplatePolicy: dom-bind not allowed");this.root=null,this.$=null,this.__children=null}attributeChangedCallback(t,e,s,i){this.mutableData=!0}connectedCallback(){rr()||(this.style.display="none"),this.render()}disconnectedCallback(){this.__removeChildren()}__insertChildren(){Ge(Ge(this).parentNode).insertBefore(this.root,this)}__removeChildren(){if(this.__children)for(let t=0;t<this.__children.length;t++)this.root.appendChild(this.__children[t])}render(){let t;if(!this.__children){if(t=t||this.querySelector("template"),!t){let e=new MutationObserver((()=>{if(t=this.querySelector("template"),!t)throw new Error("dom-bind requires a <template> child");e.disconnect(),this.render()}));return void e.observe(this,{childList:!0})}this.root=this._stampTemplate(t),this.$=this.root.$,this.__children=[];for(let t=this.root.firstChild;t;t=t.nextSibling)this.__children[this.__children.length]=t;this._enableProperties()}this.__insertChildren(),this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}))}});class ar{constructor(t){this.value=t.toString()}toString(){return this.value}}const lr=function(t,...e){const s=document.createElement("template");return s.innerHTML=e.reduce(((e,s,i)=>e+function(t){if(t instanceof HTMLTemplateElement)return t.innerHTML;if(t instanceof ar)return function(t){if(t instanceof ar)return t.value;throw new Error(`non-literal value passed to Polymer's htmlLiteral function: ${t}`)}(t);throw new Error(`non-template value passed to Polymer's html function: ${t}`)}(s)+t[i+1]),t[0]),s},hr=ui(HTMLElement),cr=qn(hr);class dr extends cr{static get is(){return"dom-repeat"}static get template(){return null}static get properties(){return{items:{type:Array},as:{type:String,value:"item"},indexAs:{type:String,value:"index"},itemsIndexAs:{type:String,value:"itemsIndex"},sort:{type:Function,observer:"__sortChanged"},filter:{type:Function,observer:"__filterChanged"},observe:{type:String,observer:"__observeChanged"},delay:Number,renderedItemCount:{type:Number,notify:!Pe,readOnly:!0},initialCount:{type:Number},targetFramerate:{type:Number,value:20},_targetFrameTime:{type:Number,computed:"__computeFrameTime(targetFramerate)"},notifyDomChange:{type:Boolean},reuseChunkedInstances:{type:Boolean}}}static get observers(){return["__itemsChanged(items.*)"]}constructor(){super(),this.__instances=[],this.__renderDebouncer=null,this.__itemsIdxToInstIdx={},this.__chunkCount=null,this.__renderStartTime=null,this.__itemsArrayChanged=!1,this.__shouldMeasureChunk=!1,this.__shouldContinueChunking=!1,this.__chunkingId=0,this.__sortFn=null,this.__filterFn=null,this.__observePaths=null,this.__ctor=null,this.__isDetached=!0,this.template=null,this._templateInfo}disconnectedCallback(){super.disconnectedCallback(),this.__isDetached=!0;for(let t=0;t<this.__instances.length;t++)this.__detachInstance(t)}connectedCallback(){if(super.connectedCallback(),rr()||(this.style.display="none"),this.__isDetached){this.__isDetached=!1;let t=Ge(Ge(this).parentNode);for(let e=0;e<this.__instances.length;e++)this.__attachInstance(e,t)}}__ensureTemplatized(){if(!this.__ctor){const t=this;let e=this.template=t._templateInfo?t:this.querySelector("template");if(!e){let t=new MutationObserver((()=>{if(!this.querySelector("template"))throw new Error("dom-repeat requires a <template> child");t.disconnect(),this.__render()}));return t.observe(this,{childList:!0}),!1}let s={};s[this.as]=!0,s[this.indexAs]=!0,s[this.itemsIndexAs]=!0,this.__ctor=ir(e,this,{mutableData:this.mutableData,parentModel:!0,instanceProps:s,forwardHostProp:function(t,e){let s=this.__instances;for(let i,n=0;n<s.length&&(i=s[n]);n++)i.forwardHostProp(t,e)},notifyInstanceProp:function(t,e,s){if((i=this.as)===(n=e)||Xe(i,n)||Ke(i,n)){let i=t[this.itemsIndexAs];e==this.as&&(this.items[i]=s);let n=Ze(this.as,`${JSCompiler_renameProperty("items",this)}.${i}`,e);this.notifyPath(n,s)}var i,n}})}return!0}__getMethodHost(){return this.__dataHost._methodHost||this.__dataHost}__functionFromPropertyValue(t){if("string"==typeof t){let e=t,s=this.__getMethodHost();return function(){return s[e].apply(s,arguments)}}return t}__sortChanged(t){this.__sortFn=this.__functionFromPropertyValue(t),this.items&&this.__debounceRender(this.__render)}__filterChanged(t){this.__filterFn=this.__functionFromPropertyValue(t),this.items&&this.__debounceRender(this.__render)}__computeFrameTime(t){return Math.ceil(1e3/t)}__observeChanged(){this.__observePaths=this.observe&&this.observe.replace(".*",".").split(" ")}__handleObservedPaths(t){if(this.__sortFn||this.__filterFn)if(t){if(this.__observePaths){let e=this.__observePaths;for(let s=0;s<e.length;s++)0===t.indexOf(e[s])&&this.__debounceRender(this.__render,this.delay)}}else this.__debounceRender(this.__render,this.delay)}__itemsChanged(t){this.items&&!Array.isArray(this.items)&&console.warn("dom-repeat expected array for `items`, found",this.items),this.__handleItemPath(t.path,t.value)||("items"===t.path&&(this.__itemsArrayChanged=!0),this.__debounceRender(this.__render))}__debounceRender(t,e=0){this.__renderDebouncer=_i.debounce(this.__renderDebouncer,e>0?_s.after(e):ms,t.bind(this)),fi(this.__renderDebouncer)}render(){this.__debounceRender(this.__render),gn()}__render(){if(!this.__ensureTemplatized())return;let t=this.items||[];const e=this.__sortAndFilterItems(t),s=this.__calculateLimit(e.length);this.__updateInstances(t,s,e),this.initialCount&&(this.__shouldMeasureChunk||this.__shouldContinueChunking)&&(cancelAnimationFrame(this.__chunkingId),this.__chunkingId=requestAnimationFrame((()=>this.__continueChunking()))),this._setRenderedItemCount(this.__instances.length),Pe&&!this.notifyDomChange||this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}))}__sortAndFilterItems(t){let e=new Array(t.length);for(let s=0;s<t.length;s++)e[s]=s;return this.__filterFn&&(e=e.filter(((e,s,i)=>this.__filterFn(t[e],s,i)))),this.__sortFn&&e.sort(((e,s)=>this.__sortFn(t[e],t[s]))),e}__calculateLimit(t){let e=t;const s=this.__instances.length;if(this.initialCount){let i;!this.__chunkCount||this.__itemsArrayChanged&&!this.reuseChunkedInstances?(e=Math.min(t,this.initialCount),i=Math.max(e-s,0),this.__chunkCount=i||1):(i=Math.min(Math.max(t-s,0),this.__chunkCount),e=Math.min(s+i,t)),this.__shouldMeasureChunk=i===this.__chunkCount,this.__shouldContinueChunking=e<t,this.__renderStartTime=performance.now()}return this.__itemsArrayChanged=!1,e}__continueChunking(){if(this.__shouldMeasureChunk){const t=performance.now()-this.__renderStartTime,e=this._targetFrameTime/t;this.__chunkCount=Math.round(this.__chunkCount*e)||1}this.__shouldContinueChunking&&this.__debounceRender(this.__render)}__updateInstances(t,e,s){const i=this.__itemsIdxToInstIdx={};let n;for(n=0;n<e;n++){let e=this.__instances[n],r=s[n],o=t[r];i[r]=n,e?(e._setPendingProperty(this.as,o),e._setPendingProperty(this.indexAs,n),e._setPendingProperty(this.itemsIndexAs,r),e._flushProperties()):this.__insertInstance(o,n,r)}for(let t=this.__instances.length-1;t>=n;t--)this.__detachAndRemoveInstance(t)}__detachInstance(t){let e=this.__instances[t];const s=Ge(e.root);for(let t=0;t<e.children.length;t++){let i=e.children[t];s.appendChild(i)}return e}__attachInstance(t,e){let s=this.__instances[t];e.insertBefore(s.root,this)}__detachAndRemoveInstance(t){this.__detachInstance(t),this.__instances.splice(t,1)}__stampInstance(t,e,s){let i={};return i[this.as]=t,i[this.indexAs]=e,i[this.itemsIndexAs]=s,new this.__ctor(i)}__insertInstance(t,e,s){const i=this.__stampInstance(t,e,s);let n=this.__instances[e+1],r=n?n.children[0]:this;return Ge(Ge(this).parentNode).insertBefore(i.root,r),this.__instances[e]=i,i}_showHideChildren(t){for(let e=0;e<this.__instances.length;e++)this.__instances[e]._showHideChildren(t)}__handleItemPath(t,e){let s=t.slice(6),i=s.indexOf("."),n=i<0?s:s.substring(0,i);if(n==parseInt(n,10)){let t=i<0?"":s.substring(i+1);this.__handleObservedPaths(t);let r=this.__itemsIdxToInstIdx[n],o=this.__instances[r];if(o){let s=this.as+(t?"."+t:"");o._setPendingPropertyOrPath(s,e,!1,!0),o._flushProperties()}return!0}}itemForElement(t){let e=this.modelForElement(t);return e&&e[this.as]}indexForElement(t){let e=this.modelForElement(t);return e&&e[this.indexAs]}modelForElement(t){return function(t,e){let s;for(;e;)if(s=e.__dataHost?e:e.__templatizeInstance){if(s.__dataHost==t)return s;e=s.__dataHost}else e=Ge(e).parentNode;return null}(this.template,t)}}customElements.define(dr.is,dr);class pr extends hr{static get is(){return"dom-if"}static get template(){return null}static get properties(){return{if:{type:Boolean,observer:"__debounceRender"},restamp:{type:Boolean,observer:"__debounceRender"},notifyDomChange:{type:Boolean}}}constructor(){super(),this.__renderDebouncer=null,this._lastIf=!1,this.__hideTemplateChildren__=!1,this.__template,this._templateInfo}__debounceRender(){this.__renderDebouncer=_i.debounce(this.__renderDebouncer,ms,(()=>this.__render())),fi(this.__renderDebouncer)}disconnectedCallback(){super.disconnectedCallback();const t=Ge(this).parentNode;t&&(t.nodeType!=Node.DOCUMENT_FRAGMENT_NODE||Ge(t).host)||this.__teardownInstance()}connectedCallback(){super.connectedCallback(),rr()||(this.style.display="none"),this.if&&this.__debounceRender()}__ensureTemplate(){if(!this.__template){const t=this;let e=t._templateInfo?t:Ge(t).querySelector("template");if(!e){let t=new MutationObserver((()=>{if(!Ge(this).querySelector("template"))throw new Error("dom-if requires a <template> child");t.disconnect(),this.__render()}));return t.observe(this,{childList:!0}),!1}this.__template=e}return!0}__ensureInstance(){let t=Ge(this).parentNode;if(this.__hasInstance()){let e=this.__getInstanceNodes();if(e&&e.length&&Ge(this).previousSibling!==e[e.length-1])for(let s,i=0;i<e.length&&(s=e[i]);i++)Ge(t).insertBefore(s,this)}else{if(!t)return!1;if(!this.__ensureTemplate())return!1;this.__createAndInsertInstance(t)}return!0}render(){gn()}__render(){if(this.if){if(!this.__ensureInstance())return}else this.restamp&&this.__teardownInstance();this._showHideChildren(),Pe&&!this.notifyDomChange||this.if==this._lastIf||(this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0})),this._lastIf=this.if)}__hasInstance(){}__getInstanceNodes(){}__createAndInsertInstance(t){}__teardownInstance(){}_showHideChildren(){}}const ur=He?class extends pr{constructor(){super(),this.__instance=null,this.__syncInfo=null}__hasInstance(){return Boolean(this.__instance)}__getInstanceNodes(){return this.__instance.templateInfo.childNodes}__createAndInsertInstance(t){const e=this.__dataHost||this;if(ye&&!this.__dataHost)throw new Error("strictTemplatePolicy: template owner not trusted");const s=e._bindTemplate(this.__template,!0);s.runEffects=(t,e,s)=>{let i=this.__syncInfo;if(this.if)i&&(this.__syncInfo=null,this._showHideChildren(),e=Object.assign(i.changedProps,e)),t(e,s);else if(this.__instance)if(i||(i=this.__syncInfo={runEffects:t,changedProps:{}}),s)for(const t in e){const e=Je(t);i.changedProps[e]=this.__dataHost[e]}else Object.assign(i.changedProps,e)},this.__instance=e._stampTemplate(this.__template,s),Ge(t).insertBefore(this.__instance,this)}__syncHostProperties(){const t=this.__syncInfo;t&&(this.__syncInfo=null,t.runEffects(t.changedProps,!1))}__teardownInstance(){const t=this.__dataHost||this;this.__instance&&(t._removeBoundDom(this.__instance),this.__instance=null,this.__syncInfo=null)}_showHideChildren(){const t=this.__hideTemplateChildren__||!this.if;this.__instance&&Boolean(this.__instance.__hidden)!==t&&(this.__instance.__hidden=t,Kn(t,this.__instance.templateInfo.childNodes)),t||this.__syncHostProperties()}}:class extends pr{constructor(){super(),this.__ctor=null,this.__instance=null,this.__invalidProps=null}__hasInstance(){return Boolean(this.__instance)}__getInstanceNodes(){return this.__instance.children}__createAndInsertInstance(t){this.__ctor||(this.__ctor=ir(this.__template,this,{mutableData:!0,forwardHostProp:function(t,e){this.__instance&&(this.if?this.__instance.forwardHostProp(t,e):(this.__invalidProps=this.__invalidProps||Object.create(null),this.__invalidProps[Je(t)]=!0))}})),this.__instance=new this.__ctor,Ge(t).insertBefore(this.__instance.root,this)}__teardownInstance(){if(this.__instance){let t=this.__instance.children;if(t&&t.length){let e=Ge(t[0]).parentNode;if(e){e=Ge(e);for(let s,i=0;i<t.length&&(s=t[i]);i++)e.removeChild(s)}}this.__invalidProps=null,this.__instance=null}}__syncHostProperties(){let t=this.__invalidProps;if(t){this.__invalidProps=null;for(let e in t)this.__instance._setPendingProperty(e,this.__dataHost[e]);this.__instance._flushProperties()}}_showHideChildren(){const t=this.__hideTemplateChildren__||!this.if;this.__instance&&Boolean(this.__instance.__hidden)!==t&&(this.__instance.__hidden=t,this.__instance._showHideChildren(t)),t||this.__syncHostProperties()}};customElements.define(ur.is,ur);let _r=Oe((t=>{let e=ui(t);return class extends e{static get properties(){return{items:{type:Array},multi:{type:Boolean,value:!1},selected:{type:Object,notify:!0},selectedItem:{type:Object,notify:!0},toggle:{type:Boolean,value:!1}}}static get observers(){return["__updateSelection(multi, items.*)"]}constructor(){super(),this.__lastItems=null,this.__lastMulti=null,this.__selectedMap=null}__updateSelection(t,e){let s=e.path;if(s==JSCompiler_renameProperty("items",this)){let s=e.base||[],i=this.__lastItems;if(t!==this.__lastMulti&&this.clearSelection(),i){let t=un(s,i);this.__applySplices(t)}this.__lastItems=s,this.__lastMulti=t}else if(e.path==`${JSCompiler_renameProperty("items",this)}.splices`)this.__applySplices(e.value.indexSplices);else{let t=s.slice(`${JSCompiler_renameProperty("items",this)}.`.length),e=parseInt(t,10);t.indexOf(".")<0&&t==e&&this.__deselectChangedIdx(e)}}__applySplices(t){let e=this.__selectedMap;for(let s=0;s<t.length;s++){let i=t[s];e.forEach(((t,s)=>{t<i.index||(t>=i.index+i.removed.length?e.set(s,t+i.addedCount-i.removed.length):e.set(s,-1))}));for(let t=0;t<i.addedCount;t++){let s=i.index+t;e.has(this.items[s])&&e.set(this.items[s],s)}}this.__updateLinks();let s=0;e.forEach(((t,i)=>{t<0?(this.multi?this.splice(JSCompiler_renameProperty("selected",this),s,1):this.selected=this.selectedItem=null,e.delete(i)):s++}))}__updateLinks(){if(this.__dataLinkedPaths={},this.multi){let t=0;this.__selectedMap.forEach((e=>{e>=0&&this.linkPaths(`${JSCompiler_renameProperty("items",this)}.${e}`,`${JSCompiler_renameProperty("selected",this)}.${t++}`)}))}else this.__selectedMap.forEach((t=>{this.linkPaths(JSCompiler_renameProperty("selected",this),`${JSCompiler_renameProperty("items",this)}.${t}`),this.linkPaths(JSCompiler_renameProperty("selectedItem",this),`${JSCompiler_renameProperty("items",this)}.${t}`)}))}clearSelection(){this.__dataLinkedPaths={},this.__selectedMap=new Map,this.selected=this.multi?[]:null,this.selectedItem=null}isSelected(t){return this.__selectedMap.has(t)}isIndexSelected(t){return this.isSelected(this.items[t])}__deselectChangedIdx(t){let e=this.__selectedIndexForItemIndex(t);if(e>=0){let t=0;this.__selectedMap.forEach(((s,i)=>{e==t++&&this.deselect(i)}))}}__selectedIndexForItemIndex(t){let e=this.__dataLinkedPaths[`${JSCompiler_renameProperty("items",this)}.${t}`];if(e)return parseInt(e.slice(`${JSCompiler_renameProperty("selected",this)}.`.length),10)}deselect(t){let e=this.__selectedMap.get(t);if(e>=0){let s;this.__selectedMap.delete(t),this.multi&&(s=this.__selectedIndexForItemIndex(e)),this.__updateLinks(),this.multi?this.splice(JSCompiler_renameProperty("selected",this),s,1):this.selected=this.selectedItem=null}}deselectIndex(t){this.deselect(this.items[t])}select(t){this.selectIndex(this.items.indexOf(t))}selectIndex(t){let e=this.items[t];this.isSelected(e)?this.toggle&&this.deselectIndex(t):(this.multi||this.__selectedMap.clear(),this.__selectedMap.set(e,t),this.__updateLinks(),this.multi?this.push(JSCompiler_renameProperty("selected",this),e):this.selected=this.selectedItem=e)}}}))(hr);class mr extends _r{static get is(){return"array-selector"}static get template(){return null}}customElements.define(mr.is,mr);const fr=new ne;window.ShadyCSS||(window.ShadyCSS={prepareTemplate(t,e,s){},prepareTemplateDom(t,e){},prepareTemplateStyles(t,e,s){},styleSubtree(t,e){fr.processStyles(),At(t,e)},styleElement(t){fr.processStyles()},styleDocument(t){fr.processStyles(),At(document.body,t)},getComputedStyleValue:(t,e)=>kt(t,e),flushCustomStyles(){},nativeCss:ct,nativeShadow:rt,cssBuild:at,disableRuntime:ht}),window.ShadyCSS.CustomStyleInterface=fr;const gr="include",vr=window.ShadyCSS.CustomStyleInterface;class yr extends HTMLElement{constructor(){super(),this._style=null,vr.addCustomStyle(this)}getStyle(){if(this._style)return this._style;const t=this.querySelector("style");if(!t)return null;this._style=t;const e=t.getAttribute(gr);return e&&(t.removeAttribute(gr),t.textContent=function(t){let e=t.trim().split(/\s+/),s="";for(let t=0;t<e.length;t++)s+=Ye(e[t]);return s}(e)+t.textContent),this.ownerDocument!==window.document&&window.document.head.appendChild(this),this._style}}let br;window.customElements.define("custom-style",yr),br=Un._mutablePropertyChange,Boolean;const zr=On(HTMLElement).prototype,wr=lr`
<custom-style>
  <style is="custom-style">
    [hidden] {
      display: none !important;
    }
  </style>
</custom-style>
<custom-style>
  <style is="custom-style">
    html {

      --layout: {
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
      };

      --layout-inline: {
        display: -ms-inline-flexbox;
        display: -webkit-inline-flex;
        display: inline-flex;
      };

      --layout-horizontal: {
        @apply --layout;

        -ms-flex-direction: row;
        -webkit-flex-direction: row;
        flex-direction: row;
      };

      --layout-horizontal-reverse: {
        @apply --layout;

        -ms-flex-direction: row-reverse;
        -webkit-flex-direction: row-reverse;
        flex-direction: row-reverse;
      };

      --layout-vertical: {
        @apply --layout;

        -ms-flex-direction: column;
        -webkit-flex-direction: column;
        flex-direction: column;
      };

      --layout-vertical-reverse: {
        @apply --layout;

        -ms-flex-direction: column-reverse;
        -webkit-flex-direction: column-reverse;
        flex-direction: column-reverse;
      };

      --layout-wrap: {
        -ms-flex-wrap: wrap;
        -webkit-flex-wrap: wrap;
        flex-wrap: wrap;
      };

      --layout-wrap-reverse: {
        -ms-flex-wrap: wrap-reverse;
        -webkit-flex-wrap: wrap-reverse;
        flex-wrap: wrap-reverse;
      };

      --layout-flex-auto: {
        -ms-flex: 1 1 auto;
        -webkit-flex: 1 1 auto;
        flex: 1 1 auto;
      };

      --layout-flex-none: {
        -ms-flex: none;
        -webkit-flex: none;
        flex: none;
      };

      --layout-flex: {
        -ms-flex: 1 1 0.000000001px;
        -webkit-flex: 1;
        flex: 1;
        -webkit-flex-basis: 0.000000001px;
        flex-basis: 0.000000001px;
      };

      --layout-flex-2: {
        -ms-flex: 2;
        -webkit-flex: 2;
        flex: 2;
      };

      --layout-flex-3: {
        -ms-flex: 3;
        -webkit-flex: 3;
        flex: 3;
      };

      --layout-flex-4: {
        -ms-flex: 4;
        -webkit-flex: 4;
        flex: 4;
      };

      --layout-flex-5: {
        -ms-flex: 5;
        -webkit-flex: 5;
        flex: 5;
      };

      --layout-flex-6: {
        -ms-flex: 6;
        -webkit-flex: 6;
        flex: 6;
      };

      --layout-flex-7: {
        -ms-flex: 7;
        -webkit-flex: 7;
        flex: 7;
      };

      --layout-flex-8: {
        -ms-flex: 8;
        -webkit-flex: 8;
        flex: 8;
      };

      --layout-flex-9: {
        -ms-flex: 9;
        -webkit-flex: 9;
        flex: 9;
      };

      --layout-flex-10: {
        -ms-flex: 10;
        -webkit-flex: 10;
        flex: 10;
      };

      --layout-flex-11: {
        -ms-flex: 11;
        -webkit-flex: 11;
        flex: 11;
      };

      --layout-flex-12: {
        -ms-flex: 12;
        -webkit-flex: 12;
        flex: 12;
      };

      /* alignment in cross axis */

      --layout-start: {
        -ms-flex-align: start;
        -webkit-align-items: flex-start;
        align-items: flex-start;
      };

      --layout-center: {
        -ms-flex-align: center;
        -webkit-align-items: center;
        align-items: center;
      };

      --layout-end: {
        -ms-flex-align: end;
        -webkit-align-items: flex-end;
        align-items: flex-end;
      };

      --layout-baseline: {
        -ms-flex-align: baseline;
        -webkit-align-items: baseline;
        align-items: baseline;
      };

      /* alignment in main axis */

      --layout-start-justified: {
        -ms-flex-pack: start;
        -webkit-justify-content: flex-start;
        justify-content: flex-start;
      };

      --layout-center-justified: {
        -ms-flex-pack: center;
        -webkit-justify-content: center;
        justify-content: center;
      };

      --layout-end-justified: {
        -ms-flex-pack: end;
        -webkit-justify-content: flex-end;
        justify-content: flex-end;
      };

      --layout-around-justified: {
        -ms-flex-pack: distribute;
        -webkit-justify-content: space-around;
        justify-content: space-around;
      };

      --layout-justified: {
        -ms-flex-pack: justify;
        -webkit-justify-content: space-between;
        justify-content: space-between;
      };

      --layout-center-center: {
        @apply --layout-center;
        @apply --layout-center-justified;
      };

      /* self alignment */

      --layout-self-start: {
        -ms-align-self: flex-start;
        -webkit-align-self: flex-start;
        align-self: flex-start;
      };

      --layout-self-center: {
        -ms-align-self: center;
        -webkit-align-self: center;
        align-self: center;
      };

      --layout-self-end: {
        -ms-align-self: flex-end;
        -webkit-align-self: flex-end;
        align-self: flex-end;
      };

      --layout-self-stretch: {
        -ms-align-self: stretch;
        -webkit-align-self: stretch;
        align-self: stretch;
      };

      --layout-self-baseline: {
        -ms-align-self: baseline;
        -webkit-align-self: baseline;
        align-self: baseline;
      };

      /* multi-line alignment in main axis */

      --layout-start-aligned: {
        -ms-flex-line-pack: start;  /* IE10 */
        -ms-align-content: flex-start;
        -webkit-align-content: flex-start;
        align-content: flex-start;
      };

      --layout-end-aligned: {
        -ms-flex-line-pack: end;  /* IE10 */
        -ms-align-content: flex-end;
        -webkit-align-content: flex-end;
        align-content: flex-end;
      };

      --layout-center-aligned: {
        -ms-flex-line-pack: center;  /* IE10 */
        -ms-align-content: center;
        -webkit-align-content: center;
        align-content: center;
      };

      --layout-between-aligned: {
        -ms-flex-line-pack: justify;  /* IE10 */
        -ms-align-content: space-between;
        -webkit-align-content: space-between;
        align-content: space-between;
      };

      --layout-around-aligned: {
        -ms-flex-line-pack: distribute;  /* IE10 */
        -ms-align-content: space-around;
        -webkit-align-content: space-around;
        align-content: space-around;
      };

      /*******************************
                Other Layout
      *******************************/

      --layout-block: {
        display: block;
      };

      --layout-invisible: {
        visibility: hidden !important;
      };

      --layout-relative: {
        position: relative;
      };

      --layout-fit: {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      };

      --layout-scroll: {
        -webkit-overflow-scrolling: touch;
        overflow: auto;
      };

      --layout-fullbleed: {
        margin: 0;
        height: 100vh;
      };

      /* fixed position */

      --layout-fixed-top: {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
      };

      --layout-fixed-right: {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
      };

      --layout-fixed-bottom: {
        position: fixed;
        right: 0;
        bottom: 0;
        left: 0;
      };

      --layout-fixed-left: {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
      };

    }
  </style>
</custom-style>`;wr.setAttribute("style","display: none;"),document.head.appendChild(wr.content);var Cr=document.createElement("style");Cr.textContent="[hidden] { display: none !important; }",document.head.appendChild(Cr);class Mr{constructor(t){Mr[" "](t),this.type=t&&t.type||"default",this.key=t&&t.key,t&&"value"in t&&(this.value=t.value)}get value(){var t=this.type,e=this.key;if(t&&e)return Mr.types[t]&&Mr.types[t][e]}set value(t){var e=this.type,s=this.key;e&&s&&(e=Mr.types[e]=Mr.types[e]||{},null==t?delete e[s]:e[s]=t)}get list(){if(this.type){var t=Mr.types[this.type];return t?Object.keys(t).map((function(t){return xr[this.type][t]}),this):[]}}byKey(t){return this.key=t,this.value}}Mr[" "]=function(){},Mr.types={};var xr=Mr.types;Bn({is:"iron-meta",properties:{type:{type:String,value:"default"},key:{type:String},value:{type:String,notify:!0},self:{type:Boolean,observer:"_selfChanged"},__meta:{type:Boolean,computed:"__computeMeta(type, key, value)"}},hostAttributes:{hidden:!0},__computeMeta:function(t,e,s){var i=new Mr({type:t,key:e});return void 0!==s&&s!==i.value?i.value=s:this.value!==i.value&&(this.value=i.value),i},get list(){return this.__meta&&this.__meta.list},_selfChanged:function(t){t&&(this.value=this)},byKey:function(t){return new Mr({type:this.type,key:t}).value}}),Bn({_template:lr`
    <style>
      :host {
        @apply --layout-inline;
        @apply --layout-center-center;
        position: relative;

        vertical-align: middle;

        fill: var(--iron-icon-fill-color, currentcolor);
        stroke: var(--iron-icon-stroke-color, none);

        width: var(--iron-icon-width, 24px);
        height: var(--iron-icon-height, 24px);
        @apply --iron-icon;
      }

      :host([hidden]) {
        display: none;
      }
    </style>
`,is:"iron-icon",properties:{icon:{type:String},theme:{type:String},src:{type:String},_meta:{value:zr.create("iron-meta",{type:"iconset"})}},observers:["_updateIcon(_meta, isAttached)","_updateIcon(theme, isAttached)","_srcChanged(src, isAttached)","_iconChanged(icon, isAttached)"],_DEFAULT_ICONSET:"icons",_iconChanged:function(t){var e=(t||"").split(":");this._iconName=e.pop(),this._iconsetName=e.pop()||this._DEFAULT_ICONSET,this._updateIcon()},_srcChanged:function(t){this._updateIcon()},_usesIconset:function(){return this.icon||!this.src},_updateIcon:function(){this._usesIconset()?(this._img&&this._img.parentNode&&xn(this.root).removeChild(this._img),""===this._iconName?this._iconset&&this._iconset.removeIcon(this):this._iconsetName&&this._meta&&(this._iconset=this._meta.byKey(this._iconsetName),this._iconset?(this._iconset.applyIcon(this,this._iconName,this.theme),this.unlisten(window,"iron-iconset-added","_updateIcon")):this.listen(window,"iron-iconset-added","_updateIcon"))):(this._iconset&&this._iconset.removeIcon(this),this._img||(this._img=document.createElement("img"),this._img.style.width="100%",this._img.style.height="100%",this._img.draggable=!1),this._img.src=this.src,xn(this.root).appendChild(this._img))}}),Bn({is:"iron-iconset-svg",properties:{name:{type:String,observer:"_nameChanged"},size:{type:Number,value:24},rtlMirroring:{type:Boolean,value:!1},useGlobalRtlAttribute:{type:Boolean,value:!1}},created:function(){this._meta=new Mr({type:"iconset",key:null,value:null})},attached:function(){this.style.display="none"},getIconNames:function(){return this._icons=this._createIconMap(),Object.keys(this._icons).map((function(t){return this.name+":"+t}),this)},applyIcon:function(t,e){this.removeIcon(t);var s=this._cloneIcon(e,this.rtlMirroring&&this._targetIsRTL(t));if(s){var i=xn(t.root||t);return i.insertBefore(s,i.childNodes[0]),t._svgIcon=s}return null},removeIcon:function(t){t._svgIcon&&(xn(t.root||t).removeChild(t._svgIcon),t._svgIcon=null)},_targetIsRTL:function(t){if(null==this.__targetIsRTL)if(this.useGlobalRtlAttribute){var e=document.body&&document.body.hasAttribute("dir")?document.body:document.documentElement;this.__targetIsRTL="rtl"===e.getAttribute("dir")}else t&&t.nodeType!==Node.ELEMENT_NODE&&(t=t.host),this.__targetIsRTL=t&&"rtl"===window.getComputedStyle(t).direction;return this.__targetIsRTL},_nameChanged:function(){this._meta.value=null,this._meta.key=this.name,this._meta.value=this,this.async((function(){this.fire("iron-iconset-added",this,{node:window})}))},_createIconMap:function(){var t=Object.create(null);return xn(this).querySelectorAll("[id]").forEach((function(e){t[e.id]=e})),t},_cloneIcon:function(t,e){return this._icons=this._icons||this._createIconMap(),this._prepareSvgClone(this._icons[t],this.size,e)},_prepareSvgClone:function(t,e,s){if(t){var i=t.cloneNode(!0),n=document.createElementNS("http://www.w3.org/2000/svg","svg"),r=i.getAttribute("viewBox")||"0 0 "+e+" "+e,o="pointer-events: none; display: block; width: 100%; height: 100%;";return s&&i.hasAttribute("mirror-in-rtl")&&(o+="-webkit-transform:scale(-1,1);transform:scale(-1,1);transform-origin:center;"),n.setAttribute("viewBox",r),n.setAttribute("preserveAspectRatio","xMidYMid meet"),n.setAttribute("focusable","false"),n.style.cssText=o,n.appendChild(i).removeAttribute("id"),n}return null}});const Sr=lr`<iron-iconset-svg name="icons" size="24">
<svg><defs>
<g id="3d-rotation"><path d="M7.52 21.48C4.25 19.94 1.91 16.76 1.55 13H.05C.56 19.16 5.71 24 12 24l.66-.03-3.81-3.81-1.33 1.32zm.89-6.52c-.19 0-.37-.03-.52-.08-.16-.06-.29-.13-.4-.24-.11-.1-.2-.22-.26-.37-.06-.14-.09-.3-.09-.47h-1.3c0 .36.07.68.21.95.14.27.33.5.56.69.24.18.51.32.82.41.3.1.62.15.96.15.37 0 .72-.05 1.03-.15.32-.1.6-.25.83-.44s.42-.43.55-.72c.13-.29.2-.61.2-.97 0-.19-.02-.38-.07-.56-.05-.18-.12-.35-.23-.51-.1-.16-.24-.3-.4-.43-.17-.13-.37-.23-.61-.31.2-.09.37-.2.52-.33.15-.13.27-.27.37-.42.1-.15.17-.3.22-.46.05-.16.07-.32.07-.48 0-.36-.06-.68-.18-.96-.12-.28-.29-.51-.51-.69-.2-.19-.47-.33-.77-.43C9.1 8.05 8.76 8 8.39 8c-.36 0-.69.05-1 .16-.3.11-.57.26-.79.45-.21.19-.38.41-.51.67-.12.26-.18.54-.18.85h1.3c0-.17.03-.32.09-.45s.14-.25.25-.34c.11-.09.23-.17.38-.22.15-.05.3-.08.48-.08.4 0 .7.1.89.31.19.2.29.49.29.86 0 .18-.03.34-.08.49-.05.15-.14.27-.25.37-.11.1-.25.18-.41.24-.16.06-.36.09-.58.09H7.5v1.03h.77c.22 0 .42.02.6.07s.33.13.45.23c.12.11.22.24.29.4.07.16.1.35.1.57 0 .41-.12.72-.35.93-.23.23-.55.33-.95.33zm8.55-5.92c-.32-.33-.7-.59-1.14-.77-.43-.18-.92-.27-1.46-.27H12v8h2.3c.55 0 1.06-.09 1.51-.27.45-.18.84-.43 1.16-.76.32-.33.57-.73.74-1.19.17-.47.26-.99.26-1.57v-.4c0-.58-.09-1.1-.26-1.57-.18-.47-.43-.87-.75-1.2zm-.39 3.16c0 .42-.05.79-.14 1.13-.1.33-.24.62-.43.85-.19.23-.43.41-.71.53-.29.12-.62.18-.99.18h-.91V9.12h.97c.72 0 1.27.23 1.64.69.38.46.57 1.12.57 1.99v.4zM12 0l-.66.03 3.81 3.81 1.33-1.33c3.27 1.55 5.61 4.72 5.96 8.48h1.5C23.44 4.84 18.29 0 12 0z"></path></g>
<g id="accessibility"><path d="M12 2c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm9 7h-6v13h-2v-6h-2v6H9V9H3V7h18v2z"></path></g>
<g id="accessible"><circle cx="12" cy="4" r="2"></circle><path d="M19 13v-2c-1.54.02-3.09-.75-4.07-1.83l-1.29-1.43c-.17-.19-.38-.34-.61-.45-.01 0-.01-.01-.02-.01H13c-.35-.2-.75-.3-1.19-.26C10.76 7.11 10 8.04 10 9.09V15c0 1.1.9 2 2 2h5v5h2v-5.5c0-1.1-.9-2-2-2h-3v-3.45c1.29 1.07 3.25 1.94 5 1.95zm-6.17 5c-.41 1.16-1.52 2-2.83 2-1.66 0-3-1.34-3-3 0-1.31.84-2.41 2-2.83V12.1c-2.28.46-4 2.48-4 4.9 0 2.76 2.24 5 5 5 2.42 0 4.44-1.72 4.9-4h-2.07z"></path></g>
<g id="account-balance"><path d="M4 10v7h3v-7H4zm6 0v7h3v-7h-3zM2 22h19v-3H2v3zm14-12v7h3v-7h-3zm-4.5-9L2 6v2h19V6l-9.5-5z"></path></g>
<g id="account-balance-wallet"><path d="M21 18v1c0 1.1-.9 2-2 2H5c-1.11 0-2-.9-2-2V5c0-1.1.89-2 2-2h14c1.1 0 2 .9 2 2v1h-9c-1.11 0-2 .9-2 2v8c0 1.1.89 2 2 2h9zm-9-2h10V8H12v8zm4-2.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"></path></g>
<g id="account-box"><path d="M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z"></path></g>
<g id="account-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"></path></g>
<g id="add"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"></path></g>
<g id="add-alert"><path d="M10.01 21.01c0 1.1.89 1.99 1.99 1.99s1.99-.89 1.99-1.99h-3.98zm8.87-4.19V11c0-3.25-2.25-5.97-5.29-6.69v-.72C13.59 2.71 12.88 2 12 2s-1.59.71-1.59 1.59v.72C7.37 5.03 5.12 7.75 5.12 11v5.82L3 18.94V20h18v-1.06l-2.12-2.12zM16 13.01h-3v3h-2v-3H8V11h3V8h2v3h3v2.01z"></path></g>
<g id="add-box"><path d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"></path></g>
<g id="add-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"></path></g>
<g id="add-circle-outline"><path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path></g>
<g id="add-shopping-cart"><path d="M11 9h2V6h3V4h-3V1h-2v3H8v2h3v3zm-4 9c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zm10 0c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2zm-9.83-3.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.86-7.01L19.42 4h-.01l-1.1 2-2.76 5H8.53l-.13-.27L6.16 6l-.95-2-.94-2H1v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.13 0-.25-.11-.25-.25z"></path></g>
<g id="alarm"><path d="M22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM12.5 8H11v6l4.75 2.85.75-1.23-4-2.37V8zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z"></path></g>
<g id="alarm-add"><path d="M7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm1-11h-2v3H8v2h3v3h2v-3h3v-2h-3V9z"></path></g>
<g id="alarm-off"><path d="M12 6c3.87 0 7 3.13 7 7 0 .84-.16 1.65-.43 2.4l1.52 1.52c.58-1.19.91-2.51.91-3.92 0-4.97-4.03-9-9-9-1.41 0-2.73.33-3.92.91L9.6 6.43C10.35 6.16 11.16 6 12 6zm10-.28l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM2.92 2.29L1.65 3.57 2.98 4.9l-1.11.93 1.42 1.42 1.11-.94.8.8C3.83 8.69 3 10.75 3 13c0 4.97 4.02 9 9 9 2.25 0 4.31-.83 5.89-2.2l2.2 2.2 1.27-1.27L3.89 3.27l-.97-.98zm13.55 16.1C15.26 19.39 13.7 20 12 20c-3.87 0-7-3.13-7-7 0-1.7.61-3.26 1.61-4.47l9.86 9.86zM8.02 3.28L6.6 1.86l-.86.71 1.42 1.42.86-.71z"></path></g>
<g id="alarm-on"><path d="M22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm-1.46-5.47L8.41 12.4l-1.06 1.06 3.18 3.18 6-6-1.06-1.06-4.93 4.95z"></path></g>
<g id="all-out"><path d="M16.21 4.16l4 4v-4zm4 12l-4 4h4zm-12 4l-4-4v4zm-4-12l4-4h-4zm12.95-.95c-2.73-2.73-7.17-2.73-9.9 0s-2.73 7.17 0 9.9 7.17 2.73 9.9 0 2.73-7.16 0-9.9zm-1.1 8.8c-2.13 2.13-5.57 2.13-7.7 0s-2.13-5.57 0-7.7 5.57-2.13 7.7 0 2.13 5.57 0 7.7z"></path></g>
<g id="android"><path d="M6 18c0 .55.45 1 1 1h1v3.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5V19h2v3.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5V19h1c.55 0 1-.45 1-1V8H6v10zM3.5 8C2.67 8 2 8.67 2 9.5v7c0 .83.67 1.5 1.5 1.5S5 17.33 5 16.5v-7C5 8.67 4.33 8 3.5 8zm17 0c-.83 0-1.5.67-1.5 1.5v7c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5v-7c0-.83-.67-1.5-1.5-1.5zm-4.97-5.84l1.3-1.3c.2-.2.2-.51 0-.71-.2-.2-.51-.2-.71 0l-1.48 1.48C13.85 1.23 12.95 1 12 1c-.96 0-1.86.23-2.66.63L7.85.15c-.2-.2-.51-.2-.71 0-.2.2-.2.51 0 .71l1.31 1.31C6.97 3.26 6 5.01 6 7h12c0-1.99-.97-3.75-2.47-4.84zM10 5H9V4h1v1zm5 0h-1V4h1v1z"></path></g>
<g id="announcement"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 9h-2V5h2v6zm0 4h-2v-2h2v2z"></path></g>
<g id="apps"><path d="M4 8h4V4H4v4zm6 12h4v-4h-4v4zm-6 0h4v-4H4v4zm0-6h4v-4H4v4zm6 0h4v-4h-4v4zm6-10v4h4V4h-4zm-6 4h4V4h-4v4zm6 6h4v-4h-4v4zm0 6h4v-4h-4v4z"></path></g>
<g id="archive"><path d="M20.54 5.23l-1.39-1.68C18.88 3.21 18.47 3 18 3H6c-.47 0-.88.21-1.16.55L3.46 5.23C3.17 5.57 3 6.02 3 6.5V19c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V6.5c0-.48-.17-.93-.46-1.27zM12 17.5L6.5 12H10v-2h4v2h3.5L12 17.5zM5.12 5l.81-1h12l.94 1H5.12z"></path></g>
<g id="arrow-back"><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"></path></g>
<g id="arrow-downward"><path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"></path></g>
<g id="arrow-drop-down"><path d="M7 10l5 5 5-5z"></path></g>
<g id="arrow-drop-down-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 12l-4-4h8l-4 4z"></path></g>
<g id="arrow-drop-up"><path d="M7 14l5-5 5 5z"></path></g>
<g id="arrow-forward"><path d="M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z"></path></g>
<g id="arrow-upward"><path d="M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"></path></g>
<g id="aspect-ratio"><path d="M19 12h-2v3h-3v2h5v-5zM7 9h3V7H5v5h2V9zm14-6H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02z"></path></g>
<g id="assessment"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path></g>
<g id="assignment"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"></path></g>
<g id="assignment-ind"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm0 4c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H6v-1.4c0-2 4-3.1 6-3.1s6 1.1 6 3.1V19z"></path></g>
<g id="assignment-late"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-6 15h-2v-2h2v2zm0-4h-2V8h2v6zm-1-9c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z"></path></g>
<g id="assignment-return"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm4 12h-4v3l-5-5 5-5v3h4v4z"></path></g>
<g id="assignment-returned"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm0 15l-5-5h3V9h4v4h3l-5 5z"></path></g>
<g id="assignment-turned-in"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm-2 14l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z"></path></g>
<g id="attachment"><path d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5C8.12 15 7 13.88 7 12.5S8.12 10 9.5 10H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></g>
<g id="autorenew"><path d="M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6zm6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26z"></path></g>
<g id="backspace"><path d="M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.9.89 1.59.89h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-3 12.59L17.59 17 14 13.41 10.41 17 9 15.59 12.59 12 9 8.41 10.41 7 14 10.59 17.59 7 19 8.41 15.41 12 19 15.59z"></path></g>
<g id="backup"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z"></path></g>
<g id="block"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM4 12c0-4.42 3.58-8 8-8 1.85 0 3.55.63 4.9 1.69L5.69 16.9C4.63 15.55 4 13.85 4 12zm8 8c-1.85 0-3.55-.63-4.9-1.69L18.31 7.1C19.37 8.45 20 10.15 20 12c0 4.42-3.58 8-8 8z"></path></g>
<g id="book"><path d="M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4z"></path></g>
<g id="bookmark"><path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z"></path></g>
<g id="bookmark-border"><path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2zm0 15l-5-2.18L7 18V5h10v13z"></path></g>
<g id="bug-report"><path d="M20 8h-2.81c-.45-.78-1.07-1.45-1.82-1.96L17 4.41 15.59 3l-2.17 2.17C12.96 5.06 12.49 5 12 5c-.49 0-.96.06-1.41.17L8.41 3 7 4.41l1.62 1.63C7.88 6.55 7.26 7.22 6.81 8H4v2h2.09c-.05.33-.09.66-.09 1v1H4v2h2v1c0 .34.04.67.09 1H4v2h2.81c1.04 1.79 2.97 3 5.19 3s4.15-1.21 5.19-3H20v-2h-2.09c.05-.33.09-.66.09-1v-1h2v-2h-2v-1c0-.34-.04-.67-.09-1H20V8zm-6 8h-4v-2h4v2zm0-4h-4v-2h4v2z"></path></g>
<g id="build"><path d="M22.7 19l-9.1-9.1c.9-2.3.4-5-1.5-6.9-2-2-5-2.4-7.4-1.3L9 6 6 9 1.6 4.7C.4 7.1.9 10.1 2.9 12.1c1.9 1.9 4.6 2.4 6.9 1.5l9.1 9.1c.4.4 1 .4 1.4 0l2.3-2.3c.5-.4.5-1.1.1-1.4z"></path></g>
<g id="cached"><path d="M19 8l-4 4h3c0 3.31-2.69 6-6 6-1.01 0-1.97-.25-2.8-.7l-1.46 1.46C8.97 19.54 10.43 20 12 20c4.42 0 8-3.58 8-8h3l-4-4zM6 12c0-3.31 2.69-6 6-6 1.01 0 1.97.25 2.8.7l1.46-1.46C15.03 4.46 13.57 4 12 4c-4.42 0-8 3.58-8 8H1l4 4 4-4H6z"></path></g>
<g id="camera-enhance"><path d="M9 3L7.17 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2h-3.17L15 3H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-1l1.25-2.75L16 13l-2.75-1.25L12 9l-1.25 2.75L8 13l2.75 1.25z"></path></g>
<g id="cancel"><path d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"></path></g>
<g id="card-giftcard"><path d="M20 6h-2.18c.11-.31.18-.65.18-1 0-1.66-1.34-3-3-3-1.05 0-1.96.54-2.5 1.35l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z"></path></g>
<g id="card-membership"><path d="M20 2H4c-1.11 0-2 .89-2 2v11c0 1.11.89 2 2 2h4v5l4-2 4 2v-5h4c1.11 0 2-.89 2-2V4c0-1.11-.89-2-2-2zm0 13H4v-2h16v2zm0-5H4V4h16v6z"></path></g>
<g id="card-travel"><path d="M20 6h-3V4c0-1.11-.89-2-2-2H9c-1.11 0-2 .89-2 2v2H4c-1.11 0-2 .89-2 2v11c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zM9 4h6v2H9V4zm11 15H4v-2h16v2zm0-5H4V8h3v2h2V8h6v2h2V8h3v6z"></path></g>
<g id="change-history"><path d="M12 7.77L18.39 18H5.61L12 7.77M12 4L2 20h20L12 4z"></path></g>
<g id="check"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"></path></g>
<g id="check-box"><path d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path></g>
<g id="check-box-outline-blank"><path d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"></path></g>
<g id="check-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path></g>
<g id="chevron-left"><path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"></path></g>
<g id="chevron-right"><path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path></g>
<g id="chrome-reader-mode"><path d="M13 12h7v1.5h-7zm0-2.5h7V11h-7zm0 5h7V16h-7zM21 4H3c-1.1 0-2 .9-2 2v13c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 15h-9V6h9v13z"></path></g>
<g id="class"><path d="M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4z"></path></g>
<g id="clear"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path></g>
<g id="close"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path></g>
<g id="cloud"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96z"></path></g>
<g id="cloud-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm4.5 14H8c-1.66 0-3-1.34-3-3s1.34-3 3-3l.14.01C8.58 8.28 10.13 7 12 7c2.21 0 4 1.79 4 4h.5c1.38 0 2.5 1.12 2.5 2.5S17.88 16 16.5 16z"></path></g>
<g id="cloud-done"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM10 17l-3.5-3.5 1.41-1.41L10 14.17 15.18 9l1.41 1.41L10 17z"></path></g>
<g id="cloud-download"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM17 13l-5 5-5-5h3V9h4v4h3z"></path></g>
<g id="cloud-off"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4c-1.48 0-2.85.43-4.01 1.17l1.46 1.46C10.21 6.23 11.08 6 12 6c3.04 0 5.5 2.46 5.5 5.5v.5H19c1.66 0 3 1.34 3 3 0 1.13-.64 2.11-1.56 2.62l1.45 1.45C23.16 18.16 24 16.68 24 15c0-2.64-2.05-4.78-4.65-4.96zM3 5.27l2.75 2.74C2.56 8.15 0 10.77 0 14c0 3.31 2.69 6 6 6h11.73l2 2L21 20.73 4.27 4 3 5.27zM7.73 10l8 8H6c-2.21 0-4-1.79-4-4s1.79-4 4-4h1.73z"></path></g>
<g id="cloud-queue"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM19 18H6c-2.21 0-4-1.79-4-4s1.79-4 4-4h.71C7.37 7.69 9.48 6 12 6c3.04 0 5.5 2.46 5.5 5.5v.5H19c1.66 0 3 1.34 3 3s-1.34 3-3 3z"></path></g>
<g id="cloud-upload"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z"></path></g>
<g id="code"><path d="M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z"></path></g>
<g id="compare-arrows"><path d="M9.01 14H2v2h7.01v3L13 15l-3.99-4v3zm5.98-1v-3H22V8h-7.01V5L11 9l3.99 4z"></path></g>
<g id="content-copy"><path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"></path></g>
<g id="content-cut"><path d="M9.64 7.64c.23-.5.36-1.05.36-1.64 0-2.21-1.79-4-4-4S2 3.79 2 6s1.79 4 4 4c.59 0 1.14-.13 1.64-.36L10 12l-2.36 2.36C7.14 14.13 6.59 14 6 14c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4c0-.59-.13-1.14-.36-1.64L12 14l7 7h3v-1L9.64 7.64zM6 8c-1.1 0-2-.89-2-2s.9-2 2-2 2 .89 2 2-.9 2-2 2zm0 12c-1.1 0-2-.89-2-2s.9-2 2-2 2 .89 2 2-.9 2-2 2zm6-7.5c-.28 0-.5-.22-.5-.5s.22-.5.5-.5.5.22.5.5-.22.5-.5.5zM19 3l-6 6 2 2 7-7V3z"></path></g>
<g id="content-paste"><path d="M19 2h-4.18C14.4.84 13.3 0 12 0c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm7 18H5V4h2v3h10V4h2v16z"></path></g>
<g id="copyright"><path d="M10.08 10.86c.05-.33.16-.62.3-.87s.34-.46.59-.62c.24-.15.54-.22.91-.23.23.01.44.05.63.13.2.09.38.21.52.36s.25.33.34.53.13.42.14.64h1.79c-.02-.47-.11-.9-.28-1.29s-.4-.73-.7-1.01-.66-.5-1.08-.66-.88-.23-1.39-.23c-.65 0-1.22.11-1.7.34s-.88.53-1.2.92-.56.84-.71 1.36S8 11.29 8 11.87v.27c0 .58.08 1.12.23 1.64s.39.97.71 1.35.72.69 1.2.91 1.05.34 1.7.34c.47 0 .91-.08 1.32-.23s.77-.36 1.08-.63.56-.58.74-.94.29-.74.3-1.15h-1.79c-.01.21-.06.4-.15.58s-.21.33-.36.46-.32.23-.52.3c-.19.07-.39.09-.6.1-.36-.01-.66-.08-.89-.23-.25-.16-.45-.37-.59-.62s-.25-.55-.3-.88-.08-.67-.08-1v-.27c0-.35.03-.68.08-1.01zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path></g>
<g id="create"><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"></path></g>
<g id="create-new-folder"><path d="M20 6h-8l-2-2H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-1 8h-3v3h-2v-3h-3v-2h3V9h2v3h3v2z"></path></g>
<g id="credit-card"><path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z"></path></g>
<g id="dashboard"><path d="M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z"></path></g>
<g id="date-range"><path d="M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"></path></g>
<g id="delete"><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path></g>
<g id="delete-forever"><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z"></path></g>
<g id="delete-sweep"><path d="M15 16h4v2h-4zm0-8h7v2h-7zm0 4h6v2h-6zM3 18c0 1.1.9 2 2 2h6c1.1 0 2-.9 2-2V8H3v10zM14 5h-3l-1-1H6L5 5H2v2h12z"></path></g>
<g id="description"><path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z"></path></g>
<g id="dns"><path d="M20 13H4c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h16c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zM7 19c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM20 3H4c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h16c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1zM7 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"></path></g>
<g id="done"><path d="M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z"></path></g>
<g id="done-all"><path d="M18 7l-1.41-1.41-6.34 6.34 1.41 1.41L18 7zm4.24-1.41L11.66 16.17 7.48 12l-1.41 1.41L11.66 19l12-12-1.42-1.41zM.41 13.41L6 19l1.41-1.41L1.83 12 .41 13.41z"></path></g>
<g id="donut-large"><path d="M11 5.08V2c-5 .5-9 4.81-9 10s4 9.5 9 10v-3.08c-3-.48-6-3.4-6-6.92s3-6.44 6-6.92zM18.97 11H22c-.47-5-4-8.53-9-9v3.08C16 5.51 18.54 8 18.97 11zM13 18.92V22c5-.47 8.53-4 9-9h-3.03c-.43 3-2.97 5.49-5.97 5.92z"></path></g>
<g id="donut-small"><path d="M11 9.16V2c-5 .5-9 4.79-9 10s4 9.5 9 10v-7.16c-1-.41-2-1.52-2-2.84s1-2.43 2-2.84zM14.86 11H22c-.48-4.75-4-8.53-9-9v7.16c1 .3 1.52.98 1.86 1.84zM13 14.84V22c5-.47 8.52-4.25 9-9h-7.14c-.34.86-.86 1.54-1.86 1.84z"></path></g>
<g id="drafts"><path d="M21.99 8c0-.72-.37-1.35-.94-1.7L12 1 2.95 6.3C2.38 6.65 2 7.28 2 8v10c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2l-.01-10zM12 13L3.74 7.84 12 3l8.26 4.84L12 13z"></path></g>
<g id="eject"><path d="M5 17h14v2H5zm7-12L5.33 15h13.34z"></path></g>
<g id="error"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"></path></g>
<g id="error-outline"><path d="M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"></path></g>
<g id="euro-symbol"><path d="M15 18.5c-2.51 0-4.68-1.42-5.76-3.5H15v-2H8.58c-.05-.33-.08-.66-.08-1s.03-.67.08-1H15V9H9.24C10.32 6.92 12.5 5.5 15 5.5c1.61 0 3.09.59 4.23 1.57L21 5.3C19.41 3.87 17.3 3 15 3c-3.92 0-7.24 2.51-8.48 6H3v2h3.06c-.04.33-.06.66-.06 1 0 .34.02.67.06 1H3v2h3.52c1.24 3.49 4.56 6 8.48 6 2.31 0 4.41-.87 6-2.3l-1.78-1.77c-1.13.98-2.6 1.57-4.22 1.57z"></path></g>
<g id="event"><path d="M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"></path></g>
<g id="event-seat"><path d="M4 18v3h3v-3h10v3h3v-6H4zm15-8h3v3h-3zM2 10h3v3H2zm15 3H7V5c0-1.1.9-2 2-2h6c1.1 0 2 .9 2 2v8z"></path></g>
<g id="exit-to-app"><path d="M10.09 15.59L11.5 17l5-5-5-5-1.41 1.41L12.67 11H3v2h9.67l-2.58 2.59zM19 3H5c-1.11 0-2 .9-2 2v4h2V5h14v14H5v-4H3v4c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"></path></g>
<g id="expand-less"><path d="M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"></path></g>
<g id="expand-more"><path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"></path></g>
<g id="explore"><path d="M12 10.9c-.61 0-1.1.49-1.1 1.1s.49 1.1 1.1 1.1c.61 0 1.1-.49 1.1-1.1s-.49-1.1-1.1-1.1zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm2.19 12.19L6 18l3.81-8.19L18 6l-3.81 8.19z"></path></g>
<g id="extension"><path d="M20.5 11H19V7c0-1.1-.9-2-2-2h-4V3.5C13 2.12 11.88 1 10.5 1S8 2.12 8 3.5V5H4c-1.1 0-1.99.9-1.99 2v3.8H3.5c1.49 0 2.7 1.21 2.7 2.7s-1.21 2.7-2.7 2.7H2V20c0 1.1.9 2 2 2h3.8v-1.5c0-1.49 1.21-2.7 2.7-2.7 1.49 0 2.7 1.21 2.7 2.7V22H17c1.1 0 2-.9 2-2v-4h1.5c1.38 0 2.5-1.12 2.5-2.5S21.88 11 20.5 11z"></path></g>
<g id="face"><path d="M9 11.75c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25zm6 0c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8 0-.29.02-.58.05-.86 2.36-1.05 4.23-2.98 5.21-5.37C11.07 8.33 14.05 10 17.42 10c.78 0 1.53-.09 2.25-.26.21.71.33 1.47.33 2.26 0 4.41-3.59 8-8 8z"></path></g>
<g id="favorite"><path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"></path></g>
<g id="favorite-border"><path d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"></path></g>
<g id="feedback"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 12h-2v-2h2v2zm0-4h-2V6h2v4z"></path></g>
<g id="file-download"><path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"></path></g>
<g id="file-upload"><path d="M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z"></path></g>
<g id="filter-list"><path d="M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"></path></g>
<g id="find-in-page"><path d="M20 19.59V8l-6-6H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c.45 0 .85-.15 1.19-.4l-4.43-4.43c-.8.52-1.74.83-2.76.83-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5c0 1.02-.31 1.96-.83 2.75L20 19.59zM9 13c0 1.66 1.34 3 3 3s3-1.34 3-3-1.34-3-3-3-3 1.34-3 3z"></path></g>
<g id="find-replace"><path d="M11 6c1.38 0 2.63.56 3.54 1.46L12 10h6V4l-2.05 2.05C14.68 4.78 12.93 4 11 4c-3.53 0-6.43 2.61-6.92 6H6.1c.46-2.28 2.48-4 4.9-4zm5.64 9.14c.66-.9 1.12-1.97 1.28-3.14H15.9c-.46 2.28-2.48 4-4.9 4-1.38 0-2.63-.56-3.54-1.46L10 12H4v6l2.05-2.05C7.32 17.22 9.07 18 11 18c1.55 0 2.98-.51 4.14-1.36L20 21.49 21.49 20l-4.85-4.86z"></path></g>
<g id="fingerprint"><path d="M17.81 4.47c-.08 0-.16-.02-.23-.06C15.66 3.42 14 3 12.01 3c-1.98 0-3.86.47-5.57 1.41-.24.13-.54.04-.68-.2-.13-.24-.04-.55.2-.68C7.82 2.52 9.86 2 12.01 2c2.13 0 3.99.47 6.03 1.52.25.13.34.43.21.67-.09.18-.26.28-.44.28zM3.5 9.72c-.1 0-.2-.03-.29-.09-.23-.16-.28-.47-.12-.7.99-1.4 2.25-2.5 3.75-3.27C9.98 4.04 14 4.03 17.15 5.65c1.5.77 2.76 1.86 3.75 3.25.16.22.11.54-.12.7-.23.16-.54.11-.7-.12-.9-1.26-2.04-2.25-3.39-2.94-2.87-1.47-6.54-1.47-9.4.01-1.36.7-2.5 1.7-3.4 2.96-.08.14-.23.21-.39.21zm6.25 12.07c-.13 0-.26-.05-.35-.15-.87-.87-1.34-1.43-2.01-2.64-.69-1.23-1.05-2.73-1.05-4.34 0-2.97 2.54-5.39 5.66-5.39s5.66 2.42 5.66 5.39c0 .28-.22.5-.5.5s-.5-.22-.5-.5c0-2.42-2.09-4.39-4.66-4.39-2.57 0-4.66 1.97-4.66 4.39 0 1.44.32 2.77.93 3.85.64 1.15 1.08 1.64 1.85 2.42.19.2.19.51 0 .71-.11.1-.24.15-.37.15zm7.17-1.85c-1.19 0-2.24-.3-3.1-.89-1.49-1.01-2.38-2.65-2.38-4.39 0-.28.22-.5.5-.5s.5.22.5.5c0 1.41.72 2.74 1.94 3.56.71.48 1.54.71 2.54.71.24 0 .64-.03 1.04-.1.27-.05.53.13.58.41.05.27-.13.53-.41.58-.57.11-1.07.12-1.21.12zM14.91 22c-.04 0-.09-.01-.13-.02-1.59-.44-2.63-1.03-3.72-2.1-1.4-1.39-2.17-3.24-2.17-5.22 0-1.62 1.38-2.94 3.08-2.94 1.7 0 3.08 1.32 3.08 2.94 0 1.07.93 1.94 2.08 1.94s2.08-.87 2.08-1.94c0-3.77-3.25-6.83-7.25-6.83-2.84 0-5.44 1.58-6.61 4.03-.39.81-.59 1.76-.59 2.8 0 .78.07 2.01.67 3.61.1.26-.03.55-.29.64-.26.1-.55-.04-.64-.29-.49-1.31-.73-2.61-.73-3.96 0-1.2.23-2.29.68-3.24 1.33-2.79 4.28-4.6 7.51-4.6 4.55 0 8.25 3.51 8.25 7.83 0 1.62-1.38 2.94-3.08 2.94s-3.08-1.32-3.08-2.94c0-1.07-.93-1.94-2.08-1.94s-2.08.87-2.08 1.94c0 1.71.66 3.31 1.87 4.51.95.94 1.86 1.46 3.27 1.85.27.07.42.35.35.61-.05.23-.26.38-.47.38z"></path></g>
<g id="first-page"><path d="M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"></path></g>
<g id="flag"><path d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z"></path></g>
<g id="flight-land"><path d="M2.5 19h19v2h-19zm7.18-5.73l4.35 1.16 5.31 1.42c.8.21 1.62-.26 1.84-1.06.21-.8-.26-1.62-1.06-1.84l-5.31-1.42-2.76-9.02L10.12 2v8.28L5.15 8.95l-.93-2.32-1.45-.39v5.17l1.6.43 5.31 1.43z"></path></g>
<g id="flight-takeoff"><path d="M2.5 19h19v2h-19zm19.57-9.36c-.21-.8-1.04-1.28-1.84-1.06L14.92 10l-6.9-6.43-1.93.51 4.14 7.17-4.97 1.33-1.97-1.54-1.45.39 1.82 3.16.77 1.33 1.6-.43 5.31-1.42 4.35-1.16L21 11.49c.81-.23 1.28-1.05 1.07-1.85z"></path></g>
<g id="flip-to-back"><path d="M9 7H7v2h2V7zm0 4H7v2h2v-2zm0-8c-1.11 0-2 .9-2 2h2V3zm4 12h-2v2h2v-2zm6-12v2h2c0-1.1-.9-2-2-2zm-6 0h-2v2h2V3zM9 17v-2H7c0 1.1.89 2 2 2zm10-4h2v-2h-2v2zm0-4h2V7h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zM5 7H3v12c0 1.1.89 2 2 2h12v-2H5V7zm10-2h2V3h-2v2zm0 12h2v-2h-2v2z"></path></g>
<g id="flip-to-front"><path d="M3 13h2v-2H3v2zm0 4h2v-2H3v2zm2 4v-2H3c0 1.1.89 2 2 2zM3 9h2V7H3v2zm12 12h2v-2h-2v2zm4-18H9c-1.11 0-2 .9-2 2v10c0 1.1.89 2 2 2h10c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 12H9V5h10v10zm-8 6h2v-2h-2v2zm-4 0h2v-2H7v2z"></path></g>
<g id="folder"><path d="M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z"></path></g>
<g id="folder-open"><path d="M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V8h16v10z"></path></g>
<g id="folder-shared"><path d="M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm-5 3c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm4 8h-8v-1c0-1.33 2.67-2 4-2s4 .67 4 2v1z"></path></g>
<g id="font-download"><path d="M9.93 13.5h4.14L12 7.98zM20 2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-4.05 16.5l-1.14-3H9.17l-1.12 3H5.96l5.11-13h1.86l5.11 13h-2.09z"></path></g>
<g id="forward"><path d="M12 8V4l8 8-8 8v-4H4V8z"></path></g>
<g id="fullscreen"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"></path></g>
<g id="fullscreen-exit"><path d="M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z"></path></g>
<g id="g-translate"><path d="M20 5h-9.12L10 2H4c-1.1 0-2 .9-2 2v13c0 1.1.9 2 2 2h7l1 3h8c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zM7.17 14.59c-2.25 0-4.09-1.83-4.09-4.09s1.83-4.09 4.09-4.09c1.04 0 1.99.37 2.74 1.07l.07.06-1.23 1.18-.06-.05c-.29-.27-.78-.59-1.52-.59-1.31 0-2.38 1.09-2.38 2.42s1.07 2.42 2.38 2.42c1.37 0 1.96-.87 2.12-1.46H7.08V9.91h3.95l.01.07c.04.21.05.4.05.61 0 2.35-1.61 4-3.92 4zm6.03-1.71c.33.6.74 1.18 1.19 1.7l-.54.53-.65-2.23zm.77-.76h-.99l-.31-1.04h3.99s-.34 1.31-1.56 2.74c-.52-.62-.89-1.23-1.13-1.7zM21 20c0 .55-.45 1-1 1h-7l2-2-.81-2.77.92-.92L17.79 18l.73-.73-2.71-2.68c.9-1.03 1.6-2.25 1.92-3.51H19v-1.04h-3.64V9h-1.04v1.04h-1.96L11.18 6H20c.55 0 1 .45 1 1v13z"></path></g>
<g id="gavel"><path d="M1 21h12v2H1zM5.245 8.07l2.83-2.827 14.14 14.142-2.828 2.828zM12.317 1l5.657 5.656-2.83 2.83-5.654-5.66zM3.825 9.485l5.657 5.657-2.828 2.828-5.657-5.657z"></path></g>
<g id="gesture"><path d="M4.59 6.89c.7-.71 1.4-1.35 1.71-1.22.5.2 0 1.03-.3 1.52-.25.42-2.86 3.89-2.86 6.31 0 1.28.48 2.34 1.34 2.98.75.56 1.74.73 2.64.46 1.07-.31 1.95-1.4 3.06-2.77 1.21-1.49 2.83-3.44 4.08-3.44 1.63 0 1.65 1.01 1.76 1.79-3.78.64-5.38 3.67-5.38 5.37 0 1.7 1.44 3.09 3.21 3.09 1.63 0 4.29-1.33 4.69-6.1H21v-2.5h-2.47c-.15-1.65-1.09-4.2-4.03-4.2-2.25 0-4.18 1.91-4.94 2.84-.58.73-2.06 2.48-2.29 2.72-.25.3-.68.84-1.11.84-.45 0-.72-.83-.36-1.92.35-1.09 1.4-2.86 1.85-3.52.78-1.14 1.3-1.92 1.3-3.28C8.95 3.69 7.31 3 6.44 3 5.12 3 3.97 4 3.72 4.25c-.36.36-.66.66-.88.93l1.75 1.71zm9.29 11.66c-.31 0-.74-.26-.74-.72 0-.6.73-2.2 2.87-2.76-.3 2.69-1.43 3.48-2.13 3.48z"></path></g>
<g id="get-app"><path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"></path></g>
<g id="gif"><path d="M11.5 9H13v6h-1.5zM9 9H6c-.6 0-1 .5-1 1v4c0 .5.4 1 1 1h3c.6 0 1-.5 1-1v-2H8.5v1.5h-2v-3H10V10c0-.5-.4-1-1-1zm10 1.5V9h-4.5v6H16v-2h2v-1.5h-2v-1z"></path></g>
<g id="grade"><path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"></path></g>
<g id="group-work"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM8 17.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zM9.5 8c0-1.38 1.12-2.5 2.5-2.5s2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5S9.5 9.38 9.5 8zm6.5 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"></path></g>
<g id="help"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z"></path></g>
<g id="help-outline"><path d="M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z"></path></g>
<g id="highlight-off"><path d="M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path></g>
<g id="history"><path d="M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z"></path></g>
<g id="home"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"></path></g>
<g id="hourglass-empty"><path d="M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6zm10 14.5V20H8v-3.5l4-4 4 4zm-4-5l-4-4V4h8v3.5l-4 4z"></path></g>
<g id="hourglass-full"><path d="M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6z"></path></g>
<g id="http"><path d="M4.5 11h-2V9H1v6h1.5v-2.5h2V15H6V9H4.5v2zm2.5-.5h1.5V15H10v-4.5h1.5V9H7v1.5zm5.5 0H14V15h1.5v-4.5H17V9h-4.5v1.5zm9-1.5H18v6h1.5v-2h2c.8 0 1.5-.7 1.5-1.5v-1c0-.8-.7-1.5-1.5-1.5zm0 2.5h-2v-1h2v1z"></path></g>
<g id="https"><path d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"></path></g>
<g id="important-devices"><path d="M23 11.01L18 11c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h5c.55 0 1-.45 1-1v-9c0-.55-.45-.99-1-.99zM23 20h-5v-7h5v7zM20 2H2C.89 2 0 2.89 0 4v12c0 1.1.89 2 2 2h7v2H7v2h8v-2h-2v-2h2v-2H2V4h18v5h2V4c0-1.11-.9-2-2-2zm-8.03 7L11 6l-.97 3H7l2.47 1.76-.94 2.91 2.47-1.8 2.47 1.8-.94-2.91L15 9h-3.03z"></path></g>
<g id="inbox"><path d="M19 3H4.99c-1.11 0-1.98.89-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.11-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10z"></path></g>
<g id="indeterminate-check-box"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"></path></g>
<g id="info"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"></path></g>
<g id="info-outline"><path d="M11 17h2v-6h-2v6zm1-15C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zM11 9h2V7h-2v2z"></path></g>
<g id="input"><path d="M21 3.01H3c-1.1 0-2 .9-2 2V9h2V4.99h18v14.03H3V15H1v4.01c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98v-14c0-1.11-.9-2-2-2zM11 16l4-4-4-4v3H1v2h10v3z"></path></g>
<g id="invert-colors"><path d="M17.66 7.93L12 2.27 6.34 7.93c-3.12 3.12-3.12 8.19 0 11.31C7.9 20.8 9.95 21.58 12 21.58c2.05 0 4.1-.78 5.66-2.34 3.12-3.12 3.12-8.19 0-11.31zM12 19.59c-1.6 0-3.11-.62-4.24-1.76C6.62 16.69 6 15.19 6 13.59s.62-3.11 1.76-4.24L12 5.1v14.49z"></path></g>
<g id="label"><path d="M17.63 5.84C17.27 5.33 16.67 5 16 5L5 5.01C3.9 5.01 3 5.9 3 7v10c0 1.1.9 1.99 2 1.99L16 19c.67 0 1.27-.33 1.63-.84L22 12l-4.37-6.16z"></path></g>
<g id="label-outline"><path d="M17.63 5.84C17.27 5.33 16.67 5 16 5L5 5.01C3.9 5.01 3 5.9 3 7v10c0 1.1.9 1.99 2 1.99L16 19c.67 0 1.27-.33 1.63-.84L22 12l-4.37-6.16zM16 17H5V7h11l3.55 5L16 17z"></path></g>
<g id="language"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm6.93 6h-2.95c-.32-1.25-.78-2.45-1.38-3.56 1.84.63 3.37 1.91 4.33 3.56zM12 4.04c.83 1.2 1.48 2.53 1.91 3.96h-3.82c.43-1.43 1.08-2.76 1.91-3.96zM4.26 14C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 1.32-.14 2 0 .68.06 1.34.14 2H4.26zm.82 2h2.95c.32 1.25.78 2.45 1.38 3.56-1.84-.63-3.37-1.9-4.33-3.56zm2.95-8H5.08c.96-1.66 2.49-2.93 4.33-3.56C8.81 5.55 8.35 6.75 8.03 8zM12 19.96c-.83-1.2-1.48-2.53-1.91-3.96h3.82c-.43 1.43-1.08 2.76-1.91 3.96zM14.34 14H9.66c-.09-.66-.16-1.32-.16-2 0-.68.07-1.35.16-2h4.68c.09.65.16 1.32.16 2 0 .68-.07 1.34-.16 2zm.25 5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95c-.96 1.65-2.49 2.93-4.33 3.56zM16.36 14c.08-.66.14-1.32.14-2 0-.68-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 1.36-.26 2h-3.38z"></path></g>
<g id="last-page"><path d="M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"></path></g>
<g id="launch"><path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"></path></g>
<g id="lightbulb-outline"><path d="M9 21c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-1H9v1zm3-19C8.14 2 5 5.14 5 9c0 2.38 1.19 4.47 3 5.74V17c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2.26c1.81-1.27 3-3.36 3-5.74 0-3.86-3.14-7-7-7zm2.85 11.1l-.85.6V16h-4v-2.3l-.85-.6C7.8 12.16 7 10.63 7 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.16-2.15 4.1z"></path></g>
<g id="line-style"><path d="M3 16h5v-2H3v2zm6.5 0h5v-2h-5v2zm6.5 0h5v-2h-5v2zM3 20h2v-2H3v2zm4 0h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM3 12h8v-2H3v2zm10 0h8v-2h-8v2zM3 4v4h18V4H3z"></path></g>
<g id="line-weight"><path d="M3 17h18v-2H3v2zm0 3h18v-1H3v1zm0-7h18v-3H3v3zm0-9v4h18V4H3z"></path></g>
<g id="link"><path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"></path></g>
<g id="list"><path d="M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z"></path></g>
<g id="lock"><path d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"></path></g>
<g id="lock-open"><path d="M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h1.9c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10z"></path></g>
<g id="lock-outline"><path d="M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM8.9 6c0-1.71 1.39-3.1 3.1-3.1s3.1 1.39 3.1 3.1v2H8.9V6zM18 20H6V10h12v10z"></path></g>
<g id="low-priority"><path d="M14 5h8v2h-8zm0 5.5h8v2h-8zm0 5.5h8v2h-8zM2 11.5C2 15.08 4.92 18 8.5 18H9v2l3-3-3-3v2h-.5C6.02 16 4 13.98 4 11.5S6.02 7 8.5 7H12V5H8.5C4.92 5 2 7.92 2 11.5z"></path></g>
<g id="loyalty"><path d="M21.41 11.58l-9-9C12.05 2.22 11.55 2 11 2H4c-1.1 0-2 .9-2 2v7c0 .55.22 1.05.59 1.42l9 9c.36.36.86.58 1.41.58.55 0 1.05-.22 1.41-.59l7-7c.37-.36.59-.86.59-1.41 0-.55-.23-1.06-.59-1.42zM5.5 7C4.67 7 4 6.33 4 5.5S4.67 4 5.5 4 7 4.67 7 5.5 6.33 7 5.5 7zm11.77 8.27L13 19.54l-4.27-4.27C8.28 14.81 8 14.19 8 13.5c0-1.38 1.12-2.5 2.5-2.5.69 0 1.32.28 1.77.74l.73.72.73-.73c.45-.45 1.08-.73 1.77-.73 1.38 0 2.5 1.12 2.5 2.5 0 .69-.28 1.32-.73 1.77z"></path></g>
<g id="mail"><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"></path></g>
<g id="markunread"><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"></path></g>
<g id="markunread-mailbox"><path d="M20 6H10v6H8V4h6V0H6v6H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2z"></path></g>
<g id="menu"><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"></path></g>
<g id="more-horiz"><path d="M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path></g>
<g id="more-vert"><path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path></g>
<g id="motorcycle"><path d="M19.44 9.03L15.41 5H11v2h3.59l2 2H5c-2.8 0-5 2.2-5 5s2.2 5 5 5c2.46 0 4.45-1.69 4.9-4h1.65l2.77-2.77c-.21.54-.32 1.14-.32 1.77 0 2.8 2.2 5 5 5s5-2.2 5-5c0-2.65-1.97-4.77-4.56-4.97zM7.82 15C7.4 16.15 6.28 17 5 17c-1.63 0-3-1.37-3-3s1.37-3 3-3c1.28 0 2.4.85 2.82 2H5v2h2.82zM19 17c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3z"></path></g>
<g id="move-to-inbox"><path d="M19 3H4.99c-1.11 0-1.98.9-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10zm-3-5h-2V7h-4v3H8l4 4 4-4z"></path></g>
<g id="next-week"><path d="M20 7h-4V5c0-.55-.22-1.05-.59-1.41C15.05 3.22 14.55 3 14 3h-4c-1.1 0-2 .9-2 2v2H4c-1.1 0-2 .9-2 2v11c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zM10 5h4v2h-4V5zm1 13.5l-1-1 3-3-3-3 1-1 4 4-4 4z"></path></g>
<g id="note-add"><path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 14h-3v3h-2v-3H8v-2h3v-3h2v3h3v2zm-3-7V3.5L18.5 9H13z"></path></g>
<g id="offline-pin"><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm5 16H7v-2h10v2zm-6.7-4L7 10.7l1.4-1.4 1.9 1.9 5.3-5.3L17 7.3 10.3 14z"></path></g>
<g id="opacity"><path d="M17.66 8L12 2.35 6.34 8C4.78 9.56 4 11.64 4 13.64s.78 4.11 2.34 5.67 3.61 2.35 5.66 2.35 4.1-.79 5.66-2.35S20 15.64 20 13.64 19.22 9.56 17.66 8zM6 14c.01-2 .62-3.27 1.76-4.4L12 5.27l4.24 4.38C17.38 10.77 17.99 12 18 14H6z"></path></g>
<g id="open-in-browser"><path d="M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89 2 2 2h4v-2H5V8h14v10h-4v2h4c1.1 0 2-.9 2-2V6c0-1.1-.89-2-2-2zm-7 6l-4 4h3v6h2v-6h3l-4-4z"></path></g>
<g id="open-in-new"><path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"></path></g>
<g id="open-with"><path d="M10 9h4V6h3l-5-5-5 5h3v3zm-1 1H6V7l-5 5 5 5v-3h3v-4zm14 2l-5-5v3h-3v4h3v3l5-5zm-9 3h-4v3H7l5 5 5-5h-3v-3z"></path></g>
<g id="pageview"><path d="M11.5 9C10.12 9 9 10.12 9 11.5s1.12 2.5 2.5 2.5 2.5-1.12 2.5-2.5S12.88 9 11.5 9zM20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-3.21 14.21l-2.91-2.91c-.69.44-1.51.7-2.39.7C9.01 16 7 13.99 7 11.5S9.01 7 11.5 7 16 9.01 16 11.5c0 .88-.26 1.69-.7 2.39l2.91 2.9-1.42 1.42z"></path></g>
<g id="pan-tool"><path d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"></path></g>
<g id="payment"><path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z"></path></g>
<g id="perm-camera-mic"><path d="M20 5h-3.17L15 3H9L7.17 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h7v-2.09c-2.83-.48-5-2.94-5-5.91h2c0 2.21 1.79 4 4 4s4-1.79 4-4h2c0 2.97-2.17 5.43-5 5.91V21h7c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-6 8c0 1.1-.9 2-2 2s-2-.9-2-2V9c0-1.1.9-2 2-2s2 .9 2 2v4z"></path></g>
<g id="perm-contact-calendar"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H6v-1c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1z"></path></g>
<g id="perm-data-setting"><path d="M18.99 11.5c.34 0 .67.03 1 .07L20 0 0 20h11.56c-.04-.33-.07-.66-.07-1 0-4.14 3.36-7.5 7.5-7.5zm3.71 7.99c.02-.16.04-.32.04-.49 0-.17-.01-.33-.04-.49l1.06-.83c.09-.08.12-.21.06-.32l-1-1.73c-.06-.11-.19-.15-.31-.11l-1.24.5c-.26-.2-.54-.37-.85-.49l-.19-1.32c-.01-.12-.12-.21-.24-.21h-2c-.12 0-.23.09-.25.21l-.19 1.32c-.3.13-.59.29-.85.49l-1.24-.5c-.11-.04-.24 0-.31.11l-1 1.73c-.06.11-.04.24.06.32l1.06.83c-.02.16-.03.32-.03.49 0 .17.01.33.03.49l-1.06.83c-.09.08-.12.21-.06.32l1 1.73c.06.11.19.15.31.11l1.24-.5c.26.2.54.37.85.49l.19 1.32c.02.12.12.21.25.21h2c.12 0 .23-.09.25-.21l.19-1.32c.3-.13.59-.29.84-.49l1.25.5c.11.04.24 0 .31-.11l1-1.73c.06-.11.03-.24-.06-.32l-1.07-.83zm-3.71 1.01c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"></path></g>
<g id="perm-device-information"><path d="M13 7h-2v2h2V7zm0 4h-2v6h2v-6zm4-9.99L7 1c-1.1 0-2 .9-2 2v18c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-1.99-2-1.99zM17 19H7V5h10v14z"></path></g>
<g id="perm-identity"><path d="M12 5.9c1.16 0 2.1.94 2.1 2.1s-.94 2.1-2.1 2.1S9.9 9.16 9.9 8s.94-2.1 2.1-2.1m0 9c2.97 0 6.1 1.46 6.1 2.1v1.1H5.9V17c0-.64 3.13-2.1 6.1-2.1M12 4C9.79 4 8 5.79 8 8s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 9c-2.67 0-8 1.34-8 4v3h16v-3c0-2.66-5.33-4-8-4z"></path></g>
<g id="perm-media"><path d="M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z"></path></g>
<g id="perm-phone-msg"><path d="M20 15.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.58l2.2-2.21c.28-.27.36-.66.25-1.01C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1zM12 3v10l3-3h6V3h-9z"></path></g>
<g id="perm-scan-wifi"><path d="M12 3C6.95 3 3.15 4.85 0 7.23L12 22 24 7.25C20.85 4.87 17.05 3 12 3zm1 13h-2v-6h2v6zm-2-8V6h2v2h-2z"></path></g>
<g id="pets"><circle cx="4.5" cy="9.5" r="2.5"></circle><circle cx="9" cy="5.5" r="2.5"></circle><circle cx="15" cy="5.5" r="2.5"></circle><circle cx="19.5" cy="9.5" r="2.5"></circle><path d="M17.34 14.86c-.87-1.02-1.6-1.89-2.48-2.91-.46-.54-1.05-1.08-1.75-1.32-.11-.04-.22-.07-.33-.09-.25-.04-.52-.04-.78-.04s-.53 0-.79.05c-.11.02-.22.05-.33.09-.7.24-1.28.78-1.75 1.32-.87 1.02-1.6 1.89-2.48 2.91-1.31 1.31-2.92 2.76-2.62 4.79.29 1.02 1.02 2.03 2.33 2.32.73.15 3.06-.44 5.54-.44h.18c2.48 0 4.81.58 5.54.44 1.31-.29 2.04-1.31 2.33-2.32.31-2.04-1.3-3.49-2.61-4.8z"></path></g>
<g id="picture-in-picture"><path d="M19 7h-8v6h8V7zm2-4H3c-1.1 0-2 .9-2 2v14c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98V5c0-1.1-.9-2-2-2zm0 16.01H3V4.98h18v14.03z"></path></g>
<g id="picture-in-picture-alt"><path d="M19 11h-8v6h8v-6zm4 8V4.98C23 3.88 22.1 3 21 3H3c-1.1 0-2 .88-2 1.98V19c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2zm-2 .02H3V4.97h18v14.05z"></path></g>
<g id="play-for-work"><path d="M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z"></path></g>
<g id="polymer"><path d="M19 4h-4L7.11 16.63 4.5 12 9 4H5L.5 12 5 20h4l7.89-12.63L19.5 12 15 20h4l4.5-8z"></path></g>
<g id="power-settings-new"><path d="M13 3h-2v10h2V3zm4.83 2.17l-1.42 1.42C17.99 7.86 19 9.81 19 12c0 3.87-3.13 7-7 7s-7-3.13-7-7c0-2.19 1.01-4.14 2.58-5.42L6.17 5.17C4.23 6.82 3 9.26 3 12c0 4.97 4.03 9 9 9s9-4.03 9-9c0-2.74-1.23-5.18-3.17-6.83z"></path></g>
<g id="pregnant-woman"><path d="M9 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zm7 9c-.01-1.34-.83-2.51-2-3 0-1.66-1.34-3-3-3s-3 1.34-3 3v7h2v5h3v-5h3v-4z"></path></g>
<g id="print"><path d="M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z"></path></g>
<g id="query-builder"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z"></path></g>
<g id="question-answer"><path d="M21 6h-2v9H6v2c0 .55.45 1 1 1h11l4 4V7c0-.55-.45-1-1-1zm-4 6V3c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v14l4-4h10c.55 0 1-.45 1-1z"></path></g>
<g id="radio-button-checked"><path d="M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"></path></g>
<g id="radio-button-unchecked"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"></path></g>
<g id="receipt"><path d="M18 17H6v-2h12v2zm0-4H6v-2h12v2zm0-4H6V7h12v2zM3 22l1.5-1.5L6 22l1.5-1.5L9 22l1.5-1.5L12 22l1.5-1.5L15 22l1.5-1.5L18 22l1.5-1.5L21 22V2l-1.5 1.5L18 2l-1.5 1.5L15 2l-1.5 1.5L12 2l-1.5 1.5L9 2 7.5 3.5 6 2 4.5 3.5 3 2v20z"></path></g>
<g id="record-voice-over"><circle cx="9" cy="9" r="4"></circle><path d="M9 15c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4zm7.76-9.64l-1.68 1.69c.84 1.18.84 2.71 0 3.89l1.68 1.69c2.02-2.02 2.02-5.07 0-7.27zM20.07 2l-1.63 1.63c2.77 3.02 2.77 7.56 0 10.74L20.07 16c3.9-3.89 3.91-9.95 0-14z"></path></g>
<g id="redeem"><path d="M20 6h-2.18c.11-.31.18-.65.18-1 0-1.66-1.34-3-3-3-1.05 0-1.96.54-2.5 1.35l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z"></path></g>
<g id="redo"><path d="M18.4 10.6C16.55 8.99 14.15 8 11.5 8c-4.65 0-8.58 3.03-9.96 7.22L3.9 16c1.05-3.19 4.05-5.5 7.6-5.5 1.95 0 3.73.72 5.12 1.88L13 16h9V7l-3.6 3.6z"></path></g>
<g id="refresh"><path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path></g>
<g id="remove"><path d="M19 13H5v-2h14v2z"></path></g>
<g id="remove-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z"></path></g>
<g id="remove-circle-outline"><path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path></g>
<g id="remove-shopping-cart"><path d="M22.73 22.73L2.77 2.77 2 2l-.73-.73L0 2.54l4.39 4.39 2.21 4.66-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h7.46l1.38 1.38c-.5.36-.83.95-.83 1.62 0 1.1.89 2 1.99 2 .67 0 1.26-.33 1.62-.84L21.46 24l1.27-1.27zM7.42 15c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h2.36l2 2H7.42zm8.13-2c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H6.54l9.01 9zM7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2z"></path></g>
<g id="reorder"><path d="M3 15h18v-2H3v2zm0 4h18v-2H3v2zm0-8h18V9H3v2zm0-6v2h18V5H3z"></path></g>
<g id="reply"><path d="M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z"></path></g>
<g id="reply-all"><path d="M7 8V5l-7 7 7 7v-3l-4-4 4-4zm6 1V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z"></path></g>
<g id="report"><path d="M15.73 3H8.27L3 8.27v7.46L8.27 21h7.46L21 15.73V8.27L15.73 3zM12 17.3c-.72 0-1.3-.58-1.3-1.3 0-.72.58-1.3 1.3-1.3.72 0 1.3.58 1.3 1.3 0 .72-.58 1.3-1.3 1.3zm1-4.3h-2V7h2v6z"></path></g>
<g id="report-problem"><path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"></path></g>
<g id="restore"><path d="M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z"></path></g>
<g id="restore-page"><path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm-2 16c-2.05 0-3.81-1.24-4.58-3h1.71c.63.9 1.68 1.5 2.87 1.5 1.93 0 3.5-1.57 3.5-3.5S13.93 9.5 12 9.5c-1.35 0-2.52.78-3.1 1.9l1.6 1.6h-4V9l1.3 1.3C8.69 8.92 10.23 8 12 8c2.76 0 5 2.24 5 5s-2.24 5-5 5z"></path></g>
<g id="room"><path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"></path></g>
<g id="rounded-corner"><path d="M19 19h2v2h-2v-2zm0-2h2v-2h-2v2zM3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm0-4h2V3H3v2zm4 0h2V3H7v2zm8 16h2v-2h-2v2zm-4 0h2v-2h-2v2zm4 0h2v-2h-2v2zm-8 0h2v-2H7v2zm-4 0h2v-2H3v2zM21 8c0-2.76-2.24-5-5-5h-5v2h5c1.65 0 3 1.35 3 3v5h2V8z"></path></g>
<g id="rowing"><path d="M8.5 14.5L4 19l1.5 1.5L9 17h2l-2.5-2.5zM15 1c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 20.01L18 24l-2.99-3.01V19.5l-7.1-7.09c-.31.05-.61.07-.91.07v-2.16c1.66.03 3.61-.87 4.67-2.04l1.4-1.55c.19-.21.43-.38.69-.5.29-.14.62-.23.96-.23h.03C15.99 6.01 17 7.02 17 8.26v5.75c0 .84-.35 1.61-.92 2.16l-3.58-3.58v-2.27c-.63.52-1.43 1.02-2.29 1.39L16.5 18H18l3 3.01z"></path></g>
<g id="save"><path d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"></path></g>
<g id="schedule"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z"></path></g>
<g id="search"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path></g>
<g id="select-all"><path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2zM7 17h10V7H7v10zm2-8h6v6H9V9z"></path></g>
<g id="send"><path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"></path></g>
<g id="settings"><path d="M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z"></path></g>
<g id="settings-applications"><path d="M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm7-7H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-1.75 9c0 .23-.02.46-.05.68l1.48 1.16c.13.11.17.3.08.45l-1.4 2.42c-.09.15-.27.21-.43.15l-1.74-.7c-.36.28-.76.51-1.18.69l-.26 1.85c-.03.17-.18.3-.35.3h-2.8c-.17 0-.32-.13-.35-.29l-.26-1.85c-.43-.18-.82-.41-1.18-.69l-1.74.7c-.16.06-.34 0-.43-.15l-1.4-2.42c-.09-.15-.05-.34.08-.45l1.48-1.16c-.03-.23-.05-.46-.05-.69 0-.23.02-.46.05-.68l-1.48-1.16c-.13-.11-.17-.3-.08-.45l1.4-2.42c.09-.15.27-.21.43-.15l1.74.7c.36-.28.76-.51 1.18-.69l.26-1.85c.03-.17.18-.3.35-.3h2.8c.17 0 .32.13.35.29l.26 1.85c.43.18.82.41 1.18.69l1.74-.7c.16-.06.34 0 .43.15l1.4 2.42c.09.15.05.34-.08.45l-1.48 1.16c.03.23.05.46.05.69z"></path></g>
<g id="settings-backup-restore"><path d="M14 12c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2zm-2-9c-4.97 0-9 4.03-9 9H0l4 4 4-4H5c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.51 0-2.91-.49-4.06-1.3l-1.42 1.44C8.04 20.3 9.94 21 12 21c4.97 0 9-4.03 9-9s-4.03-9-9-9z"></path></g>
<g id="settings-bluetooth"><path d="M11 24h2v-2h-2v2zm-4 0h2v-2H7v2zm8 0h2v-2h-2v2zm2.71-18.29L12 0h-1v7.59L6.41 3 5 4.41 10.59 10 5 15.59 6.41 17 11 12.41V20h1l5.71-5.71-4.3-4.29 4.3-4.29zM13 3.83l1.88 1.88L13 7.59V3.83zm1.88 10.46L13 16.17v-3.76l1.88 1.88z"></path></g>
<g id="settings-brightness"><path d="M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02zM8 16h2.5l1.5 1.5 1.5-1.5H16v-2.5l1.5-1.5-1.5-1.5V8h-2.5L12 6.5 10.5 8H8v2.5L6.5 12 8 13.5V16zm4-7c1.66 0 3 1.34 3 3s-1.34 3-3 3V9z"></path></g>
<g id="settings-cell"><path d="M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM16 .01L8 0C6.9 0 6 .9 6 2v16c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V2c0-1.1-.9-1.99-2-1.99zM16 16H8V4h8v12z"></path></g>
<g id="settings-ethernet"><path d="M7.77 6.76L6.23 5.48.82 12l5.41 6.52 1.54-1.28L3.42 12l4.35-5.24zM7 13h2v-2H7v2zm10-2h-2v2h2v-2zm-6 2h2v-2h-2v2zm6.77-7.52l-1.54 1.28L20.58 12l-4.35 5.24 1.54 1.28L23.18 12l-5.41-6.52z"></path></g>
<g id="settings-input-antenna"><path d="M12 5c-3.87 0-7 3.13-7 7h2c0-2.76 2.24-5 5-5s5 2.24 5 5h2c0-3.87-3.13-7-7-7zm1 9.29c.88-.39 1.5-1.26 1.5-2.29 0-1.38-1.12-2.5-2.5-2.5S9.5 10.62 9.5 12c0 1.02.62 1.9 1.5 2.29v3.3L7.59 21 9 22.41l3-3 3 3L16.41 21 13 17.59v-3.3zM12 1C5.93 1 1 5.93 1 12h2c0-4.97 4.03-9 9-9s9 4.03 9 9h2c0-6.07-4.93-11-11-11z"></path></g>
<g id="settings-input-component"><path d="M5 2c0-.55-.45-1-1-1s-1 .45-1 1v4H1v6h6V6H5V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2H9v2zm-8 0c0 1.3.84 2.4 2 2.82V23h2v-4.18C6.16 18.4 7 17.3 7 16v-2H1v2zM21 6V2c0-.55-.45-1-1-1s-1 .45-1 1v4h-2v6h6V6h-2zm-8-4c0-.55-.45-1-1-1s-1 .45-1 1v4H9v6h6V6h-2V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2h-6v2z"></path></g>
<g id="settings-input-composite"><path d="M5 2c0-.55-.45-1-1-1s-1 .45-1 1v4H1v6h6V6H5V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2H9v2zm-8 0c0 1.3.84 2.4 2 2.82V23h2v-4.18C6.16 18.4 7 17.3 7 16v-2H1v2zM21 6V2c0-.55-.45-1-1-1s-1 .45-1 1v4h-2v6h6V6h-2zm-8-4c0-.55-.45-1-1-1s-1 .45-1 1v4H9v6h6V6h-2V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2h-6v2z"></path></g>
<g id="settings-input-hdmi"><path d="M18 7V4c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v3H5v6l3 6v3h8v-3l3-6V7h-1zM8 4h8v3h-2V5h-1v2h-2V5h-1v2H8V4z"></path></g>
<g id="settings-input-svideo"><path d="M8 11.5c0-.83-.67-1.5-1.5-1.5S5 10.67 5 11.5 5.67 13 6.5 13 8 12.33 8 11.5zm7-5c0-.83-.67-1.5-1.5-1.5h-3C9.67 5 9 5.67 9 6.5S9.67 8 10.5 8h3c.83 0 1.5-.67 1.5-1.5zM8.5 15c-.83 0-1.5.67-1.5 1.5S7.67 18 8.5 18s1.5-.67 1.5-1.5S9.33 15 8.5 15zM12 1C5.93 1 1 5.93 1 12s4.93 11 11 11 11-4.93 11-11S18.07 1 12 1zm0 20c-4.96 0-9-4.04-9-9s4.04-9 9-9 9 4.04 9 9-4.04 9-9 9zm5.5-11c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm-2 5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"></path></g>
<g id="settings-overscan"><path d="M12.01 5.5L10 8h4l-1.99-2.5zM18 10v4l2.5-1.99L18 10zM6 10l-2.5 2.01L6 14v-4zm8 6h-4l2.01 2.5L14 16zm7-13H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02z"></path></g>
<g id="settings-phone"><path d="M13 9h-2v2h2V9zm4 0h-2v2h2V9zm3 6.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.58l2.2-2.21c.28-.27.36-.66.25-1.01C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1zM19 9v2h2V9h-2z"></path></g>
<g id="settings-power"><path d="M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm2-22h-2v10h2V2zm3.56 2.44l-1.45 1.45C16.84 6.94 18 8.83 18 11c0 3.31-2.69 6-6 6s-6-2.69-6-6c0-2.17 1.16-4.06 2.88-5.12L7.44 4.44C5.36 5.88 4 8.28 4 11c0 4.42 3.58 8 8 8s8-3.58 8-8c0-2.72-1.36-5.12-3.44-6.56zM15 24h2v-2h-2v2z"></path></g>
<g id="settings-remote"><path d="M15 9H9c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h6c.55 0 1-.45 1-1V10c0-.55-.45-1-1-1zm-3 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM7.05 6.05l1.41 1.41C9.37 6.56 10.62 6 12 6s2.63.56 3.54 1.46l1.41-1.41C15.68 4.78 13.93 4 12 4s-3.68.78-4.95 2.05zM12 0C8.96 0 6.21 1.23 4.22 3.22l1.41 1.41C7.26 3.01 9.51 2 12 2s4.74 1.01 6.36 2.64l1.41-1.41C17.79 1.23 15.04 0 12 0z"></path></g>
<g id="settings-voice"><path d="M7 24h2v-2H7v2zm5-11c1.66 0 2.99-1.34 2.99-3L15 4c0-1.66-1.34-3-3-3S9 2.34 9 4v6c0 1.66 1.34 3 3 3zm-1 11h2v-2h-2v2zm4 0h2v-2h-2v2zm4-14h-1.7c0 3-2.54 5.1-5.3 5.1S6.7 13 6.7 10H5c0 3.41 2.72 6.23 6 6.72V20h2v-3.28c3.28-.49 6-3.31 6-6.72z"></path></g>
<g id="shop"><path d="M16 6V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H2v13c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6h-6zm-6-2h4v2h-4V4zM9 18V9l7.5 4L9 18z"></path></g>
<g id="shop-two"><path d="M3 9H1v11c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2H3V9zm15-4V3c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H5v11c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2V5h-5zm-6-2h4v2h-4V3zm0 12V8l5.5 3-5.5 4z"></path></g>
<g id="shopping-basket"><path d="M17.21 9l-4.38-6.56c-.19-.28-.51-.42-.83-.42-.32 0-.64.14-.83.43L6.79 9H2c-.55 0-1 .45-1 1 0 .09.01.18.04.27l2.54 9.27c.23.84 1 1.46 1.92 1.46h13c.92 0 1.69-.62 1.93-1.46l2.54-9.27L23 10c0-.55-.45-1-1-1h-4.79zM9 9l3-4.4L15 9H9zm3 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"></path></g>
<g id="shopping-cart"><path d="M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2z"></path></g>
<g id="sort"><path d="M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z"></path></g>
<g id="speaker-notes"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM8 14H6v-2h2v2zm0-3H6V9h2v2zm0-3H6V6h2v2zm7 6h-5v-2h5v2zm3-3h-8V9h8v2zm0-3h-8V6h8v2z"></path></g>
<g id="speaker-notes-off"><path d="M10.54 11l-.54-.54L7.54 8 6 6.46 2.38 2.84 1.27 1.73 0 3l2.01 2.01L2 22l4-4h9l5.73 5.73L22 22.46 17.54 18l-7-7zM8 14H6v-2h2v2zm-2-3V9l2 2H6zm14-9H4.08L10 7.92V6h8v2h-7.92l1 1H18v2h-4.92l6.99 6.99C21.14 17.95 22 17.08 22 16V4c0-1.1-.9-2-2-2z"></path></g>
<g id="spellcheck"><path d="M12.45 16h2.09L9.43 3H7.57L2.46 16h2.09l1.12-3h5.64l1.14 3zm-6.02-5L8.5 5.48 10.57 11H6.43zm15.16.59l-8.09 8.09L9.83 16l-1.41 1.41 5.09 5.09L23 13l-1.41-1.41z"></path></g>
<g id="star"><path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"></path></g>
<g id="star-border"><path d="M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"></path></g>
<g id="star-half"><path d="M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4V6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"></path></g>
<g id="stars"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm4.24 16L12 15.45 7.77 18l1.12-4.81-3.73-3.23 4.92-.42L12 5l1.92 4.53 4.92.42-3.73 3.23L16.23 18z"></path></g>
<g id="store"><path d="M20 4H4v2h16V4zm1 10v-2l-1-5H4l-1 5v2h1v6h10v-6h4v6h2v-6h1zm-9 4H6v-4h6v4z"></path></g>
<g id="subdirectory-arrow-left"><path d="M11 9l1.42 1.42L8.83 14H18V4h2v12H8.83l3.59 3.58L11 21l-6-6 6-6z"></path></g>
<g id="subdirectory-arrow-right"><path d="M19 15l-6 6-1.42-1.42L15.17 16H4V4h2v10h9.17l-3.59-3.58L13 9l6 6z"></path></g>
<g id="subject"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></g>
<g id="supervisor-account"><path d="M16.5 12c1.38 0 2.49-1.12 2.49-2.5S17.88 7 16.5 7C15.12 7 14 8.12 14 9.5s1.12 2.5 2.5 2.5zM9 11c1.66 0 2.99-1.34 2.99-3S10.66 5 9 5C7.34 5 6 6.34 6 8s1.34 3 3 3zm7.5 3c-1.83 0-5.5.92-5.5 2.75V19h11v-2.25c0-1.83-3.67-2.75-5.5-2.75zM9 13c-2.33 0-7 1.17-7 3.5V19h7v-2.25c0-.85.33-2.34 2.37-3.47C10.5 13.1 9.66 13 9 13z"></path></g>
<g id="swap-horiz"><path d="M6.99 11L3 15l3.99 4v-3H14v-2H6.99v-3zM21 9l-3.99-4v3H10v2h7.01v3L21 9z"></path></g>
<g id="swap-vert"><path d="M16 17.01V10h-2v7.01h-3L15 21l4-3.99h-3zM9 3L5 6.99h3V14h2V6.99h3L9 3z"></path></g>
<g id="swap-vertical-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM6.5 9L10 5.5 13.5 9H11v4H9V9H6.5zm11 6L14 18.5 10.5 15H13v-4h2v4h2.5z"></path></g>
<g id="system-update-alt"><path d="M12 16.5l4-4h-3v-9h-2v9H8l4 4zm9-13h-6v1.99h6v14.03H3V5.49h6V3.5H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-14c0-1.1-.9-2-2-2z"></path></g>
<g id="tab"><path d="M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3V5h10v4h8v10z"></path></g>
<g id="tab-unselected"><path d="M1 9h2V7H1v2zm0 4h2v-2H1v2zm0-8h2V3c-1.1 0-2 .9-2 2zm8 16h2v-2H9v2zm-8-4h2v-2H1v2zm2 4v-2H1c0 1.1.9 2 2 2zM21 3h-8v6h10V5c0-1.1-.9-2-2-2zm0 14h2v-2h-2v2zM9 5h2V3H9v2zM5 21h2v-2H5v2zM5 5h2V3H5v2zm16 16c1.1 0 2-.9 2-2h-2v2zm0-8h2v-2h-2v2zm-8 8h2v-2h-2v2zm4 0h2v-2h-2v2z"></path></g>
<g id="text-format"><path d="M5 17v2h14v-2H5zm4.5-4.2h5l.9 2.2h2.1L12.75 4h-1.5L6.5 15h2.1l.9-2.2zM12 5.98L13.87 11h-3.74L12 5.98z"></path></g>
<g id="theaters"><path d="M18 3v2h-2V3H8v2H6V3H4v18h2v-2h2v2h8v-2h2v2h2V3h-2zM8 17H6v-2h2v2zm0-4H6v-2h2v2zm0-4H6V7h2v2zm10 8h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2V7h2v2z"></path></g>
<g id="thumb-down"><path d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z"></path></g>
<g id="thumb-up"><path d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z"></path></g>
<g id="thumbs-up-down"><path d="M12 6c0-.55-.45-1-1-1H5.82l.66-3.18.02-.23c0-.31-.13-.59-.33-.8L5.38 0 .44 4.94C.17 5.21 0 5.59 0 6v6.5c0 .83.67 1.5 1.5 1.5h6.75c.62 0 1.15-.38 1.38-.91l2.26-5.29c.07-.17.11-.36.11-.55V6zm10.5 4h-6.75c-.62 0-1.15.38-1.38.91l-2.26 5.29c-.07.17-.11.36-.11.55V18c0 .55.45 1 1 1h5.18l-.66 3.18-.02.24c0 .31.13.59.33.8l.79.78 4.94-4.94c.27-.27.44-.65.44-1.06v-6.5c0-.83-.67-1.5-1.5-1.5z"></path></g>
<g id="timeline"><path d="M23 8c0 1.1-.9 2-2 2-.18 0-.35-.02-.51-.07l-3.56 3.55c.05.16.07.34.07.52 0 1.1-.9 2-2 2s-2-.9-2-2c0-.18.02-.36.07-.52l-2.55-2.55c-.16.05-.34.07-.52.07s-.36-.02-.52-.07l-4.55 4.56c.05.16.07.33.07.51 0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2c.18 0 .35.02.51.07l4.56-4.55C8.02 9.36 8 9.18 8 9c0-1.1.9-2 2-2s2 .9 2 2c0 .18-.02.36-.07.52l2.55 2.55c.16-.05.34-.07.52-.07s.36.02.52.07l3.55-3.56C19.02 8.35 19 8.18 19 8c0-1.1.9-2 2-2s2 .9 2 2z"></path></g>
<g id="toc"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z"></path></g>
<g id="today"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"></path></g>
<g id="toll"><path d="M15 4c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6zM3 12c0-2.61 1.67-4.83 4-5.65V4.26C3.55 5.15 1 8.27 1 12s2.55 6.85 6 7.74v-2.09c-2.33-.82-4-3.04-4-5.65z"></path></g>
<g id="touch-app"><path d="M9 11.24V7.5C9 6.12 10.12 5 11.5 5S14 6.12 14 7.5v3.74c1.21-.81 2-2.18 2-3.74C16 5.01 13.99 3 11.5 3S7 5.01 7 7.5c0 1.56.79 2.93 2 3.74zm9.84 4.63l-4.54-2.26c-.17-.07-.35-.11-.54-.11H13v-6c0-.83-.67-1.5-1.5-1.5S10 6.67 10 7.5v10.74l-3.43-.72c-.08-.01-.15-.03-.24-.03-.31 0-.59.13-.79.33l-.79.8 4.94 4.94c.27.27.65.44 1.06.44h6.79c.75 0 1.33-.55 1.44-1.28l.75-5.27c.01-.07.02-.14.02-.2 0-.62-.38-1.16-.91-1.38z"></path></g>
<g id="track-changes"><path d="M19.07 4.93l-1.41 1.41C19.1 7.79 20 9.79 20 12c0 4.42-3.58 8-8 8s-8-3.58-8-8c0-4.08 3.05-7.44 7-7.93v2.02C8.16 6.57 6 9.03 6 12c0 3.31 2.69 6 6 6s6-2.69 6-6c0-1.66-.67-3.16-1.76-4.24l-1.41 1.41C15.55 9.9 16 10.9 16 12c0 2.21-1.79 4-4 4s-4-1.79-4-4c0-1.86 1.28-3.41 3-3.86v2.14c-.6.35-1 .98-1 1.72 0 1.1.9 2 2 2s2-.9 2-2c0-.74-.4-1.38-1-1.72V2h-1C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10c0-2.76-1.12-5.26-2.93-7.07z"></path></g>
<g id="translate"><path d="M12.87 15.07l-2.54-2.51.03-.03c1.74-1.94 2.98-4.17 3.71-6.53H17V4h-7V2H8v2H1v1.99h11.17C11.5 7.92 10.44 9.75 9 11.35 8.07 10.32 7.3 9.19 6.69 8h-2c.73 1.63 1.73 3.17 2.98 4.56l-5.09 5.02L4 19l5-5 3.11 3.11.76-2.04zM18.5 10h-2L12 22h2l1.12-3h4.75L21 22h2l-4.5-12zm-2.62 7l1.62-4.33L19.12 17h-3.24z"></path></g>
<g id="trending-down"><path d="M16 18l2.29-2.29-4.88-4.88-4 4L2 7.41 3.41 6l6 6 4-4 6.3 6.29L22 12v6z"></path></g>
<g id="trending-flat"><path d="M22 12l-4-4v3H3v2h15v3z"></path></g>
<g id="trending-up"><path d="M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z"></path></g>
<g id="turned-in"><path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z"></path></g>
<g id="turned-in-not"><path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2zm0 15l-5-2.18L7 18V5h10v13z"></path></g>
<g id="unarchive"><path d="M20.55 5.22l-1.39-1.68C18.88 3.21 18.47 3 18 3H6c-.47 0-.88.21-1.15.55L3.46 5.22C3.17 5.57 3 6.01 3 6.5V19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6.5c0-.49-.17-.93-.45-1.28zM12 9.5l5.5 5.5H14v2h-4v-2H6.5L12 9.5zM5.12 5l.82-1h12l.93 1H5.12z"></path></g>
<g id="undo"><path d="M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88 3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z"></path></g>
<g id="unfold-less"><path d="M7.41 18.59L8.83 20 12 16.83 15.17 20l1.41-1.41L12 14l-4.59 4.59zm9.18-13.18L15.17 4 12 7.17 8.83 4 7.41 5.41 12 10l4.59-4.59z"></path></g>
<g id="unfold-more"><path d="M12 5.83L15.17 9l1.41-1.41L12 3 7.41 7.59 8.83 9 12 5.83zm0 12.34L8.83 15l-1.41 1.41L12 21l4.59-4.59L15.17 15 12 18.17z"></path></g>
<g id="update"><path d="M21 10.12h-6.78l2.74-2.82c-2.73-2.7-7.15-2.8-9.88-.1-2.73 2.71-2.73 7.08 0 9.79 2.73 2.71 7.15 2.71 9.88 0C18.32 15.65 19 14.08 19 12.1h2c0 1.98-.88 4.55-2.64 6.29-3.51 3.48-9.21 3.48-12.72 0-3.5-3.47-3.53-9.11-.02-12.58 3.51-3.47 9.14-3.47 12.65 0L21 3v7.12zM12.5 8v4.25l3.5 2.08-.72 1.21L11 13V8h1.5z"></path></g>
<g id="verified-user"><path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm-2 16l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z"></path></g>
<g id="view-agenda"><path d="M20 13H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zm0-10H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1z"></path></g>
<g id="view-array"><path d="M4 18h3V5H4v13zM18 5v13h3V5h-3zM8 18h9V5H8v13z"></path></g>
<g id="view-carousel"><path d="M7 19h10V4H7v15zm-5-2h4V6H2v11zM18 6v11h4V6h-4z"></path></g>
<g id="view-column"><path d="M10 18h5V5h-5v13zm-6 0h5V5H4v13zM16 5v13h5V5h-5z"></path></g>
<g id="view-day"><path d="M2 21h19v-3H2v3zM20 8H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1V9c0-.55-.45-1-1-1zM2 3v3h19V3H2z"></path></g>
<g id="view-headline"><path d="M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z"></path></g>
<g id="view-list"><path d="M4 14h4v-4H4v4zm0 5h4v-4H4v4zM4 9h4V5H4v4zm5 5h12v-4H9v4zm0 5h12v-4H9v4zM9 5v4h12V5H9z"></path></g>
<g id="view-module"><path d="M4 11h5V5H4v6zm0 7h5v-6H4v6zm6 0h5v-6h-5v6zm6 0h5v-6h-5v6zm-6-7h5V5h-5v6zm6-6v6h5V5h-5z"></path></g>
<g id="view-quilt"><path d="M10 18h5v-6h-5v6zm-6 0h5V5H4v13zm12 0h5v-6h-5v6zM10 5v6h11V5H10z"></path></g>
<g id="view-stream"><path d="M4 18h17v-6H4v6zM4 5v6h17V5H4z"></path></g>
<g id="view-week"><path d="M6 5H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm14 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm-7 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z"></path></g>
<g id="visibility"><path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"></path></g>
<g id="visibility-off"><path d="M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"></path></g>
<g id="warning"><path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"></path></g>
<g id="watch-later"><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm4.2 14.2L11 13V7h1.5v5.2l4.5 2.7-.8 1.3z"></path></g>
<g id="weekend"><path d="M21 10c-1.1 0-2 .9-2 2v3H5v-3c0-1.1-.9-2-2-2s-2 .9-2 2v5c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-5c0-1.1-.9-2-2-2zm-3-5H6c-1.1 0-2 .9-2 2v2.15c1.16.41 2 1.51 2 2.82V14h12v-2.03c0-1.3.84-2.4 2-2.82V7c0-1.1-.9-2-2-2z"></path></g>
<g id="work"><path d="M20 6h-4V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-6 0h-4V4h4v2z"></path></g>
<g id="youtube-searched-for"><path d="M17.01 14h-.8l-.27-.27c.98-1.14 1.57-2.61 1.57-4.23 0-3.59-2.91-6.5-6.5-6.5s-6.5 3-6.5 6.5H2l3.84 4 4.16-4H6.51C6.51 7 8.53 5 11.01 5s4.5 2.01 4.5 4.5c0 2.48-2.02 4.5-4.5 4.5-.65 0-1.26-.14-1.82-.38L7.71 15.1c.97.57 2.09.9 3.3.9 1.61 0 3.08-.59 4.22-1.57l.27.27v.79l5.01 4.99L22 19l-4.99-5z"></path></g>
<g id="zoom-in"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14zm2.5-4h-2v2H9v-2H7V9h2V7h1v2h2v1z"></path></g>
<g id="zoom-out"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14zM7 9h5v1H7z"></path></g>
</defs></svg>
</iron-iconset-svg>`;document.head.appendChild(Sr.content);const Hr=new WeakMap,Pr=(Lr=t=>e=>{const s=Hr.get(e);if(void 0===t&&e instanceof w){if(void 0!==s||!Hr.has(e)){const t=e.committer.name;e.committer.element.removeAttribute(t)}}else t!==s&&e.setValue(t);Hr.set(e,t)},(...e)=>{const s=Lr(...e);return t.set(s,!0),s});var Lr,Vr;class Er extends Q{constructor(t,e){super(t),this.valueList=e,this._delegateChange=t=>{this.onChange(t.target.value)},this.getInputMode=()=>this.getAttribute("inputmode")||"text",this.getDataList=()=>{if(this.valueList)return k`
<datalist id="dataList">
    ${this.valueList.map((t=>k`<option value="${t}">`))}
</datalist>
        `},this.getIcon=()=>{let t=this.getAttribute("icon");if(t)return k`<div class="iconCtrl"><iron-icon icon="${t}" style="fill: ${this.theme.input_icon_color};"></iron-icon></div>`},this.getValue=()=>{let t=this.getAttribute("value");if(t)return t},this.getPlaceHolder=()=>{let t=this.getAttribute("placeholder");if(t){if(this._i18n){return this._i18n.getText(t)||""}return t}return""},this.getInputType=()=>this.getAttribute("type")||"text",this._i18n=D.of(W,this)}builder(t){return k`
        <style>
            .glass{
                background-color: ${this.theme.input_bg_color};
            }
            .sli-bg{
                width: 100%;
                min-height: ${this.theme.input_height};
                border-radius: ${this.theme.cornerRadius}
            }

            input{
                background: transparent;
                border: none;
                font-size: 1em;
                caret-color: ${this.theme.input_cursor_color};
                color: ${this.theme.input_text_color};
                padding: ${this.theme.input_padding};
                -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
                -moz-box-sizing: border-box;    /* Firefox, other Gecko */
                box-sizing: border-box;
                font-weight: bold;
            }
            input:focus{
                outline-width: 0;
            }
            input::placeholder{
                color: ${this.theme.input_place_holder_color};
            }
            .iconCtrl{
                --iron-icon-height: 30px;
                --iron-icon-width: 30px;
                display: flex;
                flex-direction: row;
                justify-content: center;
                align-items: center;
                padding-left: 5px;
            }
        </style>
        ${this.getDataList()}
        <div class="sli-bg glass">
            <lay-them in="row">
                ${this.getIcon()}
                <div style="flex: 1">
                    <input ?disabled=${this.disabled} @input=${this._delegateChange} list="${Pr(this.dataList)}"  inputmode="${this.getInputMode()}" value="${Pr(this.getValue())}" class="sli-bg" placeholder="${this.getPlaceHolder()}" type="${this.getInputType()}">
                </div>
            </lay-them>
        </div>
        `}get dataList(){if(this.valueList)return"dataList"}}class Tr extends Z{postOnChangeFunctionGiver(t){switch(t){case"userChoice":return(t,e)=>{console.log("user choice is : ",t)}}}constructor(){super({userChoice:!0,priceRange:{start:200,end:700},areDisabled:new Set([])})}validatorFunctionGiver(t){switch(t){case"userChoice":return t=>{if(void 0===t)return"value for userChoice cannot be undefined"};case"priceRange":return t=>{if(null==t)return"value cannot be null for priceRange"};case"userInput":return t=>null==t?"value cannot be null for priceRange":/[A-Za-z]/.test(t)?void 0:"Only alphabets allowed"}}}customElements.define("my-toggle-button",class extends et{constructor(){super(Tr)}}),customElements.define("my-form",class extends tt{constructor(){super(new Tr)}}),customElements.define("price-range",class extends st{constructor(){super(Tr)}}),customElements.define("my-button",class extends nt{onPress(){var t;null===(t=this.bloc)||void 0===t||t.postMessageToSnackBar("Hi this is a message for you!")}constructor(){super(G)}}),customElements.define("user-password",class extends Er{constructor(){super(Tr)}}),customElements.define("select-lang",class extends Er{constructor(){super(Tr,["English","Hindi","German"])}}),customElements.define("animated-grad-bg",class extends q{constructor(){if(super(U,{useThisBloc:new U}),this.gradient_colors=`#${this.theme.primaryColor},#${this.theme.secondaryColor}`,this.useAttribute){let t=this.useAttribute.gradients;t&&(this.gradient_colors=t)}}builder(t){return k`
            <style>
                .animated-gradient {
                    background: linear-gradient(-45deg, ${this.gradient_colors});
                    background-size: 400% 400%;
                    animation: gradient 15s ease infinite;
                }

                @keyframes gradient {
                    0% {
                        background-position: 0% 50%;
                    }
                    50% {
                        background-position: 100% 50%;
                    }
                    100% {
                        background-position: 0% 50%;
                    }
                }
                .expanded{
                    width: 100%;
                    height: 100%;
                }
                </style>

            <div class="animated-gradient expanded">
            </div>
        `}});class Or{constructor(){this.path_tree={}}define(t){const e=t.split("/");for(;""===e[0];)e.shift();if(0==e.length)return void(this.path_tree.value="/");let s=this.path_tree,i=0;for(let n of e){const r=!n.startsWith(":");let o;r?o=s.plain:(o=s.parameterized,n=n.slice(1)),o||(r?(s.plain={},o=s.plain):(s.parameterized={},o=s.parameterized));const a=o[n],l=typeof(a&&a.value?a.value:a);if("string"===l&&i===e.length-1)return;if("undefined"===l){if(e.length-1===i)return void(o[n]={value:t});o[n]={},s=o[n]}else s=o[n];i++}}find(t){const e=t.split("/");for(;""===e[0];)e.shift();if(0==e.length)return this.path_tree.value?{path_params:{},matched_pattern:"/",parent_matches:[]}:void 0;let s=this.path_tree;if(s){let t={},i=[];return s.value&&i.push("/"),this._find(0,e,s,t,i)}}_find(t,e,s,i,n){let r=e[t],o=s.plain?s.plain[r]:void 0,a=o&&o.value?o.value:void 0;if(a)return"string"==typeof a?t===e.length-1?{path_params:i,matched_pattern:a,parent_matches:n}:(t++,n.push(a),this._find(t,e,o,i,n)):(t++,this._find(t,e,o,i,n));if(o)return t++,this._find(t,e,o,i,n);if(s.parameterized)for(let a of Object.keys(s.parameterized)){o=s.parameterized[a];let l=o&&o.value?o.value:void 0;if(i[a]=r,"string"==typeof l)return t===e.length-1?{path_params:i,matched_pattern:l,parent_matches:n}:(t++,n.push(l),this._find(t,e,o,i,n));{t++;let s=this._find(t,e,o,i,n);if(s)return s;i={},t--}}}}class Ar extends N{constructor(t={url_path:"/",pathDirection:{path_params:{},matched_pattern:"/",parent_matches:[]}}){super(t),this._compass=new Or,this._compass.define("/");let e=document.location.pathname;this._init_path=e.substring(0,e.length-1),window.onpopstate=t=>{let e=t.state;this.emit({...e})}}define(t){this._compass.define(t)}popOutOfCurrentPage(){history.back()}goToPage(t,e={saveToBrowserHistory:!0,title:""}){let s=this._compass.find(t);if(s){let i={url_path:t,data:e.data,pathDirection:s};this.emit(i),e.saveToBrowserHistory&&history.pushState(i,e.title,window.location.origin+this._init_path+t)}else console.log(`No route exists for path: ${t}`)}}class kr extends N{constructor(){super(0)}}class Nr extends R{constructor(t="a-page",e=Ar){super(kr,{useThisBloc:new kr}),this.pageTagName=t,this.routeBlocType=e}connectedCallback(){super.connectedCallback();let t=D.of(this.routeBlocType,this);this.querySelectorAll(this.pageTagName).forEach((e=>{let s=e.getAttribute("route");if(!s)throw"No route defined for a page";null==t||t.define(s)}))}builder(t){return k`<div><slot></slot></div>`}}class Ir extends R{constructor(t=Ar){super(t),this._loaded_once=!1}get route(){let t=this.getAttribute("route");if(t)return t;throw"No route defined for a page"}getBehavior(){let t=this.getAttribute("behaves");return t&&(t=t.toLowerCase(),Ir._allowedBehavior.has(t))?t:"lazyhide"}toBeHidden(t){return t.pathDirection.matched_pattern!==this.route}builder(t){let e=this.toBeHidden(t);switch(this.getBehavior()){case"hide":return this._getBaseTemplate(e);case"reload":return e?k``:this._getBaseTemplate(!1);case"lazyhide":return this._loaded_once?this._getBaseTemplate(e):e?k``:(this._loaded_once=!0,this._getBaseTemplate(!1))}}_getBaseTemplate(t){return k`
    <style>
      .hide{
        display: none;
      }
      .show{
        display: block;
      }
    </style>
    <div class="${t?"hide":"show"}">
    <slot></slot>
    </div>
    `}}Ir._allowedBehavior=new Set(["hide","lazyhide","reload"]),function(t){t[t.NO_ACTION=0]="NO_ACTION",t[t.TAP=1]="TAP",t[t.SWIPE_LEFT=2]="SWIPE_LEFT",t[t.SWIPE_RIGHT=3]="SWIPE_RIGHT",t[t.SWIPE_UP=4]="SWIPE_UP",t[t.SWIPE_DOWN=5]="SWIPE_DOWN"}(Vr||(Vr={}));class Dr extends N{constructor(t,e){super(Vr.NO_ACTION),this.drag_sensitivity=t,this.minDistanceInPx=e,this.isDragging=!1,this._posStartX=-1,this._posStartY=-1,this._posEndX=-1,this._posEndY=-1,this._posCurrX=-1,this._posCurrY=-1,t>1?t=1:t<0&&(t=0),e<0&&(this.minDistanceInPx=Math.abs(e))}onStart(t,e){this._posStartX=t,this._posStartY=e}onMove(t,e){this.isDragging=!0,this._posCurrX=t,this._posCurrY=e}onEnd(t,e){if(this._posEndX=t,this._posEndY=e,this.isDragging){this.isDragging=!1;let t=(this._posEndX-this._posStartX)*this.drag_sensitivity,e=(this._posEndY-this._posStartY)*this.drag_sensitivity;Math.abs(t)>=Math.abs(e)?t>0?Math.abs(t)>this.minDistanceInPx?this.emit(Vr.SWIPE_RIGHT):this.emit(Vr.NO_ACTION):Math.abs(t)>this.minDistanceInPx?this.emit(Vr.SWIPE_LEFT):this.emit(Vr.NO_ACTION):e>0?Math.abs(e)>this.minDistanceInPx?this.emit(Vr.SWIPE_DOWN):this.emit(Vr.NO_ACTION):Math.abs(e)>this.minDistanceInPx?this.emit(Vr.SWIPE_UP):this.emit(Vr.NO_ACTION)}else this.emit(Vr.TAP)}}class Rr extends q{constructor(t=1,e=100){super(Dr,{useThisBloc:new Dr(t,e),buildWhen:(t,e)=>e!==Vr.NO_ACTION}),this.drag_sensitivity=t,this.minDistanceInPx=e,this._onTouchStart={handleEvent:t=>{var e;null===(e=this.bloc)||void 0===e||e.onStart(t.changedTouches[0].clientX,t.changedTouches[0].clientY)},passive:!0},this._onTouchEnd={handleEvent:t=>{var e;null===(e=this.bloc)||void 0===e||e.onEnd(t.changedTouches[0].clientX,t.changedTouches[0].clientY)},passive:!0},this._onTouchMove={handleEvent:t=>{var e;null===(e=this.bloc)||void 0===e||e.onMove(t.changedTouches[0].clientX,t.changedTouches[0].clientY)},passive:!0},this.onSwipeUp=()=>{},this.onSwipeDown=()=>{},this.onSwipeLeft=()=>{},this.onSwipeRight=()=>{},this.onTap=()=>{}}builder(t){switch(t){case Vr.NO_ACTION:break;case Vr.TAP:this.onTap();break;case Vr.SWIPE_LEFT:this.onSwipeLeft();break;case Vr.SWIPE_RIGHT:this.onSwipeRight();break;case Vr.SWIPE_UP:this.onSwipeUp();break;case Vr.SWIPE_DOWN:this.onSwipeDown()}return k`<div style="width:100%; height: 100%;" 
        @touchstart=${this._onTouchStart}
        @touchend=${this._onTouchEnd}
        @touchmove=${this._onTouchMove}><slot></slot></div>`}}class $r extends Ar{constructor(){super(),this._number_of_routes=0}define(t){super.define(t),this._number_of_routes++}get number_of_routes(){return this._number_of_routes}get current_index(){let t=this.state.url_path;return"/"===t?0:parseInt(t.substring(1))}}customElements.define("ut-tab-header",class extends q{constructor(){super($r)}get icon(){if(!this._icon){let t=this.getAttribute("icon");if(!t)throw"No icon attribute provided for tab header";this._icon=t}return this._icon}get indexpath(){if(!this._indexpath){let t=this.getAttribute("indexpath");if(!t)throw"no indexpath attribute provided";this._indexpath=t}return this._indexpath}connectedCallback(){var t;super.connectedCallback(),this.icon,this.indexpath,A(this.builder(null===(t=this.bloc)||void 0===t?void 0:t.state),this.shadowRoot)}builder(t){return k`
        <style>
            .icon{
                background-color: ${t.url_path===this.indexpath?"#fafafa":this.theme.tab_inactive_color};
                width: 100%;
                height: 100%;
                flex: 1;
                min-width: 50px;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                --iron-icon-height: 30px;
                --iron-icon-width: 30px;
            }
        </style>
        <div class="icon" @click=${()=>{var t;null===(t=this.bloc)||void 0===t||t.goToPage(this._indexpath,{saveToBrowserHistory:!1,title:""})}}><iron-icon icon="${this._icon}" style="fill: ${t.url_path===this.indexpath?"black":this.theme.tab_inactive_icon_color}"></iron-icon></div>
        `}}),customElements.define("tabs-gesture-detector",class extends Rr{constructor(){super(1,100),this.onSwipeLeft=()=>{if(this._routeBloc){let t;t=this._routeBloc.current_index>=this._routeBloc.number_of_routes-1?0:this._routeBloc.current_index+1,this._routeBloc.goToPage(`/${0===t?"":t}`,{saveToBrowserHistory:!1,title:""})}},this.onSwipeRight=()=>{if(this._routeBloc){let t;t=this._routeBloc.current_index<=0?this._routeBloc.number_of_routes-1:this._routeBloc.current_index-1,this._routeBloc.goToPage(`/${0===t?"":t}`,{saveToBrowserHistory:!1,title:""})}}}connectedCallback(){super.connectedCallback();let t=D.of($r,this);if(!t)throw"No TabRouterBloc found for gesture detector for tabs";this._routeBloc=t}}),customElements.define("ut-tab-controller",class extends D{constructor(){super([new $r])}getHeaders(){if(this._headers)return this._headers;{let t=this.querySelectorAll("ut-tabs > ut-tab");if(t.length>0){let e={};for(let s=0;s<t.length;s++){let i=t[s],n=i.getAttribute("icon");if(!n)throw"No icon defined for tab index: ${i}";if(!i.getAttribute("route"))throw"No route attribute present";e[n]=0===s?"/":`/${s}`}return k`<lay-them in="row">
                    ${Object.keys(e).map((t=>k`<div class="icon"><ut-tab-header icon=${t} indexpath="${e[t]}"></ut-tab-header></div>`))}
                </lay-them>`}throw"No Tabs defined for tabs controller"}}getBody(){return this.hasAttribute("disableswipe")?k`<slot></slot>`:k`
            <tabs-gesture-detector>
                <slot></slot>
            </tabs-gesture-detector>`}builder(){return k`
        <style>
            .headers{
                height: 50px;
                width: 100%;
            }
            .icon{
                flex: 1;
            }
        </style>
        <lay-them  ma="start">
            <div class="headers">
                ${this.getHeaders()}
            </div>
            <div  class="body" style="flex: 1;">
                ${this.getBody()}
            </div>
        </lay-them>
        `}}),customElements.define("ut-tabs",class extends Nr{constructor(){super("ut-tab",$r)}builder(t){return k`<div style="width: 100%; height: 100%;"><slot></slot></div>`}}),customElements.define("ut-tab",class extends Ir{constructor(){super($r),this.index=-1;let t=this.getAttribute("index");if(!t)throw"No attribute index attribute given on the tab";{this.index=parseInt(t);let e="0"===t?"/":`/${t}`;this.setAttribute("route",e)}}_getBaseTemplate(t){return k`
        <style>
          .hide{
            display: none;
          }
          .show{
            display: block;
          }
          .expanded{
              width: 100%;
              height: 100%;
          }
        </style>
        <div class="expanded ${t?"hide":"show"}">
        <slot></slot>
        </div>
        `}}),customElements.define("i18n-provider",class extends J{constructor(){super({app_name:"SamplePwa",welcome_msg:"Hi there!"})}}),customElements.define("app-theme-provider",class extends B{constructor(){super((()=>{let t=new $;return t.primaryColor="#ff2052",t.secondaryColor="#4e00ec",t.backgroundColor="#ededed",t})())}}),customElements.define("sample-pwa",class extends q{constructor(){super(U,{useThisBloc:new U})}builder(t){return k`
      <i18n-provider>
        <app-theme-provider>
            <ut-scaffold>
                <div slot="title"><ut-h1 use="color: white">app_name</ut-h1></div>
                <div slot="body" style="height: 100%">
                <ut-tab-controller>
                    <ut-tabs>
                        <ut-tab index="0" icon="account-circle"><ut-h1>welcome_msg</ut-h1></ut-tab>
                        <ut-tab index="1" icon="account-balance"><ut-h1>Some other screens1</ut-h1></ut-tab>
                        <ut-tab index="2" icon="card-travel"><ut-h1>Some other screen2</ut-h1></ut-tab>
                    </ut-tabs>
                </ut-tab-controller>
                </div>
                <div slot="menu">
                    <ut-h3>app_name</ut-h3>
                </div>
            </ut-scaffold>
        </app-theme-provider>
    </i18n-provider>
    `}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi9kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvZG9tLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3BhcnQuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvdGVtcGxhdGUuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvdGVtcGxhdGUtaW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvdGVtcGxhdGUtcmVzdWx0LmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3BhcnRzLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL2RlZmF1bHQtdGVtcGxhdGUtcHJvY2Vzc29yLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3RlbXBsYXRlLWZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvcmVuZGVyLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGl0LWh0bWwuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9ibG9jLXRoZW0vZGlzdC9zcmMvYmxvYy9ibG9jLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvYmxvYy10aGVtL2Rpc3Qvc3JjL2Jhc2UuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9ibG9jLXRoZW0vZGlzdC9zcmMvYmxvYy9ibG9jcy1wcm92aWRlci5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL2Jsb2MtdGhlbS9kaXN0L3NyYy9ibG9jL2Jsb2MtYnVpbGRlci5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL3VzZS10aGVtL2Rpc3Qvc3JjL3dpZGdldHMvdGhlbWUuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy91c2UtdGhlbS9kaXN0L3NyYy91dGlscy9ibG9jcy5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL2xheS10aGVtL2Rpc3Qvc3JjL0xheVRoZW0uanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy91c2UtdGhlbS9kaXN0L3NyYy93aWRnZXRzL3NjYWZmb2xkLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvdXNlLXRoZW0vZGlzdC9zcmMvd2lkZ2V0cy90ZXh0LmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvdXNlLXRoZW0vZGlzdC9zcmMvd2lkZ2V0cy9jb250YWluZXJzLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvdXNlLXRoZW0vZGlzdC9zcmMvd2lkZ2V0cy9mb3Jtcy5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL3VzZS10aGVtL2Rpc3Qvc3JjL3dpZGdldHMvaW5wdXRzL3RvZ2dsZWJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL3VzZS10aGVtL2Rpc3Qvc3JjL3dpZGdldHMvaW5wdXRzL3Jhbmdlc2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy91c2UtdGhlbS9kaXN0L3NyYy91dGlscy91dGlscy5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL3VzZS10aGVtL2Rpc3Qvc3JjL3dpZGdldHMvYnV0dG9ucy5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9zdHlsZS1zZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9jc3MtcGFyc2UuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWNzcy9zcmMvY29tbW9uLXJlZ2V4LmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHljc3Mvc3JjL3Vuc2NvcGVkLXN0eWxlLWhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWNzcy9zcmMvc3R5bGUtdXRpbC5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9jb21tb24tdXRpbHMuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWNzcy9zcmMvYXBwbHktc2hpbS5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy90ZW1wbGF0ZS1tYXAuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWNzcy9zcmMvYXBwbHktc2hpbS11dGlscy5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9kb2N1bWVudC13YWl0LmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHljc3Mvc3JjL2N1c3RvbS1zdHlsZS1pbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWNzcy9lbnRyeXBvaW50cy9hcHBseS1zaGltLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvYm9vdC5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL3Jlc29sdmUtdXJsLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvc2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9taXhpbi5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL2VsZW1lbnRzL2RvbS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9zdHlsZS1nYXRoZXIuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy93cmFwLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2Nhc2UtbWFwLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9taXhpbnMvcHJvcGVydGllcy1jaGFuZ2VkLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvbWl4aW5zL3Byb3BlcnR5LWFjY2Vzc29ycy5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy90ZW1wbGF0ZS1zdGFtcC5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy9wcm9wZXJ0eS1lZmZlY3RzLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvdGVsZW1ldHJ5LmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvbWl4aW5zL3Byb3BlcnRpZXMtbWl4aW4uanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9taXhpbnMvZWxlbWVudC1taXhpbi5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2RlYm91bmNlLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvZ2VzdHVyZXMuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9taXhpbnMvZ2VzdHVyZS1ldmVudC1saXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9taXhpbnMvZGlyLW1peGluLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvdW5yZXNvbHZlZC5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2FycmF5LXNwbGljZS5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2ZsYXR0ZW5lZC1ub2Rlcy1vYnNlcnZlci5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2ZsdXNoLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvbGVnYWN5L3BvbHltZXIuZG9tLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvc2NvcGUtc3VidHJlZS5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy9kaXNhYmxlLXVwZ3JhZGUtbWl4aW4uanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9sZWdhY3kvbGVnYWN5LWVsZW1lbnQtbWl4aW4uanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9sZWdhY3kvY2xhc3MuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9sZWdhY3kvcG9seW1lci1mbi5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy9tdXRhYmxlLWRhdGEuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy90ZW1wbGF0aXplLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvaGlkZS10ZW1wbGF0ZS1jb250cm9scy5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL2VsZW1lbnRzL2RvbS1iaW5kLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvaHRtbC10YWcuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL3BvbHltZXItZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL2VsZW1lbnRzL2RvbS1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9lbGVtZW50cy9kb20taWYuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9lbGVtZW50cy9hcnJheS1zZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL2VudHJ5cG9pbnRzL2N1c3RvbS1zdHlsZS1pbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9lbGVtZW50cy9jdXN0b20tc3R5bGUuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9sZWdhY3kvbXV0YWJsZS1kYXRhLWJlaGF2aW9yLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9wb2x5bWVyLWxlZ2FjeS5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL2lyb24tZmxleC1sYXlvdXQvaXJvbi1mbGV4LWxheW91dC5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL2lyb24tbWV0YS9pcm9uLW1ldGEuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9pcm9uLWljb24vaXJvbi1pY29uLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvaXJvbi1pY29uc2V0LXN2Zy9pcm9uLWljb25zZXQtc3ZnLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvaXJvbi1pY29ucy9pcm9uLWljb25zLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlcy9pZi1kZWZpbmVkLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvdXNlLXRoZW0vZGlzdC9zcmMvd2lkZ2V0cy9nZXN0dXJlZGV0ZWN0b3IuanMiLCJ3ZWJwYWNrOi8vc2FtcGxlLXB3YS8uL25vZGVfbW9kdWxlcy91c2UtdGhlbS9kaXN0L3NyYy93aWRnZXRzL2lucHV0cy90ZXh0aW5wdXRzLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvdXNlLXRoZW0vZGlzdC9zcmMvd2lkZ2V0cy90ZXN0LmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvdXNlLXRoZW0vZGlzdC9zcmMvd2lkZ2V0cy9iYWNrZ3JvdW5kcy5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL3JvdXRlLXRoZW0vZGlzdC9zcmMvY29tcGFzcy5qcyIsIndlYnBhY2s6Ly9zYW1wbGUtcHdhLy4vbm9kZV9tb2R1bGVzL3JvdXRlLXRoZW0vZGlzdC9zcmMvUm91dGVUaGVtLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9ub2RlX21vZHVsZXMvdXNlLXRoZW0vZGlzdC9zcmMvd2lkZ2V0cy90YWJzLmpzIiwid2VicGFjazovL3NhbXBsZS1wd2EvLi9zcmMvc2FtcGxlLXB3YS50cyJdLCJuYW1lcyI6WyJkaXJlY3RpdmVzIiwiV2Vha01hcCIsImlzRGlyZWN0aXZlIiwibyIsImhhcyIsImlzQ0VQb2x5ZmlsbCIsIndpbmRvdyIsImN1c3RvbUVsZW1lbnRzIiwidW5kZWZpbmVkIiwicG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayIsInJlbW92ZU5vZGVzIiwiY29udGFpbmVyIiwic3RhcnQiLCJlbmQiLCJuIiwibmV4dFNpYmxpbmciLCJyZW1vdmVDaGlsZCIsIm5vQ2hhbmdlIiwibm90aGluZyIsIm1hcmtlciIsIlN0cmluZyIsIk1hdGgiLCJyYW5kb20iLCJzbGljZSIsIm5vZGVNYXJrZXIiLCJtYXJrZXJSZWdleCIsIlJlZ0V4cCIsImJvdW5kQXR0cmlidXRlU3VmZml4IiwiVGVtcGxhdGUiLCJyZXN1bHQiLCJlbGVtZW50IiwidGhpcyIsInBhcnRzIiwibm9kZXNUb1JlbW92ZSIsInN0YWNrIiwid2Fsa2VyIiwiZG9jdW1lbnQiLCJjcmVhdGVUcmVlV2Fsa2VyIiwiY29udGVudCIsImxhc3RQYXJ0SW5kZXgiLCJpbmRleCIsInBhcnRJbmRleCIsInN0cmluZ3MiLCJ2YWx1ZXMiLCJsZW5ndGgiLCJub2RlIiwibmV4dE5vZGUiLCJub2RlVHlwZSIsImhhc0F0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwiY291bnQiLCJpIiwiZW5kc1dpdGgiLCJuYW1lIiwic3RyaW5nRm9yUGFydCIsImxhc3RBdHRyaWJ1dGVOYW1lUmVnZXgiLCJleGVjIiwiYXR0cmlidXRlTG9va3VwTmFtZSIsInRvTG93ZXJDYXNlIiwiYXR0cmlidXRlVmFsdWUiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzdGF0aWNzIiwic3BsaXQiLCJwdXNoIiwidHlwZSIsInRhZ05hbWUiLCJjdXJyZW50Tm9kZSIsImRhdGEiLCJpbmRleE9mIiwicGFyZW50IiwicGFyZW50Tm9kZSIsImxhc3RJbmRleCIsImluc2VydCIsInMiLCJjcmVhdGVNYXJrZXIiLCJtYXRjaCIsImNyZWF0ZVRleHROb2RlIiwiaW5zZXJ0QmVmb3JlIiwicHJldmlvdXNTaWJsaW5nIiwicG9wIiwic3RyIiwic3VmZml4IiwiaXNUZW1wbGF0ZVBhcnRBY3RpdmUiLCJwYXJ0IiwiY3JlYXRlQ29tbWVudCIsIlRlbXBsYXRlSW5zdGFuY2UiLCJ0ZW1wbGF0ZSIsInByb2Nlc3NvciIsIm9wdGlvbnMiLCJfX3BhcnRzIiwic2V0VmFsdWUiLCJjb21taXQiLCJmcmFnbWVudCIsImNsb25lTm9kZSIsImltcG9ydE5vZGUiLCJub2RlSW5kZXgiLCJub2RlTmFtZSIsImhhbmRsZVRleHRFeHByZXNzaW9uIiwiaW5zZXJ0QWZ0ZXJOb2RlIiwiaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMiLCJhZG9wdE5vZGUiLCJ1cGdyYWRlIiwicG9saWN5IiwidHJ1c3RlZFR5cGVzIiwiY3JlYXRlUG9saWN5IiwiY3JlYXRlSFRNTCIsImNvbW1lbnRNYXJrZXIiLCJUZW1wbGF0ZVJlc3VsdCIsImwiLCJodG1sIiwiaXNDb21tZW50QmluZGluZyIsImNvbW1lbnRPcGVuIiwibGFzdEluZGV4T2YiLCJhdHRyaWJ1dGVNYXRjaCIsInN1YnN0ciIsImNyZWF0ZUVsZW1lbnQiLCJ2YWx1ZSIsImdldEhUTUwiLCJpbm5lckhUTUwiLCJpc1ByaW1pdGl2ZSIsImlzSXRlcmFibGUiLCJBcnJheSIsImlzQXJyYXkiLCJTeW1ib2wiLCJpdGVyYXRvciIsIkF0dHJpYnV0ZUNvbW1pdHRlciIsImRpcnR5IiwiX2NyZWF0ZVBhcnQiLCJBdHRyaWJ1dGVQYXJ0IiwidiIsInRleHQiLCJ0Iiwic2V0QXR0cmlidXRlIiwiX2dldFZhbHVlIiwiY29tbWl0dGVyIiwiZGlyZWN0aXZlIiwiTm9kZVBhcnQiLCJfX3BlbmRpbmdWYWx1ZSIsInN0YXJ0Tm9kZSIsImFwcGVuZENoaWxkIiwiZW5kTm9kZSIsInJlZiIsIl9faW5zZXJ0IiwiX19jb21taXRUZXh0IiwiX19jb21taXRUZW1wbGF0ZVJlc3VsdCIsIk5vZGUiLCJfX2NvbW1pdE5vZGUiLCJfX2NvbW1pdEl0ZXJhYmxlIiwiY2xlYXIiLCJ2YWx1ZUFzU3RyaW5nIiwidGVtcGxhdGVGYWN0b3J5IiwidXBkYXRlIiwiaW5zdGFuY2UiLCJfY2xvbmUiLCJpdGVtUGFydHMiLCJpdGVtUGFydCIsIml0ZW0iLCJhcHBlbmRJbnRvUGFydCIsImluc2VydEFmdGVyUGFydCIsIkJvb2xlYW5BdHRyaWJ1dGVQYXJ0IiwiRXJyb3IiLCJQcm9wZXJ0eUNvbW1pdHRlciIsInN1cGVyIiwic2luZ2xlIiwiUHJvcGVydHlQYXJ0IiwiZXZlbnRPcHRpb25zU3VwcG9ydGVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfZSIsIkV2ZW50UGFydCIsImV2ZW50TmFtZSIsImV2ZW50Q29udGV4dCIsIl9fYm91bmRIYW5kbGVFdmVudCIsImUiLCJoYW5kbGVFdmVudCIsIm5ld0xpc3RlbmVyIiwib2xkTGlzdGVuZXIiLCJzaG91bGRSZW1vdmVMaXN0ZW5lciIsImNhcHR1cmUiLCJvbmNlIiwicGFzc2l2ZSIsInNob3VsZEFkZExpc3RlbmVyIiwiX19vcHRpb25zIiwiZ2V0T3B0aW9ucyIsImV2ZW50IiwiY2FsbCIsInByZWZpeCIsInRlbXBsYXRlQ2FjaGUiLCJ0ZW1wbGF0ZUNhY2hlcyIsImdldCIsInN0cmluZ3NBcnJheSIsImtleVN0cmluZyIsIk1hcCIsInNldCIsImtleSIsImpvaW4iLCJnZXRUZW1wbGF0ZUVsZW1lbnQiLCJmaXJzdENoaWxkIiwiT2JqZWN0IiwiYXNzaWduIiwiYXBwZW5kSW50byIsImluaXRTdGF0ZSIsIl9saXN0ZW5lcl9pZF9yZWYiLCJfbGlzdGVuZXJzIiwiX3N0YXRlIiwibmV3U3RhdGUiLCJrZXlzIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiYVB1cmVGdW5jdGlvbiIsImxpc3RlbmluZ0lkIiwiSFRNTEVsZW1lbnQiLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwidDEiLCJfdXNlQXR0ciIsInBhcnNlVXNlQXR0cmlidXRlIiwiYXR0clN0cmluZyIsInQyIiwidDMiLCJ0cmltIiwiYmxvY3MiLCJfYnVpbGQiLCJibG9jVHlwZSIsImJsb2MiLCJjb25zdHJ1Y3RvciIsInN0YXJ0aW5nRWxlbWVudCIsIm90aGVyU2VhcmNoQ3JpdGVyaWEiLCJjdXJyZW50RWwiLCJfYSIsImZvdW5kX2Jsb2MiLCJfZmluZEJsb2MiLCJCbG9jQnVpbGRlciIsIlNoYWRvd1Jvb3QiLCJob3N0IiwiZ3VpIiwiYnVpbGRlciIsInNoYWRvd1Jvb3QiLCJjb25maWdzIiwiX2NvbmZpZ3MiLCJidWlsZFdoZW4iLCJwcmVTdGF0ZSIsIl9ibG9jIiwic3RhdGUiLCJfaW5pdGlhbGl6ZSIsInVzZVRoaXNCbG9jIiwiX3ByZXZTdGF0ZSIsIl9zdWJzY3JpcHRpb25JZCIsIl9saXN0ZW4iLCJfc3RvcExpc3RlbmluZyIsIlRoZW1lIiwicHJpbWFyeUNvbG9yIiwic2Vjb25kYXJ5Q29sb3IiLCJpY29uQ29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb3JuZXJSYWRpdXMiLCJpbnB1dF9iZ19jb2xvciIsImlucHV0X2hlaWdodCIsImlucHV0X3BhZGRpbmciLCJpbnB1dF9jdXJzb3JfY29sb3IiLCJpbnB1dF90ZXh0X2NvbG9yIiwiaW5wdXRfcGxhY2VfaG9sZGVyX2NvbG9yIiwiaW5wdXRfaWNvbl9jb2xvciIsImJ1dHRvbl9kaXNhYmxlX2NvbG9yIiwic25hY2tfYmFyX2JnIiwiZ2xhc3NfYmxhY2siLCJQX2ZvbnRfc2l6ZSIsIkgzX2ZvbnRfc2l6ZSIsIkgyX2ZvbnRfc2l6ZSIsIkgxX2ZvbnRfc2l6ZSIsIkg1X2ZvbnRfc2l6ZSIsIkg2X2ZvbnRfc2l6ZSIsImNvbG9yIiwidGFiX2luYWN0aXZlX2NvbG9yIiwidGFiX2luYWN0aXZlX2ljb25fY29sb3IiLCJUaGVtZUJsb2MiLCJpbml0VGhlbWUiLCJuZXdUaGVtZSIsImVtaXQiLCJUaGVtZVByb3ZpZGVyIiwidGhlbWUiLCJ1c2VUaGVtVGhlbWUiLCJBY3Rpb25CbG9jIiwiX3RoZW1lIiwidXNlQXR0cmlidXRlIiwiX0xheVRoZW1CbG9jIiwiZGVmaW5lIiwiX2luIiwibGF5X3RoZW1faW4iLCJtYSIsIm1haW5fYXhpc19hbGlnbm1lbnQiLCJjYSIsImNyb3NzX2F4aXNfYWxpZ25tZW50IiwiU2NhZmZvbGRCbG9jIiwic2hvd01lbnUiLCJzaG93U25hY2tiYXIiLCJtZXNzYWdlIiwidGltZW91dCIsInNuYWNrQmFyTWVzc2FnZSIsInNldFRpbWVvdXQiLCJ0b2dnbGVNZW51QmFyIiwidG9nZ2xlTWVudSIsInF1ZXJ5U2VsZWN0b3IiLCJiZWdpbkVsZW1lbnQiLCJJMThOQmxvYyIsInRleHRLZXkiLCJJMThOQmxvY1Byb3ZpZGVyIiwiX0kxOE5UZXh0IiwiX2ZvbnRfc2l6ZSIsIl9nZXRUZXh0IiwidGV4dENvbnRlbnQiLCJmb250X3NpemUiLCJGb3JtTWVzc2FnZUJsb2MiLCJuYW1lT2ZJbnB1dCIsIm1zZyIsIkZvcm1CbG9jIiwiYXJlRGlzYWJsZWQiLCJTZXQiLCJhZGQiLCJkZWxldGUiLCJuZXdWYWx1ZSIsIkZvcm1JbnB1dEJ1aWxkZXIiLCJpc0Rpc2FibGVkIiwiX2IiLCJfYyIsImNvbm5lY3RlZENhbGxiYWNrIiwibWVzc2FnZUJsb2MiLCJ2YWxpZGF0b3IiLCJ2YWxpZGF0b3JGdW5jdGlvbkdpdmVyIiwicG9zdE9uQ2hhbmdlIiwicG9zdE9uQ2hhbmdlRnVuY3Rpb25HaXZlciIsIl9iYXNpY09uQ2hhbmdlIiwib25DaGFuZ2UiLCJwb3N0TWVzc2FnZSIsImZvckF0dCIsIkZvcm1CbG9jUHJvdmlkZXIiLCJmb3JtQmxvYyIsIlRvZ2dsZUJ1dHRvbiIsIl9PTl9hbmltYXRlIiwiX09GRl9hbmltYXRlIiwidG9nZ2xlIiwiZGlzYWJsZWQiLCJpbnB1dENpcmNsZUNvbG9yIiwiUmFuZ2VTZWxlY3RvciIsImlzRHJhZ2luZyIsIl9kcmFnX09OIiwiX2RyYWdfT0ZGIiwiX2RyYWciLCJwb3NYIiwibWluRXgiLCJwb3NNaW4iLCJoYW5kbGVSYWRpdXMiLCJtYXhFeCIsInBvc01heCIsIl9zdGFydF9kcmFnIiwiY2hhbmdlZFRvdWNoZXMiLCJjbGllbnRYIiwicG9zRW5kIiwic2V0U3RhcnRQb3MiLCJzZXRBY3RpdmVTdGFydCIsIl9wb3N0Q2hhbmdlIiwiX2VuZF9kcmFnIiwicG9zU3RhcnQiLCJzZXRFbmRQb3MiLCJzZXRBY3RpdmVFbmQiLCJfc3RhcnRfZHJhZ0hhbmRsZXIiLCJfZW5kX2RyYWdIYW5kbGVyIiwid2lkdGgiLCJtYXgiLCJtaW4iLCJOdW1iZXIiLCJpc2ludCIsInN0YXJ0X2NvbG9yIiwiZW5kX2NvbG9yIiwiYmFzZV9jb2xvciIsInRvRml4ZWQiLCJlbiIsInBvc2l0aW9uVG9WYWx1ZSIsInN0IiwiZmxvb3IiLCJwZXJjZW50YWdlIiwiX2QiLCJfZiIsIl9nIiwicHJpY2VSYW5nZSIsImNsaWVudFdpZHRoIiwibGVmdCIsImNsaWVudExlZnQiLCJzdGFydF9wb3NYIiwicGVyY2VudGFnZVRvUG9zaXRpb24iLCJ2YWx1ZVRvUGVyY2VudGFnZSIsImVuZF9wb3NYIiwiZCIsIkNvbG9yVXRpbCIsInBlcmNlbnQiLCJSIiwicGFyc2VJbnQiLCJzdWJzdHJpbmciLCJHIiwiQiIsInRvU3RyaW5nIiwiUmFpc2VkQnV0dG9uIiwiYnV0dG9uQWN0aW9uIiwib25QcmVzcyIsImJnQ29sb3IiLCJiZ2MiLCJvblByZXNzQnV0dG9uQ29sb3IiLCJzaGFkZUNvbG9yIiwibGlnaHQiLCJoYXNBdHRyaWJ1dGUiLCJuYXRpdmVDc3NWYXJpYWJsZXNfIiwiY3NzQnVpbGQiLCJjYWxjQ3NzVmFyaWFibGVzIiwic2V0dGluZ3MiLCJCb29sZWFuIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiQ1NTIiwic3VwcG9ydHMiLCJTaGFkeUNTUyIsImRpc2FibGVSdW50aW1lIiwibmF0aXZlQ3NzIiwiU3R5bGVOb2RlIiwicGFyc2UiLCJwYXJzZUNzcyIsInJvb3QiLCJPUEVOX0JSQUNFIiwicCIsInByZXZpb3VzIiwiQ0xPU0VfQlJBQ0UiLCJsZXgiLCJyZXBsYWNlIiwiUlgiLCJjb21tZW50cyIsInBvcnQiLCJzcyIsImNvZGUiLCJhcmd1bWVudHMiLCJyZXBlYXQiLCJfZXhwYW5kVW5pY29kZUVzY2FwZXMiLCJtdWx0aXBsZVNwYWNlcyIsIkFUX1NUQVJUIiwiTUVESUFfU1RBUlQiLCJNRURJQV9SVUxFIiwia2V5ZnJhbWVzUnVsZSIsIktFWUZSQU1FU19SVUxFIiwiVkFSX1NUQVJUIiwiTUlYSU5fUlVMRSIsIlNUWUxFX1JVTEUiLCJyJCIsInIiLCJzdHJpbmdpZnkiLCJwcmVzZXJ2ZVByb3BlcnRpZXMiLCJjc3NUZXh0IiwicnVsZXMiLCJfaGFzTWl4aW5SdWxlcyIsIm1peGluQXBwbHkiLCJ2YXJBcHBseSIsInJlbW92ZUN1c3RvbVByb3BBcHBseSIsImN1c3RvbVByb3AiLCJtaXhpblByb3AiLCJyZW1vdmVDdXN0b21Qcm9wQXNzaWdubWVudCIsInJlbW92ZUN1c3RvbVByb3BzIiwiVkFSX0FTU0lHTiIsIk1JWElOX01BVENIIiwiTUVESUFfTUFUQ0giLCJzdHlsZVRleHRTZXQiLCJwcm9jZXNzVW5zY29wZWRTdHlsZSIsInN0eWxlIiwibmV3U3R5bGUiLCJoZWFkIiwiaXNVbnNjb3BlZFN0eWxlIiwidG9Dc3NUZXh0IiwiY2FsbGJhY2siLCJmb3JFYWNoUnVsZSIsInJ1bGVzRm9yU3R5bGUiLCJzdHlsZVJ1bGVDYWxsYmFjayIsImtleWZyYW1lc1J1bGVDYWxsYmFjayIsIm9ubHlBY3RpdmVSdWxlcyIsInNraXBSdWxlcyIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwicHJvY2Vzc1ZhcmlhYmxlQW5kRmFsbGJhY2siLCJsZXZlbCIsImZpbmRNYXRjaGluZ1BhcmVuIiwiaW5uZXIiLCJjb21tYSIsIkNTU19CVUlMRF9BVFRSIiwiZWxlbWVudEhhc0J1aWx0Q3NzIiwiX19jc3NCdWlsZCIsImF0dHJWYWx1ZSIsImJ1aWxkQ29tbWVudCIsImxvY2FsTmFtZSIsIkNvbW1lbnQiLCJjb21tZW50UGFydHMiLCJnZXRCdWlsZENvbW1lbnQiLCJyZW1vdmVCdWlsZENvbW1lbnQiLCJnZXRDc3NCdWlsZCIsInVwZGF0ZU5hdGl2ZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImdldENvbXB1dGVkU3R5bGVWYWx1ZSIsInByb3BlcnR5IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJBUFBMWV9OQU1FX0NMRUFOIiwiSU5JVElBTF9JTkhFUklUIiwiSU1QT1JUQU5UIiwiTWl4aW5NYXAiLCJfbWFwIiwicHJvcHMiLCJkZXBlbmRhbnRzIiwiaW52YWxpZENhbGxiYWNrIiwiQXBwbHlTaGltIiwiX2N1cnJlbnRFbGVtZW50IiwiX21lYXN1cmVFbGVtZW50IiwidGVzdCIsImRldGVjdE1peGluIiwic3R5bGVUZXh0Iiwic3R5bGVUZXh0UGFydHMiLCJzdHlsZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ2F0aGVyU3R5bGVUZXh0IiwiZWxlbWVudE5hbWUiLCJfZ2F0aGVyZWRTdHlsZSIsImdhdGhlclN0eWxlcyIsInRyYW5zZm9ybVN0eWxlIiwiYXN0IiwidHJhbnNmb3JtUnVsZXMiLCJydWxlIiwidHJhbnNmb3JtUnVsZSIsInRyYW5zZm9ybUNzc1RleHQiLCJtYXRjaFRleHQiLCJwcm9wZXJ0eU5hbWUiLCJ2YWx1ZVByb3BlcnR5IiwidmFsdWVNaXhpbiIsIl9wcm9kdWNlQ3NzUHJvcGVydGllcyIsIl9jb25zdW1lQ3NzUHJvcGVydGllcyIsImFsbCIsInN0YXJ0UnVsZSIsInRvcFJ1bGUiLCJmYWxsYmFja3MiLCJzZWVuU3RhcnRSdWxlIiwiX2Nzc1RleHRUb01hcCIsIm0iLCJtaXhpbk5hbWUiLCJpZHgiLCJhcHBseVBvcyIsImFmdGVyQXBwbHlQb3MiLCJ0ZXh0QmVmb3JlQXBwbHkiLCJ0ZXh0QWZ0ZXJBcHBseSIsImRlZmF1bHRzIiwiX2ZhbGxiYWNrc0Zyb21QcmV2aW91c1J1bGVzIiwicmVwbGFjZW1lbnQiLCJfYXRBcHBseVRvQ3NzUHJvcGVydGllcyIsInZhcnMiLCJtaXhpbkVudHJ5IiwiZiIsIl9nZXRJbml0aWFsVmFsdWVGb3JQcm9wZXJ0eSIsInJlcGxhY2VJbml0aWFsT3JJbmhlcml0Iiwib3V0Iiwic3AiLCJfcmVwbGFjZUluaXRpYWxPckluaGVyaXQiLCJtaXhpbkFzUHJvcGVydGllcyIsIm1peGluVmFsdWVzIiwiY29tYmluZWRQcm9wcyIsIm9sZFByb3BzIiwiY3JlYXRlIiwibmVlZFRvSW52YWxpZGF0ZSIsIl9pbnZhbGlkYXRlTWl4aW5FbnRyeSIsInByb3RvdHlwZSIsInRyYW5zZm9ybUN1c3RvbVN0eWxlIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJkZWZpbmVQcm9wZXJ0eSIsImNiIiwiQ1VSUkVOVF9WRVJTSU9OIiwiTkVYVF9WRVJTSU9OIiwiVkFMSURBVElOR19WRVJTSU9OIiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiaW52YWxpZGF0ZSIsImludmFsaWRhdGVUZW1wbGF0ZSIsInRlbXBsYXRlSXNWYWxpZCIsInJlc29sdmVGbiIsInJlYWR5UHJvbWlzZSIsIndoZW5SZWFkeSIsImRvY3VtZW50V2FpdCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJlYWR5U3RhdGUiLCJ0aGVuIiwiU0VFTl9NQVJLRVIiLCJDQUNIRURfU1RZTEUiLCJ0cmFuc2Zvcm1GbiIsInZhbGlkYXRlRm4iLCJDdXN0b21TdHlsZUludGVyZmFjZSIsImVucXVldWVEb2N1bWVudFZhbGlkYXRpb24iLCJjdXN0b21TdHlsZSIsImNzIiwiZ2V0U3R5bGVGb3JDdXN0b21TdHlsZSIsInN0eWxlVG9UcmFuc2Zvcm0iLCJhZGRDdXN0b21TdHlsZSIsInByb2Nlc3NTdHlsZXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZm4iLCJuZWVkc0VucXVldWUiLCJhcHBseVNoaW0iLCJBcHBseVNoaW1JbnRlcmZhY2UiLCJjdXN0b21TdHlsZUludGVyZmFjZSIsImZsdXNoQ3VzdG9tU3R5bGVzIiwiZW5zdXJlIiwic3R5bGVFbGVtZW50Iiwic2hhZG93Q2hpbGRyZW4iLCJjaGlsZHJlbiIsImNoaWxkTm9kZXMiLCJzdHlsZVN1YnRyZWUiLCJpcyIsInR5cGVFeHRlbnNpb24iLCJleHRlbmRzIiwiZ2V0SXNFeHRlbmRzIiwicHJlcGFyZVRlbXBsYXRlIiwiX3ZhbGlkYXRpbmciLCJib2R5IiwiU2NvcGluZ1NoaW0iLCJhcHBseVNoaW1JbnRlcmZhY2UiLCJlbGVtZW50RXh0ZW5kcyIsInN0eWxlRG9jdW1lbnQiLCJuYXRpdmVTaGFkb3ciLCJKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5IiwicHJvcCIsIm9iaiIsIndvcmtpbmdVUkwiLCJyZXNvbHZlRG9jIiwiQ1NTX1VSTF9SWCIsIkFCU19VUkwiLCJyZXNvbHZlVXJsIiwidXJsIiwiYmFzZVVSSSIsInUiLCJVUkwiLCJwYXRobmFtZSIsImhyZWYiLCJsb2NhdGlvbiIsImltcGxlbWVudGF0aW9uIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiYmFzZSIsImFuY2hvciIsInJlc29sdmVDc3MiLCJwcmUiLCJwb3N0IiwicGF0aEZyb21VcmwiLCJ1c2VTaGFkb3ciLCJTaGFkeURPTSIsInN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyIsIkRvY3VtZW50IiwiQ1NTU3R5bGVTaGVldCIsInNoZWV0IiwicmVwbGFjZVN5bmMiLCJhZG9wdGVkU3R5bGVTaGVldHMiLCJyb290UGF0aCIsIlBvbHltZXIiLCJzYW5pdGl6ZURPTVZhbHVlIiwicGFzc2l2ZVRvdWNoR2VzdHVyZXMiLCJzZXRQYXNzaXZlVG91Y2hHZXN0dXJlcyIsInN0cmljdFRlbXBsYXRlUG9saWN5IiwiYWxsb3dUZW1wbGF0ZUZyb21Eb21Nb2R1bGUiLCJsZWdhY3lPcHRpbWl6YXRpb25zIiwibGVnYWN5V2FybmluZ3MiLCJzeW5jSW5pdGlhbFJlbmRlciIsImxlZ2FjeVVuZGVmaW5lZCIsIm9yZGVyZWRDb21wdXRlZCIsInJlbW92ZU5lc3RlZFRlbXBsYXRlcyIsImZhc3REb21JZiIsInN1cHByZXNzVGVtcGxhdGVOb3RpZmljYXRpb25zIiwibGVnYWN5Tm9PYnNlcnZlZEF0dHJpYnV0ZXMiLCJ1c2VBZG9wdGVkU3R5bGVTaGVldHNXaXRoQnVpbHRDU1MiLCJkZWR1cGVJZCIsIk1peGluRnVuY3Rpb24iLCJfX21peGluQXBwbGljYXRpb25zIiwiX19taXhpblNldCIsImRlZHVwaW5nTWl4aW4iLCJtaXhpbiIsIm1peGluQXBwbGljYXRpb25zIiwibWl4aW5EZWR1cGVJZCIsImJhc2VTZXQiLCJtYXAiLCJleHRlbmRlZCIsIm1peGluU2V0IiwibW9kdWxlcyIsImxjTW9kdWxlcyIsInNldE1vZHVsZSIsImlkIiwibW9kdWxlIiwiZmluZE1vZHVsZSIsIkRvbU1vZHVsZSIsInNlbGVjdG9yIiwib2xkIiwibmFtZXNwYWNlIiwicmVnaXN0ZXIiLCJfX2Fzc2V0cGF0aCIsIm93bmVyIiwiSFRNTEltcG9ydHMiLCJpbXBvcnRGb3JFbGVtZW50Iiwib3duZXJEb2N1bWVudCIsImluc3QiLCJ3YXJuIiwiU0hBRFlfVU5TQ09QRURfQVRUUiIsImltcG9ydE1vZHVsZSIsIm1vZHVsZUlkIiwiaW1wb3J0Iiwic3R5bGVGb3JJbXBvcnQiLCJpbXBvcnREb2MiLCJpbXBvcnRDc3MiLCJzdHlsZXNGcm9tTW9kdWxlcyIsIm1vZHVsZUlkcyIsInN0eWxlc0Zyb21Nb2R1bGUiLCJfc3R5bGVzIiwiX3N0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzIiwic3R5bGVzRnJvbVRlbXBsYXRlIiwiYXNzZXRwYXRoIiwiZSQiLCJpbmNsdWRlIiwiZmlsdGVyIiwic2VsZiIsInAkIiwidW5zY29wZWQiLCJfdW5zY29wZWRTdHlsZSIsIl9zdHlsZSIsImNzc0Zyb21Nb2R1bGUiLCJfY3NzVGV4dCIsIl9jc3NGcm9tTW9kdWxlSW1wb3J0cyIsImNzc0Zyb21UZW1wbGF0ZSIsImlzUGF0aCIsInBhdGgiLCJkb3RJbmRleCIsImlzQW5jZXN0b3IiLCJpc0Rlc2NlbmRhbnQiLCJ0cmFuc2xhdGUiLCJuZXdCYXNlIiwibm9ybWFsaXplIiwiYXJncyIsImoiLCJpbmZvIiwibGFzdCIsImNhc2VNYXAiLCJEQVNIX1RPX0NBTUVMIiwiQ0FNRUxfVE9fREFTSCIsImRhc2hUb0NhbWVsQ2FzZSIsImRhc2giLCJ0b1VwcGVyQ2FzZSIsImNhbWVsVG9EYXNoQ2FzZSIsImNhbWVsIiwibWljcm90YXNrQ3VyckhhbmRsZSIsIm1pY3JvdGFza0xhc3RIYW5kbGUiLCJtaWNyb3Rhc2tDYWxsYmFja3MiLCJtaWNyb3Rhc2tOb2RlQ29udGVudCIsIm1pY3JvdGFza1NjaGVkdWxlZCIsIm1pY3JvdGFza05vZGUiLCJNdXRhdGlvbk9ic2VydmVyIiwibGVuIiwic3BsaWNlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0aW1lT3V0IiwiYWZ0ZXIiLCJkZWxheSIsInJ1biIsImhhbmRsZSIsImNsZWFyVGltZW91dCIsIm1pY3JvVGFzayIsIm1pY3JvdGFzayIsIlByb3BlcnRpZXNDaGFuZ2VkIiwic3VwZXJDbGFzcyIsInByb3RvIiwiX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IiLCJyZWFkT25seSIsIl9hZGRQcm9wZXJ0eVRvQXR0cmlidXRlTWFwIiwiaGFzT3duUHJvcGVydHkiLCJfX2RhdGFIYXNBY2Nlc3NvciIsIl9kZWZpbmVQcm9wZXJ0eUFjY2Vzc29yIiwiX19kYXRhQXR0cmlidXRlcyIsImF0dHIiLCJhdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkiLCJfX2RhdGEiLCJfc2V0UGVuZGluZ1Byb3BlcnR5IiwiX2ludmFsaWRhdGVQcm9wZXJ0aWVzIiwiX19kYXRhRW5hYmxlZCIsIl9fZGF0YVJlYWR5IiwiX19kYXRhSW52YWxpZCIsIl9fZGF0YVBlbmRpbmciLCJfX2RhdGFPbGQiLCJfX2RhdGFJbnN0YW5jZVByb3BzIiwiX19kYXRhQ291bnRlciIsIl9fc2VyaWFsaXppbmciLCJfaW5pdGlhbGl6ZVByb3BlcnRpZXMiLCJfZmx1c2hQcm9wZXJ0aWVzIiwiZXh0IiwiY2hhbmdlZCIsIl9zaG91bGRQcm9wZXJ0eUNoYW5nZSIsIl9pbml0aWFsaXplSW5zdGFuY2VQcm9wZXJ0aWVzIiwicmVhZHkiLCJjaGFuZ2VkUHJvcHMiLCJfc2hvdWxkUHJvcGVydGllc0NoYW5nZSIsIl9wcm9wZXJ0aWVzQ2hhbmdlZCIsImN1cnJlbnRQcm9wcyIsIl9hdHRyaWJ1dGVUb1Byb3BlcnR5IiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwiYXR0cmlidXRlIiwiX2Rlc2VyaWFsaXplVmFsdWUiLCJ0eXBlRm9yUHJvcGVydHkiLCJfdmFsdWVUb05vZGVBdHRyaWJ1dGUiLCJfc2VyaWFsaXplVmFsdWUiLCJuYXRpdmVQcm9wZXJ0aWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldFByb3RvdHlwZU9mIiwiUHJvcGVydHlBY2Nlc3NvcnMiLCJhJCIsIm9ic2VydmVkQXR0cmlidXRlcyIsIl9fZGF0YVByb3RvIiwiX2luaXRpYWxpemVQcm90b1Byb3BlcnRpZXMiLCJfc2V0UHJvcGVydHkiLCJEYXRlIiwiSlNPTiIsIngiLCJvdXRWYWx1ZSIsImlzTmFOIiwibW9kZWwiLCJzYXZlQWNjZXNzb3JWYWx1ZSIsInRlbXBsYXRlRXh0ZW5zaW9ucyIsInBsYWNlaG9sZGVyQnVnRGV0ZWN0IiwicGxhY2Vob2xkZXJCdWciLCJ3cmFwVGVtcGxhdGVFeHRlbnNpb24iLCJyZXBsYWNlQ2hpbGQiLCJmaW5kVGVtcGxhdGVOb2RlIiwibm9kZUluZm8iLCJwYXJlbnRJbmZvIiwicGFyZW50SW5kZXgiLCJhcHBseUlkVG9NYXAiLCJhcHBseUV2ZW50TGlzdGVuZXIiLCJldmVudHMiLCJfYWRkTWV0aG9kRXZlbnRMaXN0ZW5lclRvTm9kZSIsImFwcGx5VGVtcGxhdGVJbmZvIiwicGFyZW50VGVtcGxhdGVJbmZvIiwidGVtcGxhdGVJbmZvIiwiX3RlbXBsYXRlSW5mbyIsIl9wYXJlbnRUZW1wbGF0ZUluZm8iLCJUZW1wbGF0ZVN0YW1wIiwib3V0ZXJUZW1wbGF0ZUluZm8iLCJub2RlSW5mb0xpc3QiLCJuZXN0ZWRUZW1wbGF0ZSIsInN0cmlwV2hpdGVTcGFjZSIsIl9wYXJzZVRlbXBsYXRlQ29udGVudCIsIl9wYXJzZVRlbXBsYXRlTm9kZSIsIm5vdGVkIiwiaGFzSW5zZXJ0aW9uUG9pbnQiLCJfcGFyc2VUZW1wbGF0ZU5lc3RlZFRlbXBsYXRlIiwicGxhY2Vob2xkZXIiLCJoYXNQbGFjZWhvbGRlckJ1ZyIsImZpeFBsYWNlaG9sZGVyIiwiX3BhcnNlVGVtcGxhdGVDaGlsZE5vZGVzIiwiX3BhcnNlVGVtcGxhdGVOb2RlQXR0cmlidXRlcyIsIm5leHQiLCJURVhUX05PREUiLCJjaGlsZEluZm8iLCJpbmZvSW5kZXgiLCJfcGFyc2VUZW1wbGF0ZSIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJhdHRycyIsImZyb20iLCJhIiwiX3BhcnNlVGVtcGxhdGVOb2RlQXR0cmlidXRlIiwiSFRNTFRlbXBsYXRlRWxlbWVudCIsImRlY29yYXRlIiwiZG9tIiwiX19ub0luc2VydGlvblBvaW50Iiwibm9kZXMiLCJub2RlTGlzdCIsIiQiLCJtZXRob2ROYW1lIiwiY29udGV4dCIsImhhbmRsZXIiLCJfbWV0aG9kSG9zdCIsImRldGFpbCIsImNyZWF0ZU5vZGVFdmVudEhhbmRsZXIiLCJfYWRkRXZlbnRMaXN0ZW5lclRvTm9kZSIsIk5PT1AiLCJUWVBFUyIsIkNPTVBVVEUiLCJSRUZMRUNUIiwiTk9USUZZIiwiUFJPUEFHQVRFIiwiT0JTRVJWRSIsIlJFQURfT05MWSIsImNhcGl0YWxBdHRyaWJ1dGVSZWdleCIsImVuc3VyZU93bkVmZmVjdE1hcCIsImNsb25lQXJyYXlzIiwiZWZmZWN0cyIsInByb3RvRngiLCJpbnN0RngiLCJydW5FZmZlY3RzIiwiaGFzUGF0aHMiLCJleHRyYUFyZ3MiLCJyYW4iLCJmeHMiLCJmeCIsImxhc3RSdW4iLCJwYXRoTWF0Y2hlc1RyaWdnZXIiLCJ0cmlnZ2VyIiwicnVuRWZmZWN0c0ZvclByb3BlcnR5IiwidHJpZ2dlclBhdGgiLCJzdHJ1Y3R1cmVkIiwid2lsZGNhcmQiLCJydW5PYnNlcnZlckVmZmVjdCIsIm1ldGhvZCIsImNoYW5nZWRQcm9wIiwiZHluYW1pY0ZuIiwibm90aWZ5UGF0aCIsInJvb3RQcm9wZXJ0eSIsImRpc3BhdGNoTm90aWZ5RXZlbnQiLCJxdWV1ZVByb3BlcnR5IiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwicnVuTm90aWZ5RWZmZWN0IiwicnVuUmVmbGVjdEVmZmVjdCIsImF0dHJOYW1lIiwiX3Byb3BlcnR5VG9BdHRyaWJ1dGUiLCJpbnNlcnRFZmZlY3QiLCJxdWV1ZSIsIm9yZGVyIiwibWlkIiwiY21wIiwibWV0aG9kSW5mbyIsImVucXVldWVFZmZlY3RzRm9yIiwiY29tcHV0ZUVmZmVjdHMiLCJydW5Db21wdXRlZEVmZmVjdCIsInJ1bk1ldGhvZEVmZmVjdCIsImNvbXB1dGVkUHJvcCIsImFkZEJpbmRpbmciLCJraW5kIiwidGFyZ2V0IiwibGl0ZXJhbCIsImJpbmRpbmdzIiwiYmluZGluZyIsImlzQ29tcG91bmQiLCJuZWdhdGUiLCJsaXN0ZW5lckV2ZW50IiwibGlzdGVuZXJOZWdhdGUiLCJjb21wb3VuZEluZGV4IiwiYWRkRWZmZWN0Rm9yQmluZGluZ1BhcnQiLCJkZXBlbmRlbmNpZXMiLCJldmFsdWF0b3IiLCJwYXJzZUFyZyIsIl9hZGRUZW1wbGF0ZVByb3BlcnR5RWZmZWN0IiwicnVuQmluZGluZ0VmZmVjdCIsInNvdXJjZSIsIl9faXNQcm9wZXJ0eUVmZmVjdHNDbGllbnQiLCJfc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoIiwiX2VucXVldWVDbGllbnQiLCJfZXZhbHVhdGVCaW5kaW5nIiwic3RvcmFnZSIsIl9fZGF0YUNvbXBvdW5kU3RvcmFnZSIsImNvbXB1dGVCaW5kaW5nVmFsdWUiLCJfc2V0VW5tYW5hZ2VkUHJvcGVydHlUb05vZGUiLCJhcHBseUJpbmRpbmdWYWx1ZSIsInNldHVwQ29tcG91bmRTdG9yYWdlIiwibGl0ZXJhbHMiLCJhZGROb3RpZnlMaXN0ZW5lciIsImZyb21Qcm9wIiwidG9QYXRoIiwiZnJvbVBhdGgiLCJjdXJyZW50VGFyZ2V0IiwiaGFuZGxlTm90aWZpY2F0aW9uIiwiY3JlYXRlTWV0aG9kRWZmZWN0Iiwic2lnIiwiZWZmZWN0Rm4iLCJzdGF0aWMiLCJhcmciLCJfYWRkUHJvcGVydHlFZmZlY3QiLCJfbWFyc2hhbEFyZ3MiLCJhcHBseSIsImVtcHR5QXJyYXkiLCJiaW5kaW5nUmVnZXgiLCJPUEVOX0JSQUNLRVQiLCJsaXRlcmFsRnJvbVBhcnRzIiwicGFyc2VNZXRob2QiLCJleHByZXNzaW9uIiwiYXJnTGlzdCIsInJhd0FyZyIsInBhcnNlQXJncyIsImZjIiwiZ2V0QXJnVmFsdWUiLCJub3RpZnlTcGxpY2VzIiwiYXJyYXkiLCJzcGxpY2VzIiwic3BsaWNlc0RhdGEiLCJpbmRleFNwbGljZXMiLCJfb3ZlcnJpZGVMZWdhY3lVbmRlZmluZWQiLCJub3RpZnlTcGxpY2UiLCJhZGRlZENvdW50IiwicmVtb3ZlZCIsIm9iamVjdCIsIlByb3BlcnR5RWZmZWN0cyIsInByb3BlcnR5RWZmZWN0c0Jhc2UiLCJfX2RhdGFDbGllbnRzUmVhZHkiLCJfX2RhdGFQZW5kaW5nQ2xpZW50cyIsIl9fZGF0YVRvTm90aWZ5IiwiX19kYXRhTGlua2VkUGF0aHMiLCJfX2RhdGFIYXNQYXRocyIsIl9fZGF0YUhvc3QiLCJfX2RhdGFUZW1wIiwiX19kYXRhQ2xpZW50c0luaXRpYWxpemVkIiwiX19jb21wdXRlRWZmZWN0cyIsIl9fY29tcHV0ZUluZm8iLCJfX3JlZmxlY3RFZmZlY3RzIiwiX19ub3RpZnlFZmZlY3RzIiwiX19wcm9wYWdhdGVFZmZlY3RzIiwiX19vYnNlcnZlRWZmZWN0cyIsIl9fcmVhZE9ubHkiLCJfX3RlbXBsYXRlSW5mbyIsIl9yZWdpc3Rlckhvc3QiLCJob3N0U3RhY2siLCJlZmZlY3QiLCJfaGFzUHJvcGVydHlFZmZlY3QiLCJzaG91bGROb3RpZnkiLCJpc1BhdGhOb3RpZmljYXRpb24iLCJsaW5rcyIsImxpbmsiLCJiIiwiY29tcHV0ZUxpbmtlZFBhdGhzIiwicHJvcElzUGF0aCIsInByZXZQcm9wcyIsImNsaWVudCIsIl9fZW5hYmxlT3JGbHVzaENsaWVudHMiLCJfcmVhZHlDbGllbnRzIiwiY2xpZW50cyIsIl9lbmFibGVQcm9wZXJ0aWVzIiwic2V0UmVhZE9ubHkiLCJfZmx1c2hDbGllbnRzIiwibm90aWZ5UHJvcHMiLCJvcmRlcmVkIiwiX19vcmRlcmVkQ29tcHV0ZWREZXBzIiwiY3VyciIsImNvdW50cyIsInRvdGFsIiwiaW5mb0ZvckNvbXB1dGVkIiwiY29tcHV0ZWREZXBzIiwiZGVwZW5kZW5jeUNvdW50cyIsInNoaWZ0Iiwic2l6ZSIsImNvbXB1dGVkQnlDdXJyIiwiZm9yRWFjaCIsImVsIiwiZ2V0Q29tcHV0ZWRPcmRlciIsImlucHV0UHJvcHMiLCJydW5Db21wdXRlZEVmZmVjdHMiLCJfcHJvcGFnYXRlUHJvcGVydHlDaGFuZ2VzIiwibm90aWZpZWQiLCJydW5Ob3RpZnlFZmZlY3RzIiwiX3J1bkVmZmVjdHNGb3JUZW1wbGF0ZSIsImJhc2VSdW5FZmZlY3RzIiwicHJvcGVydHlFZmZlY3RzIiwidG8iLCJpdGVtcyIsInJldCIsImhhZExlbmd0aCIsImRlbGV0ZUNvdW50IiwidW5zaGlmdCIsInByb3BQYXRoIiwicHJvdGVjdGVkU2V0dGVyIiwicGF0aFZhbHVlIiwiX2NyZWF0ZVByb3BlcnR5T2JzZXJ2ZXIiLCJfY3JlYXRlTWV0aG9kT2JzZXJ2ZXIiLCJfY3JlYXRlTm90aWZ5aW5nUHJvcGVydHkiLCJfY3JlYXRlUmVhZE9ubHlQcm9wZXJ0eSIsIl9jcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eSIsIl9jcmVhdGVDb21wdXRlZFByb3BlcnR5IiwiX2JpbmRUZW1wbGF0ZSIsImluc3RhbmNlQmluZGluZyIsIndhc1ByZUJvdW5kIiwiX19wcmVCb3VuZFRlbXBsYXRlSW5mbyIsImxhc3RDaGlsZCIsImhvc3RQcm9wcyIsIl9zdGFtcFRlbXBsYXRlIiwic2V0dXBCaW5kaW5ncyIsIl9wYXJzZUJpbmRpbmdzIiwib3JpZ05hbWUiLCJuZXN0ZWRUZW1wbGF0ZUluZm8iLCJpc0RvbUlmIiwiaXNEb21SZXBlYXQiLCJob3N0UHJvcCIsImN1c3RvbUV2ZW50Iiwibm90aWZ5RXZlbnQiLCJjb2xvbiIsInNpZ25hdHVyZSIsImR5bmFtaWNGbnMiLCJyZWdpc3RyYXRpb25zIiwiUHJvcGVydGllc01peGluIiwic3VwZXJQcm9wZXJ0aWVzQ2xhc3MiLCJzdXBlckN0b3IiLCJvd25Qcm9wZXJ0aWVzIiwib3V0cHV0Iiwibm9ybWFsaXplUHJvcGVydGllcyIsIl9fb3duUHJvcGVydGllcyIsIl9wcm9wZXJ0aWVzIiwiX19vYnNlcnZlZEF0dHJpYnV0ZXMiLCJmaW5hbGl6ZSIsIl9fZmluYWxpemVkIiwiX2ZpbmFsaXplQ2xhc3MiLCJjcmVhdGVQcm9wZXJ0aWVzIiwiX19wcm9wZXJ0aWVzIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJidWlsdENTUyIsIkVsZW1lbnRNaXhpbiIsInBvbHltZXJFbGVtZW50QmFzZSIsImNyZWF0ZVByb3BlcnR5RnJvbUNvbmZpZyIsImFsbFByb3BzIiwiY29tcHV0ZWQiLCJfaGFzUmVhZE9ubHlFZmZlY3QiLCJyZWZsZWN0VG9BdHRyaWJ1dGUiLCJfaGFzUmVmbGVjdEVmZmVjdCIsIm5vdGlmeSIsIl9oYXNOb3RpZnlFZmZlY3QiLCJvYnNlcnZlciIsIm9ic2VydmVycyIsIl9fb3duT2JzZXJ2ZXJzIiwiY3JlYXRlT2JzZXJ2ZXJzIiwiX3ByZXBhcmVUZW1wbGF0ZSIsIl90ZW1wbGF0ZSIsInByb3RvVGVtcGxhdGUiLCJtZXRhIiwiaW1wb3J0TWV0YSIsIl9pbXBvcnRQYXRoIiwiaW1wb3J0UGF0aCIsIl9maW5hbGl6ZVRlbXBsYXRlIiwiX19wcm9wZXJ0eURlZmF1bHRzIiwicHJvcGVydHlEZWZhdWx0cyIsIl9jYW5BcHBseVByb3BlcnR5RGVmYXVsdCIsIl9oYXNBY2Nlc3NvciIsIl9fcG9seW1lckZpbmFsaXplZCIsImtsYXNzIiwidGVtcGxhdGVTdHlsZXMiLCJzdHlsZXNXaXRoSW1wb3J0cyIsImxpbmtlZFN0eWxlcyIsInN0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzIiwiZmlyc3RUZW1wbGF0ZUNoaWxkIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJfcHJvY2Vzc1N0eWxlVGV4dCIsInRlbXBsYXRlU3R5bGVJbmRleCIsInRlbXBsYXRlU3R5bGUiLCJjc3MiLCJfc3R5bGVTaGVldCIsInByb2Nlc3NFbGVtZW50U3R5bGVzIiwiX2F0dGFjaERvbSIsInNoYWR5VXBncmFkZUZyYWdtZW50IiwiZmx1c2hJbml0aWFsIiwiRGVib3VuY2VyIiwiX2FzeW5jTW9kdWxlIiwiX2NhbGxiYWNrIiwiX3RpbWVyIiwiYXN5bmNNb2R1bGUiLCJkZWJvdW5jZXJRdWV1ZSIsImlzQWN0aXZlIiwiX2NhbmNlbEFzeW5jIiwiY2FuY2VsIiwiZGVib3VuY2VyIiwic2V0Q29uZmlnIiwiZW5xdWV1ZURlYm91bmNlciIsImZsdXNoRGVib3VuY2VycyIsImRpZEZsdXNoIiwiZmx1c2giLCJIQVNfTkFUSVZFX1RBIiwidG91Y2hBY3Rpb24iLCJHRVNUVVJFX0tFWSIsIkhBTkRMRURfT0JKIiwiVE9VQ0hfQUNUSU9OIiwiTU9VU0VfRVZFTlRTIiwiTU9VU0VfV0hJQ0hfVE9fQlVUVE9OUyIsIk1PVVNFX0hBU19CVVRUT05TIiwiTW91c2VFdmVudCIsImJ1dHRvbnMiLCJpc01vdXNlRXZlbnQiLCJzdXBwb3J0c1Bhc3NpdmUiLCJQQVNTSVZFX1RPVUNIIiwib3B0cyIsIklTX1RPVUNIX09OTFkiLCJjbGlja2VkTGFiZWxzIiwibGFiZWxsYWJsZSIsImNhbkJlRGlzYWJsZWQiLCJtYXRjaGluZ0xhYmVscyIsImxhYmVscyIsImdldFJvb3ROb2RlIiwibWF0Y2hpbmciLCJtb3VzZUNhbmNlbGxlciIsIm1vdXNlRXZlbnQiLCJzYyIsInNvdXJjZUNhcGFiaWxpdGllcyIsImZpcmVzVG91Y2hFdmVudHMiLCJza2lwIiwiY2xpY2tGcm9tTGFiZWwiLCJnZXRDb21wb3NlZFBhdGgiLCJFTEVNRU5UX05PREUiLCJvd25lckxhYmVscyIsIlBPSU5URVJTVEFURSIsIm1vdXNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJzZXR1cFRlYXJkb3duTW91c2VDYW5jZWxsZXIiLCJzZXR1cCIsImhhc0xlZnRNb3VzZUJ1dHRvbiIsImV2Iiwid2hpY2giLCJidXR0b24iLCJtb3VzZUlnbm9yZUpvYiIsInRvdWNoIiwieSIsInNjcm9sbERlY2lkZWQiLCJ0cmFja0RvY3VtZW50Iiwic3RhdGVPYmoiLCJtb3ZlZm4iLCJ1cGZuIiwidW50cmFja0RvY3VtZW50IiwiZGVib3VuY2UiLCJub1BhdGNoIiwiY29tcG9zZWRQYXRoIiwiZ2VzdHVyZXMiLCJyZWNvZ25pemVycyIsIl9maW5kT3JpZ2luYWxUYXJnZXQiLCJfaGFuZGxlTmF0aXZlIiwiaGFuZGxlZCIsImdvYmoiLCJncyIsInRvdWNoZXMiLCJpZGVudGlmaWVyIiwiY2xpZW50WSIsInRhIiwiZmlyc3RUb3VjaEFjdGlvbiIsInNob3VsZFByZXZlbnQiLCJkeCIsImFicyIsImR5IiwiY2FuY2VsYWJsZSIsInByZXZlbnQiLCJfaGFuZGxlVG91Y2hBY3Rpb24iLCJmbG93IiwicmVzZXQiLCJyZWNvZyIsImVtaXRzIiwic2V0VG91Y2hBY3Rpb24iLCJfZmlyZSIsIkV2ZW50IiwiYnViYmxlcyIsImNvbXBvc2VkIiwiZGVmYXVsdFByZXZlbnRlZCIsInByZXZlbnRlciIsInNvdXJjZUV2ZW50IiwiZXZOYW1lIiwicmVjb2duaXplciIsIl9maW5kUmVjb2duaXplckJ5RXZlbnQiLCJkb3dudXBGaXJlIiwidHJhY2tIYXNNb3ZlZEVub3VnaCIsInN0YXJ0ZWQiLCJ0cmFja0ZpcmUiLCJkZHgiLCJzZWNvbmRsYXN0IiwibW92ZXMiLCJsYXN0bW92ZSIsImRkeSIsImhvdmVyIiwiZWxlbWVudEZyb21Qb2ludCIsIm9sZE5leHQiLCJkZWVwVGFyZ2V0RmluZCIsInRyYWNrRm9yd2FyZCIsImJjciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhZ2VYIiwicGFnZVkiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsImlzU3ludGhldGljQ2xpY2siLCJkZXBzIiwibW91c2Vkb3duIiwidG91Y2hzdGFydCIsInRvdWNoZW5kIiwiYWRkTW92ZSIsIm1vdmUiLCJjdCIsInRvdWNobW92ZSIsIk5hTiIsImNsaWNrIiwiR2VzdHVyZUV2ZW50TGlzdGVuZXJzIiwiZXZUeXBlIiwiZGVwIiwiZ2QiLCJfY291bnQiLCJfYWRkIiwiYWRkTGlzdGVuZXIiLCJfcmVtb3ZlIiwicmVtb3ZlTGlzdGVuZXIiLCJfcmVtb3ZlRXZlbnRMaXN0ZW5lckZyb21Ob2RlIiwiSE9TVF9ESVIiLCJFTF9ESVIiLCJESVJfQ0hFQ0siLCJTSElNX1NIQURPVyIsIkRJUl9JTlNUQU5DRVMiLCJkb2N1bWVudERpciIsImdldFJUTCIsImRvY3VtZW50RWxlbWVudCIsInNldFJUTCIsIl9fYXV0b0Rpck9wdE91dCIsInVwZGF0ZURpcmVjdGlvbiIsIkRpck1peGluIiwiYXR0cmlidXRlRmlsdGVyIiwiZWxlbWVudEJhc2UiLCJEaXIiLCJfcmVwbGFjZURpckluQ3NzVGV4dCIsIl9fYWN0aXZhdGVEaXIiLCJyZXBsYWNlZFRleHQiLCJ0YWtlUmVjb3JkcyIsIm5ld1NwbGljZSIsImNhbGN1bGF0ZVNwbGljZXMiLCJjdXJyZW50IiwiY3VycmVudFN0YXJ0IiwiY3VycmVudEVuZCIsIm9sZFN0YXJ0Iiwib2xkRW5kIiwicHJlZml4Q291bnQiLCJzdWZmaXhDb3VudCIsIm1pbkxlbmd0aCIsInNlYXJjaExlbmd0aCIsImVxdWFscyIsInNoYXJlZFByZWZpeCIsImluZGV4MSIsImluZGV4MiIsInNoYXJlZFN1ZmZpeCIsIm9wcyIsImRpc3RhbmNlcyIsImVkaXRzIiwibm9ydGhXZXN0Iiwid2VzdCIsIm5vcnRoIiwicmV2ZXJzZSIsInNwbGljZU9wZXJhdGlvbnNGcm9tRWRpdERpc3RhbmNlcyIsInJvd0NvdW50IiwiY29sdW1uQ291bnQiLCJjYWxjRWRpdERpc3RhbmNlcyIsIm9sZEluZGV4IiwiY2FsY1NwbGljZXMiLCJjdXJyZW50VmFsdWUiLCJwcmV2aW91c1ZhbHVlIiwiaXNTbG90IiwiRmxhdHRlbmVkTm9kZXNPYnNlcnZlciIsIndyYXBwZWQiLCJhc3NpZ25lZE5vZGVzIiwiZmxhdHRlbiIsInJlZHVjZSIsImNvbmNhdCIsIl9zaGFkeUNoaWxkcmVuT2JzZXJ2ZXIiLCJfbmF0aXZlQ2hpbGRyZW5PYnNlcnZlciIsIl9jb25uZWN0ZWQiLCJfdGFyZ2V0IiwiX2VmZmVjdGl2ZU5vZGVzIiwiX29ic2VydmVyIiwiX3NjaGVkdWxlZCIsIl9ib3VuZFNjaGVkdWxlIiwiX3NjaGVkdWxlIiwiY29ubmVjdCIsIl9saXN0ZW5TbG90cyIsIm9ic2VydmVDaGlsZHJlbiIsIm11dGF0aW9ucyIsIl9wcm9jZXNzTXV0YXRpb25zIiwiY2hpbGRMaXN0IiwiX3VubGlzdGVuU2xvdHMiLCJ1bm9ic2VydmVDaGlsZHJlbiIsImRpc2Nvbm5lY3QiLCJfcHJvY2Vzc1Nsb3RNdXRhdGlvbnMiLCJtdXRhdGlvbiIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJuZXdOb2RlcyIsImdldEZsYXR0ZW5lZE5vZGVzIiwic2hhZHlET00iLCJkZWJvdW5jZXJzIiwiRWxlbWVudCIsIm5vcm1hbGl6ZWRNYXRjaGVzU2VsZWN0b3IiLCJtYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJEb21BcGlOYXRpdmUiLCJvYnNlcnZlckhhbmRsZSIsImNvbnRhaW5zIiwiZG9jIiwiaXAkIiwiYXNzaWduZWRTbG90IiwiZGVlcCIsImMkIiwiZ2V0RWZmZWN0aXZlQ2hpbGROb2RlcyIsImxpc3QiLCJjIiwiX2FjdGl2ZUVsZW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiZm9yd2FyZFJlYWRPbmx5UHJvcGVydGllcyIsImNvbmZpZ3VyYWJsZSIsIkV2ZW50QXBpIiwibGFzdEVsZW1lbnRDaGlsZCIsIm5leHRFbGVtZW50U2libGluZyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJjbGFzc0xpc3QiLCJEb21BcGlJbXBsIiwiV3JhcHBlciIsImxvY2FsVGFyZ2V0IiwiY3VycmVudFJvb3QiLCJnZXRPd25lclJvb3QiLCJtZXRob2RzIiwiZm9yd2FyZE1ldGhvZHMiLCJmb3J3YXJkUHJvcGVydGllcyIsImhlbHBlciIsInNhbWVTY29wZSIsInNjb3BlIiwiRElTQUJMRURfQVRUUiIsImZpbmRPYnNlcnZlZEF0dHJpYnV0ZXNHZXR0ZXIiLCJjdG9yIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9ic2VydmVkQXR0cmlidXRlc0dldHRlciIsIl9faXNVcGdyYWRlRGlzYWJsZWQiLCJfaXNQcm9wZXJ0eVBlbmRpbmciLCJpc0Nvbm5lY3RlZCIsInN0eWxlSW50ZXJmYWNlIiwiR2VzdHVyZXNFbGVtZW50IiwibGVnYWN5RWxlbWVudEJhc2UiLCJESVJFQ1RJT05fTUFQIiwiTGVnYWN5RWxlbWVudCIsImlzQXR0YWNoZWQiLCJfX2JvdW5kTGlzdGVuZXJzIiwiX2RlYm91bmNlcnMiLCJfX25lZWRzQXR0cmlidXRlc0F0Q29ubmVjdGVkIiwiX2xlZ2FjeUZvcmNlT2JzZXJ2ZWRBdHRyaWJ1dGVzIiwib2xkVmFsdWUiLCJfX2F0dHJpYnV0ZVJlYWN0aW9uIiwiX3Rha2VBdHRyaWJ1dGVzIiwiYXR0YWNoZWQiLCJkZXRhY2hlZCIsImF0dHJpYnV0ZUNoYW5nZWQiLCJfcmVnaXN0ZXJlZCIsIl9faGFzUmVnaXN0ZXJGaW5pc2hlZCIsImNyZWF0ZWQiLCJfYXBwbHlMaXN0ZW5lcnMiLCJfZW5zdXJlQXR0cmlidXRlcyIsImFwaSIsIm4kIiwicGQiLCJfX3Byb3RvX18iLCJfY29udGVudEZvclRlbXBsYXRlIiwiaGJsIiwiYmwiLCJkaXJlY3Rpb24iLCJzbGN0ciIsIkRvY3VtZW50RnJhZ21lbnQiLCJkb21BcGkiLCJxdWVyeURpc3RyaWJ1dGVkRWxlbWVudHMiLCJjbiIsInRjIiwiQ09NTUVOVF9OT0RFIiwiZ2V0RGlzdHJpYnV0ZWROb2RlcyIsImdldENvbnRlbnRDaGlsZE5vZGVzIiwidGhpc05vZGUiLCJzaG91bGRPYnNlcnZlIiwiY29udGFpbmVyU2NvcGUiLCJzY29waWZ5IiwiZWxlbWVudHMiLCJjdXJyZW50U2NvcGUiLCJtbyIsIm14bnMiLCJteG4iLCJhZGRlZE5vZGUiLCJzdWJ0cmVlIiwic2NvcGVTdWJ0cmVlIiwiam9iTmFtZSIsIndhaXQiLCJiaW5kIiwid2FpdFRpbWUiLCJ0YWciLCJlbHQiLCJzZXRQcm9wZXJ0aWVzIiwiYm9vbCIsInJlbW92ZSIsInRyYW5zZm9ybVRleHQiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJ6IiwiYXJyYXlPclBhdGgiLCJfbG9nZ2VyIiwibGlmZWN5Y2xlUHJvcHMiLCJiZWZvcmVSZWdpc3RlciIsInJlZ2lzdGVyZWQiLCJsaXN0ZW5lcnMiLCJob3N0QXR0cmlidXRlcyIsImV4Y2x1ZGVPbkluZm8iLCJiZWhhdmlvcnMiLCJfbm9BY2Nlc3NvcnMiLCJleGNsdWRlT25CZWhhdmlvcnMiLCJhcHBseUluZm8iLCJsaWZlY3ljbGUiLCJleGNsdWRlUHJvcHMiLCJub0FjY2Vzc29ycyIsInByb3BlcnR5TmFtZXMiLCJjb3B5UHJvcGVydGllcyIsImZsYXR0ZW5CZWhhdmlvcnMiLCJleGNsdWRlIiwibWVyZ2VQcm9wZXJ0aWVzIiwidGFyZ2V0SW5mbyIsInNvdXJjZUluZm8iLCJHZW5lcmF0ZUNsYXNzRnJvbUluZm8iLCJCYXNlIiwiYmVoYXZpb3JMaXN0IiwiUG9seW1lckdlbmVyYXRlZCIsImdlbmVyYXRlZFByb3RvIiwiY29weVByb3BlcnRpZXNUb1Byb3RvIiwiX2Vuc3VyZUF0dHJpYnV0ZSIsInN1cGVyQmVoYXZpb3JzIiwiYXBwbHlCZWhhdmlvcnMiLCJnZW5lcmF0ZWRGcm9tIiwiQ2xhc3MiLCJtdXRhYmxlUHJvcGVydHlDaGFuZ2UiLCJtdXRhYmxlRGF0YSIsImlzT2JqZWN0Iiwic2hvdWxkQ2hhbmdlIiwiTXV0YWJsZURhdGEiLCJPcHRpb25hbE11dGFibGVEYXRhIiwiX211dGFibGVQcm9wZXJ0eUNoYW5nZSIsIm5ld0luc3RhbmNlIiwiSFRNTFRlbXBsYXRlRWxlbWVudEV4dGVuc2lvbiIsIndyaXRhYmxlIiwiRGF0YVRlbXBsYXRlIiwiTXV0YWJsZURhdGFUZW1wbGF0ZSIsInRlbXBsYXRlSW5zdGFuY2VCYXNlIiwic2hvd0hpZGVDaGlsZHJlbiIsImhpZGUiLCJfX2hpZGVUZW1wbGF0ZUNoaWxkcmVuX18iLCJfX3BvbHltZXJUZXh0Q29udGVudF9fIiwiX19wb2x5bWVyUmVwbGFjZWRfXyIsIl9fcG9seW1lckRpc3BsYXlfXyIsImRpc3BsYXkiLCJfc2hvd0hpZGVDaGlsZHJlbiIsIlRlbXBsYXRlSW5zdGFuY2VCYXNlIiwiX2NvbmZpZ3VyZVByb3BlcnRpZXMiLCJfX3RlbXBsYXRpemVJbnN0YW5jZSIsIl9fdGVtcGxhdGl6ZU93bmVyIiwiX190ZW1wbGF0aXplT3B0aW9ucyIsImluc3RhbmNlUHJvcHMiLCJmb3J3YXJkSG9zdFByb3AiLCJocHJvcCIsIl9faG9zdFByb3BzIiwiaXByb3AiLCJwYXJlbnRNb2RlbCIsInRlbXBsYXRlSG9zdCIsIl9fcGFyZW50TW9kZWwiLCJNdXRhYmxlVGVtcGxhdGVJbnN0YW5jZUJhc2UiLCJmaW5kTWV0aG9kSG9zdCIsImNyZWF0ZUZvcndhcmRIb3N0UHJvcEVmZmVjdCIsInVzZXJGb3J3YXJkSG9zdFByb3AiLCJjcmVhdGVOb3RpZnlJbnN0YW5jZVByb3BFZmZlY3QiLCJpbnN0UHJvcCIsInVzZXJOb3RpZnlJbnN0YW5jZVByb3AiLCJ0ZW1wbGF0aXplIiwiYmFzZUNsYXNzIiwidGVtcGxhdGl6ZUluc3RhbmNlQ2xhc3MiLCJ0ZW1wbGF0aXplckJhc2UiLCJub3RpZnlJbnN0YW5jZVByb3AiLCJQUk9QRVJUWV9FRkZFQ1RfVFlQRVMiLCJoYXNIb3N0UHJvcHMiLCJhZGROb3RpZnlFZmZlY3RzIiwiY3JlYXRlVGVtcGxhdGl6ZXJDbGFzcyIsIm1ldGhvZEhvc3QiLCJpc1RlbXBsYXRlIiwidGVtcGxhdGl6ZVRlbXBsYXRlQ2xhc3MiLCJ0ZW1wbGF0aXplZEJhc2UiLCJUZW1wbGF0aXplZFRlbXBsYXRlIiwiVGVtcGxhdGl6ZWRUZW1wbGF0ZUV4dGVuc2lvbiIsImRlY2xhcmVkUHJvcHMiLCJ3YXJuT25VbmRlY2xhcmVkUHJvcGVydGllcyIsInNldFByb3RvdHlwZU9mIiwidXBncmFkZVRlbXBsYXRlIiwidmFsIiwiYWRkUHJvcGFnYXRlRWZmZWN0cyIsImVsZW1lbnRzSGlkZGVuIiwiaGlkZUVsZW1lbnRzR2xvYmFsbHkiLCJkb21CaW5kQmFzZSIsIl9fY2hpbGRyZW4iLCJyZW5kZXIiLCJfX3JlbW92ZUNoaWxkcmVuIiwiX19pbnNlcnRDaGlsZHJlbiIsIkxpdGVyYWxTdHJpbmciLCJzdHJpbmciLCJhY2MiLCJsaXRlcmFsVmFsdWUiLCJodG1sVmFsdWUiLCJQb2x5bWVyRWxlbWVudCIsImRvbVJlcGVhdEJhc2UiLCJEb21SZXBlYXQiLCJhcyIsImluZGV4QXMiLCJpdGVtc0luZGV4QXMiLCJzb3J0IiwiRnVuY3Rpb24iLCJyZW5kZXJlZEl0ZW1Db3VudCIsImluaXRpYWxDb3VudCIsInRhcmdldEZyYW1lcmF0ZSIsIl90YXJnZXRGcmFtZVRpbWUiLCJub3RpZnlEb21DaGFuZ2UiLCJyZXVzZUNodW5rZWRJbnN0YW5jZXMiLCJfX2luc3RhbmNlcyIsIl9fcmVuZGVyRGVib3VuY2VyIiwiX19pdGVtc0lkeFRvSW5zdElkeCIsIl9fY2h1bmtDb3VudCIsIl9fcmVuZGVyU3RhcnRUaW1lIiwiX19pdGVtc0FycmF5Q2hhbmdlZCIsIl9fc2hvdWxkTWVhc3VyZUNodW5rIiwiX19zaG91bGRDb250aW51ZUNodW5raW5nIiwiX19jaHVua2luZ0lkIiwiX19zb3J0Rm4iLCJfX2ZpbHRlckZuIiwiX19vYnNlcnZlUGF0aHMiLCJfX2N0b3IiLCJfX2lzRGV0YWNoZWQiLCJfX2RldGFjaEluc3RhbmNlIiwid3JhcHBlZFBhcmVudCIsIl9fYXR0YWNoSW5zdGFuY2UiLCJ0aGlzQXNUZW1wbGF0ZSIsIl9fcmVuZGVyIiwiaSQiLCJmdW5jdGlvbk9yTWV0aG9kTmFtZSIsIl9fZ2V0TWV0aG9kSG9zdCIsIl9fZnVuY3Rpb25Gcm9tUHJvcGVydHlWYWx1ZSIsIl9fZGVib3VuY2VSZW5kZXIiLCJyYXRlIiwiY2VpbCIsInBhdGhzIiwiY2hhbmdlIiwiX19oYW5kbGVJdGVtUGF0aCIsIl9fZW5zdXJlVGVtcGxhdGl6ZWQiLCJpc250SWR4VG9JdGVtc0lkeCIsIl9fc29ydEFuZEZpbHRlckl0ZW1zIiwibGltaXQiLCJfX2NhbGN1bGF0ZUxpbWl0IiwiX191cGRhdGVJbnN0YW5jZXMiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIl9fY29udGludWVDaHVua2luZyIsIl9zZXRSZW5kZXJlZEl0ZW1Db3VudCIsImZpbHRlcmVkSXRlbUNvdW50IiwiY3VycmVudENvdW50IiwibmV3Q291bnQiLCJwZXJmb3JtYW5jZSIsIm5vdyIsInJlbmRlclRpbWUiLCJyYXRpbyIsInJvdW5kIiwiaXRlbXNJZHhUb0luc3RJZHgiLCJpbnN0SWR4IiwiaXRlbUlkeCIsIl9faW5zZXJ0SW5zdGFuY2UiLCJfX2RldGFjaEFuZFJlbW92ZUluc3RhbmNlIiwid3JhcHBlZFJvb3QiLCJfX3N0YW1wSW5zdGFuY2UiLCJiZWZvcmVSb3ciLCJiZWZvcmVOb2RlIiwiaGlkZGVuIiwiaXRlbXNQYXRoIiwiZG90IiwiaXRlbXNJZHgiLCJpdGVtU3ViUGF0aCIsIl9faGFuZGxlT2JzZXJ2ZWRQYXRocyIsIml0ZW1QYXRoIiwibW9kZWxGb3JFbGVtZW50IiwiRG9tSWZCYXNlIiwiaWYiLCJyZXN0YW1wIiwiX2xhc3RJZiIsIl9fdGVtcGxhdGUiLCJET0NVTUVOVF9GUkFHTUVOVF9OT0RFIiwiX190ZWFyZG93bkluc3RhbmNlIiwiX19oYXNJbnN0YW5jZSIsIl9fZ2V0SW5zdGFuY2VOb2RlcyIsIl9fZW5zdXJlVGVtcGxhdGUiLCJfX2NyZWF0ZUFuZEluc2VydEluc3RhbmNlIiwiX19lbnN1cmVJbnN0YW5jZSIsIkRvbUlmIiwiX19pbnN0YW5jZSIsIl9fc3luY0luZm8iLCJzeW5jSW5mbyIsInJvb3RQcm9wIiwiX3JlbW92ZUJvdW5kRG9tIiwiX19oaWRkZW4iLCJfX3N5bmNIb3N0UHJvcGVydGllcyIsIl9faW52YWxpZFByb3BzIiwiYmFzZUFycmF5U2VsZWN0b3IiLCJtdWx0aSIsInNlbGVjdGVkIiwic2VsZWN0ZWRJdGVtIiwiX19sYXN0SXRlbXMiLCJfX2xhc3RNdWx0aSIsIl9fc2VsZWN0ZWRNYXAiLCJpdGVtc0luZm8iLCJuZXdJdGVtcyIsImxhc3RJdGVtcyIsImNsZWFyU2VsZWN0aW9uIiwiX19hcHBseVNwbGljZXMiLCJfX2Rlc2VsZWN0Q2hhbmdlZElkeCIsIl9fdXBkYXRlTGlua3MiLCJzaWR4IiwibGlua1BhdGhzIiwiaXNTZWxlY3RlZCIsIl9fc2VsZWN0ZWRJbmRleEZvckl0ZW1JbmRleCIsImRlc2VsZWN0Iiwic2VsZWN0SW5kZXgiLCJkZXNlbGVjdEluZGV4IiwiQXJyYXlTZWxlY3Rvck1peGluIiwiQXJyYXlTZWxlY3RvciIsIkN1c3RvbVN0eWxlIiwiY3NzRnJvbU1vZHVsZXMiLCJJcm9uTWV0YSIsInR5cGVzIiwibWV0YURhdGFzIiwiX19tZXRhIiwiX19jb21wdXRlTWV0YSIsIl9zZWxmQ2hhbmdlZCIsImJ5S2V5IiwiaWNvbiIsInNyYyIsIl9tZXRhIiwiX0RFRkFVTFRfSUNPTlNFVCIsIl9pY29uQ2hhbmdlZCIsIl9pY29uTmFtZSIsIl9pY29uc2V0TmFtZSIsIl91cGRhdGVJY29uIiwiX3NyY0NoYW5nZWQiLCJfdXNlc0ljb25zZXQiLCJfaW1nIiwiX2ljb25zZXQiLCJyZW1vdmVJY29uIiwiYXBwbHlJY29uIiwidW5saXN0ZW4iLCJsaXN0ZW4iLCJoZWlnaHQiLCJkcmFnZ2FibGUiLCJydGxNaXJyb3JpbmciLCJ1c2VHbG9iYWxSdGxBdHRyaWJ1dGUiLCJnZXRJY29uTmFtZXMiLCJfaWNvbnMiLCJfY3JlYXRlSWNvbk1hcCIsImljb25OYW1lIiwic3ZnIiwiX2Nsb25lSWNvbiIsIl90YXJnZXRJc1JUTCIsInBkZSIsIl9zdmdJY29uIiwiX190YXJnZXRJc1JUTCIsImdsb2JhbEVsZW1lbnQiLCJfbmFtZUNoYW5nZWQiLCJhc3luYyIsImZpcmUiLCJpY29ucyIsIm1pcnJvckFsbG93ZWQiLCJfcHJlcGFyZVN2Z0Nsb25lIiwic291cmNlU3ZnIiwiY3JlYXRlRWxlbWVudE5TIiwidmlld0JveCIsInByZXZpb3VzVmFsdWVzIiwiaWZEZWZpbmVkIiwiR0VTVFVSRSIsIlNpbmdsZUxpbmVJbnB1dCIsInZhbHVlTGlzdCIsIl9kZWxlZ2F0ZUNoYW5nZSIsImdldElucHV0TW9kZSIsImdldERhdGFMaXN0IiwiZ2V0SWNvbiIsImdldFZhbHVlIiwiZ2V0UGxhY2VIb2xkZXIiLCJfaTE4biIsImdldFRleHQiLCJnZXRJbnB1dFR5cGUiLCJkYXRhTGlzdCIsIk15Rm9ybUJsb2MiLCJudiIsInVzZXJDaG9pY2UiLCJwb3N0TWVzc2FnZVRvU25hY2tCYXIiLCJncmFkaWVudF9jb2xvcnMiLCJDb21wYXNzIiwicGF0aF90cmVlIiwicGF0aF9wYXR0ZXJuIiwiaXNQbGFpbiIsInN0YXJ0c1dpdGgiLCJwbGFpbiIsInBhcmFtZXRlcml6ZWQiLCJ2YWx1ZV90eXBlIiwidXJsX3BhdGgiLCJwYXRoX3BhcmFtcyIsIm1hdGNoZWRfcGF0dGVybiIsInBhcmVudF9tYXRjaGVzIiwiX2ZpbmQiLCJSb3V0ZVRoZW1CbG9jIiwicGF0aERpcmVjdGlvbiIsIl9jb21wYXNzIiwiX2luaXRfcGF0aCIsIm9ucG9wc3RhdGUiLCJvbGRTdGF0ZSIsInJvdXRlUGF0aCIsImhpc3RvcnkiLCJiYWNrIiwic2F2ZVRvQnJvd3Nlckhpc3RvcnkiLCJ0aXRsZSIsImZpbmQiLCJuZXdSb3V0ZVN0YXRlIiwicHVzaFN0YXRlIiwib3JpZ2luIiwiX0JvZ3VzQmxvYyIsIlJvdXRlVGhlbSIsInBhZ2VUYWdOYW1lIiwicm91dGVCbG9jVHlwZSIsInJvdXRlQmxvYyIsIkFQYWdlIiwiX2xvYWRlZF9vbmNlIiwiX2FsbG93ZWRCZWhhdmlvciIsInJvdXRlIiwiZG9IaWRlIiwidG9CZUhpZGRlbiIsImdldEJlaGF2aW9yIiwiX2dldEJhc2VUZW1wbGF0ZSIsIkdlc3R1cmVEZXRlY3RvckJsb2MiLCJkcmFnX3NlbnNpdGl2aXR5IiwibWluRGlzdGFuY2VJblB4IiwiTk9fQUNUSU9OIiwiaXNEcmFnZ2luZyIsIl9wb3NTdGFydFgiLCJfcG9zU3RhcnRZIiwiX3Bvc0VuZFgiLCJfcG9zRW5kWSIsIl9wb3NDdXJyWCIsIl9wb3NDdXJyWSIsInBvc1kiLCJoIiwiU1dJUEVfUklHSFQiLCJTV0lQRV9MRUZUIiwiU1dJUEVfRE9XTiIsIlNXSVBFX1VQIiwiVEFQIiwiR2VzdHVyZURldGVjdG9yIiwiX29uVG91Y2hTdGFydCIsIm9uU3RhcnQiLCJfb25Ub3VjaEVuZCIsIm9uRW5kIiwiX29uVG91Y2hNb3ZlIiwib25Nb3ZlIiwib25Td2lwZVVwIiwib25Td2lwZURvd24iLCJvblN3aXBlTGVmdCIsIm9uU3dpcGVSaWdodCIsIm9uVGFwIiwiVGFiUm91dGVyQmxvYyIsIl9udW1iZXJfb2Zfcm91dGVzIiwiX2ljb24iLCJfaW5kZXhwYXRoIiwiaW5kZXhwYXRoIiwiZ29Ub1BhZ2UiLCJfcm91dGVCbG9jIiwibmV4dF9pbmRleCIsImN1cnJlbnRfaW5kZXgiLCJudW1iZXJfb2Zfcm91dGVzIiwiX2hlYWRlcnMiLCJ0YWJzIiwibGlzdE9mSWNvbnMiLCJnZXRIZWFkZXJzIiwiZ2V0Qm9keSIsImFwcF9uYW1lIiwid2VsY29tZV9tc2ciXSwibWFwcGluZ3MiOiI7bUJBYUEsTUFBTUEsRUFBYSxJQUFJQyxRQThDVkMsRUFBZUMsR0FDSixtQkFBTkEsR0FBb0JILEVBQVdJLElBQUlELEdDNUN4Q0UsRUFBaUMsb0JBQVhDLFFBQ04sTUFBekJBLE9BQU9DLHFCQUVIQyxJQURKRixPQUFPQyxlQUFlRSwwQkFrQmJDLEVBQWMsQ0FBQ0MsRUFBV0MsRUFBT0MsRUFBTSxRQUNoRCxLQUFPRCxJQUFVQyxHQUFLLENBQ2xCLE1BQU1D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ZixjQUFtQjgvQyxHQUN0QixjQUNJM25ELE1BQU0sU0FBVXFxRCxJQUVwQixRQUFRbmxELEdBQ0osT0FBTyxDQUFLLGlFQXVDcEI5TyxlQUFleVIsT0FBTyxTQW5DZixjQUFrQmtnRCxHQUNyQixjQUNJL25ELE1BQU1xcUQsSUFDTnp5RCxLQUFLUyxPQUFTLEVBRWQsSUFBSTRGLEVBQUlyRyxLQUFLNkIsYUFBYSxTQUMxQixJQUFLd0UsRUFDRCxLQUFNLGdEQUVMLENBQ0RyRyxLQUFLUyxNQUFRc1csU0FBUzFRLEdBQ3RCLElBQUlnVSxFQUFVLE1BQU5oVSxFQUFZLElBQU0sSUFBSUEsSUFDOUJyRyxLQUFLc0csYUFBYSxRQUFTK1QsSUFHbkMsaUJBQWlCazJDLEdBQ2IsT0FBTyxDQUFLOzs7Ozs7Ozs7Ozs7OytCQWFXQSxFQUFTLE9BQVM7OzthQzlOakQveEQsZUFBZXlSLE9BQU8sZ0JBUnRCLGNBQThCb0IsRUFDMUIsY0FDSWpKLE1BQU0sQ0FDRm9yRCxTQUFVLFlBQ1ZDLFlBQWEsaUJBbUJ6QmoxRCxlQUFleVIsT0FBTyxxQkFYdEIsY0FBK0JQLEVBQzNCLGNBQ0l0SCxNQUFNLE1BQ0YsSUFBSXVILEVBQVEsSUFBSTlCLEVBSWhCLE9BSEE4QixFQUFNN0IsYUFBZSxVQUNyQjZCLEVBQU01QixlQUFpQixVQUN2QjRCLEVBQU0xQixnQkFBa0IsVUFDakIwQixHQUxMLE9Bc0NkblIsZUFBZXlSLE9BQU8sYUE1QmYsY0FBd0IsRUFDM0IsY0FDSTdILE1BQU0sRUFBVyxDQUFFb0YsWUFBYSxJQUFJLElBRXhDLFFBQVFGLEdBQ0osT0FBTyxDQUFLIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmNvbnN0IGRpcmVjdGl2ZXMgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKiBCcmFuZHMgYSBmdW5jdGlvbiBhcyBhIGRpcmVjdGl2ZSBmYWN0b3J5IGZ1bmN0aW9uIHNvIHRoYXQgbGl0LWh0bWwgd2lsbCBjYWxsXG4gKiB0aGUgZnVuY3Rpb24gZHVyaW5nIHRlbXBsYXRlIHJlbmRlcmluZywgcmF0aGVyIHRoYW4gcGFzc2luZyBhcyBhIHZhbHVlLlxuICpcbiAqIEEgX2RpcmVjdGl2ZV8gaXMgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgUGFydCBhcyBhbiBhcmd1bWVudC4gSXQgaGFzIHRoZVxuICogc2lnbmF0dXJlOiBgKHBhcnQ6IFBhcnQpID0+IHZvaWRgLlxuICpcbiAqIEEgZGlyZWN0aXZlIF9mYWN0b3J5XyBpcyBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYXJndW1lbnRzIGZvciBkYXRhIGFuZFxuICogY29uZmlndXJhdGlvbiBhbmQgcmV0dXJucyBhIGRpcmVjdGl2ZS4gVXNlcnMgb2YgZGlyZWN0aXZlIHVzdWFsbHkgcmVmZXIgdG9cbiAqIHRoZSBkaXJlY3RpdmUgZmFjdG9yeSBhcyB0aGUgZGlyZWN0aXZlLiBGb3IgZXhhbXBsZSwgXCJUaGUgcmVwZWF0IGRpcmVjdGl2ZVwiLlxuICpcbiAqIFVzdWFsbHkgYSB0ZW1wbGF0ZSBhdXRob3Igd2lsbCBpbnZva2UgYSBkaXJlY3RpdmUgZmFjdG9yeSBpbiB0aGVpciB0ZW1wbGF0ZVxuICogd2l0aCByZWxldmFudCBhcmd1bWVudHMsIHdoaWNoIHdpbGwgdGhlbiByZXR1cm4gYSBkaXJlY3RpdmUgZnVuY3Rpb24uXG4gKlxuICogSGVyZSdzIGFuIGV4YW1wbGUgb2YgdXNpbmcgdGhlIGByZXBlYXQoKWAgZGlyZWN0aXZlIGZhY3RvcnkgdGhhdCB0YWtlcyBhblxuICogYXJyYXkgYW5kIGEgZnVuY3Rpb24gdG8gcmVuZGVyIGFuIGl0ZW06XG4gKlxuICogYGBganNcbiAqIGh0bWxgPHVsPjwke3JlcGVhdChpdGVtcywgKGl0ZW0pID0+IGh0bWxgPGxpPiR7aXRlbX08L2xpPmApfTwvdWw+YFxuICogYGBgXG4gKlxuICogV2hlbiBgcmVwZWF0YCBpcyBpbnZva2VkLCBpdCByZXR1cm5zIGEgZGlyZWN0aXZlIGZ1bmN0aW9uIHRoYXQgY2xvc2VzIG92ZXJcbiAqIGBpdGVtc2AgYW5kIHRoZSB0ZW1wbGF0ZSBmdW5jdGlvbi4gV2hlbiB0aGUgb3V0ZXIgdGVtcGxhdGUgaXMgcmVuZGVyZWQsIHRoZVxuICogcmV0dXJuIGRpcmVjdGl2ZSBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgUGFydCBmb3IgdGhlIGV4cHJlc3Npb24uXG4gKiBgcmVwZWF0YCB0aGVuIHBlcmZvcm1zIGl0J3MgY3VzdG9tIGxvZ2ljIHRvIHJlbmRlciBtdWx0aXBsZSBpdGVtcy5cbiAqXG4gKiBAcGFyYW0gZiBUaGUgZGlyZWN0aXZlIGZhY3RvcnkgZnVuY3Rpb24uIE11c3QgYmUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYVxuICogZnVuY3Rpb24gb2YgdGhlIHNpZ25hdHVyZSBgKHBhcnQ6IFBhcnQpID0+IHZvaWRgLiBUaGUgcmV0dXJuZWQgZnVuY3Rpb24gd2lsbFxuICogYmUgY2FsbGVkIHdpdGggdGhlIHBhcnQgb2JqZWN0LlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IHtkaXJlY3RpdmUsIGh0bWx9IGZyb20gJ2xpdC1odG1sJztcbiAqXG4gKiBjb25zdCBpbW11dGFibGUgPSBkaXJlY3RpdmUoKHYpID0+IChwYXJ0KSA9PiB7XG4gKiAgIGlmIChwYXJ0LnZhbHVlICE9PSB2KSB7XG4gKiAgICAgcGFydC5zZXRWYWx1ZSh2KVxuICogICB9XG4gKiB9KTtcbiAqL1xuZXhwb3J0IGNvbnN0IGRpcmVjdGl2ZSA9IChmKSA9PiAoKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBkID0gZiguLi5hcmdzKTtcbiAgICBkaXJlY3RpdmVzLnNldChkLCB0cnVlKTtcbiAgICByZXR1cm4gZDtcbn0pO1xuZXhwb3J0IGNvbnN0IGlzRGlyZWN0aXZlID0gKG8pID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIG8gPT09ICdmdW5jdGlvbicgJiYgZGlyZWN0aXZlcy5oYXMobyk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICogVHJ1ZSBpZiB0aGUgY3VzdG9tIGVsZW1lbnRzIHBvbHlmaWxsIGlzIGluIHVzZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzQ0VQb2x5ZmlsbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgd2luZG93LmN1c3RvbUVsZW1lbnRzICE9IG51bGwgJiZcbiAgICB3aW5kb3cuY3VzdG9tRWxlbWVudHMucG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayAhPT1cbiAgICAgICAgdW5kZWZpbmVkO1xuLyoqXG4gKiBSZXBhcmVudHMgbm9kZXMsIHN0YXJ0aW5nIGZyb20gYHN0YXJ0YCAoaW5jbHVzaXZlKSB0byBgZW5kYCAoZXhjbHVzaXZlKSxcbiAqIGludG8gYW5vdGhlciBjb250YWluZXIgKGNvdWxkIGJlIHRoZSBzYW1lIGNvbnRhaW5lciksIGJlZm9yZSBgYmVmb3JlYC4gSWZcbiAqIGBiZWZvcmVgIGlzIG51bGwsIGl0IGFwcGVuZHMgdGhlIG5vZGVzIHRvIHRoZSBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBjb25zdCByZXBhcmVudE5vZGVzID0gKGNvbnRhaW5lciwgc3RhcnQsIGVuZCA9IG51bGwsIGJlZm9yZSA9IG51bGwpID0+IHtcbiAgICB3aGlsZSAoc3RhcnQgIT09IGVuZCkge1xuICAgICAgICBjb25zdCBuID0gc3RhcnQubmV4dFNpYmxpbmc7XG4gICAgICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoc3RhcnQsIGJlZm9yZSk7XG4gICAgICAgIHN0YXJ0ID0gbjtcbiAgICB9XG59O1xuLyoqXG4gKiBSZW1vdmVzIG5vZGVzLCBzdGFydGluZyBmcm9tIGBzdGFydGAgKGluY2x1c2l2ZSkgdG8gYGVuZGAgKGV4Y2x1c2l2ZSksIGZyb21cbiAqIGBjb250YWluZXJgLlxuICovXG5leHBvcnQgY29uc3QgcmVtb3ZlTm9kZXMgPSAoY29udGFpbmVyLCBzdGFydCwgZW5kID0gbnVsbCkgPT4ge1xuICAgIHdoaWxlIChzdGFydCAhPT0gZW5kKSB7XG4gICAgICAgIGNvbnN0IG4gPSBzdGFydC5uZXh0U2libGluZztcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKHN0YXJ0KTtcbiAgICAgICAgc3RhcnQgPSBuO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb20uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE4IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuLyoqXG4gKiBBIHNlbnRpbmVsIHZhbHVlIHRoYXQgc2lnbmFscyB0aGF0IGEgdmFsdWUgd2FzIGhhbmRsZWQgYnkgYSBkaXJlY3RpdmUgYW5kXG4gKiBzaG91bGQgbm90IGJlIHdyaXR0ZW4gdG8gdGhlIERPTS5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vQ2hhbmdlID0ge307XG4vKipcbiAqIEEgc2VudGluZWwgdmFsdWUgdGhhdCBzaWduYWxzIGEgTm9kZVBhcnQgdG8gZnVsbHkgY2xlYXIgaXRzIGNvbnRlbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBub3RoaW5nID0ge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJ0LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICogQW4gZXhwcmVzc2lvbiBtYXJrZXIgd2l0aCBlbWJlZGRlZCB1bmlxdWUga2V5IHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoXG4gKiBwb3NzaWJsZSB0ZXh0IGluIHRlbXBsYXRlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IG1hcmtlciA9IGB7e2xpdC0ke1N0cmluZyhNYXRoLnJhbmRvbSgpKS5zbGljZSgyKX19fWA7XG4vKipcbiAqIEFuIGV4cHJlc3Npb24gbWFya2VyIHVzZWQgdGV4dC1wb3NpdGlvbnMsIG11bHRpLWJpbmRpbmcgYXR0cmlidXRlcywgYW5kXG4gKiBhdHRyaWJ1dGVzIHdpdGggbWFya3VwLWxpa2UgdGV4dCB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBub2RlTWFya2VyID0gYDwhLS0ke21hcmtlcn0tLT5gO1xuZXhwb3J0IGNvbnN0IG1hcmtlclJlZ2V4ID0gbmV3IFJlZ0V4cChgJHttYXJrZXJ9fCR7bm9kZU1hcmtlcn1gKTtcbi8qKlxuICogU3VmZml4IGFwcGVuZGVkIHRvIGFsbCBib3VuZCBhdHRyaWJ1dGUgbmFtZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBib3VuZEF0dHJpYnV0ZVN1ZmZpeCA9ICckbGl0JCc7XG4vKipcbiAqIEFuIHVwZGF0YWJsZSBUZW1wbGF0ZSB0aGF0IHRyYWNrcyB0aGUgbG9jYXRpb24gb2YgZHluYW1pYyBwYXJ0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRlbXBsYXRlIHtcbiAgICBjb25zdHJ1Y3RvcihyZXN1bHQsIGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5wYXJ0cyA9IFtdO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICBjb25zdCBub2Rlc1RvUmVtb3ZlID0gW107XG4gICAgICAgIGNvbnN0IHN0YWNrID0gW107XG4gICAgICAgIC8vIEVkZ2UgbmVlZHMgYWxsIDQgcGFyYW1ldGVycyBwcmVzZW50OyBJRTExIG5lZWRzIDNyZCBwYXJhbWV0ZXIgdG8gYmUgbnVsbFxuICAgICAgICBjb25zdCB3YWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKGVsZW1lbnQuY29udGVudCwgMTMzIC8qIE5vZGVGaWx0ZXIuU0hPV197RUxFTUVOVHxDT01NRU5UfFRFWFR9ICovLCBudWxsLCBmYWxzZSk7XG4gICAgICAgIC8vIEtlZXBzIHRyYWNrIG9mIHRoZSBsYXN0IGluZGV4IGFzc29jaWF0ZWQgd2l0aCBhIHBhcnQuIFdlIHRyeSB0byBkZWxldGVcbiAgICAgICAgLy8gdW5uZWNlc3Nhcnkgbm9kZXMsIGJ1dCB3ZSBuZXZlciB3YW50IHRvIGFzc29jaWF0ZSB0d28gZGlmZmVyZW50IHBhcnRzXG4gICAgICAgIC8vIHRvIHRoZSBzYW1lIGluZGV4LiBUaGV5IG11c3QgaGF2ZSBhIGNvbnN0YW50IG5vZGUgYmV0d2Vlbi5cbiAgICAgICAgbGV0IGxhc3RQYXJ0SW5kZXggPSAwO1xuICAgICAgICBsZXQgaW5kZXggPSAtMTtcbiAgICAgICAgbGV0IHBhcnRJbmRleCA9IDA7XG4gICAgICAgIGNvbnN0IHsgc3RyaW5ncywgdmFsdWVzOiB7IGxlbmd0aCB9IH0gPSByZXN1bHQ7XG4gICAgICAgIHdoaWxlIChwYXJ0SW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKTtcbiAgICAgICAgICAgIGlmIChub2RlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UndmUgZXhoYXVzdGVkIHRoZSBjb250ZW50IGluc2lkZSBhIG5lc3RlZCB0ZW1wbGF0ZSBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIEJlY2F1c2Ugd2Ugc3RpbGwgaGF2ZSBwYXJ0cyAodGhlIG91dGVyIGZvci1sb29wKSwgd2Uga25vdzpcbiAgICAgICAgICAgICAgICAvLyAtIFRoZXJlIGlzIGEgdGVtcGxhdGUgaW4gdGhlIHN0YWNrXG4gICAgICAgICAgICAgICAgLy8gLSBUaGUgd2Fsa2VyIHdpbGwgZmluZCBhIG5leHROb2RlIG91dHNpZGUgdGhlIHRlbXBsYXRlXG4gICAgICAgICAgICAgICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEgLyogTm9kZS5FTEVNRU5UX05PREUgKi8pIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG5vZGUuYXR0cmlidXRlcztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBsZW5ndGggfSA9IGF0dHJpYnV0ZXM7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBlclxuICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTmFtZWROb2RlTWFwLFxuICAgICAgICAgICAgICAgICAgICAvLyBhdHRyaWJ1dGVzIGFyZSBub3QgZ3VhcmFudGVlZCB0byBiZSByZXR1cm5lZCBpbiBkb2N1bWVudCBvcmRlci5cbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gcGFydGljdWxhciwgRWRnZS9JRSBjYW4gcmV0dXJuIHRoZW0gb3V0IG9mIG9yZGVyLCBzbyB3ZSBjYW5ub3RcbiAgICAgICAgICAgICAgICAgICAgLy8gYXNzdW1lIGEgY29ycmVzcG9uZGVuY2UgYmV0d2VlbiBwYXJ0IGluZGV4IGFuZCBhdHRyaWJ1dGUgaW5kZXguXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmRzV2l0aChhdHRyaWJ1dGVzW2ldLm5hbWUsIGJvdW5kQXR0cmlidXRlU3VmZml4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHRlbXBsYXRlIGxpdGVyYWwgc2VjdGlvbiBsZWFkaW5nIHVwIHRvIHRoZSBmaXJzdFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXhwcmVzc2lvbiBpbiB0aGlzIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nRm9yUGFydCA9IHN0cmluZ3NbcGFydEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIGF0dHJpYnV0ZSBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gbGFzdEF0dHJpYnV0ZU5hbWVSZWdleC5leGVjKHN0cmluZ0ZvclBhcnQpWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmluZCB0aGUgY29ycmVzcG9uZGluZyBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbCBib3VuZCBhdHRyaWJ1dGVzIGhhdmUgaGFkIGEgc3VmZml4IGFkZGVkIGluXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUZW1wbGF0ZVJlc3VsdCNnZXRIVE1MIHRvIG9wdCBvdXQgb2Ygc3BlY2lhbCBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsaW5nLiBUbyBsb29rIHVwIHRoZSBhdHRyaWJ1dGUgdmFsdWUgd2UgYWxzbyBuZWVkIHRvIGFkZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHN1ZmZpeC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZUxvb2t1cE5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCkgKyBib3VuZEF0dHJpYnV0ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZVZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTG9va3VwTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVMb29rdXBOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRpY3MgPSBhdHRyaWJ1dGVWYWx1ZS5zcGxpdChtYXJrZXJSZWdleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goeyB0eXBlOiAnYXR0cmlidXRlJywgaW5kZXgsIG5hbWUsIHN0cmluZ3M6IHN0YXRpY3MgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0SW5kZXggKz0gc3RhdGljcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub2RlLnRhZ05hbWUgPT09ICdURU1QTEFURScpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gbm9kZS5jb250ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMgLyogTm9kZS5URVhUX05PREUgKi8pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gbm9kZS5kYXRhO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmluZGV4T2YobWFya2VyKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5ncyA9IGRhdGEuc3BsaXQobWFya2VyUmVnZXgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0SW5kZXggPSBzdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdlbmVyYXRlIGEgbmV3IHRleHQgbm9kZSBmb3IgZWFjaCBsaXRlcmFsIHNlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2Ugbm9kZXMgYXJlIGFsc28gdXNlZCBhcyB0aGUgbWFya2VycyBmb3Igbm9kZSBwYXJ0c1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxhc3RJbmRleDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5zZXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHMgPSBzdHJpbmdzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ID0gY3JlYXRlTWFya2VyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXguZXhlYyhzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggIT09IG51bGwgJiYgZW5kc1dpdGgobWF0Y2hbMl0sIGJvdW5kQXR0cmlidXRlU3VmZml4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gcy5zbGljZSgwLCBtYXRjaC5pbmRleCkgKyBtYXRjaFsxXSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXS5zbGljZSgwLCAtYm91bmRBdHRyaWJ1dGVTdWZmaXgubGVuZ3RoKSArIG1hdGNoWzNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoaW5zZXJ0LCBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7IHR5cGU6ICdub2RlJywgaW5kZXg6ICsraW5kZXggfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyB0ZXh0LCB3ZSBtdXN0IGluc2VydCBhIGNvbW1lbnQgdG8gbWFyayBvdXIgcGxhY2UuXG4gICAgICAgICAgICAgICAgICAgIC8vIEVsc2UsIHdlIGNhbiB0cnVzdCBpdCB3aWxsIHN0aWNrIGFyb3VuZCBhZnRlciBjbG9uaW5nLlxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyaW5nc1tsYXN0SW5kZXhdID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjcmVhdGVNYXJrZXIoKSwgbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1RvUmVtb3ZlLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmRhdGEgPSBzdHJpbmdzW2xhc3RJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBhIHBhcnQgZm9yIGVhY2ggbWF0Y2ggZm91bmRcbiAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4ICs9IGxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSA4IC8qIE5vZGUuQ09NTUVOVF9OT0RFICovKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuZGF0YSA9PT0gbWFya2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIGEgbmV3IG1hcmtlciBub2RlIHRvIGJlIHRoZSBzdGFydE5vZGUgb2YgdGhlIFBhcnQgaWYgYW55IG9mXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBmb2xsb3dpbmcgYXJlIHRydWU6XG4gICAgICAgICAgICAgICAgICAgIC8vICAqIFdlIGRvbid0IGhhdmUgYSBwcmV2aW91c1NpYmxpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gICogVGhlIHByZXZpb3VzU2libGluZyBpcyBhbHJlYWR5IHRoZSBzdGFydCBvZiBhIHByZXZpb3VzIHBhcnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUucHJldmlvdXNTaWJsaW5nID09PSBudWxsIHx8IGluZGV4ID09PSBsYXN0UGFydEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjcmVhdGVNYXJrZXIoKSwgbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGFzdFBhcnRJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goeyB0eXBlOiAnbm9kZScsIGluZGV4IH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgbmV4dFNpYmxpbmcsIGtlZXAgdGhpcyBub2RlIHNvIHdlIGhhdmUgYW4gZW5kLlxuICAgICAgICAgICAgICAgICAgICAvLyBFbHNlLCB3ZSBjYW4gcmVtb3ZlIGl0IHRvIHNhdmUgZnV0dXJlIGNvc3RzLlxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5uZXh0U2libGluZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1RvUmVtb3ZlLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhcnRJbmRleCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChpID0gbm9kZS5kYXRhLmluZGV4T2YobWFya2VyLCBpICsgMSkpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tbWVudCBub2RlIGhhcyBhIGJpbmRpbmcgbWFya2VyIGluc2lkZSwgbWFrZSBhbiBpbmFjdGl2ZSBwYXJ0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgYmluZGluZyB3b24ndCB3b3JrLCBidXQgc3Vic2VxdWVudCBiaW5kaW5ncyB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIChqdXN0aW5mYWduYW5pKTogY29uc2lkZXIgd2hldGhlciBpdCdzIGV2ZW4gd29ydGggaXQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1ha2UgYmluZGluZ3MgaW4gY29tbWVudHMgd29ya1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsgdHlwZTogJ25vZGUnLCBpbmRleDogLTEgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0SW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBSZW1vdmUgdGV4dCBiaW5kaW5nIG5vZGVzIGFmdGVyIHRoZSB3YWxrIHRvIG5vdCBkaXN0dXJiIHRoZSBUcmVlV2Fsa2VyXG4gICAgICAgIGZvciAoY29uc3QgbiBvZiBub2Rlc1RvUmVtb3ZlKSB7XG4gICAgICAgICAgICBuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobik7XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHN1ZmZpeCkgPT4ge1xuICAgIGNvbnN0IGluZGV4ID0gc3RyLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGg7XG4gICAgcmV0dXJuIGluZGV4ID49IDAgJiYgc3RyLnNsaWNlKGluZGV4KSA9PT0gc3VmZml4O1xufTtcbmV4cG9ydCBjb25zdCBpc1RlbXBsYXRlUGFydEFjdGl2ZSA9IChwYXJ0KSA9PiBwYXJ0LmluZGV4ICE9PSAtMTtcbi8vIEFsbG93cyBgZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnJylgIHRvIGJlIHJlbmFtZWQgZm9yIGFcbi8vIHNtYWxsIG1hbnVhbCBzaXplLXNhdmluZ3MuXG5leHBvcnQgY29uc3QgY3JlYXRlTWFya2VyID0gKCkgPT4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnJyk7XG4vKipcbiAqIFRoaXMgcmVnZXggZXh0cmFjdHMgdGhlIGF0dHJpYnV0ZSBuYW1lIHByZWNlZGluZyBhbiBhdHRyaWJ1dGUtcG9zaXRpb25cbiAqIGV4cHJlc3Npb24uIEl0IGRvZXMgdGhpcyBieSBtYXRjaGluZyB0aGUgc3ludGF4IGFsbG93ZWQgZm9yIGF0dHJpYnV0ZXNcbiAqIGFnYWluc3QgdGhlIHN0cmluZyBsaXRlcmFsIGRpcmVjdGx5IHByZWNlZGluZyB0aGUgZXhwcmVzc2lvbiwgYXNzdW1pbmcgdGhhdFxuICogdGhlIGV4cHJlc3Npb24gaXMgaW4gYW4gYXR0cmlidXRlLXZhbHVlIHBvc2l0aW9uLlxuICpcbiAqIFNlZSBhdHRyaWJ1dGVzIGluIHRoZSBIVE1MIHNwZWM6XG4gKiBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvc3ludGF4Lmh0bWwjZWxlbWVudHMtYXR0cmlidXRlc1xuICpcbiAqIFwiIFxceDA5XFx4MGFcXHgwY1xceDBkXCIgYXJlIEhUTUwgc3BhY2UgY2hhcmFjdGVyczpcbiAqIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmZyYXN0cnVjdHVyZS5odG1sI3NwYWNlLWNoYXJhY3RlcnNcbiAqXG4gKiBcIlxcMC1cXHgxRlxceDdGLVxceDlGXCIgYXJlIFVuaWNvZGUgY29udHJvbCBjaGFyYWN0ZXJzLCB3aGljaCBpbmNsdWRlcyBldmVyeVxuICogc3BhY2UgY2hhcmFjdGVyIGV4Y2VwdCBcIiBcIi5cbiAqXG4gKiBTbyBhbiBhdHRyaWJ1dGUgaXM6XG4gKiAgKiBUaGUgbmFtZTogYW55IGNoYXJhY3RlciBleGNlcHQgYSBjb250cm9sIGNoYXJhY3Rlciwgc3BhY2UgY2hhcmFjdGVyLCAoJyksXG4gKiAgICAoXCIpLCBcIj5cIiwgXCI9XCIsIG9yIFwiL1wiXG4gKiAgKiBGb2xsb3dlZCBieSB6ZXJvIG9yIG1vcmUgc3BhY2UgY2hhcmFjdGVyc1xuICogICogRm9sbG93ZWQgYnkgXCI9XCJcbiAqICAqIEZvbGxvd2VkIGJ5IHplcm8gb3IgbW9yZSBzcGFjZSBjaGFyYWN0ZXJzXG4gKiAgKiBGb2xsb3dlZCBieTpcbiAqICAgICogQW55IGNoYXJhY3RlciBleGNlcHQgc3BhY2UsICgnKSwgKFwiKSwgXCI8XCIsIFwiPlwiLCBcIj1cIiwgKGApLCBvclxuICogICAgKiAoXCIpIHRoZW4gYW55IG5vbi0oXCIpLCBvclxuICogICAgKiAoJykgdGhlbiBhbnkgbm9uLSgnKVxuICovXG5leHBvcnQgY29uc3QgbGFzdEF0dHJpYnV0ZU5hbWVSZWdleCA9IFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbi8oWyBcXHgwOVxceDBhXFx4MGNcXHgwZF0pKFteXFwwLVxceDFGXFx4N0YtXFx4OUYgXCInPj0vXSspKFsgXFx4MDlcXHgwYVxceDBjXFx4MGRdKj1bIFxceDA5XFx4MGFcXHgwY1xceDBkXSooPzpbXiBcXHgwOVxceDBhXFx4MGNcXHgwZFwiJ2A8Pj1dKnxcIlteXCJdKnwnW14nXSopKSQvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVtcGxhdGUuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgaXNDRVBvbHlmaWxsIH0gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHsgaXNUZW1wbGF0ZVBhcnRBY3RpdmUgfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcbi8qKlxuICogQW4gaW5zdGFuY2Ugb2YgYSBgVGVtcGxhdGVgIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIHRoZSBET00gYW5kIHVwZGF0ZWRcbiAqIHdpdGggbmV3IHZhbHVlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRlbXBsYXRlSW5zdGFuY2Uge1xuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlLCBwcm9jZXNzb3IsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fX3BhcnRzID0gW107XG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICAgICAgdGhpcy5wcm9jZXNzb3IgPSBwcm9jZXNzb3I7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIHVwZGF0ZSh2YWx1ZXMpIHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy5fX3BhcnRzKSB7XG4gICAgICAgICAgICBpZiAocGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFydC5zZXRWYWx1ZSh2YWx1ZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcGFydCBvZiB0aGlzLl9fcGFydHMpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwYXJ0LmNvbW1pdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9jbG9uZSgpIHtcbiAgICAgICAgLy8gVGhlcmUgYXJlIGEgbnVtYmVyIG9mIHN0ZXBzIGluIHRoZSBsaWZlY3ljbGUgb2YgYSB0ZW1wbGF0ZSBpbnN0YW5jZSdzXG4gICAgICAgIC8vIERPTSBmcmFnbWVudDpcbiAgICAgICAgLy8gIDEuIENsb25lIC0gY3JlYXRlIHRoZSBpbnN0YW5jZSBmcmFnbWVudFxuICAgICAgICAvLyAgMi4gQWRvcHQgLSBhZG9wdCBpbnRvIHRoZSBtYWluIGRvY3VtZW50XG4gICAgICAgIC8vICAzLiBQcm9jZXNzIC0gZmluZCBwYXJ0IG1hcmtlcnMgYW5kIGNyZWF0ZSBwYXJ0c1xuICAgICAgICAvLyAgNC4gVXBncmFkZSAtIHVwZ3JhZGUgY3VzdG9tIGVsZW1lbnRzXG4gICAgICAgIC8vICA1LiBVcGRhdGUgLSBzZXQgbm9kZSwgYXR0cmlidXRlLCBwcm9wZXJ0eSwgZXRjLiwgdmFsdWVzXG4gICAgICAgIC8vICA2LiBDb25uZWN0IC0gY29ubmVjdCB0byB0aGUgZG9jdW1lbnQuIE9wdGlvbmFsIGFuZCBvdXRzaWRlIG9mIHRoaXNcbiAgICAgICAgLy8gICAgIG1ldGhvZC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gV2UgaGF2ZSBhIGZldyBjb25zdHJhaW50cyBvbiB0aGUgb3JkZXJpbmcgb2YgdGhlc2Ugc3RlcHM6XG4gICAgICAgIC8vICAqIFdlIG5lZWQgdG8gdXBncmFkZSBiZWZvcmUgdXBkYXRpbmcsIHNvIHRoYXQgcHJvcGVydHkgdmFsdWVzIHdpbGwgcGFzc1xuICAgICAgICAvLyAgICB0aHJvdWdoIGFueSBwcm9wZXJ0eSBzZXR0ZXJzLlxuICAgICAgICAvLyAgKiBXZSB3b3VsZCBsaWtlIHRvIHByb2Nlc3MgYmVmb3JlIHVwZ3JhZGluZyBzbyB0aGF0IHdlJ3JlIHN1cmUgdGhhdCB0aGVcbiAgICAgICAgLy8gICAgY2xvbmVkIGZyYWdtZW50IGlzIGluZXJ0IGFuZCBub3QgZGlzdHVyYmVkIGJ5IHNlbGYtbW9kaWZ5aW5nIERPTS5cbiAgICAgICAgLy8gICogV2Ugd2FudCBjdXN0b20gZWxlbWVudHMgdG8gdXBncmFkZSBldmVuIGluIGRpc2Nvbm5lY3RlZCBmcmFnbWVudHMuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEdpdmVuIHRoZXNlIGNvbnN0cmFpbnRzLCB3aXRoIGZ1bGwgY3VzdG9tIGVsZW1lbnRzIHN1cHBvcnQgd2Ugd291bGRcbiAgICAgICAgLy8gcHJlZmVyIHRoZSBvcmRlcjogQ2xvbmUsIFByb2Nlc3MsIEFkb3B0LCBVcGdyYWRlLCBVcGRhdGUsIENvbm5lY3RcbiAgICAgICAgLy9cbiAgICAgICAgLy8gQnV0IFNhZmFyaSBkb2VzIG5vdCBpbXBsZW1lbnQgQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5I3VwZ3JhZGUsIHNvIHdlXG4gICAgICAgIC8vIGNhbiBub3QgaW1wbGVtZW50IHRoYXQgb3JkZXIgYW5kIHN0aWxsIGhhdmUgdXBncmFkZS1iZWZvcmUtdXBkYXRlIGFuZFxuICAgICAgICAvLyB1cGdyYWRlIGRpc2Nvbm5lY3RlZCBmcmFnbWVudHMuIFNvIHdlIGluc3RlYWQgc2FjcmlmaWNlIHRoZVxuICAgICAgICAvLyBwcm9jZXNzLWJlZm9yZS11cGdyYWRlIGNvbnN0cmFpbnQsIHNpbmNlIGluIEN1c3RvbSBFbGVtZW50cyB2MSBlbGVtZW50c1xuICAgICAgICAvLyBtdXN0IG5vdCBtb2RpZnkgdGhlaXIgbGlnaHQgRE9NIGluIHRoZSBjb25zdHJ1Y3Rvci4gV2Ugc3RpbGwgaGF2ZSBpc3N1ZXNcbiAgICAgICAgLy8gd2hlbiBjby1leGlzdGluZyB3aXRoIENFdjAgZWxlbWVudHMgbGlrZSBQb2x5bWVyIDEsIGFuZCB3aXRoIHBvbHlmaWxsc1xuICAgICAgICAvLyB0aGF0IGRvbid0IHN0cmljdGx5IGFkaGVyZSB0byB0aGUgbm8tbW9kaWZpY2F0aW9uIHJ1bGUgYmVjYXVzZSBzaGFkb3dcbiAgICAgICAgLy8gRE9NLCB3aGljaCBtYXkgYmUgY3JlYXRlZCBpbiB0aGUgY29uc3RydWN0b3IsIGlzIGVtdWxhdGVkIGJ5IGJlaW5nIHBsYWNlZFxuICAgICAgICAvLyBpbiB0aGUgbGlnaHQgRE9NLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGUgcmVzdWx0aW5nIG9yZGVyIGlzIG9uIG5hdGl2ZSBpczogQ2xvbmUsIEFkb3B0LCBVcGdyYWRlLCBQcm9jZXNzLFxuICAgICAgICAvLyBVcGRhdGUsIENvbm5lY3QuIGRvY3VtZW50LmltcG9ydE5vZGUoKSBwZXJmb3JtcyBDbG9uZSwgQWRvcHQsIGFuZCBVcGdyYWRlXG4gICAgICAgIC8vIGluIG9uZSBzdGVwLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGUgQ3VzdG9tIEVsZW1lbnRzIHYxIHBvbHlmaWxsIHN1cHBvcnRzIHVwZ3JhZGUoKSwgc28gdGhlIG9yZGVyIHdoZW5cbiAgICAgICAgLy8gcG9seWZpbGxlZCBpcyB0aGUgbW9yZSBpZGVhbDogQ2xvbmUsIFByb2Nlc3MsIEFkb3B0LCBVcGdyYWRlLCBVcGRhdGUsXG4gICAgICAgIC8vIENvbm5lY3QuXG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gaXNDRVBvbHlmaWxsID9cbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGUuZWxlbWVudC5jb250ZW50LmNsb25lTm9kZSh0cnVlKSA6XG4gICAgICAgICAgICBkb2N1bWVudC5pbXBvcnROb2RlKHRoaXMudGVtcGxhdGUuZWxlbWVudC5jb250ZW50LCB0cnVlKTtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgICAgICAgY29uc3QgcGFydHMgPSB0aGlzLnRlbXBsYXRlLnBhcnRzO1xuICAgICAgICAvLyBFZGdlIG5lZWRzIGFsbCA0IHBhcmFtZXRlcnMgcHJlc2VudDsgSUUxMSBuZWVkcyAzcmQgcGFyYW1ldGVyIHRvIGJlIG51bGxcbiAgICAgICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihmcmFnbWVudCwgMTMzIC8qIE5vZGVGaWx0ZXIuU0hPV197RUxFTUVOVHxDT01NRU5UfFRFWFR9ICovLCBudWxsLCBmYWxzZSk7XG4gICAgICAgIGxldCBwYXJ0SW5kZXggPSAwO1xuICAgICAgICBsZXQgbm9kZUluZGV4ID0gMDtcbiAgICAgICAgbGV0IHBhcnQ7XG4gICAgICAgIGxldCBub2RlID0gd2Fsa2VyLm5leHROb2RlKCk7XG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIG5vZGVzIGFuZCBwYXJ0cyBvZiBhIHRlbXBsYXRlXG4gICAgICAgIHdoaWxlIChwYXJ0SW5kZXggPCBwYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHBhcnQgPSBwYXJ0c1twYXJ0SW5kZXhdO1xuICAgICAgICAgICAgaWYgKCFpc1RlbXBsYXRlUGFydEFjdGl2ZShwYXJ0KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX19wYXJ0cy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQcm9ncmVzcyB0aGUgdHJlZSB3YWxrZXIgdW50aWwgd2UgZmluZCBvdXIgbmV4dCBwYXJ0J3Mgbm9kZS5cbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBtdWx0aXBsZSBwYXJ0cyBtYXkgc2hhcmUgdGhlIHNhbWUgbm9kZSAoYXR0cmlidXRlIHBhcnRzXG4gICAgICAgICAgICAvLyBvbiBhIHNpbmdsZSBlbGVtZW50KSwgc28gdGhpcyBsb29wIG1heSBub3QgcnVuIGF0IGFsbC5cbiAgICAgICAgICAgIHdoaWxlIChub2RlSW5kZXggPCBwYXJ0LmluZGV4KSB7XG4gICAgICAgICAgICAgICAgbm9kZUluZGV4Kys7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZU5hbWUgPT09ICdURU1QTEFURScpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gbm9kZS5jb250ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKSkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UndmUgZXhoYXVzdGVkIHRoZSBjb250ZW50IGluc2lkZSBhIG5lc3RlZCB0ZW1wbGF0ZSBlbGVtZW50LlxuICAgICAgICAgICAgICAgICAgICAvLyBCZWNhdXNlIHdlIHN0aWxsIGhhdmUgcGFydHMgKHRoZSBvdXRlciBmb3ItbG9vcCksIHdlIGtub3c6XG4gICAgICAgICAgICAgICAgICAgIC8vIC0gVGhlcmUgaXMgYSB0ZW1wbGF0ZSBpbiB0aGUgc3RhY2tcbiAgICAgICAgICAgICAgICAgICAgLy8gLSBUaGUgd2Fsa2VyIHdpbGwgZmluZCBhIG5leHROb2RlIG91dHNpZGUgdGhlIHRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gd2Fsa2VyLm5leHROb2RlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gV2UndmUgYXJyaXZlZCBhdCBvdXIgcGFydCdzIG5vZGUuXG4gICAgICAgICAgICBpZiAocGFydC50eXBlID09PSAnbm9kZScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0ID0gdGhpcy5wcm9jZXNzb3IuaGFuZGxlVGV4dEV4cHJlc3Npb24odGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICBwYXJ0Lmluc2VydEFmdGVyTm9kZShub2RlLnByZXZpb3VzU2libGluZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3BhcnRzLnB1c2gocGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fcGFydHMucHVzaCguLi50aGlzLnByb2Nlc3Nvci5oYW5kbGVBdHRyaWJ1dGVFeHByZXNzaW9ucyhub2RlLCBwYXJ0Lm5hbWUsIHBhcnQuc3RyaW5ncywgdGhpcy5vcHRpb25zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJ0SW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDRVBvbHlmaWxsKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5hZG9wdE5vZGUoZnJhZ21lbnQpO1xuICAgICAgICAgICAgY3VzdG9tRWxlbWVudHMudXBncmFkZShmcmFnbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlLWluc3RhbmNlLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICogQG1vZHVsZSBsaXQtaHRtbFxuICovXG5pbXBvcnQgeyByZXBhcmVudE5vZGVzIH0gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHsgYm91bmRBdHRyaWJ1dGVTdWZmaXgsIGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXgsIG1hcmtlciwgbm9kZU1hcmtlciB9IGZyb20gJy4vdGVtcGxhdGUuanMnO1xuLyoqXG4gKiBPdXIgVHJ1c3RlZFR5cGVQb2xpY3kgZm9yIEhUTUwgd2hpY2ggaXMgZGVjbGFyZWQgdXNpbmcgdGhlIGh0bWwgdGVtcGxhdGVcbiAqIHRhZyBmdW5jdGlvbi5cbiAqXG4gKiBUaGF0IEhUTUwgaXMgYSBkZXZlbG9wZXItYXV0aG9yZWQgY29uc3RhbnQsIGFuZCBpcyBwYXJzZWQgd2l0aCBpbm5lckhUTUxcbiAqIGJlZm9yZSBhbnkgdW50cnVzdGVkIGV4cHJlc3Npb25zIGhhdmUgYmVlbiBtaXhlZCBpbi4gVGhlcmVmb3IgaXQgaXNcbiAqIGNvbnNpZGVyZWQgc2FmZSBieSBjb25zdHJ1Y3Rpb24uXG4gKi9cbmNvbnN0IHBvbGljeSA9IHdpbmRvdy50cnVzdGVkVHlwZXMgJiZcbiAgICB0cnVzdGVkVHlwZXMuY3JlYXRlUG9saWN5KCdsaXQtaHRtbCcsIHsgY3JlYXRlSFRNTDogKHMpID0+IHMgfSk7XG5jb25zdCBjb21tZW50TWFya2VyID0gYCAke21hcmtlcn0gYDtcbi8qKlxuICogVGhlIHJldHVybiB0eXBlIG9mIGBodG1sYCwgd2hpY2ggaG9sZHMgYSBUZW1wbGF0ZSBhbmQgdGhlIHZhbHVlcyBmcm9tXG4gKiBpbnRlcnBvbGF0ZWQgZXhwcmVzc2lvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgY29uc3RydWN0b3Ioc3RyaW5ncywgdmFsdWVzLCB0eXBlLCBwcm9jZXNzb3IpIHtcbiAgICAgICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcbiAgICAgICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIG9mIEhUTUwgdXNlZCB0byBjcmVhdGUgYSBgPHRlbXBsYXRlPmAgZWxlbWVudC5cbiAgICAgKi9cbiAgICBnZXRIVE1MKCkge1xuICAgICAgICBjb25zdCBsID0gdGhpcy5zdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCBodG1sID0gJyc7XG4gICAgICAgIGxldCBpc0NvbW1lbnRCaW5kaW5nID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gdGhpcy5zdHJpbmdzW2ldO1xuICAgICAgICAgICAgLy8gRm9yIGVhY2ggYmluZGluZyB3ZSB3YW50IHRvIGRldGVybWluZSB0aGUga2luZCBvZiBtYXJrZXIgdG8gaW5zZXJ0XG4gICAgICAgICAgICAvLyBpbnRvIHRoZSB0ZW1wbGF0ZSBzb3VyY2UgYmVmb3JlIGl0J3MgcGFyc2VkIGJ5IHRoZSBicm93c2VyJ3MgSFRNTFxuICAgICAgICAgICAgLy8gcGFyc2VyLiBUaGUgbWFya2VyIHR5cGUgaXMgYmFzZWQgb24gd2hldGhlciB0aGUgZXhwcmVzc2lvbiBpcyBpbiBhblxuICAgICAgICAgICAgLy8gYXR0cmlidXRlLCB0ZXh0LCBvciBjb21tZW50IHBvc2l0aW9uLlxuICAgICAgICAgICAgLy8gICAqIEZvciBub2RlLXBvc2l0aW9uIGJpbmRpbmdzIHdlIGluc2VydCBhIGNvbW1lbnQgd2l0aCB0aGUgbWFya2VyXG4gICAgICAgICAgICAvLyAgICAgc2VudGluZWwgYXMgaXRzIHRleHQgY29udGVudCwgbGlrZSA8IS0te3tsaXQtZ3VpZH19LS0+LlxuICAgICAgICAgICAgLy8gICAqIEZvciBhdHRyaWJ1dGUgYmluZGluZ3Mgd2UgaW5zZXJ0IGp1c3QgdGhlIG1hcmtlciBzZW50aW5lbCBmb3IgdGhlXG4gICAgICAgICAgICAvLyAgICAgZmlyc3QgYmluZGluZywgc28gdGhhdCB3ZSBzdXBwb3J0IHVucXVvdGVkIGF0dHJpYnV0ZSBiaW5kaW5ncy5cbiAgICAgICAgICAgIC8vICAgICBTdWJzZXF1ZW50IGJpbmRpbmdzIGNhbiB1c2UgYSBjb21tZW50IG1hcmtlciBiZWNhdXNlIG11bHRpLWJpbmRpbmdcbiAgICAgICAgICAgIC8vICAgICBhdHRyaWJ1dGVzIG11c3QgYmUgcXVvdGVkLlxuICAgICAgICAgICAgLy8gICAqIEZvciBjb21tZW50IGJpbmRpbmdzIHdlIGluc2VydCBqdXN0IHRoZSBtYXJrZXIgc2VudGluZWwgc28gd2UgZG9uJ3RcbiAgICAgICAgICAgIC8vICAgICBjbG9zZSB0aGUgY29tbWVudC5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgc2NhbnMgdGhlIHRlbXBsYXRlIHNvdXJjZSwgYnV0IGlzICpub3QqIGFuIEhUTUxcbiAgICAgICAgICAgIC8vIHBhcnNlci4gV2UgZG9uJ3QgbmVlZCB0byB0cmFjayB0aGUgdHJlZSBzdHJ1Y3R1cmUgb2YgdGhlIEhUTUwsIG9ubHlcbiAgICAgICAgICAgIC8vIHdoZXRoZXIgYSBiaW5kaW5nIGlzIGluc2lkZSBhIGNvbW1lbnQsIGFuZCBpZiBub3QsIGlmIGl0IGFwcGVhcnMgdG8gYmVcbiAgICAgICAgICAgIC8vIHRoZSBmaXJzdCBiaW5kaW5nIGluIGFuIGF0dHJpYnV0ZS5cbiAgICAgICAgICAgIGNvbnN0IGNvbW1lbnRPcGVuID0gcy5sYXN0SW5kZXhPZignPCEtLScpO1xuICAgICAgICAgICAgLy8gV2UncmUgaW4gY29tbWVudCBwb3NpdGlvbiBpZiB3ZSBoYXZlIGEgY29tbWVudCBvcGVuIHdpdGggbm8gZm9sbG93aW5nXG4gICAgICAgICAgICAvLyBjb21tZW50IGNsb3NlLiBCZWNhdXNlIDwtLSBjYW4gYXBwZWFyIGluIGFuIGF0dHJpYnV0ZSB2YWx1ZSB0aGVyZSBjYW5cbiAgICAgICAgICAgIC8vIGJlIGZhbHNlIHBvc2l0aXZlcy5cbiAgICAgICAgICAgIGlzQ29tbWVudEJpbmRpbmcgPSAoY29tbWVudE9wZW4gPiAtMSB8fCBpc0NvbW1lbnRCaW5kaW5nKSAmJlxuICAgICAgICAgICAgICAgIHMuaW5kZXhPZignLS0+JywgY29tbWVudE9wZW4gKyAxKSA9PT0gLTE7XG4gICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhbiBhdHRyaWJ1dGUtbGlrZSBzZXF1ZW5jZSBwcmVjZWRpbmcgdGhlXG4gICAgICAgICAgICAvLyBleHByZXNzaW9uLiBUaGlzIGNhbiBtYXRjaCBcIm5hbWU9dmFsdWVcIiBsaWtlIHN0cnVjdHVyZXMgaW4gdGV4dCxcbiAgICAgICAgICAgIC8vIGNvbW1lbnRzLCBhbmQgYXR0cmlidXRlIHZhbHVlcywgc28gdGhlcmUgY2FuIGJlIGZhbHNlLXBvc2l0aXZlcy5cbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZU1hdGNoID0gbGFzdEF0dHJpYnV0ZU5hbWVSZWdleC5leGVjKHMpO1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZU1hdGNoID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UncmUgb25seSBpbiB0aGlzIGJyYW5jaCBpZiB3ZSBkb24ndCBoYXZlIGEgYXR0cmlidXRlLWxpa2VcbiAgICAgICAgICAgICAgICAvLyBwcmVjZWRpbmcgc2VxdWVuY2UuIEZvciBjb21tZW50cywgdGhpcyBndWFyZHMgYWdhaW5zdCB1bnVzdWFsXG4gICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlIHZhbHVlcyBsaWtlIDxkaXYgZm9vPVwiPCEtLSR7J2Jhcid9XCI+LiBDYXNlcyBsaWtlXG4gICAgICAgICAgICAgICAgLy8gPCEtLSBmb289JHsnYmFyJ30tLT4gYXJlIGhhbmRsZWQgY29ycmVjdGx5IGluIHRoZSBhdHRyaWJ1dGUgYnJhbmNoXG4gICAgICAgICAgICAgICAgLy8gYmVsb3cuXG4gICAgICAgICAgICAgICAgaHRtbCArPSBzICsgKGlzQ29tbWVudEJpbmRpbmcgPyBjb21tZW50TWFya2VyIDogbm9kZU1hcmtlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgYXR0cmlidXRlcyB3ZSB1c2UganVzdCBhIG1hcmtlciBzZW50aW5lbCwgYW5kIGFsc28gYXBwZW5kIGFcbiAgICAgICAgICAgICAgICAvLyAkbGl0JCBzdWZmaXggdG8gdGhlIG5hbWUgdG8gb3B0LW91dCBvZiBhdHRyaWJ1dGUtc3BlY2lmaWMgcGFyc2luZ1xuICAgICAgICAgICAgICAgIC8vIHRoYXQgSUUgYW5kIEVkZ2UgZG8gZm9yIHN0eWxlIGFuZCBjZXJ0YWluIFNWRyBhdHRyaWJ1dGVzLlxuICAgICAgICAgICAgICAgIGh0bWwgKz0gcy5zdWJzdHIoMCwgYXR0cmlidXRlTWF0Y2guaW5kZXgpICsgYXR0cmlidXRlTWF0Y2hbMV0gK1xuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVNYXRjaFsyXSArIGJvdW5kQXR0cmlidXRlU3VmZml4ICsgYXR0cmlidXRlTWF0Y2hbM10gK1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaHRtbCArPSB0aGlzLnN0cmluZ3NbbF07XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgIH1cbiAgICBnZXRUZW1wbGF0ZUVsZW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5nZXRIVE1MKCk7XG4gICAgICAgIGlmIChwb2xpY3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBzZWN1cmUgYmVjYXVzZSBgdGhpcy5zdHJpbmdzYCBpcyBhIFRlbXBsYXRlU3RyaW5nc0FycmF5LlxuICAgICAgICAgICAgLy8gVE9ETzogdmFsaWRhdGUgdGhpcyB3aGVuXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1pcy10ZW1wbGF0ZS1vYmplY3QgaXNcbiAgICAgICAgICAgIC8vIGltcGxlbWVudGVkLlxuICAgICAgICAgICAgdmFsdWUgPSBwb2xpY3kuY3JlYXRlSFRNTCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG59XG4vKipcbiAqIEEgVGVtcGxhdGVSZXN1bHQgZm9yIFNWRyBmcmFnbWVudHMuXG4gKlxuICogVGhpcyBjbGFzcyB3cmFwcyBIVE1MIGluIGFuIGA8c3ZnPmAgdGFnIGluIG9yZGVyIHRvIHBhcnNlIGl0cyBjb250ZW50cyBpbiB0aGVcbiAqIFNWRyBuYW1lc3BhY2UsIHRoZW4gbW9kaWZpZXMgdGhlIHRlbXBsYXRlIHRvIHJlbW92ZSB0aGUgYDxzdmc+YCB0YWcgc28gdGhhdFxuICogY2xvbmVzIG9ubHkgY29udGFpbmVyIHRoZSBvcmlnaW5hbCBmcmFnbWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNWR1RlbXBsYXRlUmVzdWx0IGV4dGVuZHMgVGVtcGxhdGVSZXN1bHQge1xuICAgIGdldEhUTUwoKSB7XG4gICAgICAgIHJldHVybiBgPHN2Zz4ke3N1cGVyLmdldEhUTUwoKX08L3N2Zz5gO1xuICAgIH1cbiAgICBnZXRUZW1wbGF0ZUVsZW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gc3VwZXIuZ2V0VGVtcGxhdGVFbGVtZW50KCk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0ZW1wbGF0ZS5jb250ZW50O1xuICAgICAgICBjb25zdCBzdmdFbGVtZW50ID0gY29udGVudC5maXJzdENoaWxkO1xuICAgICAgICBjb250ZW50LnJlbW92ZUNoaWxkKHN2Z0VsZW1lbnQpO1xuICAgICAgICByZXBhcmVudE5vZGVzKGNvbnRlbnQsIHN2Z0VsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZS1yZXN1bHQuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgaXNEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZS5qcyc7XG5pbXBvcnQgeyByZW1vdmVOb2RlcyB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IG5vQ2hhbmdlLCBub3RoaW5nIH0gZnJvbSAnLi9wYXJ0LmpzJztcbmltcG9ydCB7IFRlbXBsYXRlSW5zdGFuY2UgfSBmcm9tICcuL3RlbXBsYXRlLWluc3RhbmNlLmpzJztcbmltcG9ydCB7IFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnLi90ZW1wbGF0ZS1yZXN1bHQuanMnO1xuaW1wb3J0IHsgY3JlYXRlTWFya2VyIH0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5leHBvcnQgY29uc3QgaXNQcmltaXRpdmUgPSAodmFsdWUpID0+IHtcbiAgICByZXR1cm4gKHZhbHVlID09PSBudWxsIHx8XG4gICAgICAgICEodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpKTtcbn07XG5leHBvcnQgY29uc3QgaXNJdGVyYWJsZSA9ICh2YWx1ZSkgPT4ge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSB8fFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAhISh2YWx1ZSAmJiB2YWx1ZVtTeW1ib2wuaXRlcmF0b3JdKTtcbn07XG4vKipcbiAqIFdyaXRlcyBhdHRyaWJ1dGUgdmFsdWVzIHRvIHRoZSBET00gZm9yIGEgZ3JvdXAgb2YgQXR0cmlidXRlUGFydHMgYm91bmQgdG8gYVxuICogc2luZ2xlIGF0dHJpYnV0ZS4gVGhlIHZhbHVlIGlzIG9ubHkgc2V0IG9uY2UgZXZlbiBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgcGFydHNcbiAqIGZvciBhbiBhdHRyaWJ1dGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBBdHRyaWJ1dGVDb21taXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpIHtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuc3RyaW5ncyA9IHN0cmluZ3M7XG4gICAgICAgIHRoaXMucGFydHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5wYXJ0c1tpXSA9IHRoaXMuX2NyZWF0ZVBhcnQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2luZ2xlIHBhcnQuIE92ZXJyaWRlIHRoaXMgdG8gY3JlYXRlIGEgZGlmZmVybnQgdHlwZSBvZiBwYXJ0LlxuICAgICAqL1xuICAgIF9jcmVhdGVQYXJ0KCkge1xuICAgICAgICByZXR1cm4gbmV3IEF0dHJpYnV0ZVBhcnQodGhpcyk7XG4gICAgfVxuICAgIF9nZXRWYWx1ZSgpIHtcbiAgICAgICAgY29uc3Qgc3RyaW5ncyA9IHRoaXMuc3RyaW5ncztcbiAgICAgICAgY29uc3QgbCA9IHN0cmluZ3MubGVuZ3RoIC0gMTtcbiAgICAgICAgY29uc3QgcGFydHMgPSB0aGlzLnBhcnRzO1xuICAgICAgICAvLyBJZiB3ZSdyZSBhc3NpZ25pbmcgYW4gYXR0cmlidXRlIHZpYSBzeW50YXggbGlrZTpcbiAgICAgICAgLy8gICAgYXR0cj1cIiR7Zm9vfVwiICBvciAgYXR0cj0ke2Zvb31cbiAgICAgICAgLy8gYnV0IG5vdFxuICAgICAgICAvLyAgICBhdHRyPVwiJHtmb299ICR7YmFyfVwiIG9yIGF0dHI9XCIke2Zvb30gYmF6XCJcbiAgICAgICAgLy8gdGhlbiB3ZSBkb24ndCB3YW50IHRvIGNvZXJjZSB0aGUgYXR0cmlidXRlIHZhbHVlIGludG8gb25lIGxvbmdcbiAgICAgICAgLy8gc3RyaW5nLiBJbnN0ZWFkIHdlIHdhbnQgdG8ganVzdCByZXR1cm4gdGhlIHZhbHVlIGl0c2VsZiBkaXJlY3RseSxcbiAgICAgICAgLy8gc28gdGhhdCBzYW5pdGl6ZURPTVZhbHVlIGNhbiBnZXQgdGhlIGFjdHVhbCB2YWx1ZSByYXRoZXIgdGhhblxuICAgICAgICAvLyBTdHJpbmcodmFsdWUpXG4gICAgICAgIC8vIFRoZSBleGNlcHRpb24gaXMgaWYgdiBpcyBhbiBhcnJheSwgaW4gd2hpY2ggY2FzZSB3ZSBkbyB3YW50IHRvIHNtYXNoXG4gICAgICAgIC8vIGl0IHRvZ2V0aGVyIGludG8gYSBzdHJpbmcgd2l0aG91dCBjYWxsaW5nIFN0cmluZygpIG9uIHRoZSBhcnJheS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhpcyBhbHNvIGFsbG93cyB0cnVzdGVkIHZhbHVlcyAod2hlbiB1c2luZyBUcnVzdGVkVHlwZXMpIGJlaW5nXG4gICAgICAgIC8vIGFzc2lnbmVkIHRvIERPTSBzaW5rcyB3aXRob3V0IGJlaW5nIHN0cmluZ2lmaWVkIGluIHRoZSBwcm9jZXNzLlxuICAgICAgICBpZiAobCA9PT0gMSAmJiBzdHJpbmdzWzBdID09PSAnJyAmJiBzdHJpbmdzWzFdID09PSAnJykge1xuICAgICAgICAgICAgY29uc3QgdiA9IHBhcnRzWzBdLnZhbHVlO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAnc3ltYm9sJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnIHx8ICFpc0l0ZXJhYmxlKHYpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRleHQgPSAnJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHRleHQgKz0gc3RyaW5nc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgICAgIGlmIChwYXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gcGFydC52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoaXNQcmltaXRpdmUodikgfHwgIWlzSXRlcmFibGUodikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dCArPSB0eXBlb2YgdiA9PT0gJ3N0cmluZycgPyB2IDogU3RyaW5nKHYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gdHlwZW9mIHQgPT09ICdzdHJpbmcnID8gdCA6IFN0cmluZyh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0ZXh0ICs9IHN0cmluZ3NbbF07XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBjb21taXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmRpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSwgdGhpcy5fZ2V0VmFsdWUoKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEEgUGFydCB0aGF0IGNvbnRyb2xzIGFsbCBvciBwYXJ0IG9mIGFuIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZVBhcnQge1xuICAgIGNvbnN0cnVjdG9yKGNvbW1pdHRlcikge1xuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNvbW1pdHRlciA9IGNvbW1pdHRlcjtcbiAgICB9XG4gICAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBub0NoYW5nZSAmJiAoIWlzUHJpbWl0aXZlKHZhbHVlKSB8fCB2YWx1ZSAhPT0gdGhpcy52YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIC8vIElmIHRoZSB2YWx1ZSBpcyBhIG5vdCBhIGRpcmVjdGl2ZSwgZGlydHkgdGhlIGNvbW1pdHRlciBzbyB0aGF0IGl0J2xsXG4gICAgICAgICAgICAvLyBjYWxsIHNldEF0dHJpYnV0ZS4gSWYgdGhlIHZhbHVlIGlzIGEgZGlyZWN0aXZlLCBpdCdsbCBkaXJ0eSB0aGVcbiAgICAgICAgICAgIC8vIGNvbW1pdHRlciBpZiBpdCBjYWxscyBzZXRWYWx1ZSgpLlxuICAgICAgICAgICAgaWYgKCFpc0RpcmVjdGl2ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1pdHRlci5kaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29tbWl0KCkge1xuICAgICAgICB3aGlsZSAoaXNEaXJlY3RpdmUodGhpcy52YWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gbm9DaGFuZ2U7XG4gICAgICAgICAgICBkaXJlY3RpdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IG5vQ2hhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21taXR0ZXIuY29tbWl0KCk7XG4gICAgfVxufVxuLyoqXG4gKiBBIFBhcnQgdGhhdCBjb250cm9scyBhIGxvY2F0aW9uIHdpdGhpbiBhIE5vZGUgdHJlZS4gTGlrZSBhIFJhbmdlLCBOb2RlUGFydFxuICogaGFzIHN0YXJ0IGFuZCBlbmQgbG9jYXRpb25zIGFuZCBjYW4gc2V0IGFuZCB1cGRhdGUgdGhlIE5vZGVzIGJldHdlZW4gdGhvc2VcbiAqIGxvY2F0aW9ucy5cbiAqXG4gKiBOb2RlUGFydHMgc3VwcG9ydCBzZXZlcmFsIHZhbHVlIHR5cGVzOiBwcmltaXRpdmVzLCBOb2RlcywgVGVtcGxhdGVSZXN1bHRzLFxuICogYXMgd2VsbCBhcyBhcnJheXMgYW5kIGl0ZXJhYmxlcyBvZiB0aG9zZSB0eXBlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIE5vZGVQYXJ0IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgdGhpcyBwYXJ0IGludG8gYSBjb250YWluZXIuXG4gICAgICpcbiAgICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICAgKi9cbiAgICBhcHBlbmRJbnRvKGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLnN0YXJ0Tm9kZSA9IGNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVNYXJrZXIoKSk7XG4gICAgICAgIHRoaXMuZW5kTm9kZSA9IGNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVNYXJrZXIoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc2VydHMgdGhpcyBwYXJ0IGFmdGVyIHRoZSBgcmVmYCBub2RlIChiZXR3ZWVuIGByZWZgIGFuZCBgcmVmYCdzIG5leHRcbiAgICAgKiBzaWJsaW5nKS4gQm90aCBgcmVmYCBhbmQgaXRzIG5leHQgc2libGluZyBtdXN0IGJlIHN0YXRpYywgdW5jaGFuZ2luZyBub2Rlc1xuICAgICAqIHN1Y2ggYXMgdGhvc2UgdGhhdCBhcHBlYXIgaW4gYSBsaXRlcmFsIHNlY3Rpb24gb2YgYSB0ZW1wbGF0ZS5cbiAgICAgKlxuICAgICAqIFRoaXMgcGFydCBtdXN0IGJlIGVtcHR5LCBhcyBpdHMgY29udGVudHMgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IG1vdmVkLlxuICAgICAqL1xuICAgIGluc2VydEFmdGVyTm9kZShyZWYpIHtcbiAgICAgICAgdGhpcy5zdGFydE5vZGUgPSByZWY7XG4gICAgICAgIHRoaXMuZW5kTm9kZSA9IHJlZi5uZXh0U2libGluZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwZW5kcyB0aGlzIHBhcnQgaW50byBhIHBhcmVudCBwYXJ0LlxuICAgICAqXG4gICAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAgICovXG4gICAgYXBwZW5kSW50b1BhcnQocGFydCkge1xuICAgICAgICBwYXJ0Ll9faW5zZXJ0KHRoaXMuc3RhcnROb2RlID0gY3JlYXRlTWFya2VyKCkpO1xuICAgICAgICBwYXJ0Ll9faW5zZXJ0KHRoaXMuZW5kTm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB0aGlzIHBhcnQgYWZ0ZXIgdGhlIGByZWZgIHBhcnQuXG4gICAgICpcbiAgICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICAgKi9cbiAgICBpbnNlcnRBZnRlclBhcnQocmVmKSB7XG4gICAgICAgIHJlZi5fX2luc2VydCh0aGlzLnN0YXJ0Tm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcbiAgICAgICAgdGhpcy5lbmROb2RlID0gcmVmLmVuZE5vZGU7XG4gICAgICAgIHJlZi5lbmROb2RlID0gdGhpcy5zdGFydE5vZGU7XG4gICAgfVxuICAgIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29tbWl0KCkge1xuICAgICAgICBpZiAodGhpcy5zdGFydE5vZGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICAgICAgICAgIGRpcmVjdGl2ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcmltaXRpdmUodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fY29tbWl0VGV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5fX2NvbW1pdFRlbXBsYXRlUmVzdWx0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX19jb21taXROb2RlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0l0ZXJhYmxlKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5fX2NvbW1pdEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gbm90aGluZykge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5vdGhpbmc7XG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBGYWxsYmFjaywgd2lsbCByZW5kZXIgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvblxuICAgICAgICAgICAgdGhpcy5fX2NvbW1pdFRleHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9faW5zZXJ0KG5vZGUpIHtcbiAgICAgICAgdGhpcy5lbmROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIHRoaXMuZW5kTm9kZSk7XG4gICAgfVxuICAgIF9fY29tbWl0Tm9kZSh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX19pbnNlcnQodmFsdWUpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIF9fY29tbWl0VGV4dCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG4gICAgICAgIC8vIElmIGB2YWx1ZWAgaXNuJ3QgYWxyZWFkeSBhIHN0cmluZywgd2UgZXhwbGljaXRseSBjb252ZXJ0IGl0IGhlcmUgaW4gY2FzZVxuICAgICAgICAvLyBpdCBjYW4ndCBiZSBpbXBsaWNpdGx5IGNvbnZlcnRlZCAtIGkuZS4gaXQncyBhIHN5bWJvbC5cbiAgICAgICAgY29uc3QgdmFsdWVBc1N0cmluZyA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZSA6IFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIGlmIChub2RlID09PSB0aGlzLmVuZE5vZGUucHJldmlvdXNTaWJsaW5nICYmXG4gICAgICAgICAgICBub2RlLm5vZGVUeXBlID09PSAzIC8qIE5vZGUuVEVYVF9OT0RFICovKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBvbmx5IGhhdmUgYSBzaW5nbGUgdGV4dCBub2RlIGJldHdlZW4gdGhlIG1hcmtlcnMsIHdlIGNhbiBqdXN0XG4gICAgICAgICAgICAvLyBzZXQgaXRzIHZhbHVlLCByYXRoZXIgdGhhbiByZXBsYWNpbmcgaXQuXG4gICAgICAgICAgICAvLyBUT0RPKGp1c3RpbmZhZ25hbmkpOiBDYW4gd2UganVzdCBjaGVjayBpZiB0aGlzLnZhbHVlIGlzIHByaW1pdGl2ZT9cbiAgICAgICAgICAgIG5vZGUuZGF0YSA9IHZhbHVlQXNTdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9fY29tbWl0Tm9kZShkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZUFzU3RyaW5nKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBfX2NvbW1pdFRlbXBsYXRlUmVzdWx0KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlRmFjdG9yeSh2YWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVJbnN0YW5jZSAmJlxuICAgICAgICAgICAgdGhpcy52YWx1ZS50ZW1wbGF0ZSA9PT0gdGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUudXBkYXRlKHZhbHVlLnZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgcHJvcGFnYXRlIHRoZSB0ZW1wbGF0ZSBwcm9jZXNzb3IgZnJvbSB0aGUgVGVtcGxhdGVSZXN1bHRcbiAgICAgICAgICAgIC8vIHNvIHRoYXQgd2UgdXNlIGl0cyBzeW50YXggZXh0ZW5zaW9uLCBldGMuIFRoZSB0ZW1wbGF0ZSBmYWN0b3J5IGNvbWVzXG4gICAgICAgICAgICAvLyBmcm9tIHRoZSByZW5kZXIgZnVuY3Rpb24gb3B0aW9ucyBzbyB0aGF0IGl0IGNhbiBjb250cm9sIHRlbXBsYXRlXG4gICAgICAgICAgICAvLyBjYWNoaW5nIGFuZCBwcmVwcm9jZXNzaW5nLlxuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgVGVtcGxhdGVJbnN0YW5jZSh0ZW1wbGF0ZSwgdmFsdWUucHJvY2Vzc29yLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBpbnN0YW5jZS5fY2xvbmUoKTtcbiAgICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSh2YWx1ZS52YWx1ZXMpO1xuICAgICAgICAgICAgdGhpcy5fX2NvbW1pdE5vZGUoZnJhZ21lbnQpO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGluc3RhbmNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9fY29tbWl0SXRlcmFibGUodmFsdWUpIHtcbiAgICAgICAgLy8gRm9yIGFuIEl0ZXJhYmxlLCB3ZSBjcmVhdGUgYSBuZXcgSW5zdGFuY2VQYXJ0IHBlciBpdGVtLCB0aGVuIHNldCBpdHNcbiAgICAgICAgLy8gdmFsdWUgdG8gdGhlIGl0ZW0uIFRoaXMgaXMgYSBsaXR0bGUgYml0IG9mIG92ZXJoZWFkIGZvciBldmVyeSBpdGVtIGluXG4gICAgICAgIC8vIGFuIEl0ZXJhYmxlLCBidXQgaXQgbGV0cyB1cyByZWN1cnNlIGVhc2lseSBhbmQgZWZmaWNpZW50bHkgdXBkYXRlIEFycmF5c1xuICAgICAgICAvLyBvZiBUZW1wbGF0ZVJlc3VsdHMgdGhhdCB3aWxsIGJlIGNvbW1vbmx5IHJldHVybmVkIGZyb20gZXhwcmVzc2lvbnMgbGlrZTpcbiAgICAgICAgLy8gYXJyYXkubWFwKChpKSA9PiBodG1sYCR7aX1gKSwgYnkgcmV1c2luZyBleGlzdGluZyBUZW1wbGF0ZUluc3RhbmNlcy5cbiAgICAgICAgLy8gSWYgX3ZhbHVlIGlzIGFuIGFycmF5LCB0aGVuIHRoZSBwcmV2aW91cyByZW5kZXIgd2FzIG9mIGFuXG4gICAgICAgIC8vIGl0ZXJhYmxlIGFuZCBfdmFsdWUgd2lsbCBjb250YWluIHRoZSBOb2RlUGFydHMgZnJvbSB0aGUgcHJldmlvdXNcbiAgICAgICAgLy8gcmVuZGVyLiBJZiBfdmFsdWUgaXMgbm90IGFuIGFycmF5LCBjbGVhciB0aGlzIHBhcnQgYW5kIG1ha2UgYSBuZXdcbiAgICAgICAgLy8gYXJyYXkgZm9yIE5vZGVQYXJ0cy5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gW107XG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTGV0cyB1cyBrZWVwIHRyYWNrIG9mIGhvdyBtYW55IGl0ZW1zIHdlIHN0YW1wZWQgc28gd2UgY2FuIGNsZWFyIGxlZnRvdmVyXG4gICAgICAgIC8vIGl0ZW1zIGZyb20gYSBwcmV2aW91cyByZW5kZXJcbiAgICAgICAgY29uc3QgaXRlbVBhcnRzID0gdGhpcy52YWx1ZTtcbiAgICAgICAgbGV0IHBhcnRJbmRleCA9IDA7XG4gICAgICAgIGxldCBpdGVtUGFydDtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBUcnkgdG8gcmV1c2UgYW4gZXhpc3RpbmcgcGFydFxuICAgICAgICAgICAgaXRlbVBhcnQgPSBpdGVtUGFydHNbcGFydEluZGV4XTtcbiAgICAgICAgICAgIC8vIElmIG5vIGV4aXN0aW5nIHBhcnQsIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgICAgICAgIGlmIChpdGVtUGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaXRlbVBhcnQgPSBuZXcgTm9kZVBhcnQodGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpdGVtUGFydHMucHVzaChpdGVtUGFydCk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtUGFydC5hcHBlbmRJbnRvUGFydCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1QYXJ0Lmluc2VydEFmdGVyUGFydChpdGVtUGFydHNbcGFydEluZGV4IC0gMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW1QYXJ0LnNldFZhbHVlKGl0ZW0pO1xuICAgICAgICAgICAgaXRlbVBhcnQuY29tbWl0KCk7XG4gICAgICAgICAgICBwYXJ0SW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydEluZGV4IDwgaXRlbVBhcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gVHJ1bmNhdGUgdGhlIHBhcnRzIGFycmF5IHNvIF92YWx1ZSByZWZsZWN0cyB0aGUgY3VycmVudCBzdGF0ZVxuICAgICAgICAgICAgaXRlbVBhcnRzLmxlbmd0aCA9IHBhcnRJbmRleDtcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoaXRlbVBhcnQgJiYgaXRlbVBhcnQuZW5kTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXIoc3RhcnROb2RlID0gdGhpcy5zdGFydE5vZGUpIHtcbiAgICAgICAgcmVtb3ZlTm9kZXModGhpcy5zdGFydE5vZGUucGFyZW50Tm9kZSwgc3RhcnROb2RlLm5leHRTaWJsaW5nLCB0aGlzLmVuZE5vZGUpO1xuICAgIH1cbn1cbi8qKlxuICogSW1wbGVtZW50cyBhIGJvb2xlYW4gYXR0cmlidXRlLCByb3VnaGx5IGFzIGRlZmluZWQgaW4gdGhlIEhUTUxcbiAqIHNwZWNpZmljYXRpb24uXG4gKlxuICogSWYgdGhlIHZhbHVlIGlzIHRydXRoeSwgdGhlbiB0aGUgYXR0cmlidXRlIGlzIHByZXNlbnQgd2l0aCBhIHZhbHVlIG9mXG4gKiAnJy4gSWYgdGhlIHZhbHVlIGlzIGZhbHNleSwgdGhlIGF0dHJpYnV0ZSBpcyByZW1vdmVkLlxuICovXG5leHBvcnQgY2xhc3MgQm9vbGVhbkF0dHJpYnV0ZVBhcnQge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHN0cmluZ3MubGVuZ3RoICE9PSAyIHx8IHN0cmluZ3NbMF0gIT09ICcnIHx8IHN0cmluZ3NbMV0gIT09ICcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb2xlYW4gYXR0cmlidXRlcyBjYW4gb25seSBjb250YWluIGEgc2luZ2xlIGV4cHJlc3Npb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnN0cmluZ3MgPSBzdHJpbmdzO1xuICAgIH1cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMuX19wZW5kaW5nVmFsdWUpKSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlO1xuICAgICAgICAgICAgZGlyZWN0aXZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9fcGVuZGluZ1ZhbHVlID09PSBub0NoYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gISF0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuICAgICAgICBpZiAodGhpcy52YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHRoaXMubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlO1xuICAgIH1cbn1cbi8qKlxuICogU2V0cyBhdHRyaWJ1dGUgdmFsdWVzIGZvciBQcm9wZXJ0eVBhcnRzLCBzbyB0aGF0IHRoZSB2YWx1ZSBpcyBvbmx5IHNldCBvbmNlXG4gKiBldmVuIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBwYXJ0cyBmb3IgYSBwcm9wZXJ0eS5cbiAqXG4gKiBJZiBhbiBleHByZXNzaW9uIGNvbnRyb2xzIHRoZSB3aG9sZSBwcm9wZXJ0eSB2YWx1ZSwgdGhlbiB0aGUgdmFsdWUgaXMgc2ltcGx5XG4gKiBhc3NpZ25lZCB0byB0aGUgcHJvcGVydHkgdW5kZXIgY29udHJvbC4gSWYgdGhlcmUgYXJlIHN0cmluZyBsaXRlcmFscyBvclxuICogbXVsdGlwbGUgZXhwcmVzc2lvbnMsIHRoZW4gdGhlIHN0cmluZ3MgYXJlIGV4cHJlc3Npb25zIGFyZSBpbnRlcnBvbGF0ZWQgaW50b1xuICogYSBzdHJpbmcgZmlyc3QuXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eUNvbW1pdHRlciBleHRlbmRzIEF0dHJpYnV0ZUNvbW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgbmFtZSwgc3RyaW5ncykge1xuICAgICAgICBzdXBlcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKTtcbiAgICAgICAgdGhpcy5zaW5nbGUgPVxuICAgICAgICAgICAgKHN0cmluZ3MubGVuZ3RoID09PSAyICYmIHN0cmluZ3NbMF0gPT09ICcnICYmIHN0cmluZ3NbMV0gPT09ICcnKTtcbiAgICB9XG4gICAgX2NyZWF0ZVBhcnQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcGVydHlQYXJ0KHRoaXMpO1xuICAgIH1cbiAgICBfZ2V0VmFsdWUoKSB7XG4gICAgICAgIGlmICh0aGlzLnNpbmdsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFydHNbMF0udmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRWYWx1ZSgpO1xuICAgIH1cbiAgICBjb21taXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmRpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgdGhpcy5lbGVtZW50W3RoaXMubmFtZV0gPSB0aGlzLl9nZXRWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFByb3BlcnR5UGFydCBleHRlbmRzIEF0dHJpYnV0ZVBhcnQge1xufVxuLy8gRGV0ZWN0IGV2ZW50IGxpc3RlbmVyIG9wdGlvbnMgc3VwcG9ydC4gSWYgdGhlIGBjYXB0dXJlYCBwcm9wZXJ0eSBpcyByZWFkXG4vLyBmcm9tIHRoZSBvcHRpb25zIG9iamVjdCwgdGhlbiBvcHRpb25zIGFyZSBzdXBwb3J0ZWQuIElmIG5vdCwgdGhlbiB0aGUgdGhpcmRcbi8vIGFyZ3VtZW50IHRvIGFkZC9yZW1vdmVFdmVudExpc3RlbmVyIGlzIGludGVycHJldGVkIGFzIHRoZSBib29sZWFuIGNhcHR1cmVcbi8vIHZhbHVlIHNvIHdlIHNob3VsZCBvbmx5IHBhc3MgdGhlIGBjYXB0dXJlYCBwcm9wZXJ0eS5cbmxldCBldmVudE9wdGlvbnNTdXBwb3J0ZWQgPSBmYWxzZTtcbi8vIFdyYXAgaW50byBhbiBJSUZFIGJlY2F1c2UgTVMgRWRnZSA8PSB2NDEgZG9lcyBub3Qgc3VwcG9ydCBoYXZpbmcgdHJ5L2NhdGNoXG4vLyBibG9ja3MgcmlnaHQgaW50byB0aGUgYm9keSBvZiBhIG1vZHVsZVxuKCgpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgZ2V0IGNhcHR1cmUoKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRPcHRpb25zU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0Jywgb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0Jywgb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgfVxuICAgIGNhdGNoIChfZSkge1xuICAgICAgICAvLyBldmVudCBvcHRpb25zIG5vdCBzdXBwb3J0ZWRcbiAgICB9XG59KSgpO1xuZXhwb3J0IGNsYXNzIEV2ZW50UGFydCB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgZXZlbnROYW1lLCBldmVudENvbnRleHQpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5ldmVudE5hbWUgPSBldmVudE5hbWU7XG4gICAgICAgIHRoaXMuZXZlbnRDb250ZXh0ID0gZXZlbnRDb250ZXh0O1xuICAgICAgICB0aGlzLl9fYm91bmRIYW5kbGVFdmVudCA9IChlKSA9PiB0aGlzLmhhbmRsZUV2ZW50KGUpO1xuICAgIH1cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMuX19wZW5kaW5nVmFsdWUpKSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlO1xuICAgICAgICAgICAgZGlyZWN0aXZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9fcGVuZGluZ1ZhbHVlID09PSBub0NoYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0xpc3RlbmVyID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgY29uc3Qgb2xkTGlzdGVuZXIgPSB0aGlzLnZhbHVlO1xuICAgICAgICBjb25zdCBzaG91bGRSZW1vdmVMaXN0ZW5lciA9IG5ld0xpc3RlbmVyID09IG51bGwgfHxcbiAgICAgICAgICAgIG9sZExpc3RlbmVyICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAobmV3TGlzdGVuZXIuY2FwdHVyZSAhPT0gb2xkTGlzdGVuZXIuY2FwdHVyZSB8fFxuICAgICAgICAgICAgICAgICAgICBuZXdMaXN0ZW5lci5vbmNlICE9PSBvbGRMaXN0ZW5lci5vbmNlIHx8XG4gICAgICAgICAgICAgICAgICAgIG5ld0xpc3RlbmVyLnBhc3NpdmUgIT09IG9sZExpc3RlbmVyLnBhc3NpdmUpO1xuICAgICAgICBjb25zdCBzaG91bGRBZGRMaXN0ZW5lciA9IG5ld0xpc3RlbmVyICE9IG51bGwgJiYgKG9sZExpc3RlbmVyID09IG51bGwgfHwgc2hvdWxkUmVtb3ZlTGlzdGVuZXIpO1xuICAgICAgICBpZiAoc2hvdWxkUmVtb3ZlTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuZXZlbnROYW1lLCB0aGlzLl9fYm91bmRIYW5kbGVFdmVudCwgdGhpcy5fX29wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGRBZGRMaXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5fX29wdGlvbnMgPSBnZXRPcHRpb25zKG5ld0xpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMuZXZlbnROYW1lLCB0aGlzLl9fYm91bmRIYW5kbGVFdmVudCwgdGhpcy5fX29wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWUgPSBuZXdMaXN0ZW5lcjtcbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlO1xuICAgIH1cbiAgICBoYW5kbGVFdmVudChldmVudCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMudmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUuY2FsbCh0aGlzLmV2ZW50Q29udGV4dCB8fCB0aGlzLmVsZW1lbnQsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUuaGFuZGxlRXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8gV2UgY29weSBvcHRpb25zIGJlY2F1c2Ugb2YgdGhlIGluY29uc2lzdGVudCBiZWhhdmlvciBvZiBicm93c2VycyB3aGVuIHJlYWRpbmdcbi8vIHRoZSB0aGlyZCBhcmd1bWVudCBvZiBhZGQvcmVtb3ZlRXZlbnRMaXN0ZW5lci4gSUUxMSBkb2Vzbid0IHN1cHBvcnQgb3B0aW9uc1xuLy8gYXQgYWxsLiBDaHJvbWUgNDEgb25seSByZWFkcyBgY2FwdHVyZWAgaWYgdGhlIGFyZ3VtZW50IGlzIGFuIG9iamVjdC5cbmNvbnN0IGdldE9wdGlvbnMgPSAobykgPT4gbyAmJlxuICAgIChldmVudE9wdGlvbnNTdXBwb3J0ZWQgP1xuICAgICAgICB7IGNhcHR1cmU6IG8uY2FwdHVyZSwgcGFzc2l2ZTogby5wYXNzaXZlLCBvbmNlOiBvLm9uY2UgfSA6XG4gICAgICAgIG8uY2FwdHVyZSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJ0cy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5pbXBvcnQgeyBBdHRyaWJ1dGVDb21taXR0ZXIsIEJvb2xlYW5BdHRyaWJ1dGVQYXJ0LCBFdmVudFBhcnQsIE5vZGVQYXJ0LCBQcm9wZXJ0eUNvbW1pdHRlciB9IGZyb20gJy4vcGFydHMuanMnO1xuLyoqXG4gKiBDcmVhdGVzIFBhcnRzIHdoZW4gYSB0ZW1wbGF0ZSBpcyBpbnN0YW50aWF0ZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3Ige1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBwYXJ0cyBmb3IgYW4gYXR0cmlidXRlLXBvc2l0aW9uIGJpbmRpbmcsIGdpdmVuIHRoZSBldmVudCwgYXR0cmlidXRlXG4gICAgICogbmFtZSwgYW5kIHN0cmluZyBsaXRlcmFscy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIGJpbmRpbmdcbiAgICAgKiBAcGFyYW0gbmFtZSAgVGhlIGF0dHJpYnV0ZSBuYW1lXG4gICAgICogQHBhcmFtIHN0cmluZ3MgVGhlIHN0cmluZyBsaXRlcmFscy4gVGhlcmUgYXJlIGFsd2F5cyBhdCBsZWFzdCB0d28gc3RyaW5ncyxcbiAgICAgKiAgIGV2ZW50IGZvciBmdWxseS1jb250cm9sbGVkIGJpbmRpbmdzIHdpdGggYSBzaW5nbGUgZXhwcmVzc2lvbi5cbiAgICAgKi9cbiAgICBoYW5kbGVBdHRyaWJ1dGVFeHByZXNzaW9ucyhlbGVtZW50LCBuYW1lLCBzdHJpbmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IG5hbWVbMF07XG4gICAgICAgIGlmIChwcmVmaXggPT09ICcuJykge1xuICAgICAgICAgICAgY29uc3QgY29tbWl0dGVyID0gbmV3IFByb3BlcnR5Q29tbWl0dGVyKGVsZW1lbnQsIG5hbWUuc2xpY2UoMSksIHN0cmluZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbW1pdHRlci5wYXJ0cztcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlZml4ID09PSAnQCcpIHtcbiAgICAgICAgICAgIHJldHVybiBbbmV3IEV2ZW50UGFydChlbGVtZW50LCBuYW1lLnNsaWNlKDEpLCBvcHRpb25zLmV2ZW50Q29udGV4dCldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVmaXggPT09ICc/Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtuZXcgQm9vbGVhbkF0dHJpYnV0ZVBhcnQoZWxlbWVudCwgbmFtZS5zbGljZSgxKSwgc3RyaW5ncyldO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbW1pdHRlciA9IG5ldyBBdHRyaWJ1dGVDb21taXR0ZXIoZWxlbWVudCwgbmFtZSwgc3RyaW5ncyk7XG4gICAgICAgIHJldHVybiBjb21taXR0ZXIucGFydHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBwYXJ0cyBmb3IgYSB0ZXh0LXBvc2l0aW9uIGJpbmRpbmcuXG4gICAgICogQHBhcmFtIHRlbXBsYXRlRmFjdG9yeVxuICAgICAqL1xuICAgIGhhbmRsZVRleHRFeHByZXNzaW9uKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlUGFydChvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yID0gbmV3IERlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgbWFya2VyLCBUZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUuanMnO1xuLyoqXG4gKiBUaGUgZGVmYXVsdCBUZW1wbGF0ZUZhY3Rvcnkgd2hpY2ggY2FjaGVzIFRlbXBsYXRlcyBrZXllZCBvblxuICogcmVzdWx0LnR5cGUgYW5kIHJlc3VsdC5zdHJpbmdzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVGYWN0b3J5KHJlc3VsdCkge1xuICAgIGxldCB0ZW1wbGF0ZUNhY2hlID0gdGVtcGxhdGVDYWNoZXMuZ2V0KHJlc3VsdC50eXBlKTtcbiAgICBpZiAodGVtcGxhdGVDYWNoZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRlbXBsYXRlQ2FjaGUgPSB7XG4gICAgICAgICAgICBzdHJpbmdzQXJyYXk6IG5ldyBXZWFrTWFwKCksXG4gICAgICAgICAgICBrZXlTdHJpbmc6IG5ldyBNYXAoKVxuICAgICAgICB9O1xuICAgICAgICB0ZW1wbGF0ZUNhY2hlcy5zZXQocmVzdWx0LnR5cGUsIHRlbXBsYXRlQ2FjaGUpO1xuICAgIH1cbiAgICBsZXQgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLnN0cmluZ3NBcnJheS5nZXQocmVzdWx0LnN0cmluZ3MpO1xuICAgIGlmICh0ZW1wbGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG4gICAgLy8gSWYgdGhlIFRlbXBsYXRlU3RyaW5nc0FycmF5IGlzIG5ldywgZ2VuZXJhdGUgYSBrZXkgZnJvbSB0aGUgc3RyaW5nc1xuICAgIC8vIFRoaXMga2V5IGlzIHNoYXJlZCBiZXR3ZWVuIGFsbCB0ZW1wbGF0ZXMgd2l0aCBpZGVudGljYWwgY29udGVudFxuICAgIGNvbnN0IGtleSA9IHJlc3VsdC5zdHJpbmdzLmpvaW4obWFya2VyKTtcbiAgICAvLyBDaGVjayBpZiB3ZSBhbHJlYWR5IGhhdmUgYSBUZW1wbGF0ZSBmb3IgdGhpcyBrZXlcbiAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLmdldChrZXkpO1xuICAgIGlmICh0ZW1wbGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbm90IHNlZW4gdGhpcyBrZXkgYmVmb3JlLCBjcmVhdGUgYSBuZXcgVGVtcGxhdGVcbiAgICAgICAgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUocmVzdWx0LCByZXN1bHQuZ2V0VGVtcGxhdGVFbGVtZW50KCkpO1xuICAgICAgICAvLyBDYWNoZSB0aGUgVGVtcGxhdGUgZm9yIHRoaXMga2V5XG4gICAgICAgIHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLnNldChrZXksIHRlbXBsYXRlKTtcbiAgICB9XG4gICAgLy8gQ2FjaGUgYWxsIGZ1dHVyZSBxdWVyaWVzIGZvciB0aGlzIFRlbXBsYXRlU3RyaW5nc0FycmF5XG4gICAgdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuc2V0KHJlc3VsdC5zdHJpbmdzLCB0ZW1wbGF0ZSk7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xufVxuZXhwb3J0IGNvbnN0IHRlbXBsYXRlQ2FjaGVzID0gbmV3IE1hcCgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVtcGxhdGUtZmFjdG9yeS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5pbXBvcnQgeyByZW1vdmVOb2RlcyB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IE5vZGVQYXJ0IH0gZnJvbSAnLi9wYXJ0cy5qcyc7XG5pbXBvcnQgeyB0ZW1wbGF0ZUZhY3RvcnkgfSBmcm9tICcuL3RlbXBsYXRlLWZhY3RvcnkuanMnO1xuZXhwb3J0IGNvbnN0IHBhcnRzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogUmVuZGVycyBhIHRlbXBsYXRlIHJlc3VsdCBvciBvdGhlciB2YWx1ZSB0byBhIGNvbnRhaW5lci5cbiAqXG4gKiBUbyB1cGRhdGUgYSBjb250YWluZXIgd2l0aCBuZXcgdmFsdWVzLCByZWV2YWx1YXRlIHRoZSB0ZW1wbGF0ZSBsaXRlcmFsIGFuZFxuICogY2FsbCBgcmVuZGVyYCB3aXRoIHRoZSBuZXcgcmVzdWx0LlxuICpcbiAqIEBwYXJhbSByZXN1bHQgQW55IHZhbHVlIHJlbmRlcmFibGUgYnkgTm9kZVBhcnQgLSB0eXBpY2FsbHkgYSBUZW1wbGF0ZVJlc3VsdFxuICogICAgIGNyZWF0ZWQgYnkgZXZhbHVhdGluZyBhIHRlbXBsYXRlIHRhZyBsaWtlIGBodG1sYCBvciBgc3ZnYC5cbiAqIEBwYXJhbSBjb250YWluZXIgQSBET00gcGFyZW50IHRvIHJlbmRlciB0by4gVGhlIGVudGlyZSBjb250ZW50cyBhcmUgZWl0aGVyXG4gKiAgICAgcmVwbGFjZWQsIG9yIGVmZmljaWVudGx5IHVwZGF0ZWQgaWYgdGhlIHNhbWUgcmVzdWx0IHR5cGUgd2FzIHByZXZpb3VzXG4gKiAgICAgcmVuZGVyZWQgdGhlcmUuXG4gKiBAcGFyYW0gb3B0aW9ucyBSZW5kZXJPcHRpb25zIGZvciB0aGUgZW50aXJlIHJlbmRlciB0cmVlIHJlbmRlcmVkIHRvIHRoaXNcbiAqICAgICBjb250YWluZXIuIFJlbmRlciBvcHRpb25zIG11c3QgKm5vdCogY2hhbmdlIGJldHdlZW4gcmVuZGVycyB0byB0aGUgc2FtZVxuICogICAgIGNvbnRhaW5lciwgYXMgdGhvc2UgY2hhbmdlcyB3aWxsIG5vdCBlZmZlY3QgcHJldmlvdXNseSByZW5kZXJlZCBET00uXG4gKi9cbmV4cG9ydCBjb25zdCByZW5kZXIgPSAocmVzdWx0LCBjb250YWluZXIsIG9wdGlvbnMpID0+IHtcbiAgICBsZXQgcGFydCA9IHBhcnRzLmdldChjb250YWluZXIpO1xuICAgIGlmIChwYXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVtb3ZlTm9kZXMoY29udGFpbmVyLCBjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgIHBhcnRzLnNldChjb250YWluZXIsIHBhcnQgPSBuZXcgTm9kZVBhcnQoT2JqZWN0LmFzc2lnbih7IHRlbXBsYXRlRmFjdG9yeSB9LCBvcHRpb25zKSkpO1xuICAgICAgICBwYXJ0LmFwcGVuZEludG8oY29udGFpbmVyKTtcbiAgICB9XG4gICAgcGFydC5zZXRWYWx1ZShyZXN1bHQpO1xuICAgIHBhcnQuY29tbWl0KCk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVuZGVyLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICpcbiAqIE1haW4gbGl0LWh0bWwgbW9kdWxlLlxuICpcbiAqIE1haW4gZXhwb3J0czpcbiAqXG4gKiAtICBbW2h0bWxdXVxuICogLSAgW1tzdmddXVxuICogLSAgW1tyZW5kZXJdXVxuICpcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG4vKipcbiAqIERvIG5vdCByZW1vdmUgdGhpcyBjb21tZW50OyBpdCBrZWVwcyB0eXBlZG9jIGZyb20gbWlzcGxhY2luZyB0aGUgbW9kdWxlXG4gKiBkb2NzLlxuICovXG5pbXBvcnQgeyBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IgfSBmcm9tICcuL2xpYi9kZWZhdWx0LXRlbXBsYXRlLXByb2Nlc3Nvci5qcyc7XG5pbXBvcnQgeyBTVkdUZW1wbGF0ZVJlc3VsdCwgVGVtcGxhdGVSZXN1bHQgfSBmcm9tICcuL2xpYi90ZW1wbGF0ZS1yZXN1bHQuanMnO1xuZXhwb3J0IHsgRGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yLCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IgfSBmcm9tICcuL2xpYi9kZWZhdWx0LXRlbXBsYXRlLXByb2Nlc3Nvci5qcyc7XG5leHBvcnQgeyBkaXJlY3RpdmUsIGlzRGlyZWN0aXZlIH0gZnJvbSAnLi9saWIvZGlyZWN0aXZlLmpzJztcbi8vIFRPRE8oanVzdGluZmFnbmFuaSk6IHJlbW92ZSBsaW5lIHdoZW4gd2UgZ2V0IE5vZGVQYXJ0IG1vdmluZyBtZXRob2RzXG5leHBvcnQgeyByZW1vdmVOb2RlcywgcmVwYXJlbnROb2RlcyB9IGZyb20gJy4vbGliL2RvbS5qcyc7XG5leHBvcnQgeyBub0NoYW5nZSwgbm90aGluZyB9IGZyb20gJy4vbGliL3BhcnQuanMnO1xuZXhwb3J0IHsgQXR0cmlidXRlQ29tbWl0dGVyLCBBdHRyaWJ1dGVQYXJ0LCBCb29sZWFuQXR0cmlidXRlUGFydCwgRXZlbnRQYXJ0LCBpc0l0ZXJhYmxlLCBpc1ByaW1pdGl2ZSwgTm9kZVBhcnQsIFByb3BlcnR5Q29tbWl0dGVyLCBQcm9wZXJ0eVBhcnQgfSBmcm9tICcuL2xpYi9wYXJ0cy5qcyc7XG5leHBvcnQgeyBwYXJ0cywgcmVuZGVyIH0gZnJvbSAnLi9saWIvcmVuZGVyLmpzJztcbmV4cG9ydCB7IHRlbXBsYXRlQ2FjaGVzLCB0ZW1wbGF0ZUZhY3RvcnkgfSBmcm9tICcuL2xpYi90ZW1wbGF0ZS1mYWN0b3J5LmpzJztcbmV4cG9ydCB7IFRlbXBsYXRlSW5zdGFuY2UgfSBmcm9tICcuL2xpYi90ZW1wbGF0ZS1pbnN0YW5jZS5qcyc7XG5leHBvcnQgeyBTVkdUZW1wbGF0ZVJlc3VsdCwgVGVtcGxhdGVSZXN1bHQgfSBmcm9tICcuL2xpYi90ZW1wbGF0ZS1yZXN1bHQuanMnO1xuZXhwb3J0IHsgY3JlYXRlTWFya2VyLCBpc1RlbXBsYXRlUGFydEFjdGl2ZSwgVGVtcGxhdGUgfSBmcm9tICcuL2xpYi90ZW1wbGF0ZS5qcyc7XG4vLyBJTVBPUlRBTlQ6IGRvIG5vdCBjaGFuZ2UgdGhlIHByb3BlcnR5IG5hbWUgb3IgdGhlIGFzc2lnbm1lbnQgZXhwcmVzc2lvbi5cbi8vIFRoaXMgbGluZSB3aWxsIGJlIHVzZWQgaW4gcmVnZXhlcyB0byBzZWFyY2ggZm9yIGxpdC1odG1sIHVzYWdlLlxuLy8gVE9ETyhqdXN0aW5mYWduYW5pKTogaW5qZWN0IHZlcnNpb24gbnVtYmVyIGF0IGJ1aWxkIHRpbWVcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICh3aW5kb3dbJ2xpdEh0bWxWZXJzaW9ucyddIHx8ICh3aW5kb3dbJ2xpdEh0bWxWZXJzaW9ucyddID0gW10pKS5wdXNoKCcxLjMuMCcpO1xufVxuLyoqXG4gKiBJbnRlcnByZXRzIGEgdGVtcGxhdGUgbGl0ZXJhbCBhcyBhbiBIVE1MIHRlbXBsYXRlIHRoYXQgY2FuIGVmZmljaWVudGx5XG4gKiByZW5kZXIgdG8gYW5kIHVwZGF0ZSBhIGNvbnRhaW5lci5cbiAqL1xuZXhwb3J0IGNvbnN0IGh0bWwgPSAoc3RyaW5ncywgLi4udmFsdWVzKSA9PiBuZXcgVGVtcGxhdGVSZXN1bHQoc3RyaW5ncywgdmFsdWVzLCAnaHRtbCcsIGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3Nvcik7XG4vKipcbiAqIEludGVycHJldHMgYSB0ZW1wbGF0ZSBsaXRlcmFsIGFzIGFuIFNWRyB0ZW1wbGF0ZSB0aGF0IGNhbiBlZmZpY2llbnRseVxuICogcmVuZGVyIHRvIGFuZCB1cGRhdGUgYSBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBzdmcgPSAoc3RyaW5ncywgLi4udmFsdWVzKSA9PiBuZXcgU1ZHVGVtcGxhdGVSZXN1bHQoc3RyaW5ncywgdmFsdWVzLCAnc3ZnJywgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1odG1sLmpzLm1hcCIsIi8qKlxuICogQmxvYyA6IEJ1c2luZXNzIExvZ2ljIGNvbXBvbmVudCwgaXMgYSBwbGFjZSB3aGVyZSBpbiB5b3UgcGxhY2UgYWxsIHlvdXIgYnVzaW5lc3MgbG9naWMuXG4gKiBJdHMgaG9sZHMgYSBzdGF0ZSBhbmQgYWxsIGJ1c2luZXNzIGxvZ2ljIHdoaWNoIHRyaWVzIHRvIG1vZGlmeSB0aGlzIHN0YXRlIHNob3VsZCBiZSBpbnNpZGUgdGhpcy5cbiAqIFRoaXMgZXhwb3NlcyBhIHNpbmdsZSBtZXRob2QgZW1pdCB0byBleHRlcm5hbCBBcGksIHdoaWNoIG11c3QgYmUgdXNlZCB0byBlbWl0IG5ldyBzdGF0ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCbG9jIHtcbiAgICBjb25zdHJ1Y3Rvcihpbml0U3RhdGUpIHtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJfaWRfcmVmID0gMTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gICAgICAgIHRoaXMuX3N0YXRlID0gaW5pdFN0YXRlO1xuICAgIH1cbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV3U3RhdGUgRW1pdHMgbmV3IHN0YXRlXG4gICAgICovXG4gICAgZW1pdChuZXdTdGF0ZSkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IG5ld1N0YXRlO1xuICAgICAgICAvL2VtaXQgbmV3IHN0YXRlIHNob3VsZCBpbmZvcm0gYWxsIGxpc3RlbmVyc1xuICAgICAgICBmb3IgKGxldCBsIG9mIE9iamVjdC5rZXlzKHRoaXMuX2xpc3RlbmVycykpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzW2Ake2x9YF0obmV3U3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTGlzdGVuZXIgJHtsfSBkbyBub3QgaGF2ZSB0cnkgY2F0Y2ggYmxvYy4gSXQgdGhyb3dzIGVycm9yIHdoaWNoIGlzIG5vdCBjYXVnaHQgaW4gaXRzIHB1cmUgZnVuY3Rpb24uYCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAqXG4gICAgKiBAcGFyYW0gYVB1cmVGdW5jdGlvbiBVc2VkIHRvIHN1YnNjcmliZSB0byBzdGF0ZSBjaGFuZ2VzXG4gICAgKi9cbiAgICBfbGlzdGVuKGFQdXJlRnVuY3Rpb24pIHtcbiAgICAgICAgbGV0IGtleSA9IGAke3RoaXMuX2xpc3RlbmVyX2lkX3JlZn1gO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnNba2V5XSA9IGFQdXJlRnVuY3Rpb247XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyX2lkX3JlZisrO1xuICAgICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaXN0ZW5pbmdJZCBVbnN1YnNjcmliZSB0byBzdGF0ZSBsaXRzZW5pbmcgc3RhdGUgY2hhbmdlc1xuICAgICAqL1xuICAgIF9zdG9wTGlzdGVuaW5nKGxpc3RlbmluZ0lkKSB7XG4gICAgICAgIGlmIChsaXN0ZW5pbmdJZCAmJiB0aGlzLl9saXN0ZW5lcnNbbGlzdGVuaW5nSWRdKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fbGlzdGVuZXJzW2xpc3RlbmluZ0lkXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJsb2MuanMubWFwIiwiZXhwb3J0IGNsYXNzIEJhc2VCbG9jc0hUTUxFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICAgICAgbGV0IHQxID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJ1c2VcIik7XG4gICAgICAgIHRoaXMuX3VzZUF0dHIgPSBCYXNlQmxvY3NIVE1MRWxlbWVudC5wYXJzZVVzZUF0dHJpYnV0ZSh0MSk7XG4gICAgfVxuICAgIGdldCB1c2VBdHRyaWJ1dGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91c2VBdHRyO1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2VVc2VBdHRyaWJ1dGUoYXR0clN0cmluZykge1xuICAgICAgICBpZiAoYXR0clN0cmluZykge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHt9O1xuICAgICAgICAgICAgbGV0IHQxID0gYXR0clN0cmluZy5zcGxpdChcIjtcIik7XG4gICAgICAgICAgICBmb3IgKGxldCB0MiBvZiB0MSkge1xuICAgICAgICAgICAgICAgIGxldCB0MyA9IHQyLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgICAgICBpZiAodDMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFt0M1swXS50cmltKCldID0gdDNbMV0udHJpbSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLmpzLm1hcCIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCJsaXQtaHRtbFwiO1xuaW1wb3J0IHsgQmxvY0J1aWxkZXIgfSBmcm9tIFwiLi9ibG9jLWJ1aWxkZXJcIjtcbmltcG9ydCB7IEJhc2VCbG9jc0hUTUxFbGVtZW50IH0gZnJvbSAnLi4vYmFzZSc7XG5leHBvcnQgY2xhc3MgQmxvY3NQcm92aWRlciBleHRlbmRzIEJhc2VCbG9jc0hUTUxFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihibG9jcykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmJsb2NzID0gYmxvY3M7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLl9idWlsZCgpO1xuICAgIH1cbiAgICBfZmluZEJsb2MoYmxvY1R5cGUpIHtcbiAgICAgICAgZm9yIChsZXQgYmxvYyBvZiB0aGlzLmJsb2NzKSB7XG4gICAgICAgICAgICBpZiAoYmxvYy5jb25zdHJ1Y3Rvci5uYW1lID09PSBibG9jVHlwZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJsb2M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIG9mKGJsb2NUeXBlLCBzdGFydGluZ0VsZW1lbnQsIG90aGVyU2VhcmNoQ3JpdGVyaWEgPSAoY3VycmVudEVsKSA9PiB0cnVlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgbGV0IGN1cnJlbnRFbCA9IHN0YXJ0aW5nRWxlbWVudDtcbiAgICAgICAgd2hpbGUgKGN1cnJlbnRFbCkge1xuICAgICAgICAgICAgaWYgKG90aGVyU2VhcmNoQ3JpdGVyaWEoY3VycmVudEVsKSkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RWwgaW5zdGFuY2VvZiBCbG9jc1Byb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmb3VuZF9ibG9jID0gY3VycmVudEVsLl9maW5kQmxvYyhibG9jVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZF9ibG9jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm91bmRfYmxvYztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjdXJyZW50RWwgaW5zdGFuY2VvZiBCbG9jQnVpbGRlciAmJiAoKF9hID0gY3VycmVudEVsLmJsb2MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb25zdHJ1Y3Rvci5uYW1lKSA9PT0gYmxvY1R5cGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudEVsLmJsb2M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHQgPSBjdXJyZW50RWwucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgU2hhZG93Um9vdCkge1xuICAgICAgICAgICAgICAgIHQgPSB0Lmhvc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50RWwgPSB0O1xuICAgICAgICB9XG4gICAgfVxuICAgIF9idWlsZCgpIHtcbiAgICAgICAgbGV0IGd1aSA9IHRoaXMuYnVpbGRlcigpO1xuICAgICAgICByZW5kZXIoZ3VpLCB0aGlzLnNoYWRvd1Jvb3QpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJsb2NzLXByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCJsaXQtaHRtbFwiO1xuaW1wb3J0IHsgQmxvY3NQcm92aWRlciB9IGZyb20gXCIuL2Jsb2NzLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBCYXNlQmxvY3NIVE1MRWxlbWVudCB9IGZyb20gJy4uL2Jhc2UnO1xuZXhwb3J0IGNsYXNzIEJsb2NCdWlsZGVyIGV4dGVuZHMgQmFzZUJsb2NzSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGJsb2NUeXBlLCBjb25maWdzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYmxvY1R5cGUgPSBibG9jVHlwZTtcbiAgICAgICAgbGV0IGRlZmF1bHRDb25maWcgPSB7XG4gICAgICAgICAgICBidWlsZFdoZW46IChwcmVTdGF0ZSwgbmV3U3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobmV3U3RhdGUgIT09IHByZVN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fY29uZmlncyA9IHsgLi4uZGVmYXVsdENvbmZpZywgLi4uY29uZmlncyB9O1xuICAgIH1cbiAgICBnZXQgYmxvYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2M7XG4gICAgfVxuICAgIGdldCBzdGF0ZSgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5ibG9jKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RhdGU7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplKCk7XG4gICAgfVxuICAgIF9pbml0aWFsaXplKCkge1xuICAgICAgICAvL2ZpbmQgdGhlIGJsb2NcbiAgICAgICAgdGhpcy5fYmxvYyA9IHRoaXMuX2NvbmZpZ3MudXNlVGhpc0Jsb2MgPyB0aGlzLl9jb25maWdzLnVzZVRoaXNCbG9jIDogQmxvY3NQcm92aWRlci5vZih0aGlzLmJsb2NUeXBlLCB0aGlzKTtcbiAgICAgICAgLy9pZiBibG9jIGlzIGZvdW5kO1xuICAgICAgICBpZiAodGhpcy5fYmxvYykge1xuICAgICAgICAgICAgdGhpcy5fcHJldlN0YXRlID0gdGhpcy5fYmxvYy5zdGF0ZTtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbklkID0gdGhpcy5fYmxvYy5fbGlzdGVuKChuZXdTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jb25maWdzLmJ1aWxkV2hlbih0aGlzLl9wcmV2U3RhdGUsIG5ld1N0YXRlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcmV2U3RhdGUgPSBuZXdTdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYnVpbGQobmV3U3RhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fYnVpbGQodGhpcy5fcHJldlN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGBObyBwYXJlbnQgZm91bmQgd2hpY2ggaGFzICR7dGhpcy5ibG9jVHlwZS5uYW1lfSBibG9jYDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5fYmxvYy5fc3RvcExpc3RlbmluZyh0aGlzLl9zdWJzY3JpcHRpb25JZCk7XG4gICAgfVxuICAgIF9idWlsZChzdGF0ZSkge1xuICAgICAgICBsZXQgZ3VpID0gdGhpcy5idWlsZGVyKHN0YXRlKTtcbiAgICAgICAgcmVuZGVyKGd1aSwgdGhpcy5zaGFkb3dSb290KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ibG9jLWJ1aWxkZXIuanMubWFwIiwiaW1wb3J0IHsgQmxvYywgQmxvY3NQcm92aWRlciB9IGZyb20gXCJibG9jLXRoZW1cIjtcbmltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQtaHRtbCc7XG5leHBvcnQgY2xhc3MgVGhlbWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnByaW1hcnlDb2xvciA9IFwiI2ZmMjA1MlwiO1xuICAgICAgICB0aGlzLnNlY29uZGFyeUNvbG9yID0gXCIjNGUwMGVjXCI7XG4gICAgICAgIHRoaXMuaWNvbkNvbG9yID0gXCIjZmZmZmZmXCI7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gXCIjZWRlZGVkXCI7XG4gICAgICAgIHRoaXMuY29ybmVyUmFkaXVzID0gXCI0cHhcIjtcbiAgICAgICAgdGhpcy5pbnB1dF9iZ19jb2xvciA9IFwiIzAwMDAwMDU0XCI7XG4gICAgICAgIHRoaXMuaW5wdXRfaGVpZ2h0ID0gXCI1MHB4XCI7XG4gICAgICAgIHRoaXMuaW5wdXRfcGFkZGluZyA9IFwiNXB4IDEwcHhcIjtcbiAgICAgICAgdGhpcy5pbnB1dF9jdXJzb3JfY29sb3IgPSBcIiNmZmZmZmZcIjtcbiAgICAgICAgdGhpcy5pbnB1dF90ZXh0X2NvbG9yID0gXCIjZmZmZmZmXCI7XG4gICAgICAgIHRoaXMuaW5wdXRfcGxhY2VfaG9sZGVyX2NvbG9yID0gXCIjZDJkMmQyXCI7XG4gICAgICAgIHRoaXMuaW5wdXRfaWNvbl9jb2xvciA9IFwiI2ZmZmZmZlwiO1xuICAgICAgICB0aGlzLmJ1dHRvbl9kaXNhYmxlX2NvbG9yID0gXCIjMDAwMDAwOGNcIjtcbiAgICAgICAgdGhpcy5zbmFja19iYXJfYmcgPSBcIiMwMDAwMDBiM1wiO1xuICAgICAgICB0aGlzLmdsYXNzX2JsYWNrID0gXCIjMDAwMDAwOGNcIjtcbiAgICAgICAgdGhpcy5QX2ZvbnRfc2l6ZSA9IFwiMWVtXCI7XG4gICAgICAgIHRoaXMuSDNfZm9udF9zaXplID0gXCIxLjNlbVwiO1xuICAgICAgICB0aGlzLkgyX2ZvbnRfc2l6ZSA9IFwiMS42ZW1cIjtcbiAgICAgICAgdGhpcy5IMV9mb250X3NpemUgPSBcIjJlbVwiO1xuICAgICAgICB0aGlzLkg1X2ZvbnRfc2l6ZSA9IFwiMC43ZW1cIjtcbiAgICAgICAgdGhpcy5INl9mb250X3NpemUgPSBcIjAuNWVtXCI7XG4gICAgICAgIHRoaXMuY29sb3IgPSBcImJsYWNrXCI7XG4gICAgICAgIHRoaXMudGFiX2luYWN0aXZlX2NvbG9yID0gXCIjZGJkYmRiXCI7XG4gICAgICAgIHRoaXMudGFiX2luYWN0aXZlX2ljb25fY29sb3IgPSBcIiM5MTkxOTFcIjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVGhlbWVCbG9jIGV4dGVuZHMgQmxvYyB7XG4gICAgY29uc3RydWN0b3IoaW5pdFRoZW1lKSB7XG4gICAgICAgIHN1cGVyKGluaXRUaGVtZSk7XG4gICAgfVxuICAgIGNoYW5nZVRoZW1lKG5ld1RoZW1lKSB7XG4gICAgICAgIHRoaXMuZW1pdChuZXdUaGVtZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFRoZW1lUHJvdmlkZXIgZXh0ZW5kcyBCbG9jc1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0aGVtZSkge1xuICAgICAgICBzdXBlcihbbmV3IFRoZW1lQmxvYyh0aGVtZSldKTtcbiAgICAgICAgZG9jdW1lbnQudXNlVGhlbVRoZW1lID0gdGhlbWU7XG4gICAgfVxuICAgIGJ1aWxkZXIoKSB7XG4gICAgICAgIHJldHVybiBodG1sIGA8ZGl2IHN0eWxlPVwid2lkdGg6MTAwJTsgaGVpZ2h0OiAxMDAlO1wiPjxzbG90Pjwvc2xvdD48L2Rpdj5gO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRoZW1lLmpzLm1hcCIsImltcG9ydCB7IEJsb2MsIEJsb2NCdWlsZGVyIH0gZnJvbSBcImJsb2MtdGhlbVwiO1xuZXhwb3J0IGNsYXNzIEFjdGlvbkJsb2MgZXh0ZW5kcyBCbG9jIHtcbiAgICBjb25zdHJ1Y3Rvcihpbml0U3RhdGUpIHtcbiAgICAgICAgc3VwZXIoaW5pdFN0YXRlKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQm9ndXNCbG9jIGV4dGVuZHMgQWN0aW9uQmxvYyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKDApO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBXaWRnZXRCdWlsZGVyIGV4dGVuZHMgQmxvY0J1aWxkZXIge1xuICAgIGNvbnN0cnVjdG9yKGJsb2NUeXBlLCBjb25maWdzKSB7XG4gICAgICAgIHN1cGVyKGJsb2NUeXBlLCBjb25maWdzKTtcbiAgICAgICAgbGV0IHRoZW1lID0gZG9jdW1lbnQudXNlVGhlbVRoZW1lO1xuICAgICAgICB0aGlzLl90aGVtZSA9IHsgLi4udGhlbWUsIC4uLnRoaXMudXNlQXR0cmlidXRlIH07XG4gICAgfVxuICAgIGdldCB0aGVtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RoZW1lO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJsb2NzLmpzLm1hcCIsImltcG9ydCB7IEJsb2NCdWlsZGVyLCBCbG9jIH0gZnJvbSAnYmxvYy10aGVtJztcbmltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQtaHRtbCc7XG5jbGFzcyBfTGF5VGhlbUJsb2MgZXh0ZW5kcyBCbG9jIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIodW5kZWZpbmVkKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTGF5VGhlbSBleHRlbmRzIEJsb2NCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoX0xheVRoZW1CbG9jLCB7XG4gICAgICAgICAgICB1c2VUaGlzQmxvYzogbmV3IF9MYXlUaGVtQmxvYygpXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgX2luID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJpblwiKTtcbiAgICAgICAgaWYgKF9pbikge1xuICAgICAgICAgICAgX2luID0gX2luLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfaW4gPSBcImNvbHVtblwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGF5X3RoZW1faW4gPSBfaW47XG4gICAgICAgIGxldCBtYSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwibWFcIik7XG4gICAgICAgIGlmIChtYSkge1xuICAgICAgICAgICAgbWEgPSBtYS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWEgPSBcImNlbnRlclwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFpbl9heGlzX2FsaWdubWVudCA9IG1hO1xuICAgICAgICBsZXQgY2EgPSB0aGlzLmdldEF0dHJpYnV0ZShcImNhXCIpO1xuICAgICAgICBpZiAoY2EpIHtcbiAgICAgICAgICAgIGNhID0gY2EudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChfaW4gPT09IFwic3RhY2tcIikge1xuICAgICAgICAgICAgICAgIGNhID0gXCJjZW50ZXJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhID0gXCJzdHJldGNoXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jcm9zc19heGlzX2FsaWdubWVudCA9IGNhO1xuICAgIH1cbiAgICBidWlsZGVyKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBodG1sIGBcbiAgICA8c3R5bGU+XG4gICAgICAuY29udGFpbmVye1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICB9XG4gICAgICAuZmxleHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtd3JhcDogbm93cmFwO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogJHsoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMubGF5X3RoZW1faW4gPT0gXCJzdGFja1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29sdW1uXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sYXlfdGhlbV9pbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKX07XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiAke3RoaXMubWFpbl9heGlzX2FsaWdubWVudH07XG4gICAgICAgICAgYWxpZ24taXRlbXM6ICR7dGhpcy5jcm9zc19heGlzX2FsaWdubWVudH07XG4gICAgICAgICAgZmxleC13cmFwOiBub3dyYXA7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIHBvc2l0aW9uOiAkeygoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5sYXlfdGhlbV9pbiA9PSBcInN0YWNrXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJyZWxhdGl2ZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic3RhdGljXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCl9O1xuICAgICAgfVxuICAgICAgXG4gICAgICAkeygoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5sYXlfdGhlbV9pbiA9PSBcInN0YWNrXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCI6OnNsb3R0ZWQoZGl2KXtwb3NpdGlvbjogYWJzb2x1dGU7fVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCl9XG4gICAgPC9zdHlsZT5cbiAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZmxleFwiIGlkPVwiZmxleFwiPlxuICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PmA7XG4gICAgfVxufVxud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbGF5LXRoZW0nLCBMYXlUaGVtKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxheVRoZW0uanMubWFwIiwiaW1wb3J0IHsgQmxvYyB9IGZyb20gJ2Jsb2MtdGhlbSc7XG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHsgV2lkZ2V0QnVpbGRlciB9IGZyb20gJy4uL3V0aWxzL2Jsb2NzJztcbmltcG9ydCAnbGF5LXRoZW0nO1xuZXhwb3J0IGNsYXNzIFNjYWZmb2xkQmxvYyBleHRlbmRzIEJsb2Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBzaG93TWVudTogZmFsc2UsXG4gICAgICAgICAgICBzaG93U25hY2tiYXI6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0b2dnbGVNZW51KCkge1xuICAgICAgICBsZXQgbmV3U3RhdGUgPSB7IC4uLnRoaXMuc3RhdGUgfTtcbiAgICAgICAgbmV3U3RhdGUuc2hvd01lbnUgPSAhbmV3U3RhdGUuc2hvd01lbnU7XG4gICAgICAgIHRoaXMuZW1pdChuZXdTdGF0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgOiBtZXNzYWdlXG4gICAgICogQHBhcmFtIHRpbWVvdXQgOiBpbiBtaWxsaXNlY29uZHNcbiAgICAgKi9cbiAgICBwb3N0TWVzc2FnZVRvU25hY2tCYXIobWVzc2FnZSwgdGltZW91dCA9IDQwMDApIHtcbiAgICAgICAgbGV0IG5ld1N0YXRlID0geyAuLi50aGlzLnN0YXRlIH07XG4gICAgICAgIG5ld1N0YXRlLnNob3dTbmFja2JhciA9IHRydWU7XG4gICAgICAgIG5ld1N0YXRlLnNuYWNrQmFyTWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMuZW1pdChuZXdTdGF0ZSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld1N0YXRlID0geyAuLi50aGlzLnN0YXRlIH07XG4gICAgICAgICAgICBuZXdTdGF0ZS5zaG93U25hY2tiYXIgPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1N0YXRlLnNuYWNrQmFyTWVzc2FnZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuZW1pdChuZXdTdGF0ZSk7XG4gICAgICAgIH0sIHRpbWVvdXQpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTY2FmZm9sZEJ1aWxkZXIgZXh0ZW5kcyBXaWRnZXRCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoU2NhZmZvbGRCbG9jLCB7XG4gICAgICAgICAgICB1c2VUaGlzQmxvYzogbmV3IFNjYWZmb2xkQmxvYygpXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRvZ2dsZU1lbnVCYXIgPSAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLmJsb2MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b2dnbGVNZW51KCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGJ1aWxkZXIoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgYFxuICAgICAgICA8IS0tIFRPRE8gbWVudSBiYXItLT5cbiAgICAgICAgPHN0eWxlPlxuICAgICAgICAgICAgLmFwcGJhciB7XG4gICAgICAgICAgICAgICAgbWluLWhlaWdodDogNjBweDtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5leHBhbmRlZHtcbiAgICAgICAgICAgICAgICB3aWR0aDoxMDAlOyBcbiAgICAgICAgICAgICAgICBoZWlnaHQ6MTAwJTsgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuZ2xhc3N7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0aGlzLnRoZW1lLmdsYXNzX2JsYWNrfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5zbmFjay1iYXJ7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0aGlzLnRoZW1lLnNuYWNrX2Jhcl9iZ307cG9zaXRpb246IGZpeGVkOyBib3R0b206IDUwcHg7IHBhZGRpbmc6MTBweCAyMHB4OyBtYXgtd2lkdGg6IDkwJTsgY29sb3I6IHdoaXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICA8L3N0eWxlPlxuPGRpdiBjbGFzcz1cImV4cGFuZGVkXCI+XG4gICAgPGxheS10aGVtIGluPVwic3RhY2tcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImV4cGFuZGVkXCI+XG4gICAgICAgICAgICA8bGF5LXRoZW0gZm9yPVwiYmFzZSBvZiBzY2FmZm9sZFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhcHBiYXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxheS10aGVtIGluPVwic3RhY2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJoZWlnaHQ6IDYwcHg7IHBvc2l0aW9uOiBmaXhlZDsgd2lkdGg6IDEwMCU7IGJveC1zaGFkb3c6IDBweCAwcHggMTBweCBibGFjaztcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2xvdCBuYW1lPVwiYXBwYmFyLWJnXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgdmVyc2lvbj1cIjEuMVwiIHZpZXdCb3g9XCIwIDAgMTAwIDEwMFwiIHByZXNlcnZlQXNwZWN0UmF0aW89XCJub25lXCIgaGVpZ2h0PVwiMTAwJVwiIHdpZHRoPVwiMTAwJVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZWZzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaW5lYXJHcmFkaWVudCBpZD1cImxpbmVhckdyYWRpZW50ODUwXCIgeDE9XCItMjguNzczXCIgeDI9XCIxMTkuNjhcIiB5MT1cIjUzLjkzNlwiIHkyPVwiNTAuODQ2XCIgZ3JhZGllbnRVbml0cz1cInVzZXJTcGFjZU9uVXNlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdG9wIHN0b3AtY29sb3I9XCIke3RoaXMudGhlbWUuc2Vjb25kYXJ5Q29sb3J9XCIgb2Zmc2V0PVwiMFwiPjwvc3RvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0b3Agc3RvcC1jb2xvcj1cIiR7dGhpcy50aGVtZS5wcmltYXJ5Q29sb3J9XCIgb2Zmc2V0PVwiMVwiPjwvc3RvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpbmVhckdyYWRpZW50PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZWZzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCIxMDBcIiBoZWlnaHQ9XCIxMDBcIiBmaWxsPVwidXJsKCNsaW5lYXJHcmFkaWVudDg1MClcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjIuMTM1NFwiPjwvcmVjdD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zbG90PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJ0aXRsZVwiPjwvc2xvdD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdCA6IDEwcHg7XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHV0LXNjYWZmb2xkLW1lbnUtYnV0dG9uPjwvdXQtc2NhZmZvbGQtbWVudS1idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2xheS10aGVtPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJib2R5XCIgc3R5bGU9XCJmbGV4OiAxIDEgYXV0bzsgb3ZlcmZsb3cteTogYXV0bztcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImJvZHlcIj48L3Nsb3Q+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2xheS10aGVtPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImV4cGFuZGVkIGdsYXNzXCIgc3R5bGU9XCJkaXNwbGF5OiAkeygoKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuc2hvd01lbnUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJibG9ja1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibm9uZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSgpfTtcIj5cbiAgICAgICAgICAgIDxsYXktdGhlbSBpbj1cInJvd1wiIGNhPVwic3RyZXRjaFwiIG1hPVwiZmxleC1zdGFydFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsgZmxleDogMiAxIGF1dG87IG1heC13aWR0aDogNzAlOyBib3gtc2hhZG93OiAwcHggMHB4IDMwcHggYmxhY2s7XCI+XG4gICAgICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJtZW51XCI+PC9zbG90PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJmbGV4OiAxIDEgYXV0bztcIiBAY2xpY2s9JHt0aGlzLnRvZ2dsZU1lbnVCYXJ9PjwvZGl2PlxuICAgICAgICAgICAgPC9sYXktdGhlbT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzbmFjay1iYXJcIiBzdHlsZT1cImJvcmRlci1yYWRpdXM6ICR7dGhpcy50aGVtZS5jb3JuZXJSYWRpdXN9OyBkaXNwbGF5OiAkeygoKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuc2hvd1NuYWNrYmFyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiYmxvY2tcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIm5vbmVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKX07XCI+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPVwiY29sb3I6d2hpdGU7IGZvbnQtc2l6ZTogJHt0aGlzLnRoZW1lLlBfZm9udF9zaXplfTtcIj4ke3N0YXRlLnNuYWNrQmFyTWVzc2FnZX08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9sYXktdGhlbT5cbjwvZGl2PlxuICAgICAgICBgO1xuICAgIH1cbn1cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcInV0LXNjYWZmb2xkXCIsIFNjYWZmb2xkQnVpbGRlcik7XG5jbGFzcyBNZW51QnV0dG9uIGV4dGVuZHMgV2lkZ2V0QnVpbGRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFNjYWZmb2xkQmxvYyk7XG4gICAgICAgIHRoaXMudG9nZ2xlTWVudUJhciA9ICgpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyB2YXIgX2E7IChfYSA9IHRoaXMuYmxvYykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvZ2dsZU1lbnUoKTsgfSwgMzAwKTtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCIjYW5pbWF0ZVRyYW5zZm9ybTUzMjJcIikuYmVnaW5FbGVtZW50KCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGJ1aWxkZXIoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgYDxzdmdcbiAgICAgICAgd2lkdGg9XCIxMG1tXCJcbiAgICAgICAgaGVpZ2h0PVwiMTBtbVwiXG4gICAgICAgIHZpZXdCb3g9XCIwIDAgMjUgMjVcIlxuICAgICAgICB2ZXJzaW9uPVwiMS4xXCJcbiAgICAgICAgaWQ9XCJzdmc4NDVcIlxuICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWRcIlxuICAgICAgICBhbmlnZW46dmVyc2lvbj1cIjAuOC4xXCJcbiAgICAgICAgQGNsaWNrPSR7dGhpcy50b2dnbGVNZW51QmFyfT5cbiAgICAgICAgPGdcbiAgICAgICAgICAgIGlkPVwiaWNvblwiXG4gICAgICAgICAgICB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTEuNTc0ODAzMmUtNywxLjQ5OTk5OTkpXCJcbiAgICAgICAgICAgIG9uY2xpY2s9XCJcIj5cbiAgICAgICAgICAgIDxyZWN0XG4gICAgICAgICAgICBzdHlsZT1cImZpbGw6JHt0aGlzLnRoZW1lLmljb25Db2xvcn07c3Ryb2tlLXdpZHRoOjEuOTIzNzg7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1vcGFjaXR5OjAuNjU4ODE5XCJcbiAgICAgICAgICAgIGlkPVwicmVjdDgzNVwiXG4gICAgICAgICAgICB3aWR0aD1cIjE1XCJcbiAgICAgICAgICAgIGhlaWdodD1cIjJcIlxuICAgICAgICAgICAgeD1cIjVcIlxuICAgICAgICAgICAgeT1cIjVcIiAvPlxuICAgICAgICAgICAgPHJlY3RcbiAgICAgICAgICAgIHN0eWxlPVwiZmlsbDoke3RoaXMudGhlbWUuaWNvbkNvbG9yfTtzdHJva2Utd2lkdGg6MS45MjM3ODtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW9wYWNpdHk6MC42NTg4MTlcIlxuICAgICAgICAgICAgaWQ9XCJyZWN0ODM3XCJcbiAgICAgICAgICAgIHdpZHRoPVwiMTVcIlxuICAgICAgICAgICAgaGVpZ2h0PVwiMlwiXG4gICAgICAgICAgICB4PVwiNVwiXG4gICAgICAgICAgICB5PVwiMTBcIiAvPlxuICAgICAgICAgICAgPHJlY3RcbiAgICAgICAgICAgIHN0eWxlPVwiZmlsbDoke3RoaXMudGhlbWUuaWNvbkNvbG9yfTtzdHJva2Utd2lkdGg6MS45MjM3ODtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW9wYWNpdHk6MC42NTg4MTlcIlxuICAgICAgICAgICAgaWQ9XCJyZWN0ODM5XCJcbiAgICAgICAgICAgIHdpZHRoPVwiMTVcIlxuICAgICAgICAgICAgaGVpZ2h0PVwiMlwiXG4gICAgICAgICAgICB4PVwiNVwiXG4gICAgICAgICAgICB5PVwiMTVcIiAvPlxuICAgICAgICAgICAgPGFuaW1hdGVUcmFuc2Zvcm1cbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU9XCJ0cmFuc2Zvcm1cIlxuICAgICAgICAgICAgYXR0cmlidXRlVHlwZT1cImF1dG9cIlxuICAgICAgICAgICAgdHlwZT1cInJvdGF0ZVwiXG4gICAgICAgICAgICB2YWx1ZXM9XCIwIDEyLjUwNTg5MzA3NDcwMTQ0IDEwLjk5NzQ1OTk1NjQxOTg4ODsxODAgMTIuNTA1ODkzMDc0NzAxNDQgMTAuOTk3NDU5OTU2NDE5ODg4XCJcbiAgICAgICAgICAgIGNhbGNNb2RlPVwic3BsaW5lXCJcbiAgICAgICAgICAgIGtleVRpbWVzPVwiMDsxXCJcbiAgICAgICAgICAgIGtleVNwbGluZXM9XCIwIDAgMSAxXCJcbiAgICAgICAgICAgIGR1cj1cIjAuM3NcIlxuICAgICAgICAgICAgYmVnaW49XCJpbmRlZmluaXRlXCJcbiAgICAgICAgICAgIHJlcGVhdENvdW50PVwiMVwiXG4gICAgICAgICAgICBhZGRpdGl2ZT1cInN1bVwiXG4gICAgICAgICAgICBhY2N1bXVsYXRlPVwibm9uZVwiXG4gICAgICAgICAgICBmaWxsPVwiZnJlZXplXCJcbiAgICAgICAgICAgIGlkPVwiYW5pbWF0ZVRyYW5zZm9ybTUzMjJcIiAvPlxuICAgICAgICA8L2c+XG4gICAgICAgIDwvc3ZnPmA7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwidXQtc2NhZmZvbGQtbWVudS1idXR0b25cIiwgTWVudUJ1dHRvbik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2FmZm9sZC5qcy5tYXAiLCJpbXBvcnQgeyBCbG9jLCBCbG9jc1Byb3ZpZGVyIH0gZnJvbSAnYmxvYy10aGVtJztcbmltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQgeyBXaWRnZXRCdWlsZGVyIH0gZnJvbSAnLi4vdXRpbHMvYmxvY3MnO1xuZXhwb3J0IGNsYXNzIEkxOE5CbG9jIGV4dGVuZHMgQmxvYyB7XG4gICAgY29uc3RydWN0b3IoaW5pdFN0YXRlKSB7XG4gICAgICAgIHN1cGVyKGluaXRTdGF0ZSk7XG4gICAgfVxuICAgIGNoYW5nZUxhbmd1YWdlKG5ld1N0YXRlKSB7XG4gICAgICAgIHRoaXMuZW1pdChuZXdTdGF0ZSk7XG4gICAgfVxuICAgIGdldFRleHQodGV4dEtleSkge1xuICAgICAgICBpZiAodGV4dEtleSkge1xuICAgICAgICAgICAgbGV0IHQgPSB0ZXh0S2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBsZXQgciA9IHRoaXMuc3RhdGVbdF07XG4gICAgICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIlRleHQga2V5cyBub3QgZm91bmQ6IFwiLCB0ZXh0S2V5LnN1YnN0cmluZygwLDMwKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHRLZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSTE4TkJsb2NQcm92aWRlciBleHRlbmRzIEJsb2NzUHJvdmlkZXIge1xuICAgIGJ1aWxkZXIoKSB7XG4gICAgICAgIHJldHVybiBodG1sIGA8ZGl2IHN0eWxlPVwid2lkdGg6MTAwJTsgaGVpZ2h0OiAxMDAlO1wiPjxzbG90Pjwvc2xvdD48L2Rpdj5gO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihpbml0U3RhdGUpIHtcbiAgICAgICAgc3VwZXIoW25ldyBJMThOQmxvYyhpbml0U3RhdGUpXSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIF9JMThOVGV4dCBleHRlbmRzIFdpZGdldEJ1aWxkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihJMThOQmxvYyk7XG4gICAgICAgIHRoaXMuX2ZvbnRfc2l6ZSA9IFwiMWVtXCI7XG4gICAgfVxuICAgIGJ1aWxkZXIoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgYDxzcGFuIHN0eWxlPVwiZm9udC1zaXplOiAke3RoaXMuX2ZvbnRfc2l6ZX07IGNvbG9yOiAke3RoaXMudGhlbWUuY29sb3J9XCI+JHtfSTE4TlRleHQuX2dldFRleHQodGhpcy50ZXh0Q29udGVudCwgc3RhdGUpfTwvc3Bhbj5gO1xuICAgIH1cbiAgICBzZXQgZm9udF9zaXplKHYpIHtcbiAgICAgICAgdGhpcy5fZm9udF9zaXplID0gdjtcbiAgICB9XG4gICAgc3RhdGljIF9nZXRUZXh0KHRleHRLZXksIHN0YXRlKSB7XG4gICAgICAgIGlmICh0ZXh0S2V5KSB7XG4gICAgICAgICAgICBsZXQgdCA9IHRleHRLZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChzdGF0ZVt0XSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZVt0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJUZXh0IGtleXMgbm90IGZvdW5kOiBcIiwgdGV4dEtleS5zdWJzdHJpbmcoMCwzMCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0S2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFV0VGV4dFAgZXh0ZW5kcyBfSTE4TlRleHQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZvbnRfc2l6ZSA9IHRoaXMudGhlbWUuUF9mb250X3NpemU7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwidXQtcFwiLCBVdFRleHRQKTtcbmV4cG9ydCBjbGFzcyBVdFRleHRIMSBleHRlbmRzIF9JMThOVGV4dCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZm9udF9zaXplID0gdGhpcy50aGVtZS5IMV9mb250X3NpemU7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwidXQtaDFcIiwgVXRUZXh0SDEpO1xuZXhwb3J0IGNsYXNzIFV0VGV4dEgyIGV4dGVuZHMgX0kxOE5UZXh0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mb250X3NpemUgPSB0aGlzLnRoZW1lLkgyX2ZvbnRfc2l6ZTtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJ1dC1oMlwiLCBVdFRleHRIMik7XG5leHBvcnQgY2xhc3MgVXRUZXh0SDMgZXh0ZW5kcyBfSTE4TlRleHQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZvbnRfc2l6ZSA9IHRoaXMudGhlbWUuSDNfZm9udF9zaXplO1xuICAgIH1cbn1cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcInV0LWgzXCIsIFV0VGV4dEgzKTtcbmV4cG9ydCBjbGFzcyBVdFRleHRINSBleHRlbmRzIF9JMThOVGV4dCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZm9udF9zaXplID0gdGhpcy50aGVtZS5INV9mb250X3NpemU7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwidXQtaDVcIiwgVXRUZXh0SDUpO1xuZXhwb3J0IGNsYXNzIFV0VGV4dEg2IGV4dGVuZHMgX0kxOE5UZXh0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mb250X3NpemUgPSB0aGlzLnRoZW1lLkg2X2ZvbnRfc2l6ZTtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJ1dC1oNlwiLCBVdFRleHRINik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0LmpzLm1hcCIsImltcG9ydCB7IFdpZGdldEJ1aWxkZXIsIEJvZ3VzQmxvYyB9IGZyb20gXCIuLi91dGlscy9ibG9jc1wiO1xuaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJztcbmV4cG9ydCBjbGFzcyBFeHBhbmRlZCBleHRlbmRzIFdpZGdldEJ1aWxkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihCb2d1c0Jsb2MsIHtcbiAgICAgICAgICAgIHVzZVRoaXNCbG9jOiBuZXcgQm9ndXNCbG9jKClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGJ1aWxkZXIoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgYDxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlOyBoZWlnaHQ6IDEwMCU7XCI+PHNsb3Q+PC9zbG90PjwvZGl2PmA7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwidXQtZXhcIiwgRXhwYW5kZWQpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGFpbmVycy5qcy5tYXAiLCIvKipcbiAqIElucHV0cyBtdXN0IGJlIHVud2FyZSBvZiBmb3JtIGV4aXN0ZW5zZS5cbiAqL1xuaW1wb3J0IHsgQmxvYywgQmxvY3NQcm92aWRlciB9IGZyb20gJ2Jsb2MtdGhlbSc7XG5pbXBvcnQgeyBXaWRnZXRCdWlsZGVyIH0gZnJvbSAnLi4vdXRpbHMvYmxvY3MnO1xuaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJztcbmV4cG9ydCBjbGFzcyBGb3JtTWVzc2FnZUJsb2MgZXh0ZW5kcyBCbG9jIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoe30pO1xuICAgIH1cbiAgICBwb3N0TWVzc2FnZShuYW1lT2ZJbnB1dCwgbXNnKSB7XG4gICAgICAgIHRoaXMuc3RhdGVbbmFtZU9mSW5wdXRdID0gbXNnO1xuICAgICAgICB0aGlzLmVtaXQoeyAuLi50aGlzLnN0YXRlIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBGb3JtQmxvYyBleHRlbmRzIEJsb2Mge1xuICAgIGNvbnN0cnVjdG9yKGluaXRTdGF0ZSkge1xuICAgICAgICBzdXBlcihpbml0U3RhdGUpO1xuICAgIH1cbiAgICBkaXNhYmxlQW5JbnB1dChuYW1lT2ZJbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuYXJlRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYXJlRGlzYWJsZWQgPSBuZXcgU2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZS5hcmVEaXNhYmxlZC5hZGQobmFtZU9mSW5wdXQpO1xuICAgICAgICB0aGlzLmVtaXQoeyAuLi50aGlzLnN0YXRlIH0pO1xuICAgIH1cbiAgICBlbmFibGVBbklucHV0KG5hbWVPZklucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmFyZURpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLmRlbGV0ZShuYW1lT2ZJbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0KHsgLi4udGhpcy5zdGF0ZSB9KTtcbiAgICB9XG4gICAgaXNEaXNhYmxlZChuYW1lT2ZJbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5hcmVEaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuYXJlRGlzYWJsZWQuaGFzKG5hbWVPZklucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfYmFzaWNPbkNoYW5nZShuYW1lT2ZJbnB1dCkge1xuICAgICAgICByZXR1cm4gKG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlW25hbWVPZklucHV0XSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy5lbWl0KHsgLi4udGhpcy5zdGF0ZSB9KTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRm9ybUlucHV0QnVpbGRlciBleHRlbmRzIFdpZGdldEJ1aWxkZXIge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUpIHtcbiAgICAgICAgc3VwZXIodHlwZSk7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIGxldCB0MSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwibmFtZVwiKTtcbiAgICAgICAgaWYgKHQxKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSB0MTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGBFdmVyeSBmb3JtIElucHV0IFdpZGdldCBtdXN0IGJlIGdpdmVuIGEgbmFtZSBhdHRyaWJ1dGUuYDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgZGlzYWJsZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLmJsb2MpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJsb2MuaXNEaXNhYmxlZCh0aGlzLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICB0aGlzLm1lc3NhZ2VCbG9jID0gQmxvY3NQcm92aWRlci5vZihGb3JtTWVzc2FnZUJsb2MsIHRoaXMpO1xuICAgICAgICB0aGlzLnZhbGlkYXRvciA9IChfYSA9IHRoaXMuYmxvYykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhbGlkYXRvckZ1bmN0aW9uR2l2ZXIodGhpcy5uYW1lKTtcbiAgICAgICAgdGhpcy5wb3N0T25DaGFuZ2UgPSAoX2IgPSB0aGlzLmJsb2MpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5wb3N0T25DaGFuZ2VGdW5jdGlvbkdpdmVyKHRoaXMubmFtZSk7XG4gICAgICAgIGxldCB0MSA9IChfYyA9IHRoaXMuYmxvYykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLl9iYXNpY09uQ2hhbmdlKHRoaXMubmFtZSk7XG4gICAgICAgIGlmICh0MSkge1xuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSA9IChuZXdWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0MShuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbGlkYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gdGhpcy52YWxpZGF0b3IobmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9hID0gdGhpcy5tZXNzYWdlQmxvYykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBvc3RNZXNzYWdlKHRoaXMubmFtZSwgdDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucG9zdE9uQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3N0T25DaGFuZ2UobmV3VmFsdWUsIHQyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTWVzc2FnZUJ1aWxkZXIgZXh0ZW5kcyBXaWRnZXRCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoRm9ybU1lc3NhZ2VCbG9jKTtcbiAgICAgICAgbGV0IGZvckF0dCA9IHRoaXMuZ2V0QXR0cmlidXRlKFwiZm9yXCIpO1xuICAgICAgICBpZiAoIWZvckF0dCkge1xuICAgICAgICAgICAgdGhyb3cgJ05vIGZvciBhdHRyaWJ1dGUgcHJlc2VudCBvbiBhIGZvcm0gbWVzc2FnZSc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uYW1lID0gZm9yQXR0O1xuICAgIH1cbiAgICBidWlsZGVyKHN0YXRlKSB7XG4gICAgICAgIGxldCBtc2cgPSBzdGF0ZVt0aGlzLm5hbWVdO1xuICAgICAgICByZXR1cm4gaHRtbCBgPHNwYW4+JHttc2d9PC9zcGFuPmA7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwiZm9ybS1tZXNzYWdlXCIsIE1lc3NhZ2VCdWlsZGVyKTtcbmV4cG9ydCBjbGFzcyBGb3JtQmxvY1Byb3ZpZGVyIGV4dGVuZHMgQmxvY3NQcm92aWRlciB7XG4gICAgYnVpbGRlcigpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgYDxkaXY+PHNsb3Q+PC9zbG90PjwvZGl2PmA7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZvcm1CbG9jKSB7XG4gICAgICAgIHN1cGVyKFtcbiAgICAgICAgICAgIG5ldyBGb3JtTWVzc2FnZUJsb2MoKSxcbiAgICAgICAgICAgIGZvcm1CbG9jXG4gICAgICAgIF0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1zLmpzLm1hcCIsImltcG9ydCB7IEZvcm1JbnB1dEJ1aWxkZXIgfSBmcm9tICcuLi9mb3Jtcyc7XG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnO1xuZXhwb3J0IGNsYXNzIFRvZ2dsZUJ1dHRvbiBleHRlbmRzIEZvcm1JbnB1dEJ1aWxkZXIge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUpIHtcbiAgICAgICAgc3VwZXIodHlwZSk7XG4gICAgICAgIHRoaXMudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fT05fYW5pbWF0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCIjb25fc3dpdGNoX2NvbG9yXCIpLmJlZ2luRWxlbWVudCgpO1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcIiNvbl9iYXNlX21vdmVcIikuYmVnaW5FbGVtZW50KCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX09GRl9hbmltYXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcIiNvZmZfc3dpdGNoX2NvbG9yXCIpLmJlZ2luRWxlbWVudCgpO1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcIiNvZmZfYmFzZV9tb3ZlXCIpLmJlZ2luRWxlbWVudCgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnRvZ2dsZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX09GRl9hbmltYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9PTl9hbmltYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSAhdGhpcy52YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBidWlsZGVyKHN0YXRlKSB7XG4gICAgICAgIGxldCBpbnB1dENpcmNsZUNvbG9yID0gdGhpcy5kaXNhYmxlZCA/IHRoaXMudGhlbWUuYmFja2dyb3VuZENvbG9yIDogXCIjZmZmZmZmXCI7XG4gICAgICAgIHJldHVybiBodG1sIGBcbjxzdmcgQGNsaWNrPSR7dGhpcy50b2dnbGV9XG4geG1sbnM6ZGM9XCJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xL1wiIHhtbG5zOmNjPVwiaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbnMjXCIgeG1sbnM6cmRmPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI1wiIFxuIHhtbG5zOnN2Zz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIFxuIHdpZHRoPVwiMTJtbVwiIGhlaWdodD1cIjhtbVwiIHZlcnNpb249XCIxLjFcIiBpZD1cInN2ZzIxXCIgdmlld0JveD1cIjAgMCAxNzAgOTBcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWRcIiBcbiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bWxuczpzb2RpcG9kaT1cImh0dHA6Ly9zb2RpcG9kaS5zb3VyY2Vmb3JnZS5uZXQvRFREL3NvZGlwb2RpLTAuZHRkXCIgeG1sbnM6aW5rc2NhcGU9XCJodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy9uYW1lc3BhY2VzL2lua3NjYXBlXCIgeG1sbnM6YW5pZ2VuPVwiaHR0cDovL3d3dy5hbmlnZW4ub3JnL25hbWVzcGFjZVwiXG4gIGFuaWdlbjp2ZXJzaW9uPVwiMC44LjFcIj5cbiAgPGRlZnMgaWQ9XCJkZWZzMTVcIj5cbiAgICA8bGluZWFyR3JhZGllbnQgaWQ9XCJsaW5lYXJHcmFkaWVudDg1MFwiIHgxPVwiLTI4Ljc3M1wiIHgyPVwiMTE5LjY4XCIgeTE9XCI1My45MzZcIiB5Mj1cIjUwLjg0NlwiIGdyYWRpZW50VW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiPlxuICAgICAgICA8c3RvcCBzdG9wLWNvbG9yPSR7dGhpcy50aGVtZS5zZWNvbmRhcnlDb2xvcn0gb2Zmc2V0PVwiMFwiPjwvc3RvcD5cbiAgICAgICAgPHN0b3Agc3RvcC1jb2xvcj0ke3RoaXMudGhlbWUucHJpbWFyeUNvbG9yfSBvZmZzZXQ9XCIxXCI+PC9zdG9wPlxuICAgIDwvbGluZWFyR3JhZGllbnQ+XG4gICAgPGZpbHRlciBpZD1cImZpbHRlcjkxNVwiIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycz1cInNSR0JcIj5cbiAgICAgIDxmZUZsb29kIGZsb29kLWNvbG9yPVwicmdiKDAsMCwwKVwiIGZsb29kLW9wYWNpdHk9XCIuNDExNzZcIiByZXN1bHQ9XCJmbG9vZFwiIGlkPVwiZmVGbG9vZDRcIj48L2ZlRmxvb2Q+XG4gICAgICA8ZmVDb21wb3NpdGUgaW49XCJmbG9vZFwiIGluMj1cIlNvdXJjZUdyYXBoaWNcIiBvcGVyYXRvcj1cImluXCIgcmVzdWx0PVwiY29tcG9zaXRlMVwiIGlkPVwiZmVDb21wb3NpdGU2XCI+PC9mZUNvbXBvc2l0ZT5cbiAgICAgIDxmZUdhdXNzaWFuQmx1ciBpbj1cImNvbXBvc2l0ZTFcIiByZXN1bHQ9XCJibHVyXCIgc3RkRGV2aWF0aW9uPVwiMTYuMTAzOFwiIGlkPVwiZmVHYXVzc2lhbkJsdXI4XCI+PC9mZUdhdXNzaWFuQmx1cj5cbiAgICAgIDxmZU9mZnNldCBkeD1cIjEuNlwiIGR5PVwiMS44XCIgcmVzdWx0PVwib2Zmc2V0XCIgaWQ9XCJmZU9mZnNldDEwXCI+PC9mZU9mZnNldD5cbiAgICAgIDxmZUNvbXBvc2l0ZSBpbj1cIlNvdXJjZUdyYXBoaWNcIiBpbjI9XCJvZmZzZXRcIiByZXN1bHQ9XCJjb21wb3NpdGUyXCIgaWQ9XCJmZUNvbXBvc2l0ZTEyXCI+PC9mZUNvbXBvc2l0ZT5cbiAgICA8L2ZpbHRlcj5cbiAgPC9kZWZzPlxuICA8ZyBpZD1cImJhc2UtYW5pbWF0aW9uXCI+XG4gICAgPHJlY3QgaWQ9XCJ0b2dnbGUtYnV0dG9uLWJhc2VcIiB4PVwiMy42ZS0wN1wiIHk9XCIxLjM5NjhcIiB3aWR0aD1cIjE2Ny4zN1wiIGhlaWdodD1cIjgzLjY4NTk5N1wiIHJ4PVwiMzkuNjQxOTk4XCIgcnk9XCI0MS44NDE5OTlcIiBmaWxsPVwiJHt0aGlzLnRoZW1lLmlucHV0X2JnX2NvbG9yfVwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLW9wYWNpdHk9XCIwLjY1ODgyXCIgc3Ryb2tlLXdpZHRoPVwiMC40MjM2NlwiPlxuICAgICAgPGFuaW1hdGUgYXR0cmlidXRlVHlwZT1cImF1dG9cIiBhdHRyaWJ1dGVOYW1lPVwiZmlsbFwiIHZhbHVlcz1cIiR7dGhpcy50aGVtZS5pbnB1dF9iZ19jb2xvcn07JHt0aGlzLnRoZW1lLnByaW1hcnlDb2xvcn1cIiBjYWxjTW9kZT1cInNwbGluZVwiIGtleVRpbWVzPVwiMDsxXCIga2V5U3BsaW5lcz1cIjAgMCAxIDFcIiBkdXI9XCIwLjJzXCIgYmVnaW49XCJpbmRlZmluaXRlXCIgXG4gICAgICByZXBlYXRDb3VudD1cIjFcIiBhZGRpdGl2ZT1cInJlcGxhY2VcIiBhY2N1bXVsYXRlPVwibm9uZVwiIGZpbGw9XCJmcmVlemVcIiBpZD1cIm9uX3N3aXRjaF9jb2xvclwiPjwvYW5pbWF0ZT5cbiAgICAgIDxhbmltYXRlIGF0dHJpYnV0ZVR5cGU9XCJhdXRvXCIgYXR0cmlidXRlTmFtZT1cImZpbGxcIiB2YWx1ZXM9XCIke3RoaXMudGhlbWUucHJpbWFyeUNvbG9yfTske3RoaXMudGhlbWUuaW5wdXRfYmdfY29sb3J9XCIgY2FsY01vZGU9XCJzcGxpbmVcIiBrZXlUaW1lcz1cIjA7MVwiIGtleVNwbGluZXM9XCIwIDAgMSAxXCIgZHVyPVwiMC4yc1wiIGJlZ2luPVwiaW5kZWZpbml0ZVwiIFxuICAgICAgcmVwZWF0Q291bnQ9XCIxXCIgYWRkaXRpdmU9XCJyZXBsYWNlXCIgYWNjdW11bGF0ZT1cIm5vbmVcIiBmaWxsPVwiZnJlZXplXCIgaWQ9XCJvZmZfc3dpdGNoX2NvbG9yXCI+PC9hbmltYXRlPlxuICAgIDwvcmVjdD5cbiAgPC9nPlxuICA8ZyBpZD1cInN3aXRjaC1hbmltYXRpb25cIj5cbiAgICA8Y2lyY2xlIGlkPVwic3dpdGNoXCIgdHJhbnNmb3JtPVwibWF0cml4KDAuMjgwMjUsMCwwLDAuMjgwMjUsNTMuODA5LDEuMzk2OClcIiBjeD1cIjI1MC4yNDAwMVwiIGN5PVwiMTQ4LjdcIiByPVwiMTI4LjA3MDAxXCIgZmlsbD1cIiR7aW5wdXRDaXJjbGVDb2xvcn1cIiBmaWx0ZXI9XCJ1cmwoI2ZpbHRlcjkxNSlcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS1vcGFjaXR5PVwiMC42NTg4MlwiIHN0cm9rZS13aWR0aD1cIjIuMDUzMlwiPjwvY2lyY2xlPlxuICA8YW5pbWF0ZVRyYW5zZm9ybSBhdHRyaWJ1dGVOYW1lPVwidHJhbnNmb3JtXCIgYXR0cmlidXRlVHlwZT1cImF1dG9cIiB0eXBlPVwidHJhbnNsYXRlXCIgdmFsdWVzPVwiMCAwOy04MS42ODk1MDY1OTUzNDQ3MSAwXCIgY2FsY01vZGU9XCJzcGxpbmVcIiBrZXlUaW1lcz1cIjA7MVwiIFxuICBrZXlTcGxpbmVzPVwiMCAwIDEgMVwiIGR1cj1cIjAuMnNcIiBiZWdpbj1cImluZGVmaW5pdGVcIiByZXBlYXRDb3VudD1cIjFcIiBhZGRpdGl2ZT1cInJlcGxhY2VcIiBhY2N1bXVsYXRlPVwibm9uZVwiIGZpbGw9XCJmcmVlemVcIiBpZD1cIm9uX2Jhc2VfbW92ZVwiPjwvYW5pbWF0ZVRyYW5zZm9ybT5cbiAgPGFuaW1hdGVUcmFuc2Zvcm0gYXR0cmlidXRlTmFtZT1cInRyYW5zZm9ybVwiIGF0dHJpYnV0ZVR5cGU9XCJhdXRvXCIgdHlwZT1cInRyYW5zbGF0ZVwiIHZhbHVlcz1cIjAgMDs4MS42ODk1MDY1OTUzNDQ3MSAwXCIgY2FsY01vZGU9XCJzcGxpbmVcIiBrZXlUaW1lcz1cIjA7MVwiIFxuICBrZXlTcGxpbmVzPVwiMCAwIDEgMVwiIGR1cj1cIjAuMnNcIiBiZWdpbj1cImluZGVmaW5pdGVcIiByZXBlYXRDb3VudD1cIjFcIiBhZGRpdGl2ZT1cInN1bVwiIGFjY3VtdWxhdGU9XCJub25lXCIgZmlsbD1cImZyZWV6ZVwiIGlkPVwib2ZmX2Jhc2VfbW92ZVwiPjwvYW5pbWF0ZVRyYW5zZm9ybT5cbiAgPC9nPlxuPC9zdmc+XG4gICAgICAgIGA7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9nZ2xlYnV0dG9uLmpzLm1hcCIsImltcG9ydCB7IEZvcm1JbnB1dEJ1aWxkZXIgfSBmcm9tICcuLi9mb3Jtcyc7XG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnO1xuZXhwb3J0IGNsYXNzIFJhbmdlU2VsZWN0b3IgZXh0ZW5kcyBGb3JtSW5wdXRCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgICAgIHN1cGVyKHR5cGUpO1xuICAgICAgICB0aGlzLnZhbHVlID0geyBzdGFydDogMCwgZW5kOiAwIH07XG4gICAgICAgIHRoaXMuaXNEcmFnaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2RyYWdfT04gPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pc0RyYWdpbmcgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9kcmFnX09GRiA9IChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzRHJhZ2luZyA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9kcmFnID0gKHBvc1gpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRHJhZ2luZykge1xuICAgICAgICAgICAgICAgIC8vbGV0IHBvc1ggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICAgICAgICAgICAgbGV0IG1pbkV4ID0gdGhpcy5wb3NNaW4gKyB0aGlzLmhhbmRsZVJhZGl1cztcbiAgICAgICAgICAgICAgICBsZXQgbWF4RXggPSB0aGlzLnBvc01heCAtIHRoaXMuaGFuZGxlUmFkaXVzO1xuICAgICAgICAgICAgICAgIGlmIChwb3NYIDwgbWluRXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zWCA9IG1pbkV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwb3NYID4gbWF4RXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zWCA9IG1heEV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibm8gZHJhZyBvblwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwb3NYO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9zdGFydF9kcmFnID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIGxldCBwb3NYID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgICAgICAgICAgIHBvc1ggPSB0aGlzLl9kcmFnKHBvc1gpO1xuICAgICAgICAgICAgICAgIGlmIChwb3NYID4gdGhpcy5wb3NFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zWCA9IHRoaXMucG9zRW5kIC0gMiAqIHRoaXMuaGFuZGxlUmFkaXVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgdCA9IHRoaXMucG9zTWF4IC0gMyAqIHRoaXMuaGFuZGxlUmFkaXVzO1xuICAgICAgICAgICAgICAgIGlmIChwb3NYID49IHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zWCA9IHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhcnRQb3MocG9zWCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVTdGFydChwb3NYKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3N0Q2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2VuZF9kcmFnID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIGxldCBwb3NYID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgICAgICAgICAgIHBvc1ggPSB0aGlzLl9kcmFnKHBvc1gpO1xuICAgICAgICAgICAgICAgIGlmIChwb3NYIDwgdGhpcy5wb3NTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBwb3NYID0gdGhpcy5wb3NTdGFydCArIDIgKiB0aGlzLmhhbmRsZVJhZGl1cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHQgPSB0aGlzLnBvc01pbiArIDMgKiB0aGlzLmhhbmRsZVJhZGl1cztcbiAgICAgICAgICAgICAgICBpZiAocG9zWCA8PSB0KSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc1ggPSB0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNldEVuZFBvcyhwb3NYKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFjdGl2ZUVuZChwb3NYKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3N0Q2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3N0YXJ0X2RyYWdIYW5kbGVyID0ge1xuICAgICAgICAgICAgaGFuZGxlRXZlbnQ6IHRoaXMuX3N0YXJ0X2RyYWcsXG4gICAgICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2VuZF9kcmFnSGFuZGxlciA9IHtcbiAgICAgICAgICAgIGhhbmRsZUV2ZW50OiB0aGlzLl9lbmRfZHJhZyxcbiAgICAgICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wb3NNYXggPSAwO1xuICAgICAgICB0aGlzLnBvc01pbiA9IDA7XG4gICAgICAgIHRoaXMucG9zU3RhcnQgPSAwO1xuICAgICAgICB0aGlzLnBvc0VuZCA9IDA7XG4gICAgICAgIHRoaXMud2lkdGggPSAwO1xuICAgICAgICBsZXQgbWF4ID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJtYXhcIik7XG4gICAgICAgIGxldCBtaW4gPSB0aGlzLmdldEF0dHJpYnV0ZShcIm1pblwiKTtcbiAgICAgICAgdGhpcy5oYW5kbGVSYWRpdXMgPSAxMjtcbiAgICAgICAgaWYgKCEobWF4ICYmIG1pbikpIHtcbiAgICAgICAgICAgIHRocm93IGBOb3QgYWxsIGF0dHJpYnV0ZXMgcHJvdmlkZWQgZm9yIGEgcmFuZ2Ugc2VsZWN0b3I6IG1pbiBhbmQgbWF4YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWF4ID0gTnVtYmVyKG1heCk7XG4gICAgICAgICAgICB0aGlzLm1pbiA9IE51bWJlcihtaW4pO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpc2ludCA9IHRoaXMuZ2V0QXR0cmlidXRlKFwiaXNpbnRcIik7XG4gICAgICAgIHRoaXMuaXNpbnQgPSBpc2ludCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgdGhpcy5zdGFydF9jb2xvciA9IHRoaXMudGhlbWUucHJpbWFyeUNvbG9yO1xuICAgICAgICB0aGlzLmVuZF9jb2xvciA9IHRoaXMudGhlbWUuc2Vjb25kYXJ5Q29sb3I7XG4gICAgICAgIHRoaXMuYmFzZV9jb2xvciA9IHRoaXMudGhlbWUuaW5wdXRfYmdfY29sb3I7XG4gICAgfVxuICAgIGJ1aWxkZXIoc3RhdGUpIHtcbiAgICAgICAgbGV0IGlzRGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkO1xuICAgICAgICBpZiAoaXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydF9jb2xvciA9IHRoaXMuYmFzZV9jb2xvcjtcbiAgICAgICAgICAgIHRoaXMuZW5kX2NvbG9yID0gdGhpcy5iYXNlX2NvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGFydF9jb2xvciA9IHRoaXMudGhlbWUucHJpbWFyeUNvbG9yO1xuICAgICAgICAgICAgdGhpcy5lbmRfY29sb3IgPSB0aGlzLnRoZW1lLnNlY29uZGFyeUNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBodG1sIGBcbiAgICAgICAgPHN0eWxlPlxuICAgICAgICAgICAubm8tc2VsZWN0e1xuICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgICAgIH1cbiAgICAgICAgPC9zdHlsZT5cbiAgICAgIDxsYXktdGhlbSBpbj1cInJvd1wiIG1hPVwiY2VudGVyXCI+XG4gICAgICAgICA8ZGl2IGNsYXNzPVwibm8tc2VsZWN0XCIgc3R5bGU9XCJmb250LXdlaWdodDogYm9sZDsgIGZvbnQtc2l6ZTogJHt0aGlzLnRoZW1lLkgzX2ZvbnRfc2l6ZX07XCI+JHt0aGlzLmlzaW50ID8gdGhpcy52YWx1ZS5zdGFydCA6IHRoaXMudmFsdWUuc3RhcnQudG9GaXhlZCgyKX08L2Rpdj5cbiAgICAgIDwvbGF5LXRoZW0+XG48c3ZnXG4gICB4bWxuczpkYz1cImh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvXCJcbiAgIHhtbG5zOmNjPVwiaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbnMjXCJcbiAgIHhtbG5zOnJkZj1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyNcIlxuICAgeG1sbnM6c3ZnPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIlxuICAgd2lkdGg9XCIxMDAlXCJcbiAgIGhlaWdodD1cIjUwcHhcIlxuICAgdmVyc2lvbj1cIjEuMVwiXG4gICBpZD1cInN2ZzhcIj5cbiAgPGRlZnNcbiAgICAgaWQ9XCJkZWZzMlwiPlxuICAgIDxsaW5lYXJHcmFkaWVudFxuICAgICAgIGlkPVwibGluZWFyR3JhZGllbnQxMTk3XCI+XG4gICAgICA8c3RvcFxuICAgICAgICAgc3R5bGU9XCJzdG9wLWNvbG9yOiR7dGhpcy5lbmRfY29sb3J9O3N0b3Atb3BhY2l0eToxXCJcbiAgICAgICAgIG9mZnNldD1cIjBcIlxuICAgICAgICAgaWQ9XCJzdG9wMTE5M1wiIC8+XG4gICAgICA8c3RvcFxuICAgICAgICAgc3R5bGU9XCJzdG9wLWNvbG9yOiR7dGhpcy5zdGFydF9jb2xvcn07c3RvcC1vcGFjaXR5OjFcIlxuICAgICAgICAgb2Zmc2V0PVwiMVwiXG4gICAgICAgICBpZD1cInN0b3AxMTk1XCIgLz5cbiAgICA8L2xpbmVhckdyYWRpZW50PlxuICAgIDxmaWx0ZXJcbiAgICAgICBzdHlsZT1cImNvbG9yLWludGVycG9sYXRpb24tZmlsdGVyczpzUkdCO1wiXG4gICAgICAgaWQ9XCJmaWx0ZXIxMTU3XCI+XG4gICAgICA8ZmVGbG9vZFxuICAgICAgICAgZmxvb2Qtb3BhY2l0eT1cIjAuNjY2NjY3XCJcbiAgICAgICAgIGZsb29kLWNvbG9yPVwicmdiKDAsMCwwKVwiXG4gICAgICAgICByZXN1bHQ9XCJmbG9vZFwiXG4gICAgICAgICBpZD1cImZlRmxvb2QxMTQ3XCIgLz5cbiAgICAgIDxmZUNvbXBvc2l0ZVxuICAgICAgICAgaW49XCJmbG9vZFwiXG4gICAgICAgICBpbjI9XCJTb3VyY2VHcmFwaGljXCJcbiAgICAgICAgIG9wZXJhdG9yPVwiaW5cIlxuICAgICAgICAgcmVzdWx0PVwiY29tcG9zaXRlMVwiXG4gICAgICAgICBpZD1cImZlQ29tcG9zaXRlMTE0OVwiIC8+XG4gICAgICA8ZmVHYXVzc2lhbkJsdXJcbiAgICAgICAgIGluPVwiY29tcG9zaXRlMVwiXG4gICAgICAgICBzdGREZXZpYXRpb249XCIwLjk4OTY0NFwiXG4gICAgICAgICByZXN1bHQ9XCJibHVyXCJcbiAgICAgICAgIGlkPVwiZmVHYXVzc2lhbkJsdXIxMTUxXCIgLz5cbiAgICAgIDxmZU9mZnNldFxuICAgICAgICAgZHg9XCIwXCJcbiAgICAgICAgIGR5PVwiMFwiXG4gICAgICAgICByZXN1bHQ9XCJvZmZzZXRcIlxuICAgICAgICAgaWQ9XCJmZU9mZnNldDExNTNcIiAvPlxuICAgICAgPGZlQ29tcG9zaXRlXG4gICAgICAgICBpbj1cIlNvdXJjZUdyYXBoaWNcIlxuICAgICAgICAgaW4yPVwib2Zmc2V0XCJcbiAgICAgICAgIG9wZXJhdG9yPVwib3ZlclwiXG4gICAgICAgICByZXN1bHQ9XCJjb21wb3NpdGUyXCJcbiAgICAgICAgIGlkPVwiZmVDb21wb3NpdGUxMTU1XCIgLz5cbiAgICA8L2ZpbHRlcj5cbiAgICA8bGluZWFyR3JhZGllbnRcbiAgICAgICB4bGluazpocmVmPVwiI2xpbmVhckdyYWRpZW50MTE5N1wiXG4gICAgICAgaWQ9XCJsaW5lYXJHcmFkaWVudDExOTlcIlxuICAgICAgIHgxPVwiMTMuMTQxNjkyXCJcbiAgICAgICB5MT1cIjE1Ljg3NDk5OVwiXG4gICAgICAgeDI9XCI1MDBcIlxuICAgICAgIHkyPVwiMTUuODc0OTk5XCJcbiAgICAgICBncmFkaWVudFVuaXRzPVwidXNlclNwYWNlT25Vc2VcIiAvPlxuICAgIDxmaWx0ZXJcbiAgICAgICBzdHlsZT1cImNvbG9yLWludGVycG9sYXRpb24tZmlsdGVyczpzUkdCO1wiXG4gICAgICAgaWQ9XCJmaWx0ZXIxMjYxXCJcbiAgICAgICBoZWlnaHQ9XCIxLjY3MDAwMDAwMDAwMDAwMDRcIlxuICAgICAgIHdpZHRoPVwiMS41NzAwMDAwMDAwMDAwMDAzXCJcbiAgICAgICB4PVwiLTAuMzAwMDAwMDAwMDAwMDAwMTZcIlxuICAgICAgIHk9XCItMC4zMDAwMDAwMDAwMDAwMDAxNlwiPlxuICAgICAgPGZlRmxvb2RcbiAgICAgICAgIGZsb29kLW9wYWNpdHk9XCIwLjY2NjY2N1wiXG4gICAgICAgICBmbG9vZC1jb2xvcj1cInJnYigwLDAsMClcIlxuICAgICAgICAgcmVzdWx0PVwiZmxvb2RcIlxuICAgICAgICAgaWQ9XCJmZUZsb29kMTI1MVwiIC8+XG4gICAgICA8ZmVDb21wb3NpdGVcbiAgICAgICAgIGluPVwiZmxvb2RcIlxuICAgICAgICAgaW4yPVwiU291cmNlR3JhcGhpY1wiXG4gICAgICAgICBvcGVyYXRvcj1cImluXCJcbiAgICAgICAgIHJlc3VsdD1cImNvbXBvc2l0ZTFcIlxuICAgICAgICAgaWQ9XCJmZUNvbXBvc2l0ZTEyNTNcIiAvPlxuICAgICAgPGZlR2F1c3NpYW5CbHVyXG4gICAgICAgICBpbj1cImNvbXBvc2l0ZTFcIlxuICAgICAgICAgc3RkRGV2aWF0aW9uPVwiNC41ODk0N1wiXG4gICAgICAgICByZXN1bHQ9XCJibHVyXCJcbiAgICAgICAgIGlkPVwiZmVHYXVzc2lhbkJsdXIxMjU1XCIgLz5cbiAgICAgIDxmZU9mZnNldFxuICAgICAgICAgZHg9XCIwXCJcbiAgICAgICAgIGR5PVwiMFwiXG4gICAgICAgICByZXN1bHQ9XCJvZmZzZXRcIlxuICAgICAgICAgaWQ9XCJmZU9mZnNldDEyNTdcIiAvPlxuICAgICAgPGZlQ29tcG9zaXRlXG4gICAgICAgICBpbj1cIlNvdXJjZUdyYXBoaWNcIlxuICAgICAgICAgaW4yPVwib2Zmc2V0XCJcbiAgICAgICAgIG9wZXJhdG9yPVwib3ZlclwiXG4gICAgICAgICByZXN1bHQ9XCJjb21wb3NpdGUyXCJcbiAgICAgICAgIGlkPVwiZmVDb21wb3NpdGUxMjU5XCIgLz5cbiAgICA8L2ZpbHRlcj5cbiAgPC9kZWZzPlxuICA8bWV0YWRhdGFcbiAgICAgaWQ9XCJtZXRhZGF0YTVcIj5cbiAgICA8cmRmOlJERj5cbiAgICAgIDxjYzpXb3JrXG4gICAgICAgICByZGY6YWJvdXQ9XCJcIj5cbiAgICAgICAgPGRjOmZvcm1hdD5pbWFnZS9zdmcreG1sPC9kYzpmb3JtYXQ+XG4gICAgICAgIDxkYzp0eXBlXG4gICAgICAgICAgIHJkZjpyZXNvdXJjZT1cImh0dHA6Ly9wdXJsLm9yZy9kYy9kY21pdHlwZS9TdGlsbEltYWdlXCIgLz5cbiAgICAgICAgPGRjOnRpdGxlPjwvZGM6dGl0bGU+XG4gICAgICA8L2NjOldvcms+XG4gICAgPC9yZGY6UkRGPlxuICA8L21ldGFkYXRhPlxuICA8Z1xuICAgICBpZD1cImxheWVyMVwiPlxuICAgIDxyZWN0XG4gICAgICAgc3R5bGU9XCJmaWxsOiR7dGhpcy5iYXNlX2NvbG9yfTtzdHJva2Utd2lkdGg6MC40Nzc3Mjc7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1vcGFjaXR5OjAuNjU4ODE5XCJcbiAgICAgICBpZD1cImJhc2VcIlxuICAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICAgaGVpZ2h0PVwiNVwiXG4gICAgICAgeD1cIjBcIlxuICAgICAgIHk9XCIyMFwiIC8+XG4gICAgPCEtLSA8cmVjdFxuICAgICAgIHN0eWxlPVwiZmlsbDp1cmwoI2xpbmVhckdyYWRpZW50MTE5OSk7ZmlsbC1vcGFjaXR5OjE7c3Ryb2tlLXdpZHRoOjAuNDc3NzI3O3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2Utb3BhY2l0eTowLjY1ODgxOVwiXG4gICAgICAgaWQ9XCJhY3RpdmUtcmFuZ2VcIlxuICAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICAgaGVpZ2h0PVwiMTVcIlxuICAgICAgIHg9XCIwXCJcbiAgICAgICB5PVwiNTBcIiAvPiAtLT5cbiAgICAgICA8cGF0aFxuICAgICAgIGlkPVwiYWNyYW5nZVwiXG4gICAgICAgc3R5bGU9XCJmaWxsOnVybCgjbGluZWFyR3JhZGllbnQxMTk5KTtcIlxuICAgICAgIGQ9XCJcIlxuICAgICAgIGlkPVwicGF0aDgzM1wiIC8+XG4gICAgPGNpcmNsZVxuICAgICAgIHN0eWxlPVwiZmlsbDoke3RoaXMuZW5kX2NvbG9yfTtzdHJva2U6I2ZmZmZmZjtzdHJva2Utd2lkdGg6IDQ7XCJcbiAgICAgICBpZD1cInN0YXJ0LWhhbmRsZVwiXG4gICAgICAgY3k9XCIyNVwiXG4gICAgICAgcj1cIiR7dGhpcy5oYW5kbGVSYWRpdXN9XCJcbiAgICAgICBAdG91Y2hzdGFydD0ke3RoaXMuX2RyYWdfT059XG4gICAgICAgQHRvdWNoZW5kPSR7dGhpcy5fZHJhZ19PRkZ9XG4gICAgICAgQHRvdWNobW92ZT0ke3RoaXMuX3N0YXJ0X2RyYWdIYW5kbGVyfVxuICAgICAgIC8+XG4gICAgPGNpcmNsZVxuICAgICAgIHN0eWxlPVwiZmlsbDoke3RoaXMuc3RhcnRfY29sb3J9O3N0cm9rZTojZmZmZmZmO3N0cm9rZS13aWR0aDogNDtcIlxuICAgICAgIGlkPVwiZW5kLWhhbmRsZVwiXG4gICAgICAgY3k9XCIyNVwiXG4gICAgICAgcj1cIiR7dGhpcy5oYW5kbGVSYWRpdXN9XCJcbiAgICAgICBAdG91Y2hzdGFydD0ke3RoaXMuX2RyYWdfT059XG4gICAgICAgQHRvdWNoZW5kPSR7dGhpcy5fZHJhZ19PRkZ9XG4gICAgICAgQHRvdWNobW92ZT0ke3RoaXMuX2VuZF9kcmFnSGFuZGxlcn0vPlxuICA8L2c+XG48L3N2Zz5cbjxsYXktdGhlbSBpbj1cInJvd1wiIG1hPVwic3BhY2UtYmV0d2VlblwiPlxuICAgPGRpdiBjbGFzcz1cIm5vLXNlbGVjdFwiPjx1dC1wPiR7dGhpcy5taW59PC91dC1wPjwvZGl2PlxuICAgPGRpdiBjbGFzcz1cIm5vLXNlbGVjdFwiIHN0eWxlPVwiZm9udC13ZWlnaHQ6IGJvbGQ7ICBmb250LXNpemU6ICR7dGhpcy50aGVtZS5IM19mb250X3NpemV9O1wiPiR7dGhpcy5pc2ludCA/IHRoaXMudmFsdWUuZW5kIDogdGhpcy52YWx1ZS5lbmQudG9GaXhlZCgyKX08L2Rpdj5cbiAgIDxkaXYgY2xhc3M9XCJuby1zZWxlY3RcIj48dXQtcD4ke3RoaXMubWF4fTwvdXQtcD48L2Rpdj5cbjwvbGF5LXRoZW0+XG4gICAgICAgIGA7XG4gICAgfVxuICAgIF9wb3N0Q2hhbmdlKCkge1xuICAgICAgICBsZXQgZW4gPSB0aGlzLnBvc2l0aW9uVG9WYWx1ZSh0aGlzLnBvc0VuZCk7XG4gICAgICAgIGxldCBzdCA9IHRoaXMucG9zaXRpb25Ub1ZhbHVlKHRoaXMucG9zU3RhcnQpO1xuICAgICAgICBpZiAodGhpcy5pc2ludCkge1xuICAgICAgICAgICAgZW4gPSBNYXRoLmZsb29yKGVuKTtcbiAgICAgICAgICAgIHN0ID0gTWF0aC5mbG9vcihzdCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZSA9IHsgc3RhcnQ6IHN0LCBlbmQ6IGVuIH07XG4gICAgICAgIHRoaXMub25DaGFuZ2UodGhpcy52YWx1ZSk7XG4gICAgfVxuICAgIHZhbHVlVG9QZXJjZW50YWdlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoKHZhbHVlIC0gKHRoaXMubWluICsgdGhpcy5oYW5kbGVSYWRpdXMgLyB0aGlzLndpZHRoKSkgLyAodGhpcy5tYXggLSB0aGlzLm1pbiAtICgyICogdGhpcy5oYW5kbGVSYWRpdXMgLyB0aGlzLndpZHRoKSkpICogMTAwO1xuICAgIH1cbiAgICBwZXJjZW50YWdlVG9Qb3NpdGlvbihwZXJjZW50YWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZVJhZGl1cyArIHBlcmNlbnRhZ2UgKiAodGhpcy5wb3NNYXggLSB0aGlzLnBvc01pbiAtIDIgKiB0aGlzLmhhbmRsZVJhZGl1cykgLyAxMDA7XG4gICAgfVxuICAgIHBvc2l0aW9uVG9WYWx1ZShwb3NYKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbiArICgodGhpcy5tYXggLSB0aGlzLm1pbikgLyAodGhpcy53aWR0aCAtIDIgKiB0aGlzLmhhbmRsZVJhZGl1cykpICogKHBvc1ggLSB0aGlzLmhhbmRsZVJhZGl1cyk7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2c7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMuc3RhcnQgPSAoX2EgPSB0aGlzLmJsb2MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdGF0ZS5wcmljZVJhbmdlLnN0YXJ0O1xuICAgICAgICB0aGlzLmVuZCA9IChfYiA9IHRoaXMuYmxvYykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnN0YXRlLnByaWNlUmFuZ2UuZW5kO1xuICAgICAgICBpZiAoISh0aGlzLnN0YXJ0ID09IDAgfHwgKHRoaXMuc3RhcnQgJiYgdGhpcy5zdGFydCA+PSAwKSAmJiB0aGlzLmVuZCA9PSAwIHx8ICh0aGlzLmVuZCAmJiB0aGlzLmVuZCA+PSAwKSkpIHtcbiAgICAgICAgICAgIHRocm93IGBObyBzdGFydCBhbmQgZW5kIHByb3ZpZGVkIGZvciByYW5nZSBzZWxlY3RvciBpbiBmb3JtIGluaXRpYWxpemF0aW9uIGZvciA6ICR7dGhpcy5uYW1lfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhcnQgPiB0aGlzLmVuZCkge1xuICAgICAgICAgICAgdGhyb3cgYEZvciBhIHJhbmdlIHNlbGVjdG9yIHN0YXJ0IGNhbm5vdCBiZSBsZXNzIHRoZW4gZW5kIHZhbHVlLCBwbGVhc2UgY2hlY2sgaW5pdGlhbGl6YXRpb24gb2YgcmFuZyBzZWxlY3RvcjogJHt0aGlzLm5hbWV9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdGFydCA8IHRoaXMubWluKSB7XG4gICAgICAgICAgICB0aHJvdyBgU3RhcnQgJHt0aGlzLnN0YXJ0fSBjYW5ub3QgYmUgbGVzcyB0aGFuIG1pbiB2YWx1ZSAke3RoaXMubWlufSwgY2hlY2sgZm9ybSBpbml0IHZhbHVlcyBmb3IgdGhpcyByYW5nZSBzZWxlY3RvcmA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZW5kID4gdGhpcy5tYXgpIHtcbiAgICAgICAgICAgIHRocm93IGBFbmQgJHt0aGlzLmVuZH0gY2Fubm90IGJlIG1vcmUgdGhhbiBtYXggdmFsdWUgJHt0aGlzLm1heH0sIGNoZWNrIGZvcm0gaW5pdCB2YWx1ZXMgZm9yIHRoaXMgcmFuZ2Ugc2VsZWN0b3JgO1xuICAgICAgICB9XG4gICAgICAgIGxldCB3aWR0aCA9IChfZCA9IChfYyA9IHRoaXMuc2hhZG93Um9vdCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnF1ZXJ5U2VsZWN0b3IoXCIjc3ZnOFwiKSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNsaWVudFdpZHRoO1xuICAgICAgICBsZXQgbGVmdCA9IChfZiA9IChfZSA9IHRoaXMuc2hhZG93Um9vdCkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLnF1ZXJ5U2VsZWN0b3IoXCIjc3ZnOFwiKSkgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLmNsaWVudExlZnQ7XG4gICAgICAgIHRoaXMucG9zTWluID0gbGVmdDtcbiAgICAgICAgdGhpcy5wb3NNYXggPSB3aWR0aCArIHRoaXMucG9zTWluO1xuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5wb3NNYXggLSB0aGlzLnBvc01pbjtcbiAgICAgICAgbGV0IHN0YXJ0X3Bvc1ggPSB0aGlzLnBlcmNlbnRhZ2VUb1Bvc2l0aW9uKHRoaXMudmFsdWVUb1BlcmNlbnRhZ2UodGhpcy5zdGFydCkpO1xuICAgICAgICB0aGlzLnNldFN0YXJ0UG9zKHN0YXJ0X3Bvc1gpO1xuICAgICAgICBsZXQgZW5kX3Bvc1ggPSB0aGlzLnBlcmNlbnRhZ2VUb1Bvc2l0aW9uKHRoaXMudmFsdWVUb1BlcmNlbnRhZ2UodGhpcy5lbmQpKTtcbiAgICAgICAgdGhpcy5zZXRFbmRQb3MoZW5kX3Bvc1gpO1xuICAgICAgICB0aGlzLnZhbHVlID0geyBzdGFydDogdGhpcy5zdGFydCwgZW5kOiB0aGlzLmVuZCB9O1xuICAgICAgICAoX2cgPSB0aGlzLmJsb2MpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5lbWl0KHsgLi4udGhpcy5ibG9jLnN0YXRlIH0pO1xuICAgICAgICB0aGlzLnNldEFjdGl2ZVN0YXJ0KHN0YXJ0X3Bvc1gpO1xuICAgIH1cbiAgICBzZXRTdGFydFBvcyhwb3NYKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuc2hhZG93Um9vdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnF1ZXJ5U2VsZWN0b3IoXCIjc3RhcnQtaGFuZGxlXCIpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc2V0QXR0cmlidXRlKFwiY3hcIiwgYCR7cG9zWH1gKTtcbiAgICAgICAgdGhpcy5wb3NTdGFydCA9IHBvc1g7XG4gICAgfVxuICAgIHNldEFjdGl2ZVN0YXJ0KHBvc1gpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgbGV0IHMgPSB0aGlzLnBvc0VuZCAtIHRoaXMucG9zU3RhcnQ7XG4gICAgICAgIGxldCBkID0gYG0gJHtwb3NYfSwyMCBoICR7c30gdiA1IGggLSR7c30gemA7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuc2hhZG93Um9vdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnF1ZXJ5U2VsZWN0b3IoXCIjYWNyYW5nZVwiKSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnNldEF0dHJpYnV0ZShcImRcIiwgZCk7XG4gICAgfVxuICAgIHNldEFjdGl2ZUVuZChwb3NYKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGxldCBzID0gdGhpcy5wb3NTdGFydCAtIHRoaXMucG9zTWluO1xuICAgICAgICBsZXQgZCA9IGBtICR7c30sMjAgaCAke3Bvc1ggLSBzfSB2IDUgaCAke3MgLSBwb3NYfSB6YDtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5zaGFkb3dSb290KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucXVlcnlTZWxlY3RvcihcIiNhY3JhbmdlXCIpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc2V0QXR0cmlidXRlKFwiZFwiLCBkKTtcbiAgICB9XG4gICAgc2V0RW5kUG9zKHBvc1gpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5zaGFkb3dSb290KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucXVlcnlTZWxlY3RvcihcIiNlbmQtaGFuZGxlXCIpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc2V0QXR0cmlidXRlKFwiY3hcIiwgYCR7cG9zWH1gKTtcbiAgICAgICAgdGhpcy5wb3NFbmQgPSBwb3NYO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhbmdlc2VsZWN0b3IuanMubWFwIiwiZXhwb3J0IGNsYXNzIENvbG9yVXRpbCB7XG4gICAgc3RhdGljIHNoYWRlQ29sb3IoY29sb3IsIHBlcmNlbnQpIHtcbiAgICAgICAgbGV0IFIgPSBwYXJzZUludChjb2xvci5zdWJzdHJpbmcoMSwgMyksIDE2KTtcbiAgICAgICAgbGV0IEcgPSBwYXJzZUludChjb2xvci5zdWJzdHJpbmcoMywgNSksIDE2KTtcbiAgICAgICAgbGV0IEIgPSBwYXJzZUludChjb2xvci5zdWJzdHJpbmcoNSwgNyksIDE2KTtcbiAgICAgICAgUiA9IE1hdGguZmxvb3IoUiAqICgxMDAgKyBwZXJjZW50KSAvIDEwMCk7XG4gICAgICAgIEcgPSBNYXRoLmZsb29yKEcgKiAoMTAwICsgcGVyY2VudCkgLyAxMDApO1xuICAgICAgICBCID0gTWF0aC5mbG9vcihCICogKDEwMCArIHBlcmNlbnQpIC8gMTAwKTtcbiAgICAgICAgUiA9IChSIDwgMjU1KSA/IFIgOiAyNTU7XG4gICAgICAgIEcgPSAoRyA8IDI1NSkgPyBHIDogMjU1O1xuICAgICAgICBCID0gKEIgPCAyNTUpID8gQiA6IDI1NTtcbiAgICAgICAgdmFyIFJSID0gKChSLnRvU3RyaW5nKDE2KS5sZW5ndGggPT0gMSkgPyBcIjBcIiArIFIudG9TdHJpbmcoMTYpIDogUi50b1N0cmluZygxNikpO1xuICAgICAgICB2YXIgR0cgPSAoKEcudG9TdHJpbmcoMTYpLmxlbmd0aCA9PSAxKSA/IFwiMFwiICsgRy50b1N0cmluZygxNikgOiBHLnRvU3RyaW5nKDE2KSk7XG4gICAgICAgIHZhciBCQiA9ICgoQi50b1N0cmluZygxNikubGVuZ3RoID09IDEpID8gXCIwXCIgKyBCLnRvU3RyaW5nKDE2KSA6IEIudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgcmV0dXJuIFwiI1wiICsgUlIgKyBHRyArIEJCO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsImltcG9ydCB7IFdpZGdldEJ1aWxkZXIgfSBmcm9tICcuLi91dGlscy9ibG9jcyc7XG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHsgQ29sb3JVdGlsIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGNsYXNzIFJhaXNlZEJ1dHRvbiBleHRlbmRzIFdpZGdldEJ1aWxkZXIge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIGNvbmZpZ3MpIHtcbiAgICAgICAgc3VwZXIodHlwZSwgY29uZmlncyk7XG4gICAgICAgIHRoaXMuYnV0dG9uQWN0aW9uID0gKCkgPT4geyB0aGlzLm9uUHJlc3MoKTsgfTtcbiAgICAgICAgdGhpcy5iZ0NvbG9yID0gXCIjZmZmZmZmXCI7XG4gICAgICAgIGlmICh0aGlzLnVzZUF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgbGV0IGJnYyA9IHRoaXMudXNlQXR0cmlidXRlW1wiYmFja2dyb3VuZC1jb2xvclwiXTtcbiAgICAgICAgICAgIGlmIChiZ2MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJnQ29sb3IgPSBiZ2M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vblByZXNzQnV0dG9uQ29sb3IgPSBDb2xvclV0aWwuc2hhZGVDb2xvcih0aGlzLmJnQ29sb3IsIDIwKTtcbiAgICAgICAgdGhpcy5saWdodCA9IENvbG9yVXRpbC5zaGFkZUNvbG9yKHRoaXMuYmdDb2xvciwgODApO1xuICAgIH1cbiAgICBpc0Rpc2FibGVkKCkge1xuICAgICAgICBsZXQgdCA9IHRoaXMuaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBidWlsZGVyKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBodG1sIGBcbiAgICAgICAgICAgIDxzdHlsZT5cbiAgICAgICAgICAgICAgICAucmlwcGxlIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjhzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAucmlwcGxlOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHt0aGlzLm9uUHJlc3NCdXR0b25Db2xvcn0gcmFkaWFsLWdyYWRpZW50KGNpcmNsZSwgdHJhbnNwYXJlbnQgMSUsICR7dGhpcy5vblByZXNzQnV0dG9uQ29sb3J9IDElKSBjZW50ZXIvMTUwMDAlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAucmlwcGxlOmFjdGl2ZSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dGhpcy5saWdodH07XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLmJ1dHRvbntcbiAgICAgICAgICAgICAgICAgICAgYm94LXNoYWRvdzogMHB4IDRweCAxMnB4IDBweCAjMDAwMDAwOWU7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICAgICAgICAgIGZsZXgtd3JhcDogbm93cmFwO1xuICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XG4gICAgICAgICAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOyBcbiAgICAgICAgICAgICAgICAgICAgbWluLWhlaWdodDogNTBweDtcbiAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOyBcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0aGlzLmlzRGlzYWJsZWQoKSA/IHRoaXMudGhlbWUuYnV0dG9uX2Rpc2FibGVfY29sb3IgOiB0aGlzLmJnQ29sb3J9O1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiR7dGhpcy50aGVtZS5jb3JuZXJSYWRpdXN9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC5idXR0b246YWN0aXZle1xuICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAwcHggMHB4IDBweCAwcHggIzAwMDAwMDllXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9zdHlsZT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIkeygoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0Rpc2FibGVkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJidXR0b25cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBcInJpcHBsZSBidXR0b25cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKX1cIiBzdHlsZT1cIlwiIEBjbGljaz0keygpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0Rpc2FibGVkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvbkFjdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9fT48c2xvdD48L3Nsb3Q+PC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnV0dG9ucy5qcy5tYXAiLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBjb25zdCBuYXRpdmVTaGFkb3cgPSAhKHdpbmRvd1snU2hhZHlET00nXSAmJiB3aW5kb3dbJ1NoYWR5RE9NJ11bJ2luVXNlJ10pO1xubGV0IG5hdGl2ZUNzc1ZhcmlhYmxlc187XG5cbi8qKlxuICogQHBhcmFtIHsoU2hhZHlDU1NPcHRpb25zIHwgU2hhZHlDU1NJbnRlcmZhY2UpPX0gc2V0dGluZ3NcbiAqL1xuZnVuY3Rpb24gY2FsY0Nzc1ZhcmlhYmxlcyhzZXR0aW5ncykge1xuICBpZiAoc2V0dGluZ3MgJiYgc2V0dGluZ3NbJ3NoaW1jc3Nwcm9wZXJ0aWVzJ10pIHtcbiAgICBuYXRpdmVDc3NWYXJpYWJsZXNfID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgLy8gY2hyb21lIDQ5IGhhcyBzZW1pLXdvcmtpbmcgY3NzIHZhcnMsIGNoZWNrIGlmIGJveC1zaGFkb3cgd29ya3NcbiAgICAvLyBzYWZhcmkgOS4xIGhhcyBhIHJlY2FsYyBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTU3ODJcbiAgICAvLyBIb3dldmVyLCBzaGltIGNzcyBjdXN0b20gcHJvcGVydGllcyBhcmUgb25seSBzdXBwb3J0ZWQgd2l0aCBTaGFkeURPTSBlbmFibGVkLFxuICAgIC8vIHNvIGZhbGwgYmFjayBvbiBuYXRpdmUgaWYgd2UgZG8gbm90IGRldGVjdCBTaGFkeURPTVxuICAgIC8vIEVkZ2UgMTU6IGN1c3RvbSBwcm9wZXJ0aWVzIHVzZWQgaW4gOjpiZWZvcmUgYW5kIDo6YWZ0ZXIgd2lsbCBhbHNvIGJlIHVzZWQgaW4gdGhlIHBhcmVudCBlbGVtZW50XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvMTI0MTQyNTcvXG4gICAgbmF0aXZlQ3NzVmFyaWFibGVzXyA9IG5hdGl2ZVNoYWRvdyB8fCBCb29sZWFuKCFuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9BcHBsZVdlYktpdFxcLzYwMXxFZGdlXFwvMTUvKSAmJlxuICAgICAgd2luZG93LkNTUyAmJiBDU1Muc3VwcG9ydHMgJiYgQ1NTLnN1cHBvcnRzKCdib3gtc2hhZG93JywgJzAgMCAwIHZhcigtLWZvbyknKSk7XG4gIH1cbn1cblxuLyoqIEB0eXBlIHtzdHJpbmcgfCB1bmRlZmluZWR9ICovXG5leHBvcnQgbGV0IGNzc0J1aWxkO1xuaWYgKHdpbmRvdy5TaGFkeUNTUyAmJiB3aW5kb3cuU2hhZHlDU1MuY3NzQnVpbGQgIT09IHVuZGVmaW5lZCkge1xuICBjc3NCdWlsZCA9IHdpbmRvdy5TaGFkeUNTUy5jc3NCdWlsZDtcbn1cblxuLyoqIEB0eXBlIHtib29sZWFufSAqL1xuZXhwb3J0IGNvbnN0IGRpc2FibGVSdW50aW1lID0gQm9vbGVhbih3aW5kb3cuU2hhZHlDU1MgJiYgd2luZG93LlNoYWR5Q1NTLmRpc2FibGVSdW50aW1lKTtcblxuaWYgKHdpbmRvdy5TaGFkeUNTUyAmJiB3aW5kb3cuU2hhZHlDU1MubmF0aXZlQ3NzICE9PSB1bmRlZmluZWQpIHtcbiAgbmF0aXZlQ3NzVmFyaWFibGVzXyA9IHdpbmRvdy5TaGFkeUNTUy5uYXRpdmVDc3M7XG59IGVsc2UgaWYgKHdpbmRvdy5TaGFkeUNTUykge1xuICBjYWxjQ3NzVmFyaWFibGVzKHdpbmRvdy5TaGFkeUNTUyk7XG4gIC8vIHJlc2V0IHdpbmRvdyB2YXJpYWJsZSB0byBsZXQgU2hhZHlDU1MgQVBJIHRha2UgaXRzIHBsYWNlXG4gIHdpbmRvdy5TaGFkeUNTUyA9IHVuZGVmaW5lZDtcbn0gZWxzZSB7XG4gIGNhbGNDc3NWYXJpYWJsZXMod2luZG93WydXZWJDb21wb25lbnRzJ10gJiYgd2luZG93WydXZWJDb21wb25lbnRzJ11bJ2ZsYWdzJ10pO1xufVxuXG4vLyBIYWNrIGZvciB0eXBlIGVycm9yIHVuZGVyIG5ldyB0eXBlIGluZmVyZW5jZSB3aGljaCBkb2Vzbid0IGxpa2UgdGhhdFxuLy8gbmF0aXZlQ3NzVmFyaWFibGVzIGlzIHVwZGF0ZWQgaW4gYSBmdW5jdGlvbiBhbmQgYXNzaWducyB0aGUgdHlwZVxuLy8gYGZ1bmN0aW9uKCk6ID9gIGluc3RlYWQgb2YgYGJvb2xlYW5gLlxuZXhwb3J0IGNvbnN0IG5hdGl2ZUNzc1ZhcmlhYmxlcyA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8obmF0aXZlQ3NzVmFyaWFibGVzXyk7IiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuLypcbkV4dHJlbWVseSBzaW1wbGUgY3NzIHBhcnNlci4gSW50ZW5kZWQgdG8gYmUgbm90IG1vcmUgdGhhbiB3aGF0IHdlIG5lZWRcbmFuZCBkZWZpbml0ZWx5IG5vdCBuZWNlc3NhcmlseSBjb3JyZWN0ID0pLlxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHVucmVzdHJpY3RlZCAqL1xuY2xhc3MgU3R5bGVOb2RlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpc1snc3RhcnQnXSA9IDA7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpc1snZW5kJ10gPSAwO1xuICAgIC8qKiBAdHlwZSB7U3R5bGVOb2RlfSAqL1xuICAgIHRoaXNbJ3ByZXZpb3VzJ10gPSBudWxsO1xuICAgIC8qKiBAdHlwZSB7U3R5bGVOb2RlfSAqL1xuICAgIHRoaXNbJ3BhcmVudCddID0gbnVsbDtcbiAgICAvKiogQHR5cGUge0FycmF5PFN0eWxlTm9kZT59ICovXG4gICAgdGhpc1sncnVsZXMnXSA9IG51bGw7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpc1sncGFyc2VkQ3NzVGV4dCddID0gJyc7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpc1snY3NzVGV4dCddID0gJyc7XG4gICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgIHRoaXNbJ2F0UnVsZSddID0gZmFsc2U7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpc1sndHlwZSddID0gMDtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzWydrZXlmcmFtZXNOYW1lJ10gPSAnJztcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzWydzZWxlY3RvciddID0gJyc7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpc1sncGFyc2VkU2VsZWN0b3InXSA9ICcnO1xuICB9XG59XG5cbmV4cG9ydCB7U3R5bGVOb2RlfVxuXG4vLyBnaXZlbiBhIHN0cmluZyBvZiBjc3MsIHJldHVybiBhIHNpbXBsZSBydWxlIHRyZWVcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEByZXR1cm4ge1N0eWxlTm9kZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKHRleHQpIHtcbiAgdGV4dCA9IGNsZWFuKHRleHQpO1xuICByZXR1cm4gcGFyc2VDc3MobGV4KHRleHQpLCB0ZXh0KTtcbn1cblxuLy8gcmVtb3ZlIHN0dWZmIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhhdCBtYXkgaGluZGVyIHBhcnNpbmdcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2xlYW4oY3NzVGV4dCkge1xuICByZXR1cm4gY3NzVGV4dC5yZXBsYWNlKFJYLmNvbW1lbnRzLCAnJykucmVwbGFjZShSWC5wb3J0LCAnJyk7XG59XG5cbi8vIHN1cGVyIHNpbXBsZSB7Li4ufSBsZXhlciB0aGF0IHJldHVybnMgYSBub2RlIHRyZWVcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEByZXR1cm4geyFTdHlsZU5vZGV9XG4gKi9cbmZ1bmN0aW9uIGxleCh0ZXh0KSB7XG4gIGxldCByb290ID0gbmV3IFN0eWxlTm9kZSgpO1xuICByb290WydzdGFydCddID0gMDtcbiAgcm9vdFsnZW5kJ10gPSB0ZXh0Lmxlbmd0aFxuICBsZXQgbiA9IHJvb3Q7XG4gIGZvciAobGV0IGkgPSAwLCBsID0gdGV4dC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAodGV4dFtpXSA9PT0gT1BFTl9CUkFDRSkge1xuICAgICAgaWYgKCFuWydydWxlcyddKSB7XG4gICAgICAgIG5bJ3J1bGVzJ10gPSBbXTtcbiAgICAgIH1cbiAgICAgIGxldCBwID0gbjtcbiAgICAgIGxldCBwcmV2aW91cyA9IHBbJ3J1bGVzJ11bcFsncnVsZXMnXS5sZW5ndGggLSAxXSB8fCBudWxsO1xuICAgICAgbiA9IG5ldyBTdHlsZU5vZGUoKTtcbiAgICAgIG5bJ3N0YXJ0J10gPSBpICsgMTtcbiAgICAgIG5bJ3BhcmVudCddID0gcDtcbiAgICAgIG5bJ3ByZXZpb3VzJ10gPSBwcmV2aW91cztcbiAgICAgIHBbJ3J1bGVzJ10ucHVzaChuKTtcbiAgICB9IGVsc2UgaWYgKHRleHRbaV0gPT09IENMT1NFX0JSQUNFKSB7XG4gICAgICBuWydlbmQnXSA9IGkgKyAxO1xuICAgICAgbiA9IG5bJ3BhcmVudCddIHx8IHJvb3Q7XG4gICAgfVxuICB9XG4gIHJldHVybiByb290O1xufVxuXG4vLyBhZGQgc2VsZWN0b3JzL2Nzc1RleHQgdG8gbm9kZSB0cmVlXG4vKipcbiAqIEBwYXJhbSB7U3R5bGVOb2RlfSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQHJldHVybiB7IVN0eWxlTm9kZX1cbiAqL1xuZnVuY3Rpb24gcGFyc2VDc3Mobm9kZSwgdGV4dCkge1xuICBsZXQgdCA9IHRleHQuc3Vic3RyaW5nKG5vZGVbJ3N0YXJ0J10sIG5vZGVbJ2VuZCddIC0gMSk7XG4gIG5vZGVbJ3BhcnNlZENzc1RleHQnXSA9IG5vZGVbJ2Nzc1RleHQnXSA9IHQudHJpbSgpO1xuICBpZiAobm9kZVsncGFyZW50J10pIHtcbiAgICBsZXQgc3MgPSBub2RlWydwcmV2aW91cyddID8gbm9kZVsncHJldmlvdXMnXVsnZW5kJ10gOiBub2RlWydwYXJlbnQnXVsnc3RhcnQnXTtcbiAgICB0ID0gdGV4dC5zdWJzdHJpbmcoc3MsIG5vZGVbJ3N0YXJ0J10gLSAxKTtcbiAgICB0ID0gX2V4cGFuZFVuaWNvZGVFc2NhcGVzKHQpO1xuICAgIHQgPSB0LnJlcGxhY2UoUlgubXVsdGlwbGVTcGFjZXMsICcgJyk7XG4gICAgLy8gVE9ETyhzb3J2ZWxsKTogYWQgaG9jOyBtYWtlIHNlbGVjdG9yIGluY2x1ZGUgb25seSBhZnRlciBsYXN0IDtcbiAgICAvLyBoZWxwcyB3aXRoIG1peGluIHN5bnRheFxuICAgIHQgPSB0LnN1YnN0cmluZyh0Lmxhc3RJbmRleE9mKCc7JykgKyAxKTtcbiAgICBsZXQgcyA9IG5vZGVbJ3BhcnNlZFNlbGVjdG9yJ10gPSBub2RlWydzZWxlY3RvciddID0gdC50cmltKCk7XG4gICAgbm9kZVsnYXRSdWxlJ10gPSAocy5pbmRleE9mKEFUX1NUQVJUKSA9PT0gMCk7XG4gICAgLy8gbm90ZSwgc3VwcG9ydCBhIHN1YnNldCBvZiBydWxlIHR5cGVzLi4uXG4gICAgaWYgKG5vZGVbJ2F0UnVsZSddKSB7XG4gICAgICBpZiAocy5pbmRleE9mKE1FRElBX1NUQVJUKSA9PT0gMCkge1xuICAgICAgICBub2RlWyd0eXBlJ10gPSB0eXBlcy5NRURJQV9SVUxFO1xuICAgICAgfSBlbHNlIGlmIChzLm1hdGNoKFJYLmtleWZyYW1lc1J1bGUpKSB7XG4gICAgICAgIG5vZGVbJ3R5cGUnXSA9IHR5cGVzLktFWUZSQU1FU19SVUxFO1xuICAgICAgICBub2RlWydrZXlmcmFtZXNOYW1lJ10gPVxuICAgICAgICAgIG5vZGVbJ3NlbGVjdG9yJ10uc3BsaXQoUlgubXVsdGlwbGVTcGFjZXMpLnBvcCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocy5pbmRleE9mKFZBUl9TVEFSVCkgPT09IDApIHtcbiAgICAgICAgbm9kZVsndHlwZSddID0gdHlwZXMuTUlYSU5fUlVMRTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVbJ3R5cGUnXSA9IHR5cGVzLlNUWUxFX1JVTEU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGxldCByJCA9IG5vZGVbJ3J1bGVzJ107XG4gIGlmIChyJCkge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gciQubGVuZ3RoLCByO1xuICAgICAgKGkgPCBsKSAmJiAociA9IHIkW2ldKTsgaSsrKSB7XG4gICAgICBwYXJzZUNzcyhyLCB0ZXh0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogY29udmVyc2lvbiBvZiBzb3J0IHVuaWNvZGUgZXNjYXBlcyB3aXRoIHNwYWNlcyBsaWtlIGBcXDMzIGAgKGFuZCBsb25nZXIpIGludG9cbiAqIGV4cGFuZGVkIGZvcm0gdGhhdCBkb2Vzbid0IHJlcXVpcmUgdHJhaWxpbmcgc3BhY2UgYFxcMDAwMDMzYFxuICogQHBhcmFtIHtzdHJpbmd9IHNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gX2V4cGFuZFVuaWNvZGVFc2NhcGVzKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZSgvXFxcXChbMC05YS1mXXsxLDZ9KVxccy9naSwgZnVuY3Rpb24oKSB7XG4gICAgbGV0IGNvZGUgPSBhcmd1bWVudHNbMV0sXG4gICAgICByZXBlYXQgPSA2IC0gY29kZS5sZW5ndGg7XG4gICAgd2hpbGUgKHJlcGVhdC0tKSB7XG4gICAgICBjb2RlID0gJzAnICsgY29kZTtcbiAgICB9XG4gICAgcmV0dXJuICdcXFxcJyArIGNvZGU7XG4gIH0pO1xufVxuXG4vKipcbiAqIHN0cmluZ2lmeSBwYXJzZWQgY3NzLlxuICogQHBhcmFtIHtTdHlsZU5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHByZXNlcnZlUHJvcGVydGllc1xuICogQHBhcmFtIHtzdHJpbmc9fSB0ZXh0XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkobm9kZSwgcHJlc2VydmVQcm9wZXJ0aWVzLCB0ZXh0ID0gJycpIHtcbiAgLy8gY2FsYyBydWxlIGNzc1RleHRcbiAgbGV0IGNzc1RleHQgPSAnJztcbiAgaWYgKG5vZGVbJ2Nzc1RleHQnXSB8fCBub2RlWydydWxlcyddKSB7XG4gICAgbGV0IHIkID0gbm9kZVsncnVsZXMnXTtcbiAgICBpZiAociQgJiYgIV9oYXNNaXhpblJ1bGVzKHIkKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSByJC5sZW5ndGgsIHI7XG4gICAgICAgIChpIDwgbCkgJiYgKHIgPSByJFtpXSk7IGkrKykge1xuICAgICAgICBjc3NUZXh0ID0gc3RyaW5naWZ5KHIsIHByZXNlcnZlUHJvcGVydGllcywgY3NzVGV4dCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1RleHQgPSBwcmVzZXJ2ZVByb3BlcnRpZXMgPyBub2RlWydjc3NUZXh0J10gOlxuICAgICAgICByZW1vdmVDdXN0b21Qcm9wcyhub2RlWydjc3NUZXh0J10pO1xuICAgICAgY3NzVGV4dCA9IGNzc1RleHQudHJpbSgpO1xuICAgICAgaWYgKGNzc1RleHQpIHtcbiAgICAgICAgY3NzVGV4dCA9ICcgICcgKyBjc3NUZXh0ICsgJ1xcbic7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGVtaXQgcnVsZSBpZiB0aGVyZSBpcyBjc3NUZXh0XG4gIGlmIChjc3NUZXh0KSB7XG4gICAgaWYgKG5vZGVbJ3NlbGVjdG9yJ10pIHtcbiAgICAgIHRleHQgKz0gbm9kZVsnc2VsZWN0b3InXSArICcgJyArIE9QRU5fQlJBQ0UgKyAnXFxuJztcbiAgICB9XG4gICAgdGV4dCArPSBjc3NUZXh0O1xuICAgIGlmIChub2RlWydzZWxlY3RvciddKSB7XG4gICAgICB0ZXh0ICs9IENMT1NFX0JSQUNFICsgJ1xcblxcbic7XG4gICAgfVxuICB9XG4gIHJldHVybiB0ZXh0O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8U3R5bGVOb2RlPn0gcnVsZXNcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIF9oYXNNaXhpblJ1bGVzKHJ1bGVzKSB7XG4gIGxldCByID0gcnVsZXNbMF07XG4gIHJldHVybiBCb29sZWFuKHIpICYmIEJvb2xlYW4oclsnc2VsZWN0b3InXSkgJiYgclsnc2VsZWN0b3InXS5pbmRleE9mKFZBUl9TVEFSVCkgPT09IDA7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ3VzdG9tUHJvcHMoY3NzVGV4dCkge1xuICBjc3NUZXh0ID0gcmVtb3ZlQ3VzdG9tUHJvcEFzc2lnbm1lbnQoY3NzVGV4dCk7XG4gIHJldHVybiByZW1vdmVDdXN0b21Qcm9wQXBwbHkoY3NzVGV4dCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUN1c3RvbVByb3BBc3NpZ25tZW50KGNzc1RleHQpIHtcbiAgcmV0dXJuIGNzc1RleHRcbiAgICAucmVwbGFjZShSWC5jdXN0b21Qcm9wLCAnJylcbiAgICAucmVwbGFjZShSWC5taXhpblByb3AsICcnKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiByZW1vdmVDdXN0b21Qcm9wQXBwbHkoY3NzVGV4dCkge1xuICByZXR1cm4gY3NzVGV4dFxuICAgIC5yZXBsYWNlKFJYLm1peGluQXBwbHksICcnKVxuICAgIC5yZXBsYWNlKFJYLnZhckFwcGx5LCAnJyk7XG59XG5cbi8qKiBAZW51bSB7bnVtYmVyfSAqL1xuZXhwb3J0IGNvbnN0IHR5cGVzID0ge1xuICBTVFlMRV9SVUxFOiAxLFxuICBLRVlGUkFNRVNfUlVMRTogNyxcbiAgTUVESUFfUlVMRTogNCxcbiAgTUlYSU5fUlVMRTogMTAwMFxufVxuXG5jb25zdCBPUEVOX0JSQUNFID0gJ3snO1xuY29uc3QgQ0xPU0VfQlJBQ0UgPSAnfSc7XG5cbi8vIGhlbHBlciByZWdleHAnc1xuY29uc3QgUlggPSB7XG4gIGNvbW1lbnRzOiAvXFwvXFwqW14qXSpcXCorKFteLypdW14qXSpcXCorKSpcXC8vZ2ltLFxuICBwb3J0OiAvQGltcG9ydFteO10qOy9naW0sXG4gIGN1c3RvbVByb3A6IC8oPzpeW147XFwtXFxzfV0rKT8tLVteO3t9XSo/Oltee307XSo/KD86WztcXG5dfCQpL2dpbSxcbiAgbWl4aW5Qcm9wOiAvKD86XlteO1xcLVxcc31dKyk/LS1bXjt7fV0qPzpbXnt9O10qP3tbXn1dKj99KD86WztcXG5dfCQpPy9naW0sXG4gIG1peGluQXBwbHk6IC9AYXBwbHlcXHMqXFwoP1teKTtdKlxcKT9cXHMqKD86WztcXG5dfCQpPy9naW0sXG4gIHZhckFwcGx5OiAvW147Ol0qPzpbXjtdKj92YXJcXChbXjtdKlxcKSg/Ols7XFxuXXwkKT8vZ2ltLFxuICBrZXlmcmFtZXNSdWxlOiAvXkBbXlxcc10qa2V5ZnJhbWVzLyxcbiAgbXVsdGlwbGVTcGFjZXM6IC9cXHMrL2dcbn1cblxuY29uc3QgVkFSX1NUQVJUID0gJy0tJztcbmNvbnN0IE1FRElBX1NUQVJUID0gJ0BtZWRpYSc7XG5jb25zdCBBVF9TVEFSVCA9ICdAJztcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbmV4cG9ydCBjb25zdCBWQVJfQVNTSUdOID0gLyg/Ol58WztcXHN7XVxccyopKC0tW1xcdy1dKj8pXFxzKjpcXHMqKD86KCg/OicoPzpcXFxcJ3wuKSo/J3xcIig/OlxcXFxcInwuKSo/XCJ8XFwoW14pXSo/XFwpfFtefTt7XSkrKXxcXHsoW159XSopXFx9KD86KD89WztcXHN9XSl8JCkpL2dpO1xuZXhwb3J0IGNvbnN0IE1JWElOX01BVENIID0gLyg/Ol58XFxXKylAYXBwbHlcXHMqXFwoPyhbXik7XFxuXSopXFwpPy9naTtcbmV4cG9ydCBjb25zdCBWQVJfQ09OU1VNRUQgPSAvKC0tW1xcdy1dKylcXHMqKFs6LDspXXwkKS9naTtcbmV4cG9ydCBjb25zdCBBTklNQVRJT05fTUFUQ0ggPSAvKGFuaW1hdGlvblxccyo6KXwoYW5pbWF0aW9uLW5hbWVcXHMqOikvO1xuZXhwb3J0IGNvbnN0IE1FRElBX01BVENIID0gL0BtZWRpYVxccyguKikvO1xuZXhwb3J0IGNvbnN0IElTX1ZBUiA9IC9eLS0vO1xuZXhwb3J0IGNvbnN0IEJSQUNLRVRFRCA9IC9cXHtbXn1dKlxcfS9nO1xuZXhwb3J0IGNvbnN0IEhPU1RfUFJFRklYID0gJyg/Ol58W14uI1s6XSknO1xuZXhwb3J0IGNvbnN0IEhPU1RfU1VGRklYID0gJygkfFsuOltcXFxccz4rfl0pJztcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHshU2V0PHN0cmluZz59ICovXG5jb25zdCBzdHlsZVRleHRTZXQgPSBuZXcgU2V0KCk7XG5cbmV4cG9ydCBjb25zdCBzY29waW5nQXR0cmlidXRlID0gJ3NoYWR5LXVuc2NvcGVkJztcblxuLyoqXG4gKiBBZGQgYSBzcGVjaWZpY2FsbHktbWFya2VkIHN0eWxlIHRvIHRoZSBkb2N1bWVudCBkaXJlY3RseSwgYW5kIG9ubHkgb25lIGNvcHkgb2YgdGhhdCBzdHlsZS5cbiAqXG4gKiBAcGFyYW0geyFIVE1MU3R5bGVFbGVtZW50fSBzdHlsZVxuICogQHJldHVybiB7dW5kZWZpbmVkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1Vuc2NvcGVkU3R5bGUoc3R5bGUpIHtcbiAgY29uc3QgdGV4dCA9IHN0eWxlLnRleHRDb250ZW50O1xuICBpZiAoIXN0eWxlVGV4dFNldC5oYXModGV4dCkpIHtcbiAgICBzdHlsZVRleHRTZXQuYWRkKHRleHQpO1xuICAgIGNvbnN0IG5ld1N0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBuZXdTdHlsZS5zZXRBdHRyaWJ1dGUoJ3NoYWR5LXVuc2NvcGVkJywgJycpO1xuICAgIG5ld1N0eWxlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG5ld1N0eWxlKTtcbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgc3R5bGUgaXMgc3VwcG9zZWQgdG8gYmUgdW5zY29wZWRcbiAqIEBwYXJhbSB7IUhUTUxTdHlsZUVsZW1lbnR9IHN0eWxlXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoZSBzdHlsZSBoYXMgdGhlIHVuc2NvcGluZyBhdHRyaWJ1dGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVW5zY29wZWRTdHlsZShzdHlsZSkge1xuICByZXR1cm4gc3R5bGUuaGFzQXR0cmlidXRlKHNjb3BpbmdBdHRyaWJ1dGUpO1xufSIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtuYXRpdmVTaGFkb3csIG5hdGl2ZUNzc1ZhcmlhYmxlcywgY3NzQnVpbGR9IGZyb20gJy4vc3R5bGUtc2V0dGluZ3MuanMnO1xuaW1wb3J0IHtwYXJzZSwgc3RyaW5naWZ5LCB0eXBlcywgU3R5bGVOb2RlfSBmcm9tICcuL2Nzcy1wYXJzZS5qcyc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbmltcG9ydCB7TUVESUFfTUFUQ0h9IGZyb20gJy4vY29tbW9uLXJlZ2V4LmpzJztcbmltcG9ydCB7cHJvY2Vzc1Vuc2NvcGVkU3R5bGUsIGlzVW5zY29wZWRTdHlsZX0gZnJvbSAnLi91bnNjb3BlZC1zdHlsZS1oYW5kbGVyLmpzJztcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3xTdHlsZU5vZGV9IHJ1bGVzXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFN0eWxlTm9kZSk9fSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9Dc3NUZXh0IChydWxlcywgY2FsbGJhY2spIHtcbiAgaWYgKCFydWxlcykge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBpZiAodHlwZW9mIHJ1bGVzID09PSAnc3RyaW5nJykge1xuICAgIHJ1bGVzID0gcGFyc2UocnVsZXMpO1xuICB9XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGZvckVhY2hSdWxlKHJ1bGVzLCBjYWxsYmFjayk7XG4gIH1cbiAgcmV0dXJuIHN0cmluZ2lmeShydWxlcywgbmF0aXZlQ3NzVmFyaWFibGVzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxTdHlsZUVsZW1lbnR9IHN0eWxlXG4gKiBAcmV0dXJuIHtTdHlsZU5vZGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0ZvclN0eWxlKHN0eWxlKSB7XG4gIGlmICghc3R5bGVbJ19fY3NzUnVsZXMnXSAmJiBzdHlsZS50ZXh0Q29udGVudCkge1xuICAgIHN0eWxlWydfX2Nzc1J1bGVzJ10gPSBwYXJzZShzdHlsZS50ZXh0Q29udGVudCk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlWydfX2Nzc1J1bGVzJ10gfHwgbnVsbDtcbn1cblxuLy8gVGVzdHMgaWYgYSBydWxlIGlzIGEga2V5ZnJhbWVzIHNlbGVjdG9yLCB3aGljaCBsb29rcyBhbG1vc3QgZXhhY3RseVxuLy8gbGlrZSBhIG5vcm1hbCBzZWxlY3RvciBidXQgaXMgbm90IChpdCBoYXMgbm90aGluZyB0byBkbyB3aXRoIHNjb3Bpbmdcbi8vIGZvciBleGFtcGxlKS5cbi8qKlxuICogQHBhcmFtIHtTdHlsZU5vZGV9IHJ1bGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0tleWZyYW1lc1NlbGVjdG9yKHJ1bGUpIHtcbiAgcmV0dXJuIEJvb2xlYW4ocnVsZVsncGFyZW50J10pICYmXG4gIHJ1bGVbJ3BhcmVudCddWyd0eXBlJ10gPT09IHR5cGVzLktFWUZSQU1FU19SVUxFO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U3R5bGVOb2RlfSBub2RlXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gc3R5bGVSdWxlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBrZXlmcmFtZXNSdWxlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9ubHlBY3RpdmVSdWxlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaFJ1bGUobm9kZSwgc3R5bGVSdWxlQ2FsbGJhY2ssIGtleWZyYW1lc1J1bGVDYWxsYmFjaywgb25seUFjdGl2ZVJ1bGVzKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgc2tpcFJ1bGVzID0gZmFsc2U7XG4gIGxldCB0eXBlID0gbm9kZVsndHlwZSddO1xuICBpZiAob25seUFjdGl2ZVJ1bGVzKSB7XG4gICAgaWYgKHR5cGUgPT09IHR5cGVzLk1FRElBX1JVTEUpIHtcbiAgICAgIGxldCBtYXRjaE1lZGlhID0gbm9kZVsnc2VsZWN0b3InXS5tYXRjaChNRURJQV9NQVRDSCk7XG4gICAgICBpZiAobWF0Y2hNZWRpYSkge1xuICAgICAgICAvLyBpZiBydWxlIGlzIGEgbm9uIG1hdGNoaW5nIEBtZWRpYSBydWxlLCBza2lwIHN1YnJ1bGVzXG4gICAgICAgIGlmICghd2luZG93Lm1hdGNoTWVkaWEobWF0Y2hNZWRpYVsxXSkubWF0Y2hlcykge1xuICAgICAgICAgIHNraXBSdWxlcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHR5cGUgPT09IHR5cGVzLlNUWUxFX1JVTEUpIHtcbiAgICBzdHlsZVJ1bGVDYWxsYmFjayhub2RlKTtcbiAgfSBlbHNlIGlmIChrZXlmcmFtZXNSdWxlQ2FsbGJhY2sgJiZcbiAgICB0eXBlID09PSB0eXBlcy5LRVlGUkFNRVNfUlVMRSkge1xuICAgIGtleWZyYW1lc1J1bGVDYWxsYmFjayhub2RlKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSB0eXBlcy5NSVhJTl9SVUxFKSB7XG4gICAgc2tpcFJ1bGVzID0gdHJ1ZTtcbiAgfVxuICBsZXQgciQgPSBub2RlWydydWxlcyddO1xuICBpZiAociQgJiYgIXNraXBSdWxlcykge1xuICAgIGZvciAobGV0IGk9MCwgbD1yJC5sZW5ndGgsIHI7IChpPGwpICYmIChyPXIkW2ldKTsgaSsrKSB7XG4gICAgICBmb3JFYWNoUnVsZShyLCBzdHlsZVJ1bGVDYWxsYmFjaywga2V5ZnJhbWVzUnVsZUNhbGxiYWNrLCBvbmx5QWN0aXZlUnVsZXMpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBhZGQgYSBzdHJpbmcgb2YgY3NzVGV4dCB0byB0aGUgZG9jdW1lbnQuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gbW9uaWtlclxuICogQHBhcmFtIHtOb2RlfSB0YXJnZXRcbiAqIEBwYXJhbSB7Tm9kZX0gY29udGV4dE5vZGVcbiAqIEByZXR1cm4ge0hUTUxTdHlsZUVsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUNzcyhjc3NUZXh0LCBtb25pa2VyLCB0YXJnZXQsIGNvbnRleHROb2RlKSB7XG4gIGxldCBzdHlsZSA9IGNyZWF0ZVNjb3BlU3R5bGUoY3NzVGV4dCwgbW9uaWtlcik7XG4gIGFwcGx5U3R5bGUoc3R5bGUsIHRhcmdldCwgY29udGV4dE5vZGUpO1xuICByZXR1cm4gc3R5bGU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb25pa2VyXG4gKiBAcmV0dXJuIHshSFRNTFN0eWxlRWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNjb3BlU3R5bGUoY3NzVGV4dCwgbW9uaWtlcikge1xuICBsZXQgc3R5bGUgPSAvKiogQHR5cGUge0hUTUxTdHlsZUVsZW1lbnR9ICovKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJykpO1xuICBpZiAobW9uaWtlcikge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnc2NvcGUnLCBtb25pa2VyKTtcbiAgfVxuICBzdHlsZS50ZXh0Q29udGVudCA9IGNzc1RleHQ7XG4gIHJldHVybiBzdHlsZTtcbn1cblxuLyoqXG4gKiBUcmFjayB0aGUgcG9zaXRpb24gb2YgdGhlIGxhc3QgYWRkZWQgc3R5bGUgZm9yIHBsYWNpbmcgcGxhY2Vob2xkZXJzXG4gKiBAdHlwZSB7Tm9kZX1cbiAqL1xubGV0IGxhc3RIZWFkQXBwbHlOb2RlID0gbnVsbDtcblxuLy8gaW5zZXJ0IGEgY29tbWVudCBub2RlIGFzIGEgc3R5bGluZyBwb3NpdGlvbiBwbGFjZWhvbGRlci5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vbmlrZXJcbiAqIEByZXR1cm4geyFDb21tZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlTdHlsZVBsYWNlSG9sZGVyKG1vbmlrZXIpIHtcbiAgbGV0IHBsYWNlSG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnIFNoYWR5IERPTSBzdHlsZXMgZm9yICcgK1xuICAgIG1vbmlrZXIgKyAnICcpO1xuICBsZXQgYWZ0ZXIgPSBsYXN0SGVhZEFwcGx5Tm9kZSA/XG4gICAgbGFzdEhlYWRBcHBseU5vZGVbJ25leHRTaWJsaW5nJ10gOiBudWxsO1xuICBsZXQgc2NvcGUgPSBkb2N1bWVudC5oZWFkO1xuICBzY29wZS5pbnNlcnRCZWZvcmUocGxhY2VIb2xkZXIsIGFmdGVyIHx8IHNjb3BlLmZpcnN0Q2hpbGQpO1xuICBsYXN0SGVhZEFwcGx5Tm9kZSA9IHBsYWNlSG9sZGVyO1xuICByZXR1cm4gcGxhY2VIb2xkZXI7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MU3R5bGVFbGVtZW50fSBzdHlsZVxuICogQHBhcmFtIHs/Tm9kZX0gdGFyZ2V0XG4gKiBAcGFyYW0gez9Ob2RlfSBjb250ZXh0Tm9kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlTdHlsZShzdHlsZSwgdGFyZ2V0LCBjb250ZXh0Tm9kZSkge1xuICB0YXJnZXQgPSB0YXJnZXQgfHwgZG9jdW1lbnQuaGVhZDtcbiAgbGV0IGFmdGVyID0gKGNvbnRleHROb2RlICYmIGNvbnRleHROb2RlLm5leHRTaWJsaW5nKSB8fFxuICAgIHRhcmdldC5maXJzdENoaWxkO1xuICB0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBhZnRlcik7XG4gIGlmICghbGFzdEhlYWRBcHBseU5vZGUpIHtcbiAgICBsYXN0SGVhZEFwcGx5Tm9kZSA9IHN0eWxlO1xuICB9IGVsc2Uge1xuICAgIC8vIG9ubHkgdXBkYXRlIGxhc3RIZWFkQXBwbHlOb2RlIGlmIHRoZSBuZXcgc3R5bGUgaXMgaW5zZXJ0ZWQgYWZ0ZXIgdGhlIG9sZCBsYXN0SGVhZEFwcGx5Tm9kZVxuICAgIGxldCBwb3NpdGlvbiA9IHN0eWxlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGxhc3RIZWFkQXBwbHlOb2RlKTtcbiAgICBpZiAocG9zaXRpb24gPT09IE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fUFJFQ0VESU5HKSB7XG4gICAgICBsYXN0SGVhZEFwcGx5Tm9kZSA9IHN0eWxlO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBidWlsZFR5cGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1RhcmdldGVkQnVpbGQoYnVpbGRUeXBlKSB7XG4gIHJldHVybiBuYXRpdmVTaGFkb3cgPyBidWlsZFR5cGUgPT09ICdzaGFkb3cnIDogYnVpbGRUeXBlID09PSAnc2hhZHknO1xufVxuXG4vKipcbiAqIFdhbGsgZnJvbSB0ZXh0W3N0YXJ0XSBtYXRjaGluZyBwYXJlbnMgYW5kXG4gKiByZXR1cm5zIHBvc2l0aW9uIG9mIHRoZSBvdXRlciBlbmQgcGFyZW5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRNYXRjaGluZ1BhcmVuKHRleHQsIHN0YXJ0KSB7XG4gIGxldCBsZXZlbCA9IDA7XG4gIGZvciAobGV0IGk9c3RhcnQsIGw9dGV4dC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAodGV4dFtpXSA9PT0gJygnKSB7XG4gICAgICBsZXZlbCsrO1xuICAgIH0gZWxzZSBpZiAodGV4dFtpXSA9PT0gJyknKSB7XG4gICAgICBpZiAoLS1sZXZlbCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nKX0gY2FsbGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NWYXJpYWJsZUFuZEZhbGxiYWNrKHN0ciwgY2FsbGJhY2spIHtcbiAgLy8gZmluZCAndmFyKCdcbiAgbGV0IHN0YXJ0ID0gc3RyLmluZGV4T2YoJ3ZhcignKTtcbiAgaWYgKHN0YXJ0ID09PSAtMSkge1xuICAgIC8vIG5vIHZhcj8sIGV2ZXJ5dGhpbmcgaXMgcHJlZml4XG4gICAgcmV0dXJuIGNhbGxiYWNrKHN0ciwgJycsICcnLCAnJyk7XG4gIH1cbiAgLy8ke3ByZWZpeH12YXIoJHtpbm5lcn0pJHtzdWZmaXh9XG4gIGxldCBlbmQgPSBmaW5kTWF0Y2hpbmdQYXJlbihzdHIsIHN0YXJ0ICsgMyk7XG4gIGxldCBpbm5lciA9IHN0ci5zdWJzdHJpbmcoc3RhcnQgKyA0LCBlbmQpO1xuICBsZXQgcHJlZml4ID0gc3RyLnN1YnN0cmluZygwLCBzdGFydCk7XG4gIC8vIHN1ZmZpeCBtYXkgaGF2ZSBvdGhlciB2YXJpYWJsZXNcbiAgbGV0IHN1ZmZpeCA9IHByb2Nlc3NWYXJpYWJsZUFuZEZhbGxiYWNrKHN0ci5zdWJzdHJpbmcoZW5kICsgMSksIGNhbGxiYWNrKTtcbiAgbGV0IGNvbW1hID0gaW5uZXIuaW5kZXhPZignLCcpO1xuICAvLyB2YWx1ZSBhbmQgZmFsbGJhY2sgYXJncyBzaG91bGQgYmUgdHJpbW1lZCB0byBtYXRjaCBpbiBwcm9wZXJ0eSBsb29rdXBcbiAgaWYgKGNvbW1hID09PSAtMSkge1xuICAgIC8vIHZhcmlhYmxlLCBubyBmYWxsYmFja1xuICAgIHJldHVybiBjYWxsYmFjayhwcmVmaXgsIGlubmVyLnRyaW0oKSwgJycsIHN1ZmZpeCk7XG4gIH1cbiAgLy8gdmFyKCR7dmFsdWV9LCR7ZmFsbGJhY2t9KVxuICBsZXQgdmFsdWUgPSBpbm5lci5zdWJzdHJpbmcoMCwgY29tbWEpLnRyaW0oKTtcbiAgbGV0IGZhbGxiYWNrID0gaW5uZXIuc3Vic3RyaW5nKGNvbW1hICsgMSkudHJpbSgpO1xuICByZXR1cm4gY2FsbGJhY2socHJlZml4LCB2YWx1ZSwgZmFsbGJhY2ssIHN1ZmZpeCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEVsZW1lbnRDbGFzc1JhdyhlbGVtZW50LCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIHNldEF0dHJpYnV0ZSBwcm92aWRlZCBieSBTaGFkeURPTSB3aGVuIHNldEF0dHJpYnV0ZSBpcyBwYXRjaGVkXG4gIGlmIChuYXRpdmVTaGFkb3cpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93WydTaGFkeURPTSddWyduYXRpdmVNZXRob2RzJ11bJ3NldEF0dHJpYnV0ZSddLmNhbGwoZWxlbWVudCwgJ2NsYXNzJywgdmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogQHR5cGUge2Z1bmN0aW9uKCopOip9XG4gKi9cbmV4cG9ydCBjb25zdCB3cmFwID0gd2luZG93WydTaGFkeURPTSddICYmIHdpbmRvd1snU2hhZHlET00nXVsnd3JhcCddIHx8ICgobm9kZSkgPT4gbm9kZSk7XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50IHwge2lzOiBzdHJpbmcsIGV4dGVuZHM6IHN0cmluZ319IGVsZW1lbnRcbiAqIEByZXR1cm4ge3tpczogc3RyaW5nLCB0eXBlRXh0ZW5zaW9uOiBzdHJpbmd9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SXNFeHRlbmRzKGVsZW1lbnQpIHtcbiAgbGV0IGxvY2FsTmFtZSA9IGVsZW1lbnRbJ2xvY2FsTmFtZSddO1xuICBsZXQgaXMgPSAnJywgdHlwZUV4dGVuc2lvbiA9ICcnO1xuICAvKlxuICBOT1RFOiB0ZWNobmljYWxseSwgdGhpcyBjYW4gYmUgd3JvbmcgZm9yIGNlcnRhaW4gc3ZnIGVsZW1lbnRzXG4gIHdpdGggYC1gIGluIHRoZSBuYW1lIGxpa2UgYDxmb250LWZhY2U+YFxuICAqL1xuICBpZiAobG9jYWxOYW1lKSB7XG4gICAgaWYgKGxvY2FsTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgaXMgPSBsb2NhbE5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGVFeHRlbnNpb24gPSBsb2NhbE5hbWU7XG4gICAgICBpcyA9IChlbGVtZW50LmdldEF0dHJpYnV0ZSAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaXMnKSkgfHwgJyc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlzID0gLyoqIEB0eXBlIHs/fSAqLyhlbGVtZW50KS5pcztcbiAgICB0eXBlRXh0ZW5zaW9uID0gLyoqIEB0eXBlIHs/fSAqLyhlbGVtZW50KS5leHRlbmRzO1xuICB9XG4gIHJldHVybiB7aXMsIHR5cGVFeHRlbnNpb259O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudHxEb2N1bWVudEZyYWdtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnYXRoZXJTdHlsZVRleHQoZWxlbWVudCkge1xuICAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmc+fSAqL1xuICBjb25zdCBzdHlsZVRleHRQYXJ0cyA9IFtdO1xuICBjb25zdCBzdHlsZXMgPSAvKiogQHR5cGUgeyFOb2RlTGlzdDwhSFRNTFN0eWxlRWxlbWVudD59ICovKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBzdHlsZXNbaV07XG4gICAgaWYgKGlzVW5zY29wZWRTdHlsZShzdHlsZSkpIHtcbiAgICAgIGlmICghbmF0aXZlU2hhZG93KSB7XG4gICAgICAgIHByb2Nlc3NVbnNjb3BlZFN0eWxlKHN0eWxlKTtcbiAgICAgICAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlVGV4dFBhcnRzLnB1c2goc3R5bGUudGV4dENvbnRlbnQpO1xuICAgICAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZVRleHRQYXJ0cy5qb2luKCcnKS50cmltKCk7XG59XG5cbi8qKlxuICogU3BsaXQgYSBzZWxlY3RvciBzZXBhcmF0ZWQgYnkgY29tbWFzIGludG8gYW4gYXJyYXkgaW4gYSBzbWFydCB3YXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdFNlbGVjdG9yTGlzdChzZWxlY3Rvcikge1xuICBjb25zdCBwYXJ0cyA9IFtdO1xuICBsZXQgcGFydCA9ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA+PSAwICYmIGkgPCBzZWxlY3Rvci5sZW5ndGg7IGkrKykge1xuICAgIC8vIEEgc2VsZWN0b3Igd2l0aCBwYXJlbnRoZXNlcyB3aWxsIGJlIG9uZSBjb21wbGV0ZSBwYXJ0XG4gICAgaWYgKHNlbGVjdG9yW2ldID09PSAnKCcpIHtcbiAgICAgIC8vIGZpbmQgdGhlIG1hdGNoaW5nIHBhcmVuXG4gICAgICBjb25zdCBlbmQgPSBmaW5kTWF0Y2hpbmdQYXJlbihzZWxlY3RvciwgaSk7XG4gICAgICAvLyBwdXNoIHRoZSBwYXJlbiBibG9jayBpbnRvIHRoZSBwYXJ0XG4gICAgICBwYXJ0ICs9IHNlbGVjdG9yLnNsaWNlKGksIGVuZCArIDEpO1xuICAgICAgLy8gbW92ZSB0aGUgaW5kZXggdG8gYWZ0ZXIgdGhlIHBhcmVuIGJsb2NrXG4gICAgICBpID0gZW5kO1xuICAgIH0gZWxzZSBpZiAoc2VsZWN0b3JbaV0gPT09ICcsJykge1xuICAgICAgcGFydHMucHVzaChwYXJ0KTtcbiAgICAgIHBhcnQgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgcGFydCArPSBzZWxlY3RvcltpXTtcbiAgICB9XG4gIH1cbiAgLy8gY2F0Y2ggYW55IHBpZWNlcyBhZnRlciB0aGUgbGFzdCBjb21tYVxuICBpZiAocGFydCkge1xuICAgIHBhcnRzLnB1c2gocGFydCk7XG4gIH1cbiAgcmV0dXJuIHBhcnRzO1xufVxuXG5jb25zdCBDU1NfQlVJTERfQVRUUiA9ICdjc3MtYnVpbGQnO1xuXG4vKipcbiAqIFJldHVybiB0aGUgcG9seW1lci1jc3MtYnVpbGQgXCJidWlsZCB0eXBlXCIgYXBwbGllZCB0byB0aGlzIGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7c3RyaW5nfSBDYW4gYmUgXCJcIiwgXCJzaGFkeVwiLCBvciBcInNoYWRvd1wiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDc3NCdWlsZChlbGVtZW50KSB7XG4gIGlmIChjc3NCdWlsZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyhjc3NCdWlsZCk7XG4gIH1cbiAgaWYgKGVsZW1lbnQuX19jc3NCdWlsZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gdHJ5IGF0dHJpYnV0ZSBmaXJzdCwgYXMgaXQgaXMgdGhlIGNvbW1vbiBjYXNlXG4gICAgY29uc3QgYXR0clZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoQ1NTX0JVSUxEX0FUVFIpO1xuICAgIGlmIChhdHRyVmFsdWUpIHtcbiAgICAgIGVsZW1lbnQuX19jc3NCdWlsZCA9IGF0dHJWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYnVpbGRDb21tZW50ID0gZ2V0QnVpbGRDb21tZW50KGVsZW1lbnQpO1xuICAgICAgaWYgKGJ1aWxkQ29tbWVudCAhPT0gJycpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGJ1aWxkIGNvbW1lbnQgc28gaXQgaXMgbm90IG5lZWRsZXNzbHkgY29waWVkIGludG8gZXZlcnkgZWxlbWVudCBpbnN0YW5jZVxuICAgICAgICByZW1vdmVCdWlsZENvbW1lbnQoZWxlbWVudCk7XG4gICAgICB9XG4gICAgICBlbGVtZW50Ll9fY3NzQnVpbGQgPSBidWlsZENvbW1lbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBlbGVtZW50Ll9fY3NzQnVpbGQgfHwgJyc7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQsIGVpdGhlciBhIDx0ZW1wbGF0ZT4gb3IgPHN0eWxlPiwgaGFzIGJlZW4gcHJvY2Vzc2VkXG4gKiBieSBwb2x5bWVyLWNzcy1idWlsZC5cbiAqXG4gKiBJZiBzbywgdGhlbiB3ZSBjYW4gbWFrZSBhIG51bWJlciBvZiBvcHRpbWl6YXRpb25zOlxuICogLSBwb2x5bWVyLWNzcy1idWlsZCB3aWxsIGRlY29tcG9zZSBtaXhpbnMgaW50byBpbmRpdmlkdWFsIENTUyBDdXN0b20gUHJvcGVydGllcyxcbiAqIHNvIHRoZSBBcHBseVNoaW0gY2FuIGJlIHNraXBwZWQgZW50aXJlbHkuXG4gKiAtIFVuZGVyIG5hdGl2ZSBTaGFkb3dET00sIHRoZSBzdHlsZSB0ZXh0IGNhbiBqdXN0IGJlIGNvcGllZCBpbnRvIGVhY2ggaW5zdGFuY2VcbiAqIHdpdGhvdXQgbW9kaWZpY2F0aW9uXG4gKiAtIElmIHRoZSBidWlsZCBpcyBcInNoYWR5XCIgYW5kIFNoYWR5RE9NIGlzIGluIHVzZSwgdGhlIHN0eWxpbmcgZG9lcyBub3QgbmVlZFxuICogc2NvcGluZyBiZXlvbmQgdGhlIHNoaW1taW5nIG9mIENTUyBDdXN0b20gUHJvcGVydGllc1xuICpcbiAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWxlbWVudEhhc0J1aWx0Q3NzKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldENzc0J1aWxkKGVsZW1lbnQpICE9PSAnJztcbn1cblxuLyoqXG4gKiBGb3IgdGVtcGxhdGVzIG1hZGUgd2l0aCB0YWdnZWQgdGVtcGxhdGUgbGl0ZXJhbHMsIHBvbHltZXItY3NzLWJ1aWxkIHdpbGxcbiAqIGluc2VydCBhIGNvbW1lbnQgb2YgdGhlIGZvcm0gYDwhLS1jc3MtYnVpbGQ6c2hhZG93LS0+YFxuICpcbiAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdWlsZENvbW1lbnQoZWxlbWVudCkge1xuICBjb25zdCBidWlsZENvbW1lbnQgPSBlbGVtZW50LmxvY2FsTmFtZSA9PT0gJ3RlbXBsYXRlJyA/XG4gICAgICAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyAoZWxlbWVudCkuY29udGVudC5maXJzdENoaWxkIDpcbiAgICAgIGVsZW1lbnQuZmlyc3RDaGlsZDtcbiAgaWYgKGJ1aWxkQ29tbWVudCBpbnN0YW5jZW9mIENvbW1lbnQpIHtcbiAgICBjb25zdCBjb21tZW50UGFydHMgPSBidWlsZENvbW1lbnQudGV4dENvbnRlbnQudHJpbSgpLnNwbGl0KCc6Jyk7XG4gICAgaWYgKGNvbW1lbnRQYXJ0c1swXSA9PT0gQ1NTX0JVSUxEX0FUVFIpIHtcbiAgICAgIHJldHVybiBjb21tZW50UGFydHNbMV07XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgY3NzIGJ1aWxkIHN0YXR1cyBpcyBvcHRpbWFsLCBhbmQgZG8gbm8gdW5uZWVkZWQgd29yay5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGNzc0J1aWxkIENTUyBidWlsZCBzdGF0dXNcbiAqIEByZXR1cm4ge2Jvb2xlYW59IGNzcyBidWlsZCBpcyBvcHRpbWFsIG9yIG5vdFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPcHRpbWFsQ3NzQnVpbGQoY3NzQnVpbGQgPSAnJykge1xuICAvLyBDU1MgY3VzdG9tIHByb3BlcnR5IHNoaW0gYWx3YXlzIHJlcXVpcmVzIHdvcmtcbiAgaWYgKGNzc0J1aWxkID09PSAnJyB8fCAhbmF0aXZlQ3NzVmFyaWFibGVzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBuYXRpdmVTaGFkb3cgPyBjc3NCdWlsZCA9PT0gJ3NoYWRvdycgOiBjc3NCdWlsZCA9PT0gJ3NoYWR5Jztcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gZWxlbWVudFxuICovXG5mdW5jdGlvbiByZW1vdmVCdWlsZENvbW1lbnQoZWxlbWVudCkge1xuICBjb25zdCBidWlsZENvbW1lbnQgPSBlbGVtZW50LmxvY2FsTmFtZSA9PT0gJ3RlbXBsYXRlJyA/XG4gICAgICAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyAoZWxlbWVudCkuY29udGVudC5maXJzdENoaWxkIDpcbiAgICAgIGVsZW1lbnQuZmlyc3RDaGlsZDtcbiAgYnVpbGRDb21tZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYnVpbGRDb21tZW50KTtcbn1cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgTUlYSU5fTUFUQ0gsIFZBUl9BU1NJR04gfSBmcm9tICcuL2NvbW1vbi1yZWdleC5qcyc7XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdD19IHByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZU5hdGl2ZVByb3BlcnRpZXMoZWxlbWVudCwgcHJvcGVydGllcykge1xuICAvLyByZW1vdmUgcHJldmlvdXMgcHJvcGVydGllc1xuICBmb3IgKGxldCBwIGluIHByb3BlcnRpZXMpIHtcbiAgICAvLyBOT1RFOiBmb3IgYmMgd2l0aCBzaGltLCBkb24ndCBhcHBseSBudWxsIHZhbHVlcy5cbiAgICBpZiAocCA9PT0gbnVsbCkge1xuICAgICAgZWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShwLCBwcm9wZXJ0aWVzW3BdKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlKGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIC8qKlxuICAgKiBAY29uc3Qge3N0cmluZ31cbiAgICovXG4gIGNvbnN0IHZhbHVlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gJyc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlLnRyaW0oKTtcbiAgfVxufVxuXG4vKipcbiAqIHJldHVybiB0cnVlIGlmIGBjc3NUZXh0YCBjb250YWlucyBhIG1peGluIGRlZmluaXRpb24gb3IgY29uc3VtcHRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0TWl4aW4oY3NzVGV4dCkge1xuICBjb25zdCBoYXMgPSBNSVhJTl9NQVRDSC50ZXN0KGNzc1RleHQpIHx8IFZBUl9BU1NJR04udGVzdChjc3NUZXh0KTtcbiAgLy8gcmVzZXQgc3RhdGUgb2YgdGhlIHJlZ2V4ZXNcbiAgTUlYSU5fTUFUQ0gubGFzdEluZGV4ID0gMDtcbiAgVkFSX0FTU0lHTi5sYXN0SW5kZXggPSAwO1xuICByZXR1cm4gaGFzO1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbi8qXG4gKiBUaGUgYXBwbHkgc2hpbSBzaW11bGF0ZXMgdGhlIGJlaGF2aW9yIG9mIGBAYXBwbHlgIHByb3Bvc2VkIGF0XG4gKiBodHRwczovL3RhYmF0a2lucy5naXRodWIuaW8vc3BlY3MvY3NzLWFwcGx5LXJ1bGUvLlxuICogVGhlIGFwcHJvYWNoIGlzIHRvIGNvbnZlcnQgYSBwcm9wZXJ0eSBsaWtlIHRoaXM6XG4gKlxuICogICAgLS1mb286IHtjb2xvcjogcmVkOyBiYWNrZ3JvdW5kOiBibHVlO31cbiAqXG4gKiB0byB0aGlzOlxuICpcbiAqICAgIC0tZm9vXy1fY29sb3I6IHJlZDtcbiAqICAgIC0tZm9vXy1fYmFja2dyb3VuZDogYmx1ZTtcbiAqXG4gKiBUaGVuIHdoZXJlIGBAYXBwbHkgLS1mb29gIGlzIHVzZWQsIHRoYXQgaXMgY29udmVydGVkIHRvOlxuICpcbiAqICAgIGNvbG9yOiB2YXIoLS1mb29fLV9jb2xvcik7XG4gKiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1mb29fLV9iYWNrZ3JvdW5kKTtcbiAqXG4gKiBUaGlzIGFwcHJvYWNoIGdlbmVyYWxseSB3b3JrcyBidXQgdGhlcmUgYXJlIHNvbWUgaXNzdWVzIGFuZCBsaW1pdGF0aW9ucy5cbiAqIENvbnNpZGVyLCBmb3IgZXhhbXBsZSwgdGhhdCBzb21ld2hlcmUgKmJldHdlZW4qIHdoZXJlIGAtLWZvb2AgaXMgc2V0IGFuZCB1c2VkLFxuICogYW5vdGhlciBlbGVtZW50IHNldHMgaXQgdG86XG4gKlxuICogICAgLS1mb286IHsgYm9yZGVyOiAycHggc29saWQgcmVkOyB9XG4gKlxuICogV2UgbXVzdCBub3cgZW5zdXJlIHRoYXQgdGhlIGNvbG9yIGFuZCBiYWNrZ3JvdW5kIGZyb20gdGhlIHByZXZpb3VzIHNldHRpbmdcbiAqIGRvIG5vdCBhcHBseS4gVGhpcyBpcyBhY2NvbXBsaXNoZWQgYnkgY2hhbmdpbmcgdGhlIHByb3BlcnR5IHNldCB0byB0aGlzOlxuICpcbiAqICAgIC0tZm9vXy1fYm9yZGVyOiAycHggc29saWQgcmVkO1xuICogICAgLS1mb29fLV9jb2xvcjogaW5pdGlhbDtcbiAqICAgIC0tZm9vXy1fYmFja2dyb3VuZDogaW5pdGlhbDtcbiAqXG4gKiBUaGlzIHdvcmtzIGJ1dCBpbnRyb2R1Y2VzIG9uZSBuZXcgaXNzdWUuXG4gKiBDb25zaWRlciB0aGlzIHNldHVwIGF0IHRoZSBwb2ludCB3aGVyZSB0aGUgYEBhcHBseWAgaXMgdXNlZDpcbiAqXG4gKiAgICBiYWNrZ3JvdW5kOiBvcmFuZ2U7XG4gKiAgICBgQGFwcGx5YCAtLWZvbztcbiAqXG4gKiBJbiB0aGlzIGNhc2UgdGhlIGJhY2tncm91bmQgd2lsbCBiZSB1bnNldCAoaW5pdGlhbCkgcmF0aGVyIHRoYW4gdGhlIGRlc2lyZWRcbiAqIGBvcmFuZ2VgLiBXZSBhZGRyZXNzIHRoaXMgYnkgYWx0ZXJpbmcgdGhlIHByb3BlcnR5IHNldCB0byB1c2UgYSBmYWxsYmFja1xuICogdmFsdWUgbGlrZSB0aGlzOlxuICpcbiAqICAgIGNvbG9yOiB2YXIoLS1mb29fLV9jb2xvcik7XG4gKiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1mb29fLV9iYWNrZ3JvdW5kLCBvcmFuZ2UpO1xuICogICAgYm9yZGVyOiB2YXIoLS1mb29fLV9ib3JkZXIpO1xuICpcbiAqIE5vdGUgdGhhdCB0aGUgZGVmYXVsdCBpcyByZXRhaW5lZCBpbiB0aGUgcHJvcGVydHkgc2V0IGFuZCB0aGUgYGJhY2tncm91bmRgIGlzXG4gKiB0aGUgZGVzaXJlZCBgb3JhbmdlYC4gVGhpcyBsZWFkcyB1cyB0byBhIGxpbWl0YXRpb24uXG4gKlxuICogTGltaXRhdGlvbiAxOlxuXG4gKiBPbmx5IHByb3BlcnRpZXMgaW4gdGhlIHJ1bGUgd2hlcmUgdGhlIGBAYXBwbHlgXG4gKiBpcyB1c2VkIGFyZSBjb25zaWRlcmVkIGFzIGRlZmF1bHQgdmFsdWVzLlxuICogSWYgYW5vdGhlciBydWxlIG1hdGNoZXMgdGhlIGVsZW1lbnQgYW5kIHNldHMgYGJhY2tncm91bmRgIHdpdGhcbiAqIGxlc3Mgc3BlY2lmaWNpdHkgdGhhbiB0aGUgcnVsZSBpbiB3aGljaCBgQGFwcGx5YCBhcHBlYXJzLFxuICogdGhlIGBiYWNrZ3JvdW5kYCB3aWxsIG5vdCBiZSBzZXQuXG4gKlxuICogTGltaXRhdGlvbiAyOlxuICpcbiAqIFdoZW4gdXNpbmcgUG9seW1lcidzIGB1cGRhdGVTdHlsZXNgIGFwaSwgbmV3IHByb3BlcnRpZXMgbWF5IG5vdCBiZSBzZXQgZm9yXG4gKiBgQGFwcGx5YCBwcm9wZXJ0aWVzLlxuXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7Zm9yRWFjaFJ1bGUsIHByb2Nlc3NWYXJpYWJsZUFuZEZhbGxiYWNrLCBydWxlc0ZvclN0eWxlLCB0b0Nzc1RleHQsIGdhdGhlclN0eWxlVGV4dH0gZnJvbSAnLi9zdHlsZS11dGlsLmpzJztcbmltcG9ydCB7TUlYSU5fTUFUQ0gsIFZBUl9BU1NJR059IGZyb20gJy4vY29tbW9uLXJlZ2V4LmpzJztcbmltcG9ydCB7ZGV0ZWN0TWl4aW59IGZyb20gJy4vY29tbW9uLXV0aWxzLmpzJztcbmltcG9ydCB7U3R5bGVOb2RlfSBmcm9tICcuL2Nzcy1wYXJzZS5qcyc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuY29uc3QgQVBQTFlfTkFNRV9DTEVBTiA9IC87XFxzKi9tO1xuY29uc3QgSU5JVElBTF9JTkhFUklUID0gL15cXHMqKGluaXRpYWwpfChpbmhlcml0KVxccyokLztcbmNvbnN0IElNUE9SVEFOVCA9IC9cXHMqIWltcG9ydGFudC87XG5cbi8vIHNlcGFyYXRvciB1c2VkIGJldHdlZW4gbWl4aW4tbmFtZSBhbmQgbWl4aW4tcHJvcGVydHktbmFtZSB3aGVuIHByb2R1Y2luZyBwcm9wZXJ0aWVzXG4vLyBOT1RFOiBwbGFpbiAnLScgbWF5IGNhdXNlIGNvbGxpc2lvbnMgaW4gdXNlciBzdHlsZXNcbmNvbnN0IE1JWElOX1ZBUl9TRVAgPSAnXy1fJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59XG4gKi9cbmxldCBQcm9wZXJ0eUVudHJ5OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbi8qKlxuICogQHR5cGVkZWYgeyFPYmplY3Q8c3RyaW5nLCBib29sZWFuPn1cbiAqL1xubGV0IERlcGVuZGFudHNFbnRyeTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4vKiogQHR5cGVkZWYge3tcbiAqICAgIHByb3BlcnRpZXM6IFByb3BlcnR5RW50cnksXG4gKiAgICBkZXBlbmRhbnRzOiBEZXBlbmRhbnRzRW50cnlcbiAqIH19XG4gKi9cbmxldCBNaXhpbk1hcEVudHJ5OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbi8vIG1hcCBvZiBtaXhpbiB0byBwcm9wZXJ0eSBuYW1lc1xuLy8gLS1mb286IHtib3JkZXI6IDJweH0gLT4ge3Byb3BlcnRpZXM6IHsoLS1mb28sIFsnYm9yZGVyJ10pfSwgZGVwZW5kYW50czogeydlbGVtZW50LW5hbWUnOiBwcm90b319XG5jbGFzcyBNaXhpbk1hcCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8qKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsICFNaXhpbk1hcEVudHJ5Pn0gKi9cbiAgICB0aGlzLl9tYXAgPSB7fTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHshUHJvcGVydHlFbnRyeX0gcHJvcHNcbiAgICovXG4gIHNldChuYW1lLCBwcm9wcykge1xuICAgIG5hbWUgPSBuYW1lLnRyaW0oKTtcbiAgICB0aGlzLl9tYXBbbmFtZV0gPSB7XG4gICAgICBwcm9wZXJ0aWVzOiBwcm9wcyxcbiAgICAgIGRlcGVuZGFudHM6IHt9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcmV0dXJuIHtNaXhpbk1hcEVudHJ5fVxuICAgKi9cbiAgZ2V0KG5hbWUpIHtcbiAgICBuYW1lID0gbmFtZS50cmltKCk7XG4gICAgcmV0dXJuIHRoaXMuX21hcFtuYW1lXSB8fCBudWxsO1xuICB9XG59XG5cbi8qKlxuICogQ2FsbGJhY2sgZm9yIHdoZW4gYW4gZWxlbWVudCBpcyBtYXJrZWQgaW52YWxpZFxuICogQHR5cGUgez9mdW5jdGlvbihzdHJpbmcpfVxuICovXG5sZXQgaW52YWxpZENhbGxiYWNrID0gbnVsbDtcblxuLyoqIEB1bnJlc3RyaWN0ZWQgKi9cbmNsYXNzIEFwcGx5U2hpbSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8qKiBAdHlwZSB7P3N0cmluZ30gKi9cbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG51bGw7XG4gICAgLyoqIEB0eXBlIHtIVE1MTWV0YUVsZW1lbnR9ICovXG4gICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuX21hcCA9IG5ldyBNaXhpbk1hcCgpO1xuICB9XG4gIC8qKlxuICAgKiByZXR1cm4gdHJ1ZSBpZiBgY3NzVGV4dGAgY29udGFpbnMgYSBtaXhpbiBkZWZpbml0aW9uIG9yIGNvbnN1bXB0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBkZXRlY3RNaXhpbihjc3NUZXh0KSB7XG4gICAgcmV0dXJuIGRldGVjdE1peGluKGNzc1RleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdhdGhlciBzdHlsZXMgaW50byBvbmUgc3R5bGUgZm9yIGVhc2llciBwcm9jZXNzaW5nXG4gICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gICAqIEByZXR1cm4ge0hUTUxTdHlsZUVsZW1lbnR9XG4gICAqL1xuICBnYXRoZXJTdHlsZXModGVtcGxhdGUpIHtcbiAgICBjb25zdCBzdHlsZVRleHQgPSBnYXRoZXJTdHlsZVRleHQodGVtcGxhdGUuY29udGVudCk7XG4gICAgaWYgKHN0eWxlVGV4dCkge1xuICAgICAgY29uc3Qgc3R5bGUgPSAvKiogQHR5cGUgeyFIVE1MU3R5bGVFbGVtZW50fSAqLyhkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpKTtcbiAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gc3R5bGVUZXh0O1xuICAgICAgdGVtcGxhdGUuY29udGVudC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRlbXBsYXRlLmNvbnRlbnQuZmlyc3RDaGlsZCk7XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWVcbiAgICogQHJldHVybiB7U3R5bGVOb2RlfVxuICAgKi9cbiAgdHJhbnNmb3JtVGVtcGxhdGUodGVtcGxhdGUsIGVsZW1lbnROYW1lKSB7XG4gICAgaWYgKHRlbXBsYXRlLl9nYXRoZXJlZFN0eWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRlbXBsYXRlLl9nYXRoZXJlZFN0eWxlID0gdGhpcy5nYXRoZXJTdHlsZXModGVtcGxhdGUpO1xuICAgIH1cbiAgICAvKiogQHR5cGUge0hUTUxTdHlsZUVsZW1lbnR9ICovXG4gICAgY29uc3Qgc3R5bGUgPSB0ZW1wbGF0ZS5fZ2F0aGVyZWRTdHlsZTtcbiAgICByZXR1cm4gc3R5bGUgPyB0aGlzLnRyYW5zZm9ybVN0eWxlKHN0eWxlLCBlbGVtZW50TmFtZSkgOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0geyFIVE1MU3R5bGVFbGVtZW50fSBzdHlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWVcbiAgICogQHJldHVybiB7U3R5bGVOb2RlfVxuICAgKi9cbiAgdHJhbnNmb3JtU3R5bGUoc3R5bGUsIGVsZW1lbnROYW1lID0gJycpIHtcbiAgICBsZXQgYXN0ID0gcnVsZXNGb3JTdHlsZShzdHlsZSk7XG4gICAgdGhpcy50cmFuc2Zvcm1SdWxlcyhhc3QsIGVsZW1lbnROYW1lKTtcbiAgICBzdHlsZS50ZXh0Q29udGVudCA9IHRvQ3NzVGV4dChhc3QpO1xuICAgIHJldHVybiBhc3Q7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUhUTUxTdHlsZUVsZW1lbnR9IHN0eWxlXG4gICAqIEByZXR1cm4ge1N0eWxlTm9kZX1cbiAgICovXG4gIHRyYW5zZm9ybUN1c3RvbVN0eWxlKHN0eWxlKSB7XG4gICAgbGV0IGFzdCA9IHJ1bGVzRm9yU3R5bGUoc3R5bGUpO1xuICAgIGZvckVhY2hSdWxlKGFzdCwgKHJ1bGUpID0+IHtcbiAgICAgIGlmIChydWxlWydzZWxlY3RvciddID09PSAnOnJvb3QnKSB7XG4gICAgICAgIHJ1bGVbJ3NlbGVjdG9yJ10gPSAnaHRtbCc7XG4gICAgICB9XG4gICAgICB0aGlzLnRyYW5zZm9ybVJ1bGUocnVsZSk7XG4gICAgfSlcbiAgICBzdHlsZS50ZXh0Q29udGVudCA9IHRvQ3NzVGV4dChhc3QpO1xuICAgIHJldHVybiBhc3Q7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3R5bGVOb2RlfSBydWxlc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWVcbiAgICovXG4gIHRyYW5zZm9ybVJ1bGVzKHJ1bGVzLCBlbGVtZW50TmFtZSkge1xuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gZWxlbWVudE5hbWU7XG4gICAgZm9yRWFjaFJ1bGUocnVsZXMsIChyKSA9PiB7XG4gICAgICB0aGlzLnRyYW5zZm9ybVJ1bGUocik7XG4gICAgfSk7XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0geyFTdHlsZU5vZGV9IHJ1bGVcbiAgICovXG4gIHRyYW5zZm9ybVJ1bGUocnVsZSkge1xuICAgIHJ1bGVbJ2Nzc1RleHQnXSA9IHRoaXMudHJhbnNmb3JtQ3NzVGV4dChydWxlWydwYXJzZWRDc3NUZXh0J10sIHJ1bGUpO1xuICAgIC8vIDpyb290IHdhcyBvbmx5IHVzZWQgZm9yIHZhcmlhYmxlIGFzc2lnbm1lbnQgaW4gcHJvcGVydHkgc2hpbSxcbiAgICAvLyBidXQgZ2VuZXJhdGVzIGludmFsaWQgc2VsZWN0b3JzIHdpdGggcmVhbCBwcm9wZXJ0aWVzLlxuICAgIC8vIHJlcGxhY2Ugd2l0aCBgOmhvc3QgPiAqYCwgd2hpY2ggc2VydmVzIHRoZSBzYW1lIGVmZmVjdFxuICAgIGlmIChydWxlWydzZWxlY3RvciddID09PSAnOnJvb3QnKSB7XG4gICAgICBydWxlWydzZWxlY3RvciddID0gJzpob3N0ID4gKic7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dFxuICAgKiBAcGFyYW0geyFTdHlsZU5vZGV9IHJ1bGVcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdHJhbnNmb3JtQ3NzVGV4dChjc3NUZXh0LCBydWxlKSB7XG4gICAgLy8gcHJvZHVjZSB2YXJpYWJsZXNcbiAgICBjc3NUZXh0ID0gY3NzVGV4dC5yZXBsYWNlKFZBUl9BU1NJR04sIChtYXRjaFRleHQsIHByb3BlcnR5TmFtZSwgdmFsdWVQcm9wZXJ0eSwgdmFsdWVNaXhpbikgPT5cbiAgICAgIHRoaXMuX3Byb2R1Y2VDc3NQcm9wZXJ0aWVzKG1hdGNoVGV4dCwgcHJvcGVydHlOYW1lLCB2YWx1ZVByb3BlcnR5LCB2YWx1ZU1peGluLCBydWxlKSk7XG4gICAgLy8gY29uc3VtZSBtaXhpbnNcbiAgICByZXR1cm4gdGhpcy5fY29uc3VtZUNzc1Byb3BlcnRpZXMoY3NzVGV4dCwgcnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBfZ2V0SW5pdGlhbFZhbHVlRm9yUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICBpZiAoIXRoaXMuX21lYXN1cmVFbGVtZW50KSB7XG4gICAgICB0aGlzLl9tZWFzdXJlRWxlbWVudCA9IC8qKiBAdHlwZSB7SFRNTE1ldGFFbGVtZW50fSAqLyhkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdtZXRhJykpO1xuICAgICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcHBseS1zaGltLW1lYXN1cmUnLCAnJyk7XG4gICAgICB0aGlzLl9tZWFzdXJlRWxlbWVudC5zdHlsZS5hbGwgPSAnaW5pdGlhbCc7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHRoaXMuX21lYXN1cmVFbGVtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuX21lYXN1cmVFbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KTtcbiAgfVxuICAvKipcbiAgICogV2FsayBvdmVyIGFsbCBydWxlcyBiZWZvcmUgdGhpcyBydWxlIHRvIGZpbmQgZmFsbGJhY2tzIGZvciBtaXhpbnNcbiAgICpcbiAgICogQHBhcmFtIHshU3R5bGVOb2RlfSBzdGFydFJ1bGVcbiAgICogQHJldHVybiB7IU9iamVjdH1cbiAgICovXG4gIF9mYWxsYmFja3NGcm9tUHJldmlvdXNSdWxlcyhzdGFydFJ1bGUpIHtcbiAgICAvLyBmaW5kIHRoZSBcInRvcFwiIHJ1bGVcbiAgICBsZXQgdG9wUnVsZSA9IHN0YXJ0UnVsZTtcbiAgICB3aGlsZSAodG9wUnVsZVsncGFyZW50J10pIHtcbiAgICAgIHRvcFJ1bGUgPSB0b3BSdWxlWydwYXJlbnQnXTtcbiAgICB9XG4gICAgY29uc3QgZmFsbGJhY2tzID0ge307XG4gICAgbGV0IHNlZW5TdGFydFJ1bGUgPSBmYWxzZTtcbiAgICBmb3JFYWNoUnVsZSh0b3BSdWxlLCAocikgPT4ge1xuICAgICAgLy8gc3RvcCB3aGVuIHdlIGhpdCB0aGUgaW5wdXQgcnVsZVxuICAgICAgc2VlblN0YXJ0UnVsZSA9IHNlZW5TdGFydFJ1bGUgfHwgciA9PT0gc3RhcnRSdWxlO1xuICAgICAgaWYgKHNlZW5TdGFydFJ1bGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gTk9URTogT25seSBtYXRjaGluZyBzZWxlY3RvcnMgYXJlIFwic2FmZVwiIGZvciB0aGlzIGZhbGxiYWNrIHByb2Nlc3NpbmdcbiAgICAgIC8vIEl0IHdvdWxkIGJlIHByb2hpYml0aXZlIHRvIHJ1biBgbWF0Y2hlc1NlbGVjdG9yKClgIG9uIGVhY2ggc2VsZWN0b3IsXG4gICAgICAvLyBzbyB3ZSBjaGVhdCBhbmQgb25seSBjaGVjayBpZiB0aGUgc2FtZSBzZWxlY3RvciBzdHJpbmcgaXMgdXNlZCwgd2hpY2hcbiAgICAgIC8vIGd1YXJhbnRlZXMgdGhpbmdzIGxpa2Ugc3BlY2lmaWNpdHkgbWF0Y2hpbmdcbiAgICAgIGlmIChyWydzZWxlY3RvciddID09PSBzdGFydFJ1bGVbJ3NlbGVjdG9yJ10pIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihmYWxsYmFja3MsIHRoaXMuX2Nzc1RleHRUb01hcChyWydwYXJzZWRDc3NUZXh0J10pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZmFsbGJhY2tzO1xuICB9XG4gIC8qKlxuICAgKiByZXBsYWNlIG1peGluIGNvbnN1bXB0aW9uIHdpdGggdmFyaWFibGUgY29uc3VtcHRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICogQHBhcmFtIHshU3R5bGVOb2RlPX0gcnVsZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBfY29uc3VtZUNzc1Byb3BlcnRpZXModGV4dCwgcnVsZSkge1xuICAgIC8qKiBAdHlwZSB7QXJyYXl9ICovXG4gICAgbGV0IG0gPSBudWxsO1xuICAgIC8vIGxvb3Agb3ZlciB0ZXh0IHVudGlsIGFsbCBtaXhpbnMgd2l0aCBkZWZpbnRpb25zIGhhdmUgYmVlbiBhcHBsaWVkXG4gICAgd2hpbGUoKG0gPSBNSVhJTl9NQVRDSC5leGVjKHRleHQpKSkge1xuICAgICAgbGV0IG1hdGNoVGV4dCA9IG1bMF07XG4gICAgICBsZXQgbWl4aW5OYW1lID0gbVsxXTtcbiAgICAgIGxldCBpZHggPSBtLmluZGV4O1xuICAgICAgLy8gY29sbGVjdCBwcm9wZXJ0aWVzIGJlZm9yZSBhcHBseSB0byBiZSBcImRlZmF1bHRzXCIgaWYgbWl4aW4gbWlnaHQgb3ZlcnJpZGUgdGhlbVxuICAgICAgLy8gbWF0Y2ggaW5jbHVkZXMgYSBcInByZWZpeFwiLCBzbyBmaW5kIHRoZSBzdGFydCBhbmQgZW5kIHBvc2l0aW9ucyBvZiBAYXBwbHlcbiAgICAgIGxldCBhcHBseVBvcyA9IGlkeCArIG1hdGNoVGV4dC5pbmRleE9mKCdAYXBwbHknKTtcbiAgICAgIGxldCBhZnRlckFwcGx5UG9zID0gaWR4ICsgbWF0Y2hUZXh0Lmxlbmd0aDtcbiAgICAgIC8vIGZpbmQgcHJvcHMgZGVmaW5lZCBiZWZvcmUgdGhpcyBAYXBwbHlcbiAgICAgIGxldCB0ZXh0QmVmb3JlQXBwbHkgPSB0ZXh0LnNsaWNlKDAsIGFwcGx5UG9zKTtcbiAgICAgIGxldCB0ZXh0QWZ0ZXJBcHBseSA9IHRleHQuc2xpY2UoYWZ0ZXJBcHBseVBvcyk7XG4gICAgICBsZXQgZGVmYXVsdHMgPSBydWxlID8gdGhpcy5fZmFsbGJhY2tzRnJvbVByZXZpb3VzUnVsZXMocnVsZSkgOiB7fTtcbiAgICAgIE9iamVjdC5hc3NpZ24oZGVmYXVsdHMsIHRoaXMuX2Nzc1RleHRUb01hcCh0ZXh0QmVmb3JlQXBwbHkpKTtcbiAgICAgIGxldCByZXBsYWNlbWVudCA9IHRoaXMuX2F0QXBwbHlUb0Nzc1Byb3BlcnRpZXMobWl4aW5OYW1lLCBkZWZhdWx0cyk7XG4gICAgICAvLyB1c2UgcmVnZXggbWF0Y2ggcG9zaXRpb24gdG8gcmVwbGFjZSBtaXhpbiwga2VlcCBsaW5lYXIgcHJvY2Vzc2luZyB0aW1lXG4gICAgICB0ZXh0ID0gYCR7dGV4dEJlZm9yZUFwcGx5fSR7cmVwbGFjZW1lbnR9JHt0ZXh0QWZ0ZXJBcHBseX1gO1xuICAgICAgLy8gbW92ZSByZWdleCBzZWFyY2ggdG8gX2FmdGVyXyByZXBsYWNlbWVudFxuICAgICAgTUlYSU5fTUFUQ0gubGFzdEluZGV4ID0gaWR4ICsgcmVwbGFjZW1lbnQubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuICAvKipcbiAgICogcHJvZHVjZSB2YXJpYWJsZSBjb25zdW1wdGlvbiBhdCB0aGUgc2l0ZSBvZiBtaXhpbiBjb25zdW1wdGlvblxuICAgKiBgQGFwcGx5YCAtLWZvbzsgLT4gZm9yIGFsbCBwcm9wcyAoJHtwcm9wbmFtZX06IHZhcigtLWZvb18tXyR7cHJvcG5hbWV9LCAke2ZhbGxiYWNrW3Byb3BuYW1lXX19KSlcbiAgICogRXhhbXBsZTpcbiAgICogIGJvcmRlcjogdmFyKC0tZm9vXy1fYm9yZGVyKTsgcGFkZGluZzogdmFyKC0tZm9vXy1fcGFkZGluZywgMnB4KVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWl4aW5OYW1lXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmYWxsYmFja3NcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgX2F0QXBwbHlUb0Nzc1Byb3BlcnRpZXMobWl4aW5OYW1lLCBmYWxsYmFja3MpIHtcbiAgICBtaXhpbk5hbWUgPSBtaXhpbk5hbWUucmVwbGFjZShBUFBMWV9OQU1FX0NMRUFOLCAnJyk7XG4gICAgbGV0IHZhcnMgPSBbXTtcbiAgICBsZXQgbWl4aW5FbnRyeSA9IHRoaXMuX21hcC5nZXQobWl4aW5OYW1lKTtcbiAgICAvLyBpZiB3ZSBkZXBlbmQgb24gYSBtaXhpbiBiZWZvcmUgaXQgaXMgY3JlYXRlZFxuICAgIC8vIG1ha2UgYSBzZW50aW5lbCBlbnRyeSBpbiB0aGUgbWFwIHRvIGFkZCB0aGlzIGVsZW1lbnQgYXMgYSBkZXBlbmRlbmN5IGZvciB3aGVuIGl0IGlzIGRlZmluZWQuXG4gICAgaWYgKCFtaXhpbkVudHJ5KSB7XG4gICAgICB0aGlzLl9tYXAuc2V0KG1peGluTmFtZSwge30pO1xuICAgICAgbWl4aW5FbnRyeSA9IHRoaXMuX21hcC5nZXQobWl4aW5OYW1lKTtcbiAgICB9XG4gICAgaWYgKG1peGluRW50cnkpIHtcbiAgICAgIGlmICh0aGlzLl9jdXJyZW50RWxlbWVudCkge1xuICAgICAgICBtaXhpbkVudHJ5LmRlcGVuZGFudHNbdGhpcy5fY3VycmVudEVsZW1lbnRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxldCBwLCBwYXJ0cywgZjtcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBtaXhpbkVudHJ5LnByb3BlcnRpZXM7XG4gICAgICBmb3IgKHAgaW4gcHJvcGVydGllcykge1xuICAgICAgICBmID0gZmFsbGJhY2tzICYmIGZhbGxiYWNrc1twXTtcbiAgICAgICAgcGFydHMgPSBbcCwgJzogdmFyKCcsIG1peGluTmFtZSwgTUlYSU5fVkFSX1NFUCwgcF07XG4gICAgICAgIGlmIChmKSB7XG4gICAgICAgICAgcGFydHMucHVzaCgnLCcsIGYucmVwbGFjZShJTVBPUlRBTlQsICcnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaCgnKScpO1xuICAgICAgICBpZiAoSU1QT1JUQU5ULnRlc3QocHJvcGVydGllc1twXSkpIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKCcgIWltcG9ydGFudCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhcnMucHVzaChwYXJ0cy5qb2luKCcnKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YXJzLmpvaW4oJzsgJyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBfcmVwbGFjZUluaXRpYWxPckluaGVyaXQocHJvcGVydHksIHZhbHVlKSB7XG4gICAgbGV0IG1hdGNoID0gSU5JVElBTF9JTkhFUklULmV4ZWModmFsdWUpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgIC8vIGluaXRpYWxcbiAgICAgICAgLy8gcmVwbGFjZSBgaW5pdGlhbGAgd2l0aCB0aGUgY29uY3JldGUgaW5pdGlhbCB2YWx1ZSBmb3IgdGhpcyBwcm9wZXJ0eVxuICAgICAgICB2YWx1ZSA9IHRoaXMuX2dldEluaXRpYWxWYWx1ZUZvclByb3BlcnR5KHByb3BlcnR5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGluaGVyaXRcbiAgICAgICAgLy8gd2l0aCB0aGlzIHB1cnBvc2Z1bGx5IGlsbGVnYWwgdmFsdWUsIHRoZSB2YXJpYWJsZSB3aWxsIGJlIGludmFsaWQgYXRcbiAgICAgICAgLy8gY29tcHV0ZSB0aW1lIChodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXZhcmlhYmxlcy8jaW52YWxpZC1hdC1jb21wdXRlZC12YWx1ZS10aW1lKVxuICAgICAgICAvLyBhbmQgZm9yIGluaGVyaXRpbmcgdmFsdWVzLCB3aWxsIGJlaGF2ZSBzaW1pbGFybHlcbiAgICAgICAgLy8gd2UgY2Fubm90IHN1cHBvcnQgdGhlIHNhbWUgYmVoYXZpb3IgZm9yIG5vbiBpbmhlcml0aW5nIHZhbHVlcyBsaWtlICdib3JkZXInXG4gICAgICAgIHZhbHVlID0gJ2FwcGx5LXNoaW0taW5oZXJpdCc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcInBhcnNlXCIgYSBtaXhpbiBkZWZpbml0aW9uIGludG8gYSBtYXAgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzXG4gICAqIGNzc1RleHRUb01hcCgnYm9yZGVyOiAycHggc29saWQgYmxhY2snKSAtPiAoJ2JvcmRlcicsICcycHggc29saWQgYmxhY2snKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSByZXBsYWNlSW5pdGlhbE9ySW5oZXJpdFxuICAgKiBAcmV0dXJuIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn1cbiAgICovXG4gIF9jc3NUZXh0VG9NYXAodGV4dCwgcmVwbGFjZUluaXRpYWxPckluaGVyaXQgPSBmYWxzZSkge1xuICAgIGxldCBwcm9wcyA9IHRleHQuc3BsaXQoJzsnKTtcbiAgICBsZXQgcHJvcGVydHksIHZhbHVlO1xuICAgIGxldCBvdXQgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMCwgcCwgc3A7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHApIHtcbiAgICAgICAgc3AgPSBwLnNwbGl0KCc6Jyk7XG4gICAgICAgIC8vIGlnbm9yZSBsaW5lcyB0aGF0IGFyZW4ndCBkZWZpbml0aW9ucyBsaWtlIEBtZWRpYVxuICAgICAgICBpZiAoc3AubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHByb3BlcnR5ID0gc3BbMF0udHJpbSgpO1xuICAgICAgICAgIC8vIHNvbWUgcHJvcGVydGllcyBtYXkgaGF2ZSAnOicgaW4gdGhlIHZhbHVlLCBsaWtlIGRhdGEgdXJsc1xuICAgICAgICAgIHZhbHVlID0gc3Auc2xpY2UoMSkuam9pbignOicpO1xuICAgICAgICAgIGlmIChyZXBsYWNlSW5pdGlhbE9ySW5oZXJpdCkge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9yZXBsYWNlSW5pdGlhbE9ySW5oZXJpdChwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXRbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge01peGluTWFwRW50cnl9IG1peGluRW50cnlcbiAgICovXG4gIF9pbnZhbGlkYXRlTWl4aW5FbnRyeShtaXhpbkVudHJ5KSB7XG4gICAgaWYgKCFpbnZhbGlkQ2FsbGJhY2spIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChsZXQgZWxlbWVudE5hbWUgaW4gbWl4aW5FbnRyeS5kZXBlbmRhbnRzKSB7XG4gICAgICBpZiAoZWxlbWVudE5hbWUgIT09IHRoaXMuX2N1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgIGludmFsaWRDYWxsYmFjayhlbGVtZW50TmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXRjaFRleHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5TmFtZVxuICAgKiBAcGFyYW0gez9zdHJpbmd9IHZhbHVlUHJvcGVydHlcbiAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZU1peGluXG4gICAqIEBwYXJhbSB7IVN0eWxlTm9kZX0gcnVsZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBfcHJvZHVjZUNzc1Byb3BlcnRpZXMobWF0Y2hUZXh0LCBwcm9wZXJ0eU5hbWUsIHZhbHVlUHJvcGVydHksIHZhbHVlTWl4aW4sIHJ1bGUpIHtcbiAgICAvLyBoYW5kbGUgY2FzZSB3aGVyZSBwcm9wZXJ0eSB2YWx1ZSBpcyBhIG1peGluXG4gICAgaWYgKHZhbHVlUHJvcGVydHkpIHtcbiAgICAgIC8vIGZvcm06IC0tbWl4aW4yOiB2YXIoLS1taXhpbjEpLCB3aGVyZSAtLW1peGluMSBpcyBpbiB0aGUgbWFwXG4gICAgICBwcm9jZXNzVmFyaWFibGVBbmRGYWxsYmFjayh2YWx1ZVByb3BlcnR5LCAocHJlZml4LCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodmFsdWUgJiYgdGhpcy5fbWFwLmdldCh2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZU1peGluID0gYEBhcHBseSAke3ZhbHVlfTtgXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIXZhbHVlTWl4aW4pIHtcbiAgICAgIHJldHVybiBtYXRjaFRleHQ7XG4gICAgfVxuICAgIGxldCBtaXhpbkFzUHJvcGVydGllcyA9IHRoaXMuX2NvbnN1bWVDc3NQcm9wZXJ0aWVzKCcnICsgdmFsdWVNaXhpbiwgcnVsZSk7XG4gICAgbGV0IHByZWZpeCA9IG1hdGNoVGV4dC5zbGljZSgwLCBtYXRjaFRleHQuaW5kZXhPZignLS0nKSk7XG4gICAgLy8gYGluaXRpYWxgIGFuZCBgaW5oZXJpdGAgYXMgcHJvcGVydGllcyBpbiBhIG1hcCBzaG91bGQgYmUgcmVwbGFjZWQgYmVjYXVzZVxuICAgIC8vIHRoZXNlIGtleXdvcmRzIGFyZSBlYWdlcmx5IGV2YWx1YXRlZCB3aGVuIHRoZSBtaXhpbiBiZWNvbWVzIENTUyBDdXN0b20gUHJvcGVydGllcyxcbiAgICAvLyBhbmQgd291bGQgc2V0IHRoZSB2YXJpYWJsZSB2YWx1ZSwgcmF0aGVyIHRoYW4gY2FycnkgdGhlIGtleXdvcmQgdG8gdGhlIGB2YXIoKWAgdXNhZ2UuXG4gICAgbGV0IG1peGluVmFsdWVzID0gdGhpcy5fY3NzVGV4dFRvTWFwKG1peGluQXNQcm9wZXJ0aWVzLCB0cnVlKTtcbiAgICBsZXQgY29tYmluZWRQcm9wcyA9IG1peGluVmFsdWVzO1xuICAgIGxldCBtaXhpbkVudHJ5ID0gdGhpcy5fbWFwLmdldChwcm9wZXJ0eU5hbWUpO1xuICAgIGxldCBvbGRQcm9wcyA9IG1peGluRW50cnkgJiYgbWl4aW5FbnRyeS5wcm9wZXJ0aWVzO1xuICAgIGlmIChvbGRQcm9wcykge1xuICAgICAgLy8gTk9URTogc2luY2Ugd2UgdXNlIG1peGluLCB0aGUgbWFwIG9mIHByb3BlcnRpZXMgaXMgdXBkYXRlZCBoZXJlXG4gICAgICAvLyBhbmQgdGhpcyBpcyB3aGF0IHdlIHdhbnQuXG4gICAgICBjb21iaW5lZFByb3BzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG9sZFByb3BzKSwgbWl4aW5WYWx1ZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9tYXAuc2V0KHByb3BlcnR5TmFtZSwgY29tYmluZWRQcm9wcyk7XG4gICAgfVxuICAgIGxldCBvdXQgPSBbXTtcbiAgICBsZXQgcCwgdjtcbiAgICAvLyBzZXQgdmFyaWFibGVzIGRlZmluZWQgYnkgY3VycmVudCBtaXhpblxuICAgIGxldCBuZWVkVG9JbnZhbGlkYXRlID0gZmFsc2U7XG4gICAgZm9yIChwIGluIGNvbWJpbmVkUHJvcHMpIHtcbiAgICAgIHYgPSBtaXhpblZhbHVlc1twXTtcbiAgICAgIC8vIGlmIHByb3BlcnR5IG5vdCBkZWZpbmVkIGJ5IGN1cnJlbnQgbWl4aW4sIHNldCBpbml0aWFsXG4gICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHYgPSAnaW5pdGlhbCc7XG4gICAgICB9XG4gICAgICBpZiAob2xkUHJvcHMgJiYgIShwIGluIG9sZFByb3BzKSkge1xuICAgICAgICBuZWVkVG9JbnZhbGlkYXRlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIG91dC5wdXNoKGAke3Byb3BlcnR5TmFtZX0ke01JWElOX1ZBUl9TRVB9JHtwfTogJHt2fWApO1xuICAgIH1cbiAgICBpZiAobmVlZFRvSW52YWxpZGF0ZSkge1xuICAgICAgdGhpcy5faW52YWxpZGF0ZU1peGluRW50cnkobWl4aW5FbnRyeSk7XG4gICAgfVxuICAgIGlmIChtaXhpbkVudHJ5KSB7XG4gICAgICBtaXhpbkVudHJ5LnByb3BlcnRpZXMgPSBjb21iaW5lZFByb3BzO1xuICAgIH1cbiAgICAvLyBiZWNhdXNlIHRoZSBtaXhpbk1hcCBpcyBnbG9iYWwsIHRoZSBtaXhpbiBtaWdodCBjb25mbGljdCB3aXRoXG4gICAgLy8gYSBkaWZmZXJlbnQgc2NvcGUncyBzaW1wbGUgdmFyaWFibGUgZGVmaW5pdGlvbjpcbiAgICAvLyBFeGFtcGxlOlxuICAgIC8vIHNvbWUgc3R5bGUgc29tZXdoZXJlOlxuICAgIC8vIC0tbWl4aW4xOnsgLi4uIH1cbiAgICAvLyAtLW1peGluMjogdmFyKC0tbWl4aW4xKTtcbiAgICAvLyBzb21lIG90aGVyIGVsZW1lbnQ6XG4gICAgLy8gLS1taXhpbjE6IDEwcHggc29saWQgcmVkO1xuICAgIC8vIC0tZm9vOiB2YXIoLS1taXhpbjEpO1xuICAgIC8vIEluIHRoaXMgY2FzZSwgd2UgbGVhdmUgdGhlIG9yaWdpbmFsIHZhcmlhYmxlIGRlZmluaXRpb24gaW4gcGxhY2UuXG4gICAgaWYgKHZhbHVlUHJvcGVydHkpIHtcbiAgICAgIHByZWZpeCA9IGAke21hdGNoVGV4dH07JHtwcmVmaXh9YDtcbiAgICB9XG4gICAgcmV0dXJuIGAke3ByZWZpeH0ke291dC5qb2luKCc7ICcpfTtgO1xuICB9XG59XG5cbi8qIGV4cG9ydHMgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtYXNzaWduICovXG5BcHBseVNoaW0ucHJvdG90eXBlWydkZXRlY3RNaXhpbiddID0gQXBwbHlTaGltLnByb3RvdHlwZS5kZXRlY3RNaXhpbjtcbkFwcGx5U2hpbS5wcm90b3R5cGVbJ3RyYW5zZm9ybVN0eWxlJ10gPSBBcHBseVNoaW0ucHJvdG90eXBlLnRyYW5zZm9ybVN0eWxlO1xuQXBwbHlTaGltLnByb3RvdHlwZVsndHJhbnNmb3JtQ3VzdG9tU3R5bGUnXSA9IEFwcGx5U2hpbS5wcm90b3R5cGUudHJhbnNmb3JtQ3VzdG9tU3R5bGU7XG5BcHBseVNoaW0ucHJvdG90eXBlWyd0cmFuc2Zvcm1SdWxlcyddID0gQXBwbHlTaGltLnByb3RvdHlwZS50cmFuc2Zvcm1SdWxlcztcbkFwcGx5U2hpbS5wcm90b3R5cGVbJ3RyYW5zZm9ybVJ1bGUnXSA9IEFwcGx5U2hpbS5wcm90b3R5cGUudHJhbnNmb3JtUnVsZTtcbkFwcGx5U2hpbS5wcm90b3R5cGVbJ3RyYW5zZm9ybVRlbXBsYXRlJ10gPSBBcHBseVNoaW0ucHJvdG90eXBlLnRyYW5zZm9ybVRlbXBsYXRlO1xuQXBwbHlTaGltLnByb3RvdHlwZVsnX3NlcGFyYXRvciddID0gTUlYSU5fVkFSX1NFUDtcbi8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1hc3NpZ24gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcHBseVNoaW0ucHJvdG90eXBlLCAnaW52YWxpZENhbGxiYWNrJywge1xuICAvKiogQHJldHVybiB7P2Z1bmN0aW9uKHN0cmluZyl9ICovXG4gIGdldCgpIHtcbiAgICByZXR1cm4gaW52YWxpZENhbGxiYWNrO1xuICB9LFxuICAvKiogQHBhcmFtIHs/ZnVuY3Rpb24oc3RyaW5nKX0gY2IgKi9cbiAgc2V0KGNiKSB7XG4gICAgaW52YWxpZENhbGxiYWNrID0gY2I7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBBcHBseVNoaW07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQGNvbnN0IHshT2JqZWN0PHN0cmluZywgIUhUTUxUZW1wbGF0ZUVsZW1lbnQ+fVxuICovXG5jb25zdCB0ZW1wbGF0ZU1hcCA9IHt9O1xuZXhwb3J0IGRlZmF1bHQgdGVtcGxhdGVNYXA7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgdGVtcGxhdGVNYXAgZnJvbSAnLi90ZW1wbGF0ZS1tYXAuanMnO1xuaW1wb3J0IHtTdHlsZU5vZGV9IGZyb20gJy4vY3NzLXBhcnNlLmpzJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4vKlxuICogVXRpbGl0aWVzIGZvciBoYW5kbGluZyBpbnZhbGlkYXRpbmcgYXBwbHktc2hpbSBtaXhpbnMgZm9yIGEgZ2l2ZW4gdGVtcGxhdGUuXG4gKlxuICogVGhlIGludmFsaWRhdGlvbiBzdHJhdGVneSBpbnZvbHZlcyBrZWVwaW5nIHRyYWNrIG9mIHRoZSBcImN1cnJlbnRcIiB2ZXJzaW9uIG9mIGEgdGVtcGxhdGUncyBtaXhpbnMsIGFuZCB1cGRhdGluZyB0aGF0IGNvdW50IHdoZW4gYSBtaXhpbiBpcyBpbnZhbGlkYXRlZC5cbiAqIFRoZSB0ZW1wbGF0ZVxuICovXG5cbi8qKiBAY29uc3Qge3N0cmluZ30gKi9cbmNvbnN0IENVUlJFTlRfVkVSU0lPTiA9ICdfYXBwbHlTaGltQ3VycmVudFZlcnNpb24nO1xuXG4vKiogQGNvbnN0IHtzdHJpbmd9ICovXG5jb25zdCBORVhUX1ZFUlNJT04gPSAnX2FwcGx5U2hpbU5leHRWZXJzaW9uJztcblxuLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuY29uc3QgVkFMSURBVElOR19WRVJTSU9OID0gJ19hcHBseVNoaW1WYWxpZGF0aW5nVmVyc2lvbic7XG5cbi8qKlxuICogQGNvbnN0IHtQcm9taXNlPHZvaWQ+fVxuICovXG5jb25zdCBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZhbGlkYXRlKGVsZW1lbnROYW1lKXtcbiAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVNYXBbZWxlbWVudE5hbWVdO1xuICBpZiAodGVtcGxhdGUpIHtcbiAgICBpbnZhbGlkYXRlVGVtcGxhdGUodGVtcGxhdGUpO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHRvIG1hcmsgYSB0ZW1wbGF0ZSBpbnZhbGlkXG4gKiBhbmQgc2lnbmFsIHRoYXQgdGhlIHN0eWxlIGluc2lkZSBtdXN0IGJlIHJlZ2VuZXJhdGVkLlxuICpcbiAqIFVzZSBgc3RhcnRWYWxpZGF0aW5nVGVtcGxhdGVgIHRvIGJlZ2luIGFuIGFzeW5jaHJvbm91cyB2YWxpZGF0aW9uIGN5Y2xlLlxuICogRHVyaW5nIHRoYXQgY3ljbGUsIGNhbGwgYHRlbXBsYXRlSXNWYWxpZGF0aW5nYCB0byBzZWUgaWYgdGhlIHRlbXBsYXRlIG11c3RcbiAqIGJlIHJldmFsaWRhdGVkXG4gKiBAcGFyYW0ge0hUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZhbGlkYXRlVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgLy8gZGVmYXVsdCB0aGUgY3VycmVudCB2ZXJzaW9uIHRvIDBcbiAgdGVtcGxhdGVbQ1VSUkVOVF9WRVJTSU9OXSA9IHRlbXBsYXRlW0NVUlJFTlRfVkVSU0lPTl0gfHwgMDtcbiAgLy8gZW5zdXJlIHRoZSBcInZhbGlkYXRpbmcgZm9yXCIgZmxhZyBleGlzdHNcbiAgdGVtcGxhdGVbVkFMSURBVElOR19WRVJTSU9OXSA9IHRlbXBsYXRlW1ZBTElEQVRJTkdfVkVSU0lPTl0gfHwgMDtcbiAgLy8gaW5jcmVtZW50IHRoZSBuZXh0IHZlcnNpb25cbiAgdGVtcGxhdGVbTkVYVF9WRVJTSU9OXSA9ICh0ZW1wbGF0ZVtORVhUX1ZFUlNJT05dIHx8IDApICsgMTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkKGVsZW1lbnROYW1lKSB7XG4gIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlTWFwW2VsZW1lbnROYW1lXTtcbiAgaWYgKHRlbXBsYXRlKSB7XG4gICAgcmV0dXJuIHRlbXBsYXRlSXNWYWxpZCh0ZW1wbGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRlbXBsYXRlSXNWYWxpZCh0ZW1wbGF0ZSkge1xuICByZXR1cm4gdGVtcGxhdGVbQ1VSUkVOVF9WRVJTSU9OXSA9PT0gdGVtcGxhdGVbTkVYVF9WRVJTSU9OXTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkYXRpbmcoZWxlbWVudE5hbWUpIHtcbiAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVNYXBbZWxlbWVudE5hbWVdO1xuICBpZiAodGVtcGxhdGUpIHtcbiAgICByZXR1cm4gdGVtcGxhdGVJc1ZhbGlkYXRpbmcodGVtcGxhdGUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHRlbXBsYXRlIGlzIGN1cnJlbnRseSBpbnZhbGlkIGFuZCBgc3RhcnRWYWxpZGF0aW5nYCBoYXMgYmVlbiBjYWxsZWQgc2luY2UgdGhlIGxhc3QgaW52YWxpZGF0aW9uLlxuICogSWYgZmFsc2UsIHRoZSB0ZW1wbGF0ZSBtdXN0IGJlIHZhbGlkYXRlZC5cbiAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZUlzVmFsaWRhdGluZyh0ZW1wbGF0ZSkge1xuICByZXR1cm4gIXRlbXBsYXRlSXNWYWxpZCh0ZW1wbGF0ZSkgJiYgdGVtcGxhdGVbVkFMSURBVElOR19WRVJTSU9OXSA9PT0gdGVtcGxhdGVbTkVYVF9WRVJTSU9OXTtcbn1cblxuLyoqXG4gKiB0aGUgdGVtcGxhdGUgaXMgbWFya2VkIGFzIGB2YWxpZGF0aW5nYCBmb3Igb25lIG1pY3JvdGFzayBzbyB0aGF0IGFsbCBpbnN0YW5jZXNcbiAqIGZvdW5kIGluIHRoZSB0cmVlIGNyYXdsIG9mIGBhcHBseVN0eWxlYCB3aWxsIHVwZGF0ZSB0aGVtc2VsdmVzLFxuICogYnV0IHRoZSB0ZW1wbGF0ZSB3aWxsIG9ubHkgYmUgdXBkYXRlZCBvbmNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0VmFsaWRhdGluZyhlbGVtZW50TmFtZSkge1xuICBsZXQgdGVtcGxhdGUgPSB0ZW1wbGF0ZU1hcFtlbGVtZW50TmFtZV07XG4gIHN0YXJ0VmFsaWRhdGluZ1RlbXBsYXRlKHRlbXBsYXRlKTtcbn1cblxuLyoqXG4gKiBCZWdpbiBhbiBhc3luY2hyb25vdXMgaW52YWxpZGF0aW9uIGN5Y2xlLlxuICogVGhpcyBzaG91bGQgYmUgY2FsbGVkIGFmdGVyIGV2ZXJ5IHZhbGlkYXRpb24gb2YgYSB0ZW1wbGF0ZVxuICpcbiAqIEFmdGVyIG9uZSBtaWNyb3Rhc2ssIHRoZSB0ZW1wbGF0ZSB3aWxsIGJlIG1hcmtlZCBhcyB2YWxpZCB1bnRpbCB0aGUgbmV4dCBjYWxsIHRvIGBpbnZhbGlkYXRlVGVtcGxhdGVgXG4gKiBAcGFyYW0ge0hUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydFZhbGlkYXRpbmdUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAvLyByZW1lbWJlciB0aGF0IHRoZSBjdXJyZW50IFwibmV4dCB2ZXJzaW9uXCIgaXMgdGhlIHJlYXNvbiBmb3IgdGhpcyB2YWxpZGF0aW9uIGN5Y2xlXG4gIHRlbXBsYXRlW1ZBTElEQVRJTkdfVkVSU0lPTl0gPSB0ZW1wbGF0ZVtORVhUX1ZFUlNJT05dO1xuICAvLyBob3dldmVyLCB0aGVyZSBvbmx5IG5lZWRzIHRvIGJlIG9uZSBhc3luYyB0YXNrIHRvIGNsZWFyIHRoZSBjb3VudGVyc1xuICBpZiAoIXRlbXBsYXRlLl92YWxpZGF0aW5nKSB7XG4gICAgdGVtcGxhdGUuX3ZhbGlkYXRpbmcgPSB0cnVlO1xuICAgIHByb21pc2UudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIC8vIHN5bmMgdGhlIGN1cnJlbnQgdmVyc2lvbiB0byBsZXQgZnV0dXJlIGludmFsaWRhdGlvbnMgY2F1c2UgYSByZWZyZXNoIGN5Y2xlXG4gICAgICB0ZW1wbGF0ZVtDVVJSRU5UX1ZFUlNJT05dID0gdGVtcGxhdGVbTkVYVF9WRVJTSU9OXTtcbiAgICAgIHRlbXBsYXRlLl92YWxpZGF0aW5nID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWxlbWVudHNBcmVJbnZhbGlkKCkge1xuICBmb3IgKGxldCBlbGVtZW50TmFtZSBpbiB0ZW1wbGF0ZU1hcCkge1xuICAgIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlTWFwW2VsZW1lbnROYW1lXTtcbiAgICBpZiAoIXRlbXBsYXRlSXNWYWxpZCh0ZW1wbGF0ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7UHJvbWlzZTx2b2lkPn0gKi9cbmxldCByZWFkeVByb21pc2UgPSBudWxsO1xuXG4vKiogQHR5cGUgez9mdW5jdGlvbig/ZnVuY3Rpb24oKSl9ICovXG5sZXQgd2hlblJlYWR5ID0gd2luZG93WydIVE1MSW1wb3J0cyddICYmIHdpbmRvd1snSFRNTEltcG9ydHMnXVsnd2hlblJlYWR5J10gfHwgbnVsbDtcblxuLyoqIEB0eXBlIHtmdW5jdGlvbigpfSAqL1xubGV0IHJlc29sdmVGbjtcblxuLyoqXG4gKiBAcGFyYW0gez9mdW5jdGlvbigpfSBjYWxsYmFja1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkb2N1bWVudFdhaXQoY2FsbGJhY2spIHtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkge1xuICAgIGlmICh3aGVuUmVhZHkpIHtcbiAgICAgIHdoZW5SZWFkeShjYWxsYmFjaylcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFyZWFkeVByb21pc2UpIHtcbiAgICAgICAgcmVhZHlQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtyZXNvbHZlRm4gPSByZXNvbHZlfSk7XG4gICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgcmVzb2x2ZUZuKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICAgIHJlc29sdmVGbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWFkeVByb21pc2UudGhlbihmdW5jdGlvbigpeyBjYWxsYmFjayAmJiBjYWxsYmFjaygpOyB9KTtcbiAgICB9XG4gIH0pO1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgZG9jdW1lbnRXYWl0IGZyb20gJy4vZG9jdW1lbnQtd2FpdC5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0hUTUxTdHlsZUVsZW1lbnQgfCB7Z2V0U3R5bGU6IGZ1bmN0aW9uKCk6SFRNTFN0eWxlRWxlbWVudH19XG4gKi9cbmV4cG9ydCBsZXQgQ3VzdG9tU3R5bGVQcm92aWRlcjtcblxuY29uc3QgU0VFTl9NQVJLRVIgPSAnX19zZWVuQnlTaGFkeUNTUyc7XG5jb25zdCBDQUNIRURfU1RZTEUgPSAnX19zaGFkeUNTU0NhY2hlZFN0eWxlJztcblxuLyoqIEB0eXBlIHs/ZnVuY3Rpb24oIUhUTUxTdHlsZUVsZW1lbnQpfSAqL1xubGV0IHRyYW5zZm9ybUZuID0gbnVsbDtcblxuLyoqIEB0eXBlIHs/ZnVuY3Rpb24oKX0gKi9cbmxldCB2YWxpZGF0ZUZuID0gbnVsbDtcblxuLyoqXG5UaGlzIGludGVyZmFjZSBpcyBwcm92aWRlZCB0byBhZGQgZG9jdW1lbnQtbGV2ZWwgPHN0eWxlPiBlbGVtZW50cyB0byBTaGFkeUNTUyBmb3IgcHJvY2Vzc2luZy5cblRoZXNlIHN0eWxlcyBtdXN0IGJlIHByb2Nlc3NlZCBieSBTaGFkeUNTUyB0byBzaW11bGF0ZSBTaGFkb3dSb290IHVwcGVyLWJvdW5kIGVuY2Fwc3VsYXRpb24gZnJvbSBvdXRzaWRlIHN0eWxlc1xuSW4gYWRkaXRpb24sIHRoZXNlIHN0eWxlcyBtYXkgYWxzbyBuZWVkIHRvIGJlIHByb2Nlc3NlZCBmb3IgQGFwcGx5IHJ1bGVzIGFuZCBDU1MgQ3VzdG9tIFByb3BlcnRpZXNcblxuVG8gYWRkIGRvY3VtZW50LWxldmVsIHN0eWxlcyB0byBTaGFkeUNTUywgb25lIGNhbiBjYWxsIGBTaGFkeUNTUy5hZGREb2N1bWVudFN0eWxlKHN0eWxlRWxlbWVudClgIG9yIGBTaGFkeUNTUy5hZGREb2N1bWVudFN0eWxlKHtnZXRTdHlsZTogKCkgPT4gc3R5bGVFbGVtZW50fSlgXG5cbkluIGFkZGl0aW9uLCBpZiB0aGUgcHJvY2VzcyB1c2VkIHRvIGRpc2NvdmVyIGRvY3VtZW50LWxldmVsIHN0eWxlcyBjYW4gYmUgc3luY2hyb25vdXNseSBmbHVzaGVkLCBvbmUgc2hvdWxkIHNldCBgU2hhZHlDU1MuZG9jdW1lbnRTdHlsZUZsdXNoYC5cblRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbiBjYWxjdWxhdGluZyBzdHlsZXMuXG5cbkFuIGV4YW1wbGUgdXNhZ2Ugb2YgdGhlIGRvY3VtZW50LWxldmVsIHN0eWxpbmcgYXBpIGNhbiBiZSBmb3VuZCBpbiBgZXhhbXBsZXMvZG9jdW1lbnQtc3R5bGUtbGliLmpzYFxuXG5AdW5yZXN0cmljdGVkXG4qL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VzdG9tU3R5bGVJbnRlcmZhY2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKiogQHR5cGUgeyFBcnJheTwhQ3VzdG9tU3R5bGVQcm92aWRlcj59ICovXG4gICAgdGhpc1snY3VzdG9tU3R5bGVzJ10gPSBbXTtcbiAgICB0aGlzWydlbnF1ZXVlZCddID0gZmFsc2U7XG4gICAgLy8gTk9URShkZnJlZWRtKTogdXNlIHF1b3RlcyBoZXJlIHRvIHByZXZlbnQgY2xvc3VyZSBpbmxpbmluZyB0byBgZnVuY3Rpb24oKXt9YDtcbiAgICBkb2N1bWVudFdhaXQoKCkgPT4ge1xuICAgICAgaWYgKHdpbmRvd1snU2hhZHlDU1MnXVsnZmx1c2hDdXN0b21TdHlsZXMnXSkge1xuICAgICAgICB3aW5kb3dbJ1NoYWR5Q1NTJ11bJ2ZsdXNoQ3VzdG9tU3R5bGVzJ10oKTtcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIC8qKlxuICAgKiBRdWV1ZSBhIHZhbGlkYXRpb24gZm9yIG5ldyBjdXN0b20gc3R5bGVzIHRvIGJhdGNoIHN0eWxlIHJlY2FsY3VsYXRpb25zXG4gICAqL1xuICBlbnF1ZXVlRG9jdW1lbnRWYWxpZGF0aW9uKCkge1xuICAgIGlmICh0aGlzWydlbnF1ZXVlZCddIHx8ICF2YWxpZGF0ZUZuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXNbJ2VucXVldWVkJ10gPSB0cnVlO1xuICAgIGRvY3VtZW50V2FpdCh2YWxpZGF0ZUZuKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHshSFRNTFN0eWxlRWxlbWVudH0gc3R5bGVcbiAgICovXG4gIGFkZEN1c3RvbVN0eWxlKHN0eWxlKSB7XG4gICAgaWYgKCFzdHlsZVtTRUVOX01BUktFUl0pIHtcbiAgICAgIHN0eWxlW1NFRU5fTUFSS0VSXSA9IHRydWU7XG4gICAgICB0aGlzWydjdXN0b21TdHlsZXMnXS5wdXNoKHN0eWxlKTtcbiAgICAgIHRoaXMuZW5xdWV1ZURvY3VtZW50VmFsaWRhdGlvbigpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHshQ3VzdG9tU3R5bGVQcm92aWRlcn0gY3VzdG9tU3R5bGVcbiAgICogQHJldHVybiB7SFRNTFN0eWxlRWxlbWVudH1cbiAgICovXG4gIGdldFN0eWxlRm9yQ3VzdG9tU3R5bGUoY3VzdG9tU3R5bGUpIHtcbiAgICBpZiAoY3VzdG9tU3R5bGVbQ0FDSEVEX1NUWUxFXSkge1xuICAgICAgcmV0dXJuIGN1c3RvbVN0eWxlW0NBQ0hFRF9TVFlMRV07XG4gICAgfVxuICAgIGxldCBzdHlsZTtcbiAgICBpZiAoY3VzdG9tU3R5bGVbJ2dldFN0eWxlJ10pIHtcbiAgICAgIHN0eWxlID0gY3VzdG9tU3R5bGVbJ2dldFN0eWxlJ10oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUgPSBjdXN0b21TdHlsZTtcbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJuIHshQXJyYXk8IUN1c3RvbVN0eWxlUHJvdmlkZXI+fVxuICAgKi9cbiAgcHJvY2Vzc1N0eWxlcygpIHtcbiAgICBjb25zdCBjcyA9IHRoaXNbJ2N1c3RvbVN0eWxlcyddO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGN1c3RvbVN0eWxlID0gY3NbaV07XG4gICAgICBpZiAoY3VzdG9tU3R5bGVbQ0FDSEVEX1NUWUxFXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0eWxlID0gdGhpcy5nZXRTdHlsZUZvckN1c3RvbVN0eWxlKGN1c3RvbVN0eWxlKTtcbiAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICAvLyBIVE1MSW1wb3J0cyBwb2x5ZmlsbCBtYXkgaGF2ZSBjbG9uZWQgdGhlIHN0eWxlIGludG8gdGhlIG1haW4gZG9jdW1lbnQsXG4gICAgICAgIC8vIHdoaWNoIGlzIHJlZmVyZW5jZWQgd2l0aCBfX2FwcGxpZWRFbGVtZW50LlxuICAgICAgICBjb25zdCBzdHlsZVRvVHJhbnNmb3JtID0gLyoqIEB0eXBlIHshSFRNTFN0eWxlRWxlbWVudH0gKi8oc3R5bGVbJ19fYXBwbGllZEVsZW1lbnQnXSB8fCBzdHlsZSk7XG4gICAgICAgIGlmICh0cmFuc2Zvcm1Gbikge1xuICAgICAgICAgIHRyYW5zZm9ybUZuKHN0eWxlVG9UcmFuc2Zvcm0pO1xuICAgICAgICB9XG4gICAgICAgIGN1c3RvbVN0eWxlW0NBQ0hFRF9TVFlMRV0gPSBzdHlsZVRvVHJhbnNmb3JtO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3M7XG4gIH1cbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1hc3NpZ24gKi9cbkN1c3RvbVN0eWxlSW50ZXJmYWNlLnByb3RvdHlwZVsnYWRkQ3VzdG9tU3R5bGUnXSA9IEN1c3RvbVN0eWxlSW50ZXJmYWNlLnByb3RvdHlwZS5hZGRDdXN0b21TdHlsZTtcbkN1c3RvbVN0eWxlSW50ZXJmYWNlLnByb3RvdHlwZVsnZ2V0U3R5bGVGb3JDdXN0b21TdHlsZSddID0gQ3VzdG9tU3R5bGVJbnRlcmZhY2UucHJvdG90eXBlLmdldFN0eWxlRm9yQ3VzdG9tU3R5bGU7XG5DdXN0b21TdHlsZUludGVyZmFjZS5wcm90b3R5cGVbJ3Byb2Nlc3NTdHlsZXMnXSA9IEN1c3RvbVN0eWxlSW50ZXJmYWNlLnByb3RvdHlwZS5wcm9jZXNzU3R5bGVzO1xuLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWFzc2lnbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhDdXN0b21TdHlsZUludGVyZmFjZS5wcm90b3R5cGUsIHtcbiAgJ3RyYW5zZm9ybUNhbGxiYWNrJzoge1xuICAgIC8qKiBAcmV0dXJuIHs/ZnVuY3Rpb24oIUhUTUxTdHlsZUVsZW1lbnQpfSAqL1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1GbjtcbiAgICB9LFxuICAgIC8qKiBAcGFyYW0gez9mdW5jdGlvbighSFRNTFN0eWxlRWxlbWVudCl9IGZuICovXG4gICAgc2V0KGZuKSB7XG4gICAgICB0cmFuc2Zvcm1GbiA9IGZuO1xuICAgIH1cbiAgfSxcbiAgJ3ZhbGlkYXRlQ2FsbGJhY2snOiB7XG4gICAgLyoqIEByZXR1cm4gez9mdW5jdGlvbigpfSAqL1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZUZuO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/ZnVuY3Rpb24oKX0gZm5cbiAgICAgKiBAdGhpcyB7Q3VzdG9tU3R5bGVJbnRlcmZhY2V9XG4gICAgICovXG4gICAgc2V0KGZuKSB7XG4gICAgICBsZXQgbmVlZHNFbnF1ZXVlID0gZmFsc2U7XG4gICAgICBpZiAoIXZhbGlkYXRlRm4pIHtcbiAgICAgICAgbmVlZHNFbnF1ZXVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhbGlkYXRlRm4gPSBmbjtcbiAgICAgIGlmIChuZWVkc0VucXVldWUpIHtcbiAgICAgICAgdGhpcy5lbnF1ZXVlRG9jdW1lbnRWYWxpZGF0aW9uKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfVxufSlcblxuLyoqIEB0eXBlZGVmIHt7XG4gKiBjdXN0b21TdHlsZXM6ICFBcnJheTwhQ3VzdG9tU3R5bGVQcm92aWRlcj4sXG4gKiBhZGRDdXN0b21TdHlsZTogZnVuY3Rpb24oIUN1c3RvbVN0eWxlUHJvdmlkZXIpLFxuICogZ2V0U3R5bGVGb3JDdXN0b21TdHlsZTogZnVuY3Rpb24oIUN1c3RvbVN0eWxlUHJvdmlkZXIpOiBIVE1MU3R5bGVFbGVtZW50LFxuICogZmluZFN0eWxlczogZnVuY3Rpb24oKSxcbiAqIHRyYW5zZm9ybUNhbGxiYWNrOiA/ZnVuY3Rpb24oIUhUTUxTdHlsZUVsZW1lbnQpLFxuICogdmFsaWRhdGVDYWxsYmFjazogP2Z1bmN0aW9uKClcbiAqIH19XG4gKi9cbmV4cG9ydCBjb25zdCBDdXN0b21TdHlsZUludGVyZmFjZUludGVyZmFjZSA9IHt9O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXBwbHlTaGltIGZyb20gJy4uL3NyYy9hcHBseS1zaGltLmpzJztcbmltcG9ydCB0ZW1wbGF0ZU1hcCBmcm9tICcuLi9zcmMvdGVtcGxhdGUtbWFwLmpzJztcbmltcG9ydCB7Z2V0SXNFeHRlbmRzLCB0b0Nzc1RleHQsIGVsZW1lbnRIYXNCdWlsdENzc30gZnJvbSAnLi4vc3JjL3N0eWxlLXV0aWwuanMnO1xuaW1wb3J0ICogYXMgQXBwbHlTaGltVXRpbHMgZnJvbSAnLi4vc3JjL2FwcGx5LXNoaW0tdXRpbHMuanMnO1xuaW1wb3J0IHtnZXRDb21wdXRlZFN0eWxlVmFsdWUsIHVwZGF0ZU5hdGl2ZVByb3BlcnRpZXN9IGZyb20gJy4uL3NyYy9jb21tb24tdXRpbHMuanMnO1xuaW1wb3J0IHtDdXN0b21TdHlsZUludGVyZmFjZUludGVyZmFjZX0gZnJvbSAnLi4vc3JjL2N1c3RvbS1zdHlsZS1pbnRlcmZhY2UuanMnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5pbXBvcnQge25hdGl2ZUNzc1ZhcmlhYmxlcywgbmF0aXZlU2hhZG93LCBjc3NCdWlsZCwgZGlzYWJsZVJ1bnRpbWV9IGZyb20gJy4uL3NyYy9zdHlsZS1zZXR0aW5ncy5qcyc7XG5cbi8qKiBAY29uc3Qge0FwcGx5U2hpbX0gKi9cbmNvbnN0IGFwcGx5U2hpbSA9IG5ldyBBcHBseVNoaW0oKTtcblxuY2xhc3MgQXBwbHlTaGltSW50ZXJmYWNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqIEB0eXBlIHs/Q3VzdG9tU3R5bGVJbnRlcmZhY2VJbnRlcmZhY2V9ICovXG4gICAgdGhpcy5jdXN0b21TdHlsZUludGVyZmFjZSA9IG51bGw7XG4gICAgYXBwbHlTaGltWydpbnZhbGlkQ2FsbGJhY2snXSA9IEFwcGx5U2hpbVV0aWxzLmludmFsaWRhdGU7XG4gIH1cbiAgZW5zdXJlKCkge1xuICAgIGlmICh0aGlzLmN1c3RvbVN0eWxlSW50ZXJmYWNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh3aW5kb3cuU2hhZHlDU1MuQ3VzdG9tU3R5bGVJbnRlcmZhY2UpIHtcbiAgICAgIHRoaXMuY3VzdG9tU3R5bGVJbnRlcmZhY2UgPVxuICAgICAgICAgIC8qKiBAdHlwZSB7IUN1c3RvbVN0eWxlSW50ZXJmYWNlSW50ZXJmYWNlfSAqLyAoXG4gICAgICAgICAgICAgIHdpbmRvdy5TaGFkeUNTUy5DdXN0b21TdHlsZUludGVyZmFjZSk7XG4gICAgICB0aGlzLmN1c3RvbVN0eWxlSW50ZXJmYWNlWyd0cmFuc2Zvcm1DYWxsYmFjayddID0gKHN0eWxlKSA9PiB7XG4gICAgICAgIGFwcGx5U2hpbS50cmFuc2Zvcm1DdXN0b21TdHlsZShzdHlsZSk7XG4gICAgICB9O1xuICAgICAgdGhpcy5jdXN0b21TdHlsZUludGVyZmFjZVsndmFsaWRhdGVDYWxsYmFjayddID0gKCkgPT4ge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmN1c3RvbVN0eWxlSW50ZXJmYWNlWydlbnF1ZXVlZCddKSB7XG4gICAgICAgICAgICB0aGlzLmZsdXNoQ3VzdG9tU3R5bGVzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICAgKi9cbiAgcHJlcGFyZVRlbXBsYXRlKHRlbXBsYXRlLCBlbGVtZW50TmFtZSkge1xuICAgIHRoaXMuZW5zdXJlKCk7XG4gICAgaWYgKGVsZW1lbnRIYXNCdWlsdENzcyh0ZW1wbGF0ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGVtcGxhdGVNYXBbZWxlbWVudE5hbWVdID0gdGVtcGxhdGU7XG4gICAgbGV0IGFzdCA9IGFwcGx5U2hpbS50cmFuc2Zvcm1UZW1wbGF0ZSh0ZW1wbGF0ZSwgZWxlbWVudE5hbWUpO1xuICAgIC8vIHNhdmUgb3JpZ2luYWwgc3R5bGUgYXN0IHRvIHVzZSBmb3IgcmV2YWxpZGF0aW5nIGluc3RhbmNlc1xuICAgIHRlbXBsYXRlWydfc3R5bGVBc3QnXSA9IGFzdDtcbiAgfVxuICBmbHVzaEN1c3RvbVN0eWxlcygpIHtcbiAgICB0aGlzLmVuc3VyZSgpO1xuICAgIGlmICghdGhpcy5jdXN0b21TdHlsZUludGVyZmFjZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgc3R5bGVzID0gdGhpcy5jdXN0b21TdHlsZUludGVyZmFjZVsncHJvY2Vzc1N0eWxlcyddKCk7XG4gICAgaWYgKCF0aGlzLmN1c3RvbVN0eWxlSW50ZXJmYWNlWydlbnF1ZXVlZCddKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrICkge1xuICAgICAgbGV0IGNzID0gc3R5bGVzW2ldO1xuICAgICAgbGV0IHN0eWxlID0gdGhpcy5jdXN0b21TdHlsZUludGVyZmFjZVsnZ2V0U3R5bGVGb3JDdXN0b21TdHlsZSddKGNzKTtcbiAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICBhcHBseVNoaW0udHJhbnNmb3JtQ3VzdG9tU3R5bGUoc3R5bGUpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmN1c3RvbVN0eWxlSW50ZXJmYWNlWydlbnF1ZXVlZCddID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzXG4gICAqL1xuICBzdHlsZVN1YnRyZWUoZWxlbWVudCwgcHJvcGVydGllcykge1xuICAgIHRoaXMuZW5zdXJlKCk7XG4gICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgIHVwZGF0ZU5hdGl2ZVByb3BlcnRpZXMoZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgfVxuICAgIGlmIChlbGVtZW50LnNoYWRvd1Jvb3QpIHtcbiAgICAgIHRoaXMuc3R5bGVFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgbGV0IHNoYWRvd0NoaWxkcmVuID1cbiAgICAgICAgICAvKiogQHR5cGUgeyFQYXJlbnROb2RlfSAqLyAoZWxlbWVudC5zaGFkb3dSb290KS5jaGlsZHJlbiB8fFxuICAgICAgICAgIGVsZW1lbnQuc2hhZG93Um9vdC5jaGlsZE5vZGVzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGFkb3dDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnN0eWxlU3VidHJlZSgvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyhzaGFkb3dDaGlsZHJlbltpXSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuIHx8IGVsZW1lbnQuY2hpbGROb2RlcztcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5zdHlsZVN1YnRyZWUoLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi8oY2hpbGRyZW5baV0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICovXG4gIHN0eWxlRWxlbWVudChlbGVtZW50KSB7XG4gICAgdGhpcy5lbnN1cmUoKTtcbiAgICBsZXQge2lzfSA9IGdldElzRXh0ZW5kcyhlbGVtZW50KTtcbiAgICBsZXQgdGVtcGxhdGUgPSB0ZW1wbGF0ZU1hcFtpc107XG4gICAgaWYgKHRlbXBsYXRlICYmIGVsZW1lbnRIYXNCdWlsdENzcyh0ZW1wbGF0ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlICYmICFBcHBseVNoaW1VdGlscy50ZW1wbGF0ZUlzVmFsaWQodGVtcGxhdGUpKSB7XG4gICAgICAvLyBvbmx5IHJldmFsaWRhdGUgdGVtcGxhdGUgb25jZVxuICAgICAgaWYgKCFBcHBseVNoaW1VdGlscy50ZW1wbGF0ZUlzVmFsaWRhdGluZyh0ZW1wbGF0ZSkpIHtcbiAgICAgICAgdGhpcy5wcmVwYXJlVGVtcGxhdGUodGVtcGxhdGUsIGlzKTtcbiAgICAgICAgQXBwbHlTaGltVXRpbHMuc3RhcnRWYWxpZGF0aW5nVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgfVxuICAgICAgLy8gdXBkYXRlIHRoaXMgZWxlbWVudCBpbnN0YW5jZVxuICAgICAgbGV0IHJvb3QgPSBlbGVtZW50LnNoYWRvd1Jvb3Q7XG4gICAgICBpZiAocm9vdCkge1xuICAgICAgICBsZXQgc3R5bGUgPSAvKiogQHR5cGUge0hUTUxTdHlsZUVsZW1lbnR9ICovKHJvb3QucXVlcnlTZWxlY3Rvcignc3R5bGUnKSk7XG4gICAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICAgIC8vIHJldXNlIHRoZSB0ZW1wbGF0ZSdzIHN0eWxlIGFzdCwgaXQgaGFzIGFsbCB0aGUgb3JpZ2luYWwgY3NzIHRleHRcbiAgICAgICAgICBzdHlsZVsnX19jc3NSdWxlcyddID0gdGVtcGxhdGVbJ19zdHlsZUFzdCddO1xuICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gdG9Dc3NUZXh0KHRlbXBsYXRlWydfc3R5bGVBc3QnXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzXG4gICAqL1xuICBzdHlsZURvY3VtZW50KHByb3BlcnRpZXMpIHtcbiAgICB0aGlzLmVuc3VyZSgpO1xuICAgIHRoaXMuc3R5bGVTdWJ0cmVlKGRvY3VtZW50LmJvZHksIHByb3BlcnRpZXMpO1xuICB9XG59XG5cbmlmICghd2luZG93LlNoYWR5Q1NTIHx8ICF3aW5kb3cuU2hhZHlDU1MuU2NvcGluZ1NoaW0pIHtcbiAgY29uc3QgYXBwbHlTaGltSW50ZXJmYWNlID0gbmV3IEFwcGx5U2hpbUludGVyZmFjZSgpO1xuICBsZXQgQ3VzdG9tU3R5bGVJbnRlcmZhY2UgPSB3aW5kb3cuU2hhZHlDU1MgJiYgd2luZG93LlNoYWR5Q1NTLkN1c3RvbVN0eWxlSW50ZXJmYWNlO1xuXG4gIC8qKiBAc3VwcHJlc3Mge2R1cGxpY2F0ZX0gKi9cbiAgd2luZG93LlNoYWR5Q1NTID0ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBlbGVtZW50RXh0ZW5kc1xuICAgICAqL1xuICAgIHByZXBhcmVUZW1wbGF0ZSh0ZW1wbGF0ZSwgZWxlbWVudE5hbWUsIGVsZW1lbnRFeHRlbmRzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIGFwcGx5U2hpbUludGVyZmFjZS5mbHVzaEN1c3RvbVN0eWxlcygpO1xuICAgICAgYXBwbHlTaGltSW50ZXJmYWNlLnByZXBhcmVUZW1wbGF0ZSh0ZW1wbGF0ZSwgZWxlbWVudE5hbWUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gZWxlbWVudEV4dGVuZHNcbiAgICAgKi9cbiAgICBwcmVwYXJlVGVtcGxhdGVTdHlsZXModGVtcGxhdGUsIGVsZW1lbnROYW1lLCBlbGVtZW50RXh0ZW5kcykge1xuICAgICAgd2luZG93LlNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZSh0ZW1wbGF0ZSwgZWxlbWVudE5hbWUsIGVsZW1lbnRFeHRlbmRzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWVcbiAgICAgKi9cbiAgICBwcmVwYXJlVGVtcGxhdGVEb20odGVtcGxhdGUsIGVsZW1lbnROYW1lKSB7fSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBzdHlsZVN1YnRyZWUoZWxlbWVudCwgcHJvcGVydGllcykge1xuICAgICAgYXBwbHlTaGltSW50ZXJmYWNlLmZsdXNoQ3VzdG9tU3R5bGVzKCk7XG4gICAgICBhcHBseVNoaW1JbnRlcmZhY2Uuc3R5bGVTdWJ0cmVlKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgICAqL1xuICAgIHN0eWxlRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBhcHBseVNoaW1JbnRlcmZhY2UuZmx1c2hDdXN0b21TdHlsZXMoKTtcbiAgICAgIGFwcGx5U2hpbUludGVyZmFjZS5zdHlsZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gcHJvcGVydGllc1xuICAgICAqL1xuICAgIHN0eWxlRG9jdW1lbnQocHJvcGVydGllcykge1xuICAgICAgYXBwbHlTaGltSW50ZXJmYWNlLmZsdXNoQ3VzdG9tU3R5bGVzKCk7XG4gICAgICBhcHBseVNoaW1JbnRlcmZhY2Uuc3R5bGVEb2N1bWVudChwcm9wZXJ0aWVzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuICAgIGdldENvbXB1dGVkU3R5bGVWYWx1ZShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGVWYWx1ZShlbGVtZW50LCBwcm9wZXJ0eSk7XG4gICAgfSxcblxuICAgIGZsdXNoQ3VzdG9tU3R5bGVzKCkge1xuICAgICAgYXBwbHlTaGltSW50ZXJmYWNlLmZsdXNoQ3VzdG9tU3R5bGVzKCk7XG4gICAgfSxcblxuICAgIG5hdGl2ZUNzczogbmF0aXZlQ3NzVmFyaWFibGVzLFxuICAgIG5hdGl2ZVNoYWRvdzogbmF0aXZlU2hhZG93LFxuICAgIGNzc0J1aWxkOiBjc3NCdWlsZCxcbiAgICBkaXNhYmxlUnVudGltZTogZGlzYWJsZVJ1bnRpbWUsXG4gIH07XG5cbiAgaWYgKEN1c3RvbVN0eWxlSW50ZXJmYWNlKSB7XG4gICAgd2luZG93LlNoYWR5Q1NTLkN1c3RvbVN0eWxlSW50ZXJmYWNlID0gQ3VzdG9tU3R5bGVJbnRlcmZhY2U7XG4gIH1cbn1cblxud2luZG93LlNoYWR5Q1NTLkFwcGx5U2hpbSA9IGFwcGx5U2hpbTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4vKipcbiAqIFdoZW4gdXNpbmcgQ2xvc3VyZSBDb21waWxlciwgSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eShwcm9wZXJ0eSwgb2JqZWN0KSBpcyByZXBsYWNlZCBieSB0aGUgbXVuZ2VkIG5hbWUgZm9yIG9iamVjdFtwcm9wZXJ0eV1cbiAqIFdlIGNhbm5vdCBhbGlhcyB0aGlzIGZ1bmN0aW9uLCBzbyB3ZSBoYXZlIHRvIHVzZSBhIHNtYWxsIHNoaW0gdGhhdCBoYXMgdGhlIHNhbWUgYmVoYXZpb3Igd2hlbiBub3QgY29tcGlsaW5nLlxuICpcbiAqIEBwYXJhbSB7P30gcHJvcCBQcm9wZXJ0eSBuYW1lXG4gKiBAcGFyYW0geyp9IG9iaiBSZWZlcmVuY2Ugb2JqZWN0XG4gKiBAcmV0dXJuIHtzdHJpbmd9IFBvdGVudGlhbGx5IHJlbmFtZWQgcHJvcGVydHkgbmFtZVxuICovXG53aW5kb3cuSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSA9IGZ1bmN0aW9uKHByb3AsIG9iaikge1xuICByZXR1cm4gcHJvcDtcbn07XG4vKiBlc2xpbnQtZW5hYmxlICovXG5cbmV4cG9ydCB7fTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbmxldCBDU1NfVVJMX1JYID0gLyh1cmxcXCgpKFteKV0qKShcXCkpL2c7XG5sZXQgQUJTX1VSTCA9IC8oXlxcL1teXFwvXSl8KF4jKXwoXltcXHctXFxkXSo6KS87XG5sZXQgd29ya2luZ1VSTDtcbmxldCByZXNvbHZlRG9jO1xuLyoqXG4gKiBSZXNvbHZlcyB0aGUgZ2l2ZW4gVVJMIGFnYWluc3QgdGhlIHByb3ZpZGVkIGBiYXNlVXJpJy5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBwZXJmb3JtcyBubyByZXNvbHV0aW9uIGZvciBVUkxzIHRoYXQgc3RhcnRcbiAqIHdpdGggYC9gIChhYnNvbHV0ZSBVUkxzKSBvciBgI2AgKGhhc2ggaWRlbnRpZmllcnMpLiAgRm9yIGdlbmVyYWwgcHVycG9zZVxuICogVVJMIHJlc29sdXRpb24sIHVzZSBgd2luZG93LlVSTGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBJbnB1dCBVUkwgdG8gcmVzb2x2ZVxuICogQHBhcmFtIHs/c3RyaW5nPX0gYmFzZVVSSSBCYXNlIFVSSSB0byByZXNvbHZlIHRoZSBVUkwgYWdhaW5zdFxuICogQHJldHVybiB7c3RyaW5nfSByZXNvbHZlZCBVUkxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVVcmwodXJsLCBiYXNlVVJJKSB7XG4gIGlmICh1cmwgJiYgQUJTX1VSTC50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIGlmICh1cmwgPT09ICcvLycpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIC8vIExhenkgZmVhdHVyZSBkZXRlY3Rpb24uXG4gIGlmICh3b3JraW5nVVJMID09PSB1bmRlZmluZWQpIHtcbiAgICB3b3JraW5nVVJMID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHUgPSBuZXcgVVJMKCdiJywgJ2h0dHA6Ly9hJyk7XG4gICAgICB1LnBhdGhuYW1lID0gJ2MlMjBkJztcbiAgICAgIHdvcmtpbmdVUkwgPSAodS5ocmVmID09PSAnaHR0cDovL2EvYyUyMGQnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBzaWxlbnRseSBmYWlsXG4gICAgfVxuICB9XG4gIGlmICghYmFzZVVSSSkge1xuICAgIGJhc2VVUkkgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB9XG4gIGlmICh3b3JraW5nVVJMKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAobmV3IFVSTCh1cmwsIGJhc2VVUkkpKS5ocmVmO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIEJhZCB1cmwgb3IgYmFzZVVSSSBzdHJ1Y3R1cmUuIERvIG5vdCBhdHRlbXB0IHRvIHJlc29sdmUuXG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgfVxuICAvLyBGYWxsYmFjayB0byBjcmVhdGluZyBhbiBhbmNob3IgaW50byBhIGRpc2Nvbm5lY3RlZCBkb2N1bWVudC5cbiAgaWYgKCFyZXNvbHZlRG9jKSB7XG4gICAgcmVzb2x2ZURvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgndGVtcCcpO1xuICAgIHJlc29sdmVEb2MuYmFzZSA9IHJlc29sdmVEb2MuY3JlYXRlRWxlbWVudCgnYmFzZScpO1xuICAgIHJlc29sdmVEb2MuaGVhZC5hcHBlbmRDaGlsZChyZXNvbHZlRG9jLmJhc2UpO1xuICAgIHJlc29sdmVEb2MuYW5jaG9yID0gcmVzb2x2ZURvYy5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgcmVzb2x2ZURvYy5ib2R5LmFwcGVuZENoaWxkKHJlc29sdmVEb2MuYW5jaG9yKTtcbiAgfVxuICByZXNvbHZlRG9jLmJhc2UuaHJlZiA9IGJhc2VVUkk7XG4gIHJlc29sdmVEb2MuYW5jaG9yLmhyZWYgPSB1cmw7XG4gIHJldHVybiByZXNvbHZlRG9jLmFuY2hvci5ocmVmIHx8IHVybDtcblxufVxuXG4vKipcbiAqIFJlc29sdmVzIGFueSByZWxhdGl2ZSBVUkwncyBpbiB0aGUgZ2l2ZW4gQ1NTIHRleHQgYWdhaW5zdCB0aGUgcHJvdmlkZWRcbiAqIGBvd25lckRvY3VtZW50YCdzIGBiYXNlVVJJYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dCBDU1MgdGV4dCB0byBwcm9jZXNzXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSSSBCYXNlIFVSSSB0byByZXNvbHZlIHRoZSBVUkwgYWdhaW5zdFxuICogQHJldHVybiB7c3RyaW5nfSBQcm9jZXNzZWQgQ1NTIHRleHQgd2l0aCByZXNvbHZlZCBVUkwnc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUNzcyhjc3NUZXh0LCBiYXNlVVJJKSB7XG4gIHJldHVybiBjc3NUZXh0LnJlcGxhY2UoQ1NTX1VSTF9SWCwgZnVuY3Rpb24obSwgcHJlLCB1cmwsIHBvc3QpIHtcbiAgICByZXR1cm4gcHJlICsgJ1xcJycgK1xuICAgICAgcmVzb2x2ZVVybCh1cmwucmVwbGFjZSgvW1wiJ10vZywgJycpLCBiYXNlVVJJKSArXG4gICAgICAnXFwnJyArIHBvc3Q7XG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIGZyb20gYSBnaXZlbiBgdXJsYC4gVGhlIHBhdGggaW5jbHVkZXMgdGhlIHRyYWlsaW5nXG4gKiBgL2AgZnJvbSB0aGUgdXJsLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSW5wdXQgVVJMIHRvIHRyYW5zZm9ybVxuICogQHJldHVybiB7c3RyaW5nfSByZXNvbHZlZCBwYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXRoRnJvbVVybCh1cmwpIHtcbiAgcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgdXJsLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbn1cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5pbXBvcnQgeyBwYXRoRnJvbVVybCB9IGZyb20gJy4vcmVzb2x2ZS11cmwuanMnO1xuZXhwb3J0IGNvbnN0IHVzZVNoYWRvdyA9ICEod2luZG93LlNoYWR5RE9NKSB8fCAhKHdpbmRvdy5TaGFkeURPTS5pblVzZSk7XG5leHBvcnQgY29uc3QgdXNlTmF0aXZlQ1NTUHJvcGVydGllcyA9IEJvb2xlYW4oIXdpbmRvdy5TaGFkeUNTUyB8fCB3aW5kb3cuU2hhZHlDU1MubmF0aXZlQ3NzKTtcbmV4cG9ydCBjb25zdCB1c2VOYXRpdmVDdXN0b21FbGVtZW50cyA9ICEod2luZG93LmN1c3RvbUVsZW1lbnRzLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2spO1xuZXhwb3J0IGNvbnN0IHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyA9IHVzZVNoYWRvdyAmJlxuICAgICgnYWRvcHRlZFN0eWxlU2hlZXRzJyBpbiBEb2N1bWVudC5wcm90b3R5cGUpICYmXG4gICAgKCdyZXBsYWNlU3luYycgaW4gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGUpICYmXG4gICAgLy8gU2luY2Ugc3BlYyBtYXkgY2hhbmdlLCBmZWF0dXJlIGRldGVjdCBleGFjdCBBUEkgd2UgbmVlZFxuICAgICgoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBzaGVldCA9IG5ldyBDU1NTdHlsZVNoZWV0KCk7XG4gICAgICAgIHNoZWV0LnJlcGxhY2VTeW5jKCcnKTtcbiAgICAgICAgY29uc3QgaG9zdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBob3N0LmF0dGFjaFNoYWRvdyh7bW9kZTogJ29wZW4nfSk7XG4gICAgICAgIGhvc3Quc2hhZG93Um9vdC5hZG9wdGVkU3R5bGVTaGVldHMgPSBbc2hlZXRdO1xuICAgICAgICByZXR1cm4gKGhvc3Quc2hhZG93Um9vdC5hZG9wdGVkU3R5bGVTaGVldHNbMF0gPT09IHNoZWV0KTtcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSkoKTtcblxuLyoqXG4gKiBHbG9iYWxseSBzZXR0YWJsZSBwcm9wZXJ0eSB0aGF0IGlzIGF1dG9tYXRpY2FsbHkgYXNzaWduZWQgdG9cbiAqIGBFbGVtZW50TWl4aW5gIGluc3RhbmNlcywgdXNlZnVsIGZvciBiaW5kaW5nIGluIHRlbXBsYXRlcyB0b1xuICogbWFrZSBVUkwncyByZWxhdGl2ZSB0byBhbiBhcHBsaWNhdGlvbidzIHJvb3QuICBEZWZhdWx0cyB0byB0aGUgbWFpblxuICogZG9jdW1lbnQgVVJMLCBidXQgY2FuIGJlIG92ZXJyaWRkZW4gYnkgdXNlcnMuICBJdCBtYXkgYmUgdXNlZnVsIHRvIHNldFxuICogYHJvb3RQYXRoYCB0byBwcm92aWRlIGEgc3RhYmxlIGFwcGxpY2F0aW9uIG1vdW50IHBhdGggd2hlblxuICogdXNpbmcgY2xpZW50IHNpZGUgcm91dGluZy5cbiAqL1xuZXhwb3J0IGxldCByb290UGF0aCA9IHdpbmRvdy5Qb2x5bWVyICYmIHdpbmRvdy5Qb2x5bWVyLnJvb3RQYXRoIHx8XG4gIHBhdGhGcm9tVXJsKGRvY3VtZW50LmJhc2VVUkkgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4vKipcbiAqIFNldHMgdGhlIGdsb2JhbCByb290UGF0aCBwcm9wZXJ0eSB1c2VkIGJ5IGBFbGVtZW50TWl4aW5gIGFuZFxuICogYXZhaWxhYmxlIHZpYSBgcm9vdFBhdGhgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBuZXcgcm9vdCBwYXRoXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3Qgc2V0Um9vdFBhdGggPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJvb3RQYXRoID0gcGF0aDtcbn07XG5cbi8qKlxuICogQSBnbG9iYWwgY2FsbGJhY2sgdXNlZCB0byBzYW5pdGl6ZSBhbnkgdmFsdWUgYmVmb3JlIGluc2VydGluZyBpdCBpbnRvIHRoZSBET00uXG4gKiBUaGUgY2FsbGJhY2sgc2lnbmF0dXJlIGlzOlxuICpcbiAqICBmdW5jdGlvbiBzYW5pdGl6ZURPTVZhbHVlKHZhbHVlLCBuYW1lLCB0eXBlLCBub2RlKSB7IC4uLiB9XG4gKlxuICogV2hlcmU6XG4gKlxuICogYHZhbHVlYCBpcyB0aGUgdmFsdWUgdG8gc2FuaXRpemUuXG4gKiBgbmFtZWAgaXMgdGhlIG5hbWUgb2YgYW4gYXR0cmlidXRlIG9yIHByb3BlcnR5IChmb3IgZXhhbXBsZSwgaHJlZikuXG4gKiBgdHlwZWAgaW5kaWNhdGVzIHdoZXJlIHRoZSB2YWx1ZSBpcyBiZWluZyBpbnNlcnRlZDogb25lIG9mIHByb3BlcnR5LCBhdHRyaWJ1dGUsIG9yIHRleHQuXG4gKiBgbm9kZWAgaXMgdGhlIG5vZGUgd2hlcmUgdGhlIHZhbHVlIGlzIGJlaW5nIGluc2VydGVkLlxuICpcbiAqIEB0eXBlIHsoZnVuY3Rpb24oKixzdHJpbmcsc3RyaW5nLD9Ob2RlKToqKXx1bmRlZmluZWR9XG4gKi9cbmV4cG9ydCBsZXQgc2FuaXRpemVET01WYWx1ZSA9XG4gIHdpbmRvdy5Qb2x5bWVyICYmIHdpbmRvdy5Qb2x5bWVyLnNhbml0aXplRE9NVmFsdWUgfHwgdW5kZWZpbmVkO1xuXG4vKipcbiAqIFNldHMgdGhlIGdsb2JhbCBzYW5pdGl6ZURPTVZhbHVlIGF2YWlsYWJsZSB2aWEgdGhpcyBtb2R1bGUncyBleHBvcnRlZFxuICogYHNhbml0aXplRE9NVmFsdWVgIHZhcmlhYmxlLlxuICpcbiAqIEBwYXJhbSB7KGZ1bmN0aW9uKCosc3RyaW5nLHN0cmluZyw/Tm9kZSk6Kil8dW5kZWZpbmVkfSBuZXdTYW5pdGl6ZURPTVZhbHVlIHRoZSBnbG9iYWwgc2FuaXRpemVET01WYWx1ZSBjYWxsYmFja1xuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFNhbml0aXplRE9NVmFsdWUgPSBmdW5jdGlvbihuZXdTYW5pdGl6ZURPTVZhbHVlKSB7XG4gIHNhbml0aXplRE9NVmFsdWUgPSBuZXdTYW5pdGl6ZURPTVZhbHVlO1xufTtcblxuLyoqXG4gKiBHZXRzIHNhbml0aXplRE9NVmFsdWUsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkb24ndCB3ZWxsIHN1cHBvcnQgYGV4cG9ydCBsZXRgLlxuICpcbiAqIEByZXR1cm4geyhmdW5jdGlvbigqLHN0cmluZyxzdHJpbmcsP05vZGUpOiopfHVuZGVmaW5lZH0gc2FuaXRpemVET01WYWx1ZVxuICovXG5leHBvcnQgY29uc3QgZ2V0U2FuaXRpemVET01WYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gc2FuaXRpemVET01WYWx1ZTtcbn07XG5cbi8qKlxuICogR2xvYmFsbHkgc2V0dGFibGUgcHJvcGVydHkgdG8gbWFrZSBQb2x5bWVyIEdlc3R1cmVzIHVzZSBwYXNzaXZlIFRvdWNoRXZlbnQgbGlzdGVuZXJzIHdoZW4gcmVjb2duaXppbmcgZ2VzdHVyZXMuXG4gKiBXaGVuIHNldCB0byBgdHJ1ZWAsIGdlc3R1cmVzIG1hZGUgZnJvbSB0b3VjaCB3aWxsIG5vdCBiZSBhYmxlIHRvIHByZXZlbnQgc2Nyb2xsaW5nLCBhbGxvd2luZyBmb3Igc21vb3RoZXJcbiAqIHNjcm9sbGluZyBwZXJmb3JtYW5jZS5cbiAqIERlZmF1bHRzIHRvIGBmYWxzZWAgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICovXG5leHBvcnQgbGV0IHBhc3NpdmVUb3VjaEdlc3R1cmVzID1cbiAgd2luZG93LlBvbHltZXIgJiYgd2luZG93LlBvbHltZXIuc2V0UGFzc2l2ZVRvdWNoR2VzdHVyZXMgfHwgZmFsc2U7XG5cbi8qKlxuICogU2V0cyBgcGFzc2l2ZVRvdWNoR2VzdHVyZXNgIGdsb2JhbGx5IGZvciBhbGwgZWxlbWVudHMgdXNpbmcgUG9seW1lciBHZXN0dXJlcy5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVzZVBhc3NpdmUgZW5hYmxlIG9yIGRpc2FibGUgcGFzc2l2ZSB0b3VjaCBnZXN0dXJlcyBnbG9iYWxseVxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFBhc3NpdmVUb3VjaEdlc3R1cmVzID0gZnVuY3Rpb24odXNlUGFzc2l2ZSkge1xuICBwYXNzaXZlVG91Y2hHZXN0dXJlcyA9IHVzZVBhc3NpdmU7XG59O1xuXG4vKipcbiAqIFNldHRpbmcgdG8gZW5zdXJlIFBvbHltZXIgdGVtcGxhdGUgZXZhbHVhdGlvbiBvbmx5IG9jY3VycyBiYXNlZCBvbiB0ZW1wYXRlc1xuICogZGVmaW5lZCBpbiB0cnVzdGVkIHNjcmlwdC4gIFdoZW4gdHJ1ZSwgYDxkb20tbW9kdWxlPmAgcmUtcmVnaXN0cmF0aW9uIGlzXG4gKiBkaXNhbGxvd2VkLCBgPGRvbS1iaW5kPmAgaXMgZGlzYWJsZWQsIGFuZCBgPGRvbS1pZj5gL2A8ZG9tLXJlcGVhdD5gXG4gKiB0ZW1wbGF0ZXMgd2lsbCBvbmx5IGV2YWx1YXRlIGluIHRoZSBjb250ZXh0IG9mIGEgdHJ1c3RlZCBlbGVtZW50IHRlbXBsYXRlLlxuICovXG5leHBvcnQgbGV0IHN0cmljdFRlbXBsYXRlUG9saWN5ID1cbiAgd2luZG93LlBvbHltZXIgJiYgd2luZG93LlBvbHltZXIuc3RyaWN0VGVtcGxhdGVQb2xpY3kgfHwgZmFsc2U7XG5cbi8qKlxuICogU2V0cyBgc3RyaWN0VGVtcGxhdGVQb2xpY3lgIGdsb2JhbGx5IGZvciBhbGwgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVzZVN0cmljdFBvbGljeSBlbmFibGUgb3IgZGlzYWJsZSBzdHJpY3QgdGVtcGxhdGUgcG9saWN5XG4gKiAgIGdsb2JhbGx5XG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3Qgc2V0U3RyaWN0VGVtcGxhdGVQb2xpY3kgPSBmdW5jdGlvbih1c2VTdHJpY3RQb2xpY3kpIHtcbiAgc3RyaWN0VGVtcGxhdGVQb2xpY3kgPSB1c2VTdHJpY3RQb2xpY3k7XG59O1xuXG4vKipcbiAqIFNldHRpbmcgdG8gZW5hYmxlIGRvbS1tb2R1bGUgbG9va3VwIGZyb20gUG9seW1lci5FbGVtZW50LiAgQnkgZGVmYXVsdCxcbiAqIHRlbXBsYXRlcyBtdXN0IGJlIGRlZmluZWQgaW4gc2NyaXB0IHVzaW5nIHRoZSBgc3RhdGljIGdldCB0ZW1wbGF0ZSgpYFxuICogZ2V0dGVyIGFuZCB0aGUgYGh0bWxgIHRhZyBmdW5jdGlvbi4gIFRvIGVuYWJsZSBsZWdhY3kgbG9hZGluZyBvZiB0ZW1wbGF0ZXNcbiAqIHZpYSBkb20tbW9kdWxlLCBzZXQgdGhpcyBmbGFnIHRvIHRydWUuXG4gKi9cbmV4cG9ydCBsZXQgYWxsb3dUZW1wbGF0ZUZyb21Eb21Nb2R1bGUgPVxuICB3aW5kb3cuUG9seW1lciAmJiB3aW5kb3cuUG9seW1lci5hbGxvd1RlbXBsYXRlRnJvbURvbU1vZHVsZSB8fCBmYWxzZTtcblxuLyoqXG4gKiBTZXRzIGBsb29rdXBUZW1wbGF0ZUZyb21Eb21Nb2R1bGVgIGdsb2JhbGx5IGZvciBhbGwgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFsbG93RG9tTW9kdWxlIGVuYWJsZSBvciBkaXNhYmxlIHRlbXBsYXRlIGxvb2t1cFxuICogICBnbG9iYWxseVxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldEFsbG93VGVtcGxhdGVGcm9tRG9tTW9kdWxlID0gZnVuY3Rpb24oYWxsb3dEb21Nb2R1bGUpIHtcbiAgYWxsb3dUZW1wbGF0ZUZyb21Eb21Nb2R1bGUgPSBhbGxvd0RvbU1vZHVsZTtcbn07XG5cbi8qKlxuICogU2V0dGluZyB0byBza2lwIHByb2Nlc3Npbmcgc3R5bGUgaW5jbHVkZXMgYW5kIHJlLXdyaXRpbmcgdXJscyBpbiBjc3Mgc3R5bGVzLlxuICogTm9ybWFsbHkgXCJpbmNsdWRlZFwiIHN0eWxlcyBhcmUgcHVsbGVkIGludG8gdGhlIGVsZW1lbnQgYW5kIGFsbCB1cmxzIGluIHN0eWxlc1xuICogYXJlIHJlLXdyaXR0ZW4gdG8gYmUgcmVsYXRpdmUgdG8gdGhlIGNvbnRhaW5pbmcgc2NyaXB0IHVybC5cbiAqIElmIG5vIGluY2x1ZGVzIG9yIHJlbGF0aXZlIHVybHMgYXJlIHVzZWQgaW4gc3R5bGVzLCB0aGVzZSBzdGVwcyBjYW4gYmVcbiAqIHNraXBwZWQgYXMgYW4gb3B0aW1pemF0aW9uLlxuICovXG5leHBvcnQgbGV0IGxlZ2FjeU9wdGltaXphdGlvbnMgPVxuICB3aW5kb3cuUG9seW1lciAmJiB3aW5kb3cuUG9seW1lci5sZWdhY3lPcHRpbWl6YXRpb25zIHx8IGZhbHNlO1xuXG4vKipcbiAqIFNldHMgYGxlZ2FjeU9wdGltaXphdGlvbnNgIGdsb2JhbGx5IGZvciBhbGwgZWxlbWVudHMgdG8gZW5hYmxlIG9wdGltaXphdGlvbnNcbiAqIHdoZW4gb25seSBsZWdhY3kgYmFzZWQgZWxlbWVudHMgYXJlIHVzZWQuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSB1c2VMZWdhY3lPcHRpbWl6YXRpb25zIGVuYWJsZSBvciBkaXNhYmxlIGxlZ2FjeSBvcHRpbWl6YXRpb25zXG4gKiBpbmNsdWRlcyBhbmQgdXJsIHJld3JpdGluZ1xuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldExlZ2FjeU9wdGltaXphdGlvbnMgPSBmdW5jdGlvbih1c2VMZWdhY3lPcHRpbWl6YXRpb25zKSB7XG4gIGxlZ2FjeU9wdGltaXphdGlvbnMgPSB1c2VMZWdhY3lPcHRpbWl6YXRpb25zO1xufTtcblxuLyoqXG4gKiBTZXR0aW5nIHRvIGFkZCB3YXJuaW5ncyB1c2VmdWwgd2hlbiBtaWdyYXRpbmcgZnJvbSBQb2x5bWVyIDEueCB0byAyLnguXG4gKi9cbmV4cG9ydCBsZXQgbGVnYWN5V2FybmluZ3MgPVxuICB3aW5kb3cuUG9seW1lciAmJiB3aW5kb3cuUG9seW1lci5sZWdhY3lXYXJuaW5ncyB8fCBmYWxzZTtcblxuLyoqXG4gKiBTZXRzIGBsZWdhY3lXYXJuaW5nc2AgZ2xvYmFsbHkgZm9yIGFsbCBlbGVtZW50cyB0byBtaWdyYXRpb24gd2FybmluZ3MuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSB1c2VMZWdhY3lXYXJuaW5ncyBlbmFibGUgb3IgZGlzYWJsZSB3YXJuaW5nc1xuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldExlZ2FjeVdhcm5pbmdzID0gZnVuY3Rpb24odXNlTGVnYWN5V2FybmluZ3MpIHtcbiAgbGVnYWN5V2FybmluZ3MgPSB1c2VMZWdhY3lXYXJuaW5ncztcbn07XG5cbi8qKlxuICogU2V0dGluZyB0byBwZXJmb3JtIGluaXRpYWwgcmVuZGVyaW5nIHN5bmNocm9ub3VzbHkgd2hlbiBydW5uaW5nIHVuZGVyIFNoYWR5RE9NLlxuICogVGhpcyBtYXRjaGVzIHRoZSBiZWhhdmlvciBvZiBQb2x5bWVyIDEuXG4gKi9cbmV4cG9ydCBsZXQgc3luY0luaXRpYWxSZW5kZXIgPVxuICB3aW5kb3cuUG9seW1lciAmJiB3aW5kb3cuUG9seW1lci5zeW5jSW5pdGlhbFJlbmRlciB8fCBmYWxzZTtcblxuLyoqXG4gKiBTZXRzIGBzeW5jSW5pdGlhbFJlbmRlcmAgZ2xvYmFsbHkgZm9yIGFsbCBlbGVtZW50cyB0byBlbmFibGUgc3luY2hyb25vdXNcbiAqIGluaXRpYWwgcmVuZGVyaW5nLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlU3luY0luaXRpYWxSZW5kZXIgZW5hYmxlIG9yIGRpc2FibGUgc3luY2hyb25vdXMgaW5pdGlhbFxuICogcmVuZGVyaW5nIGdsb2JhbGx5LlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFN5bmNJbml0aWFsUmVuZGVyID0gZnVuY3Rpb24odXNlU3luY0luaXRpYWxSZW5kZXIpIHtcbiAgc3luY0luaXRpYWxSZW5kZXIgPSB1c2VTeW5jSW5pdGlhbFJlbmRlcjtcbn07XG5cbi8qKlxuICogU2V0dGluZyB0byByZXRhaW4gdGhlIGxlZ2FjeSBQb2x5bWVyIDEgYmVoYXZpb3IgZm9yIG11bHRpLXByb3BlcnR5XG4gKiBvYnNlcnZlcnMgYXJvdW5kIHVuZGVmaW5lZCB2YWx1ZXMuIE9ic2VydmVycyBhbmQgY29tcHV0ZWQgcHJvcGVydHkgbWV0aG9kc1xuICogYXJlIG5vdCBjYWxsZWQgdW50aWwgbm8gYXJndW1lbnQgaXMgdW5kZWZpbmVkLlxuICovXG5leHBvcnQgbGV0IGxlZ2FjeVVuZGVmaW5lZCA9XG4gIHdpbmRvdy5Qb2x5bWVyICYmIHdpbmRvdy5Qb2x5bWVyLmxlZ2FjeVVuZGVmaW5lZCB8fCBmYWxzZTtcblxuLyoqXG4gKiBTZXRzIGBsZWdhY3lVbmRlZmluZWRgIGdsb2JhbGx5IGZvciBhbGwgZWxlbWVudHMgdG8gZW5hYmxlIGxlZ2FjeVxuICogbXVsdGktcHJvcGVydHkgYmVoYXZpb3IgZm9yIHVuZGVmaW5lZCB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSB1c2VMZWdhY3lVbmRlZmluZWQgZW5hYmxlIG9yIGRpc2FibGUgbGVnYWN5XG4gKiBtdWx0aS1wcm9wZXJ0eSBiZWhhdmlvciBmb3IgdW5kZWZpbmVkLlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldExlZ2FjeVVuZGVmaW5lZCA9IGZ1bmN0aW9uKHVzZUxlZ2FjeVVuZGVmaW5lZCkge1xuICBsZWdhY3lVbmRlZmluZWQgPSB1c2VMZWdhY3lVbmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIFNldHRpbmcgdG8gZW5zdXJlIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGNvbXB1dGVkIGluIG9yZGVyIHRvIGVuc3VyZVxuICogcmUtY29tcHV0YXRpb24gbmV2ZXIgb2NjdXJzIGluIGEgZ2l2ZW4gdHVybi5cbiAqL1xuZXhwb3J0IGxldCBvcmRlcmVkQ29tcHV0ZWQgPVxuICB3aW5kb3cuUG9seW1lciAmJiB3aW5kb3cuUG9seW1lci5vcmRlcmVkQ29tcHV0ZWQgfHwgZmFsc2U7XG5cbi8qKlxuICogU2V0cyBgb3JkZXJlZENvbXB1dGVkYCBnbG9iYWxseSBmb3IgYWxsIGVsZW1lbnRzIHRvIGVuYWJsZSBvcmRlcmVkIGNvbXB1dGVkXG4gKiBwcm9wZXJ0eSBjb21wdXRhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVzZU9yZGVyZWRDb21wdXRlZCBlbmFibGUgb3IgZGlzYWJsZSBvcmRlcmVkIGNvbXB1dGVkIGVmZmVjdHNcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBzZXRPcmRlcmVkQ29tcHV0ZWQgPSBmdW5jdGlvbih1c2VPcmRlcmVkQ29tcHV0ZWQpIHtcbiAgb3JkZXJlZENvbXB1dGVkID0gdXNlT3JkZXJlZENvbXB1dGVkO1xufTtcblxuLyoqXG4gKiBTZXR0aW5nIHRvIGNhbmNlbCBzeW50aGV0aWMgY2xpY2sgZXZlbnRzIGZpcmVkIGJ5IG9sZGVyIG1vYmlsZSBicm93c2Vycy4gTW9kZXJuIGJyb3dzZXJzXG4gKiBubyBsb25nZXIgZmlyZSBzeW50aGV0aWMgY2xpY2sgZXZlbnRzLCBhbmQgdGhlIGNhbmNlbGxhdGlvbiBiZWhhdmlvciBjYW4gaW50ZXJmZXJlXG4gKiB3aGVuIHByb2dyYW1tYXRpY2FsbHkgY2xpY2tpbmcgb24gZWxlbWVudHMuXG4gKi9cbmV4cG9ydCBsZXQgY2FuY2VsU3ludGhldGljQ2xpY2tFdmVudHMgPSB0cnVlO1xuXG4vKipcbiAqIFNldHMgYHNldENhbmNlbFN5bnRoZXRpY0V2ZW50c2AgZ2xvYmFsbHkgZm9yIGFsbCBlbGVtZW50cyB0byBjYW5jZWwgc3ludGhldGljIGNsaWNrIGV2ZW50cy5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVzZUNhbmNlbFN5bnRoZXRpY0NsaWNrRXZlbnRzIGVuYWJsZSBvciBkaXNhYmxlIGNhbmNlbGxpbmcgc3ludGhldGljXG4gKiBldmVudHNcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBzZXRDYW5jZWxTeW50aGV0aWNDbGlja0V2ZW50cyA9IGZ1bmN0aW9uKHVzZUNhbmNlbFN5bnRoZXRpY0NsaWNrRXZlbnRzKSB7XG4gIGNhbmNlbFN5bnRoZXRpY0NsaWNrRXZlbnRzID0gdXNlQ2FuY2VsU3ludGhldGljQ2xpY2tFdmVudHM7XG59O1xuXG4vKipcbiAqIFNldHRpbmcgdG8gcmVtb3ZlIG5lc3RlZCB0ZW1wbGF0ZXMgaW5zaWRlIGBkb20taWZgIGFuZCBgZG9tLXJlcGVhdGAgYXNcbiAqIHBhcnQgb2YgZWxlbWVudCB0ZW1wbGF0ZSBwYXJzaW5nLiAgVGhpcyBpcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiB0aGF0XG4gKiBlbGltaW5hdGVzIG1vc3Qgb2YgdGhlIHRheCBvZiBuZWVkaW5nIHR3byBlbGVtZW50cyBkdWUgdG8gdGhlIGxvc3Mgb2ZcbiAqIHR5cGUtZXh0ZW5kZWQgdGVtcGxhdGVzIGFzIGEgcmVzdWx0IG9mIHRoZSBWMSBzcGVjaWZpY2F0aW9uIGNoYW5nZXMuXG4gKi9cbmV4cG9ydCBsZXQgcmVtb3ZlTmVzdGVkVGVtcGxhdGVzID1cbiAgd2luZG93LlBvbHltZXIgJiYgd2luZG93LlBvbHltZXIucmVtb3ZlTmVzdGVkVGVtcGxhdGVzIHx8IGZhbHNlO1xuXG4vKipcbiAqIFNldHMgYHJlbW92ZU5lc3RlZFRlbXBsYXRlc2AgZ2xvYmFsbHksIHRvIGVsaW1pbmF0ZSBuZXN0ZWQgdGVtcGxhdGVzXG4gKiBpbnNpZGUgYGRvbS1pZmAgYW5kIGBkb20tcmVwZWF0YCBhcyBwYXJ0IG9mIHRlbXBsYXRlIHBhcnNpbmcuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSB1c2VSZW1vdmVOZXN0ZWRUZW1wbGF0ZXMgZW5hYmxlIG9yIGRpc2FibGUgcmVtb3ZpbmcgbmVzdGVkXG4gKiAgIHRlbXBsYXRlcyBkdXJpbmcgcGFyc2luZ1xuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFJlbW92ZU5lc3RlZFRlbXBsYXRlcyA9IGZ1bmN0aW9uKHVzZVJlbW92ZU5lc3RlZFRlbXBsYXRlcykge1xuICByZW1vdmVOZXN0ZWRUZW1wbGF0ZXMgPSB1c2VSZW1vdmVOZXN0ZWRUZW1wbGF0ZXM7XG59O1xuXG4vKipcbiAqIFNldHRpbmcgdG8gcGxhY2UgYGRvbS1pZmAgZWxlbWVudHMgaW4gYSBwZXJmb3JtYW5jZS1vcHRpbWl6ZWQgbW9kZSB0aGF0IHRha2VzXG4gKiBhZHZhbnRhZ2Ugb2YgbGlnaHRlci13ZWlnaHQgaG9zdCBydW50aW1lIHRlbXBsYXRlIHN0YW1waW5nIHRvIGVsaW1pbmF0ZSB0aGVcbiAqIG5lZWQgZm9yIGFuIGludGVybWVkaWF0ZSBUZW1wbGF0aXplciBgVGVtcGxhdGVJbnN0YW5jZWAgdG8gbWFuZ2UgdGhlIG5vZGVzXG4gKiBzdGFtcGVkIGJ5IGBkb20taWZgLiAgVW5kZXIgdGhpcyBzZXR0aW5nLCBhbnkgVGVtcGxhdGl6ZXItcHJvdmlkZWQgQVBJJ3NcbiAqIHN1Y2ggYXMgYG1vZGVsRm9yRWxlbWVudGAgd2lsbCBub3QgYmUgYXZhaWxhYmxlIGZvciBub2RlcyBzdGFtcGVkIGJ5XG4gKiBgZG9tLWlmYC5cbiAqL1xuZXhwb3J0IGxldCBmYXN0RG9tSWYgPSB3aW5kb3cuUG9seW1lciAmJiB3aW5kb3cuUG9seW1lci5mYXN0RG9tSWYgfHwgZmFsc2U7XG5cbi8qKlxuICogU2V0cyBgZmFzdERvbUlmYCBnbG9iYWxseSwgdG8gcHV0IGBkb20taWZgIGluIGEgcGVyZm9ybWFuY2Utb3B0aW1pemVkIG1vZGUuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSB1c2VGYXN0RG9tSWYgZW5hYmxlIG9yIGRpc2FibGUgYGRvbS1pZmAgZmFzdC1tb2RlXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3Qgc2V0RmFzdERvbUlmID0gZnVuY3Rpb24odXNlRmFzdERvbUlmKSB7XG4gIGZhc3REb21JZiA9IHVzZUZhc3REb21JZjtcbn07XG5cbi8qKlxuICogU2V0dGluZyB0byBkaXNhYmxlIGBkb20tY2hhbmdlYCBhbmQgYHJlbmRlcmVkLWl0ZW0tY291bnRgIGV2ZW50cyBmcm9tXG4gKiBgZG9tLWlmYCBhbmQgYGRvbS1yZXBlYXRgLiBVc2VycyBjYW4gb3B0IGJhY2sgaW50byBgZG9tLWNoYW5nZWAgZXZlbnRzIGJ5XG4gKiBzZXR0aW5nIHRoZSBgbm90aWZ5LWRvbS1jaGFuZ2VgIGF0dHJpYnV0ZSAoYG5vdGlmeURvbUNoYW5nZTogdHJ1ZWAgcHJvcGVydHkpXG4gKiB0byBgZG9tLWlmYC9gZG9uLXJlcGVhdGAgaW5zdGFuY2VzLlxuICovXG5leHBvcnQgbGV0IHN1cHByZXNzVGVtcGxhdGVOb3RpZmljYXRpb25zID1cbiAgd2luZG93LlBvbHltZXIgJiYgd2luZG93LlBvbHltZXIuc3VwcHJlc3NUZW1wbGF0ZU5vdGlmaWNhdGlvbnMgfHwgZmFsc2U7XG5cbi8qKlxuICogU2V0cyBgc3VwcHJlc3NUZW1wbGF0ZU5vdGlmaWNhdGlvbnNgIGdsb2JhbGx5LCB0byBkaXNhYmxlIGBkb20tY2hhbmdlYCBhbmRcbiAqIGByZW5kZXJlZC1pdGVtLWNvdW50YCBldmVudHMgZnJvbSBgZG9tLWlmYCBhbmQgYGRvbS1yZXBlYXRgLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc3VwcHJlc3MgZW5hYmxlIG9yIGRpc2FibGUgYHN1cHByZXNzVGVtcGxhdGVOb3RpZmljYXRpb25zYFxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFN1cHByZXNzVGVtcGxhdGVOb3RpZmljYXRpb25zID0gZnVuY3Rpb24oc3VwcHJlc3MpIHtcbiAgc3VwcHJlc3NUZW1wbGF0ZU5vdGlmaWNhdGlvbnMgPSBzdXBwcmVzcztcbn07XG5cbi8qKlxuICogU2V0dGluZyB0byBkaXNhYmxlIHVzZSBvZiBkeW5hbWljIGF0dHJpYnV0ZXMuIFRoaXMgaXMgYW4gb3B0aW1pemF0aW9uXG4gKiB0byBhdm9pZCBzZXR0aW5nIGBvYnNlcnZlZEF0dHJpYnV0ZXNgLiBJbnN0ZWFkIGF0dHJpYnV0ZXMgYXJlIHJlYWRcbiAqIG9uY2UgYXQgY3JlYXRlIHRpbWUgYW5kIHNldC9yZW1vdmVBdHRyaWJ1dGUgYXJlIHBhdGNoZWQuXG4gKi9cbmV4cG9ydCBsZXQgbGVnYWN5Tm9PYnNlcnZlZEF0dHJpYnV0ZXMgPVxuICB3aW5kb3cuUG9seW1lciAmJiB3aW5kb3cuUG9seW1lci5sZWdhY3lOb09ic2VydmVkQXR0cmlidXRlcyB8fCBmYWxzZTtcblxuLyoqXG4gKiBTZXRzIGBsZWdhY3lOb09ic2VydmVkQXR0cmlidXRlc2AgZ2xvYmFsbHksIHRvIGRpc2FibGUgYG9ic2VydmVkQXR0cmlidXRlc2AuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBub09ic2VydmVkQXR0cmlidXRlcyBlbmFibGUgb3IgZGlzYWJsZSBgbGVnYWN5Tm9PYnNlcnZlZEF0dHJpYnV0ZXNgXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3Qgc2V0TGVnYWN5Tm9PYnNlcnZlZEF0dHJpYnV0ZXMgPSBmdW5jdGlvbihub09ic2VydmVkQXR0cmlidXRlcykge1xuICBsZWdhY3lOb09ic2VydmVkQXR0cmlidXRlcyA9IG5vT2JzZXJ2ZWRBdHRyaWJ1dGVzO1xufTtcblxuLyoqXG4gKiBTZXR0aW5nIHRvIGVuYWJsZSB1c2Ugb2YgYGFkb3B0ZWRTdHlsZVNoZWV0c2AgZm9yIHNoYXJpbmcgc3R5bGUgc2hlZXRzXG4gKiBiZXR3ZWVuIGNvbXBvbmVudCBpbnN0YW5jZXMnIHNoYWRvdyByb290cywgaWYgdGhlIGFwcCB1c2VzIGJ1aWx0IFNoYWR5IENTU1xuICogc3R5bGVzLlxuICovXG5leHBvcnQgbGV0IHVzZUFkb3B0ZWRTdHlsZVNoZWV0c1dpdGhCdWlsdENTUyA9XG4gIHdpbmRvdy5Qb2x5bWVyICYmIHdpbmRvdy5Qb2x5bWVyLnVzZUFkb3B0ZWRTdHlsZVNoZWV0c1dpdGhCdWlsdENTUyB8fCBmYWxzZTtcblxuLyoqXG4gKiBTZXRzIGB1c2VBZG9wdGVkU3R5bGVTaGVldHNXaXRoQnVpbHRDU1NgIGdsb2JhbGx5LlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgZW5hYmxlIG9yIGRpc2FibGUgYHVzZUFkb3B0ZWRTdHlsZVNoZWV0c1dpdGhCdWlsdENTU2BcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBzZXRVc2VBZG9wdGVkU3R5bGVTaGVldHNXaXRoQnVpbHRDU1MgPSBmdW5jdGlvbih2YWx1ZSkge1xuICB1c2VBZG9wdGVkU3R5bGVTaGVldHNXaXRoQnVpbHRDU1MgPSB2YWx1ZTtcbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuL2Jvb3QuanMnO1xuXG4vLyB1bmlxdWUgZ2xvYmFsIGlkIGZvciBkZWR1cGluZyBtaXhpbnMuXG5sZXQgZGVkdXBlSWQgPSAwO1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge0Z1bmN0aW9ufVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gTWl4aW5GdW5jdGlvbigpe31cbi8qKiBAdHlwZSB7KFdlYWtNYXAgfCB1bmRlZmluZWQpfSAqL1xuTWl4aW5GdW5jdGlvbi5wcm90b3R5cGUuX19taXhpbkFwcGxpY2F0aW9ucztcbi8qKiBAdHlwZSB7KE9iamVjdCB8IHVuZGVmaW5lZCl9ICovXG5NaXhpbkZ1bmN0aW9uLnByb3RvdHlwZS5fX21peGluU2V0O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYyAqL1xuLyoqXG4gKiBXcmFwcyBhbiBFUzYgY2xhc3MgZXhwcmVzc2lvbiBtaXhpbiBzdWNoIHRoYXQgdGhlIG1peGluIGlzIG9ubHkgYXBwbGllZFxuICogaWYgaXQgaGFzIG5vdCBhbHJlYWR5IGJlZW4gYXBwbGllZCBpdHMgYmFzZSBhcmd1bWVudC4gQWxzbyBtZW1vaXplcyBtaXhpblxuICogYXBwbGljYXRpb25zLlxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R9IG1peGluIEVTNiBjbGFzcyBleHByZXNzaW9uIG1peGluIHRvIHdyYXBcbiAqIEByZXR1cm4ge1R9XG4gKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c31cbiAqL1xuZXhwb3J0IGNvbnN0IGRlZHVwaW5nTWl4aW4gPSBmdW5jdGlvbihtaXhpbikge1xuICBsZXQgbWl4aW5BcHBsaWNhdGlvbnMgPSAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhtaXhpbikuX19taXhpbkFwcGxpY2F0aW9ucztcbiAgaWYgKCFtaXhpbkFwcGxpY2F0aW9ucykge1xuICAgIG1peGluQXBwbGljYXRpb25zID0gbmV3IFdlYWtNYXAoKTtcbiAgICAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhtaXhpbikuX19taXhpbkFwcGxpY2F0aW9ucyA9IG1peGluQXBwbGljYXRpb25zO1xuICB9XG4gIC8vIG1haW50YWluIGEgdW5pcXVlIGlkIGZvciBlYWNoIG1peGluXG4gIGxldCBtaXhpbkRlZHVwZUlkID0gZGVkdXBlSWQrKztcbiAgZnVuY3Rpb24gZGVkdXBpbmdNaXhpbihiYXNlKSB7XG4gICAgbGV0IGJhc2VTZXQgPSAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhiYXNlKS5fX21peGluU2V0O1xuICAgIGlmIChiYXNlU2V0ICYmIGJhc2VTZXRbbWl4aW5EZWR1cGVJZF0pIHtcbiAgICAgIHJldHVybiBiYXNlO1xuICAgIH1cbiAgICBsZXQgbWFwID0gbWl4aW5BcHBsaWNhdGlvbnM7XG4gICAgbGV0IGV4dGVuZGVkID0gbWFwLmdldChiYXNlKTtcbiAgICBpZiAoIWV4dGVuZGVkKSB7XG4gICAgICBleHRlbmRlZCA9IC8qKiBAdHlwZSB7IUZ1bmN0aW9ufSAqLyhtaXhpbikoYmFzZSk7XG4gICAgICBtYXAuc2V0KGJhc2UsIGV4dGVuZGVkKTtcbiAgICAgIC8vIGNvcHkgaW5oZXJpdGVkIG1peGluIHNldCBmcm9tIHRoZSBleHRlbmRlZCBjbGFzcywgb3IgdGhlIGJhc2UgY2xhc3NcbiAgICAgIC8vIE5PVEU6IHdlIGF2b2lkIHVzZSBvZiBTZXQgaGVyZSBiZWNhdXNlIHNvbWUgYnJvd3NlciAoSUUxMSlcbiAgICAgIC8vIGNhbm5vdCBleHRlbmQgYSBiYXNlIFNldCB2aWEgdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgbGV0IG1peGluU2V0ID0gT2JqZWN0LmNyZWF0ZSgvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhleHRlbmRlZCkuX19taXhpblNldCB8fCBiYXNlU2V0IHx8IG51bGwpO1xuICAgICAgbWl4aW5TZXRbbWl4aW5EZWR1cGVJZF0gPSB0cnVlO1xuICAgICAgLyoqIEB0eXBlIHshTWl4aW5GdW5jdGlvbn0gKi8oZXh0ZW5kZWQpLl9fbWl4aW5TZXQgPSBtaXhpblNldDtcbiAgICB9XG4gICAgcmV0dXJuIGV4dGVuZGVkO1xuICB9XG5cbiAgcmV0dXJuIGRlZHVwaW5nTWl4aW47XG59O1xuLyogZXNsaW50LWVuYWJsZSB2YWxpZC1qc2RvYyAqL1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi4vdXRpbHMvYm9vdC5qcyc7XG5cbmltcG9ydCB7IHJlc29sdmVVcmwsIHBhdGhGcm9tVXJsIH0gZnJvbSAnLi4vdXRpbHMvcmVzb2x2ZS11cmwuanMnO1xuaW1wb3J0IHsgc3RyaWN0VGVtcGxhdGVQb2xpY3kgfSBmcm9tICcuLi91dGlscy9zZXR0aW5ncy5qcyc7XG5cbmxldCBtb2R1bGVzID0ge307XG5sZXQgbGNNb2R1bGVzID0ge307XG4vKipcbiAqIFNldHMgYSBkb20tbW9kdWxlIGludG8gdGhlIGdsb2JhbCByZWdpc3RyeSBieSBpZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgZG9tLW1vZHVsZSBpZFxuICogQHBhcmFtIHtEb21Nb2R1bGV9IG1vZHVsZSBkb20tbW9kdWxlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5mdW5jdGlvbiBzZXRNb2R1bGUoaWQsIG1vZHVsZSkge1xuICAvLyBzdG9yZSBpZCBzZXBhcmF0ZSBmcm9tIGxvd2VyY2FzZWQgaWQgc28gdGhhdFxuICAvLyBpbiBhbGwgY2FzZXMgbWl4ZWRDYXNlIGlkIHdpbGwgc3RvcmVkIGRpc3RpbmN0bHlcbiAgLy8gYW5kIGxvd2VyY2FzZSB2ZXJzaW9uIGlzIGEgZmFsbGJhY2tcbiAgbW9kdWxlc1tpZF0gPSBsY01vZHVsZXNbaWQudG9Mb3dlckNhc2UoKV0gPSBtb2R1bGU7XG59XG4vKipcbiAqIFJldHJpZXZlcyBhIGRvbS1tb2R1bGUgZnJvbSB0aGUgZ2xvYmFsIHJlZ2lzdHJ5IGJ5IGlkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBkb20tbW9kdWxlIGlkXG4gKiBAcmV0dXJuIHtEb21Nb2R1bGUhfSBkb20tbW9kdWxlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGZpbmRNb2R1bGUoaWQpIHtcbiAgcmV0dXJuIG1vZHVsZXNbaWRdIHx8IGxjTW9kdWxlc1tpZC50b0xvd2VyQ2FzZSgpXTtcbn1cblxuZnVuY3Rpb24gc3R5bGVPdXRzaWRlVGVtcGxhdGVDaGVjayhpbnN0KSB7XG4gIGlmIChpbnN0LnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlJykpIHtcbiAgICBjb25zb2xlLndhcm4oJ2RvbS1tb2R1bGUgJXMgaGFzIHN0eWxlIG91dHNpZGUgdGVtcGxhdGUnLCBpbnN0LmlkKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoZSBgZG9tLW1vZHVsZWAgZWxlbWVudCByZWdpc3RlcnMgdGhlIGRvbSBpdCBjb250YWlucyB0byB0aGUgbmFtZSBnaXZlblxuICogYnkgdGhlIG1vZHVsZSdzIGlkIGF0dHJpYnV0ZS4gSXQgcHJvdmlkZXMgYSB1bmlmaWVkIGRhdGFiYXNlIG9mIGRvbVxuICogYWNjZXNzaWJsZSB2aWEgaXRzIHN0YXRpYyBgaW1wb3J0YCBBUEkuXG4gKlxuICogQSBrZXkgdXNlIGNhc2Ugb2YgYGRvbS1tb2R1bGVgIGlzIGZvciBwcm92aWRpbmcgY3VzdG9tIGVsZW1lbnQgYDx0ZW1wbGF0ZT5gc1xuICogdmlhIEhUTUwgaW1wb3J0cyB0aGF0IGFyZSBwYXJzZWQgYnkgdGhlIG5hdGl2ZSBIVE1MIHBhcnNlciwgdGhhdCBjYW4gYmVcbiAqIHJlbG9jYXRlZCBkdXJpbmcgYSBidW5kbGluZyBwYXNzIGFuZCBzdGlsbCBsb29rZWQgdXAgYnkgYGlkYC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICA8ZG9tLW1vZHVsZSBpZD1cImZvb1wiPlxuICogICAgICAgPGltZyBzcmM9XCJzdHVmZi5wbmdcIj5cbiAqICAgICA8L2RvbS1tb2R1bGU+XG4gKlxuICogVGhlbiBpbiBjb2RlIGluIHNvbWUgb3RoZXIgbG9jYXRpb24gdGhhdCBjYW5ub3QgYWNjZXNzIHRoZSBkb20tbW9kdWxlIGFib3ZlXG4gKlxuICogICAgIGxldCBpbWcgPSBjdXN0b21FbGVtZW50cy5nZXQoJ2RvbS1tb2R1bGUnKS5pbXBvcnQoJ2ZvbycsICdpbWcnKTtcbiAqXG4gKiBAY3VzdG9tRWxlbWVudFxuICogQGV4dGVuZHMgSFRNTEVsZW1lbnRcbiAqIEBzdW1tYXJ5IEN1c3RvbSBlbGVtZW50IHRoYXQgcHJvdmlkZXMgYSByZWdpc3RyeSBvZiByZWxvY2F0YWJsZSBET00gY29udGVudFxuICogICBieSBgaWRgIHRoYXQgaXMgYWdub3N0aWMgdG8gYnVuZGxpbmcuXG4gKiBAdW5yZXN0cmljdGVkXG4gKi9cbmV4cG9ydCBjbGFzcyBEb21Nb2R1bGUgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHsgcmV0dXJuIFsnaWQnXTsgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIGVsZW1lbnQgc3BlY2lmaWVkIGJ5IHRoZSBjc3MgYHNlbGVjdG9yYCBpbiB0aGUgbW9kdWxlXG4gICAqIHJlZ2lzdGVyZWQgYnkgYGlkYC4gRm9yIGV4YW1wbGUsIHRoaXMuaW1wb3J0KCdmb28nLCAnaW1nJyk7XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgaWQgb2YgdGhlIGRvbS1tb2R1bGUgaW4gd2hpY2ggdG8gc2VhcmNoLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHNlbGVjdG9yIFRoZSBjc3Mgc2VsZWN0b3IgYnkgd2hpY2ggdG8gZmluZCB0aGUgZWxlbWVudC5cbiAgICogQHJldHVybiB7RWxlbWVudH0gUmV0dXJucyB0aGUgZWxlbWVudCB3aGljaCBtYXRjaGVzIGBzZWxlY3RvcmAgaW4gdGhlXG4gICAqIG1vZHVsZSByZWdpc3RlcmVkIGF0IHRoZSBzcGVjaWZpZWQgYGlkYC5cbiAgICpcbiAgICogQGV4cG9ydFxuICAgKiBAbm9jb2xsYXBzZSBSZWZlcnJlZCB0byBpbmRpcmVjdGx5IGluIHN0eWxlLWdhdGhlci5qc1xuICAgKi9cbiAgc3RhdGljIGltcG9ydChpZCwgc2VsZWN0b3IpIHtcbiAgICBpZiAoaWQpIHtcbiAgICAgIGxldCBtID0gZmluZE1vZHVsZShpZCk7XG4gICAgICBpZiAobSAmJiBzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gbS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBvbGQgT2xkIHZhbHVlIG9mIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBDdXJyZW50IHZhbHVlIG9mIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBuYW1lc3BhY2UgQXR0cmlidXRlIG5hbWVzcGFjZS5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkLCB2YWx1ZSwgbmFtZXNwYWNlKSB7XG4gICAgaWYgKG9sZCAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMucmVnaXN0ZXIoKTtcbiAgICB9XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtYXJncyAqL1xuXG4gIC8qKlxuICAgKiBUaGUgYWJzb2x1dGUgVVJMIG9mIHRoZSBvcmlnaW5hbCBsb2NhdGlvbiBvZiB0aGlzIGBkb20tbW9kdWxlYC5cbiAgICpcbiAgICogVGhpcyB2YWx1ZSB3aWxsIGRpZmZlciBmcm9tIHRoaXMgZWxlbWVudCdzIGBvd25lckRvY3VtZW50YCBpbiB0aGVcbiAgICogZm9sbG93aW5nIHdheXM6XG4gICAqIC0gVGFrZXMgaW50byBhY2NvdW50IGFueSBgYXNzZXRwYXRoYCBhdHRyaWJ1dGUgYWRkZWQgZHVyaW5nIGJ1bmRsaW5nXG4gICAqICAgdG8gaW5kaWNhdGUgdGhlIG9yaWdpbmFsIGxvY2F0aW9uIHJlbGF0aXZlIHRvIHRoZSBidW5kbGVkIGxvY2F0aW9uXG4gICAqIC0gVXNlcyB0aGUgSFRNTEltcG9ydHMgcG9seWZpbGwncyBgaW1wb3J0Rm9yRWxlbWVudGAgQVBJIHRvIGVuc3VyZVxuICAgKiAgIHRoZSBwYXRoIGlzIHJlbGF0aXZlIHRvIHRoZSBpbXBvcnQgZG9jdW1lbnQncyBsb2NhdGlvbiBzaW5jZVxuICAgKiAgIGBvd25lckRvY3VtZW50YCBpcyBub3QgY3VycmVudGx5IHBvbHlmaWxsZWRcbiAgICovXG4gIGdldCBhc3NldHBhdGgoKSB7XG4gICAgLy8gRG9uJ3Qgb3ZlcnJpZGUgZXhpc3RpbmcgYXNzZXRwYXRoLlxuICAgIGlmICghdGhpcy5fX2Fzc2V0cGF0aCkge1xuICAgICAgLy8gbm90ZTogYXNzZXRwYXRoIHNldCB2aWEgYW4gYXR0cmlidXRlIG11c3QgYmUgcmVsYXRpdmUgdG8gdGhpc1xuICAgICAgLy8gZWxlbWVudCdzIGxvY2F0aW9uOyBhY2NvbW9kYXRlIHBvbHlmaWxsZWQgSFRNTEltcG9ydHNcbiAgICAgIGNvbnN0IG93bmVyID0gd2luZG93LkhUTUxJbXBvcnRzICYmIEhUTUxJbXBvcnRzLmltcG9ydEZvckVsZW1lbnQgP1xuICAgICAgICBIVE1MSW1wb3J0cy5pbXBvcnRGb3JFbGVtZW50KHRoaXMpIHx8IGRvY3VtZW50IDogdGhpcy5vd25lckRvY3VtZW50O1xuICAgICAgY29uc3QgdXJsID0gcmVzb2x2ZVVybChcbiAgICAgICAgdGhpcy5nZXRBdHRyaWJ1dGUoJ2Fzc2V0cGF0aCcpIHx8ICcnLCBvd25lci5iYXNlVVJJKTtcbiAgICAgIHRoaXMuX19hc3NldHBhdGggPSBwYXRoRnJvbVVybCh1cmwpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fX2Fzc2V0cGF0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgdGhlIGRvbS1tb2R1bGUgYXQgYSBnaXZlbiBpZC4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkXG4gICAqIHdoZW4gYSBkb20tbW9kdWxlIGlzIGltcGVyYXRpdmVseSBjcmVhdGVkLiBGb3JcbiAgICogZXhhbXBsZSwgYGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RvbS1tb2R1bGUnKS5yZWdpc3RlcignZm9vJylgLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IGlkIFRoZSBpZCBhdCB3aGljaCB0byByZWdpc3RlciB0aGUgZG9tLW1vZHVsZS5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHJlZ2lzdGVyKGlkKSB7XG4gICAgaWQgPSBpZCB8fCB0aGlzLmlkO1xuICAgIGlmIChpZCkge1xuICAgICAgLy8gVW5kZXIgc3RyaWN0VGVtcGxhdGVQb2xpY3ksIHJlamVjdCBhbmQgbnVsbCBvdXQgYW55IHJlLXJlZ2lzdGVyZWRcbiAgICAgIC8vIGRvbS1tb2R1bGUgc2luY2UgaXQgaXMgYW1iaWd1b3VzIHdoZXRoZXIgZmlyc3QtaW4gb3IgbGFzdC1pbiBpcyB0cnVzdGVkXG4gICAgICBpZiAoc3RyaWN0VGVtcGxhdGVQb2xpY3kgJiYgZmluZE1vZHVsZShpZCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXRNb2R1bGUoaWQsIG51bGwpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHN0cmljdFRlbXBsYXRlUG9saWN5OiBkb20tbW9kdWxlICR7aWR9IHJlLXJlZ2lzdGVyZWRgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgIHNldE1vZHVsZShpZCwgdGhpcyk7XG4gICAgICBzdHlsZU91dHNpZGVUZW1wbGF0ZUNoZWNrKHRoaXMpO1xuICAgIH1cbiAgfVxufVxuXG5Eb21Nb2R1bGUucHJvdG90eXBlWydtb2R1bGVzJ10gPSBtb2R1bGVzO1xuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2RvbS1tb2R1bGUnLCBEb21Nb2R1bGUpO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuLyoqXG4gKiBNb2R1bGUgd2l0aCB1dGlsaXRpZXMgZm9yIGNvbGxlY3Rpb24gQ1NTIHRleHQgZnJvbSBgPHRlbXBsYXRlcz5gLCBleHRlcm5hbFxuICogc3R5bGVzaGVldHMsIGFuZCBgZG9tLW1vZHVsZWBzLlxuICpcbiAqIEBzdW1tYXJ5IE1vZHVsZSB3aXRoIHV0aWxpdGllcyBmb3IgY29sbGVjdGlvbiBDU1MgdGV4dCBmcm9tIHZhcmlvdXMgc291cmNlcy5cbiAqL1xuXG5pbXBvcnQgeyBEb21Nb2R1bGUgfSBmcm9tICcuLi9lbGVtZW50cy9kb20tbW9kdWxlLmpzJztcbmltcG9ydCB7IHJlc29sdmVDc3MgfSBmcm9tICcuL3Jlc29sdmUtdXJsLmpzJztcblxuY29uc3QgTU9EVUxFX1NUWUxFX0xJTktfU0VMRUNUT1IgPSAnbGlua1tyZWw9aW1wb3J0XVt0eXBlfj1jc3NdJztcbmNvbnN0IElOQ0xVREVfQVRUUiA9ICdpbmNsdWRlJztcbmNvbnN0IFNIQURZX1VOU0NPUEVEX0FUVFIgPSAnc2hhZHktdW5zY29wZWQnO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZCAuXG4gKiBAcmV0dXJuIHs/RG9tTW9kdWxlfSAuXG4gKi9cbmZ1bmN0aW9uIGltcG9ydE1vZHVsZShtb2R1bGVJZCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHs/RG9tTW9kdWxlfSAqLyhEb21Nb2R1bGUuaW1wb3J0KG1vZHVsZUlkKSk7XG59XG5cbmZ1bmN0aW9uIHN0eWxlRm9ySW1wb3J0KGltcG9ydERvYykge1xuICAvLyBOT1RFOiBwb2x5ZmlsbCBhZmZvcmRhbmNlLlxuICAvLyB1bmRlciB0aGUgSFRNTEltcG9ydHMgcG9seWZpbGwsIHRoZXJlIHdpbGwgYmUgbm8gJ2JvZHknLFxuICAvLyBidXQgdGhlIGltcG9ydCBwc2V1ZG8tZG9jIGNhbiBiZSB1c2VkIGRpcmVjdGx5LlxuICBsZXQgY29udGFpbmVyID0gaW1wb3J0RG9jLmJvZHkgPyBpbXBvcnREb2MuYm9keSA6IGltcG9ydERvYztcbiAgY29uc3QgaW1wb3J0Q3NzID0gcmVzb2x2ZUNzcyhjb250YWluZXIudGV4dENvbnRlbnQsXG4gICAgaW1wb3J0RG9jLmJhc2VVUkkpO1xuICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHN0eWxlLnRleHRDb250ZW50ID0gaW1wb3J0Q3NzO1xuICByZXR1cm4gc3R5bGU7XG59XG5cbi8qKiBAdHlwZWRlZiB7e2Fzc2V0cGF0aDogc3RyaW5nfX0gKi9cbmxldCB0ZW1wbGF0ZVdpdGhBc3NldFBhdGg7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuXG4vKipcbiAqIFJldHVybnMgYSBsaXN0IG9mIDxzdHlsZT4gZWxlbWVudHMgaW4gYSBzcGFjZS1zZXBhcmF0ZWQgbGlzdCBvZiBgZG9tLW1vZHVsZWBzLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkcyBMaXN0IG9mIGRvbS1tb2R1bGUgaWQncyB3aXRoaW4gd2hpY2ggdG9cbiAqIHNlYXJjaCBmb3IgY3NzLlxuICogQHJldHVybiB7IUFycmF5PCFIVE1MU3R5bGVFbGVtZW50Pn0gQXJyYXkgb2YgY29udGFpbmVkIDxzdHlsZT4gZWxlbWVudHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlc0Zyb21Nb2R1bGVzKG1vZHVsZUlkcykge1xuIGNvbnN0IG1vZHVsZXMgPSBtb2R1bGVJZHMudHJpbSgpLnNwbGl0KC9cXHMrLyk7XG4gY29uc3Qgc3R5bGVzID0gW107XG4gZm9yIChsZXQgaT0wOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgc3R5bGVzLnB1c2goLi4uc3R5bGVzRnJvbU1vZHVsZShtb2R1bGVzW2ldKSk7XG4gfVxuIHJldHVybiBzdHlsZXM7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGxpc3Qgb2YgPHN0eWxlPiBlbGVtZW50cyBpbiBhIGdpdmVuIGBkb20tbW9kdWxlYC5cbiAqIFN0eWxlcyBpbiBhIGBkb20tbW9kdWxlYCBjYW4gY29tZSBlaXRoZXIgZnJvbSBgPHN0eWxlPmBzIHdpdGhpbiB0aGVcbiAqIGZpcnN0IGA8dGVtcGxhdGU+YCwgb3IgZWxzZSBmcm9tIG9uZSBvciBtb3JlXG4gKiBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmAgbGlua3Mgb3V0c2lkZSB0aGUgdGVtcGxhdGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkIGRvbS1tb2R1bGUgaWQgdG8gZ2F0aGVyIHN0eWxlcyBmcm9tXG4gKiBAcmV0dXJuIHshQXJyYXk8IUhUTUxTdHlsZUVsZW1lbnQ+fSBBcnJheSBvZiBjb250YWluZWQgc3R5bGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVzRnJvbU1vZHVsZShtb2R1bGVJZCkge1xuICBjb25zdCBtID0gaW1wb3J0TW9kdWxlKG1vZHVsZUlkKTtcblxuICBpZiAoIW0pIHtcbiAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBmaW5kIHN0eWxlIGRhdGEgaW4gbW9kdWxlIG5hbWVkJywgbW9kdWxlSWQpO1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGlmIChtLl9zdHlsZXMgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHN0eWxlcyA9IFtdO1xuICAgIC8vIG1vZHVsZSBpbXBvcnRzOiA8bGluayByZWw9XCJpbXBvcnRcIiB0eXBlPVwiY3NzXCI+XG4gICAgc3R5bGVzLnB1c2goLi4uX3N0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzKG0pKTtcbiAgICAvLyBpbmNsdWRlIGNzcyBmcm9tIHRoZSBmaXJzdCB0ZW1wbGF0ZSBpbiB0aGUgbW9kdWxlXG4gICAgY29uc3QgdGVtcGxhdGUgPSAvKiogQHR5cGUgez9IVE1MVGVtcGxhdGVFbGVtZW50fSAqLyhcbiAgICAgICAgbS5xdWVyeVNlbGVjdG9yKCd0ZW1wbGF0ZScpKTtcbiAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgIHN0eWxlcy5wdXNoKC4uLnN0eWxlc0Zyb21UZW1wbGF0ZSh0ZW1wbGF0ZSxcbiAgICAgICAgLyoqIEB0eXBlIHt0ZW1wbGF0ZVdpdGhBc3NldFBhdGh9ICovKG0pLmFzc2V0cGF0aCkpO1xuICAgIH1cblxuICAgIG0uX3N0eWxlcyA9IHN0eWxlcztcbiAgfVxuXG4gIHJldHVybiBtLl9zdHlsZXM7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYDxzdHlsZT5gIGVsZW1lbnRzIHdpdGhpbiBhIGdpdmVuIHRlbXBsYXRlLlxuICpcbiAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIHRvIGdhdGhlciBzdHlsZXMgZnJvbVxuICogQHBhcmFtIHtzdHJpbmc9fSBiYXNlVVJJIGJhc2VVUkkgZm9yIHN0eWxlIGNvbnRlbnRcbiAqIEByZXR1cm4geyFBcnJheTwhSFRNTFN0eWxlRWxlbWVudD59IEFycmF5IG9mIHN0eWxlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVzRnJvbVRlbXBsYXRlKHRlbXBsYXRlLCBiYXNlVVJJKSB7XG4gIGlmICghdGVtcGxhdGUuX3N0eWxlcykge1xuICAgIGNvbnN0IHN0eWxlcyA9IFtdO1xuICAgIC8vIGlmIGVsZW1lbnQgaXMgYSB0ZW1wbGF0ZSwgZ2V0IGNvbnRlbnQgZnJvbSBpdHMgLmNvbnRlbnRcbiAgICBjb25zdCBlJCA9IHRlbXBsYXRlLmNvbnRlbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKTtcbiAgICBmb3IgKGxldCBpPTA7IGkgPCBlJC5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGUgPSBlJFtpXTtcbiAgICAgIC8vIHN1cHBvcnQgc3R5bGUgc2hhcmluZyBieSBhbGxvd2luZyBzdHlsZXMgdG8gXCJpbmNsdWRlXCJcbiAgICAgIC8vIG90aGVyIGRvbS1tb2R1bGVzIHRoYXQgY29udGFpbiBzdHlsaW5nXG4gICAgICBsZXQgaW5jbHVkZSA9IGUuZ2V0QXR0cmlidXRlKElOQ0xVREVfQVRUUik7XG4gICAgICBpZiAoaW5jbHVkZSkge1xuICAgICAgICBzdHlsZXMucHVzaCguLi5zdHlsZXNGcm9tTW9kdWxlcyhpbmNsdWRlKS5maWx0ZXIoZnVuY3Rpb24oaXRlbSwgaW5kZXgsIHNlbGYpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5pbmRleE9mKGl0ZW0pID09PSBpbmRleDtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgICAgaWYgKGJhc2VVUkkpIHtcbiAgICAgICAgZS50ZXh0Q29udGVudCA9XG4gICAgICAgICAgICByZXNvbHZlQ3NzKGUudGV4dENvbnRlbnQsIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoYmFzZVVSSSkpO1xuICAgICAgfVxuICAgICAgc3R5bGVzLnB1c2goZSk7XG4gICAgfVxuICAgIHRlbXBsYXRlLl9zdHlsZXMgPSBzdHlsZXM7XG4gIH1cbiAgcmV0dXJuIHRlbXBsYXRlLl9zdHlsZXM7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGxpc3Qgb2YgPHN0eWxlPiBlbGVtZW50cyAgZnJvbSBzdHlsZXNoZWV0cyBsb2FkZWQgdmlhIGA8bGluayByZWw9XCJpbXBvcnRcIiB0eXBlPVwiY3NzXCI+YCBsaW5rcyB3aXRoaW4gdGhlIHNwZWNpZmllZCBgZG9tLW1vZHVsZWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkIElkIG9mIGBkb20tbW9kdWxlYCB0byBnYXRoZXIgQ1NTIGZyb21cbiAqIEByZXR1cm4geyFBcnJheTwhSFRNTFN0eWxlRWxlbWVudD59IEFycmF5IG9mIGNvbnRhaW5lZCBzdHlsZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyhtb2R1bGVJZCkge1xuIGxldCBtID0gaW1wb3J0TW9kdWxlKG1vZHVsZUlkKTtcbiByZXR1cm4gbSA/IF9zdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyhtKSA6IFtdO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBtb2R1bGUgZG9tLW1vZHVsZSBlbGVtZW50IHRoYXQgY291bGQgY29udGFpbiBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmAgc3R5bGVzXG4gKiBAcmV0dXJuIHshQXJyYXk8IUhUTUxTdHlsZUVsZW1lbnQ+fSBBcnJheSBvZiBjb250YWluZWQgc3R5bGVzXG4gKi9cbmZ1bmN0aW9uIF9zdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyhtb2R1bGUpIHtcbiAgY29uc3Qgc3R5bGVzID0gW107XG4gIGNvbnN0IHAkID0gbW9kdWxlLnF1ZXJ5U2VsZWN0b3JBbGwoTU9EVUxFX1NUWUxFX0xJTktfU0VMRUNUT1IpO1xuICBmb3IgKGxldCBpPTA7IGkgPCBwJC5sZW5ndGg7IGkrKykge1xuICAgIGxldCBwID0gcCRbaV07XG4gICAgaWYgKHAuaW1wb3J0KSB7XG4gICAgICBjb25zdCBpbXBvcnREb2MgPSBwLmltcG9ydDtcbiAgICAgIGNvbnN0IHVuc2NvcGVkID0gcC5oYXNBdHRyaWJ1dGUoU0hBRFlfVU5TQ09QRURfQVRUUik7XG4gICAgICBpZiAodW5zY29wZWQgJiYgIWltcG9ydERvYy5fdW5zY29wZWRTdHlsZSkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IHN0eWxlRm9ySW1wb3J0KGltcG9ydERvYyk7XG4gICAgICAgIHN0eWxlLnNldEF0dHJpYnV0ZShTSEFEWV9VTlNDT1BFRF9BVFRSLCAnJyk7XG4gICAgICAgIGltcG9ydERvYy5fdW5zY29wZWRTdHlsZSA9IHN0eWxlO1xuICAgICAgfSBlbHNlIGlmICghaW1wb3J0RG9jLl9zdHlsZSkge1xuICAgICAgICBpbXBvcnREb2MuX3N0eWxlID0gc3R5bGVGb3JJbXBvcnQoaW1wb3J0RG9jKTtcbiAgICAgIH1cbiAgICAgIHN0eWxlcy5wdXNoKHVuc2NvcGVkID8gaW1wb3J0RG9jLl91bnNjb3BlZFN0eWxlIDogaW1wb3J0RG9jLl9zdHlsZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZXM7XG59XG5cbi8qKlxuICpcbiAqIFJldHVybnMgQ1NTIHRleHQgb2Ygc3R5bGVzIGluIGEgc3BhY2Utc2VwYXJhdGVkIGxpc3Qgb2YgYGRvbS1tb2R1bGVgcy5cbiAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIGRlcHJlY2F0ZWQsIHVzZSBgc3R5bGVzRnJvbU1vZHVsZXNgIGluc3RlYWQuXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZHMgTGlzdCBvZiBkb20tbW9kdWxlIGlkJ3Mgd2l0aGluIHdoaWNoIHRvXG4gKiBzZWFyY2ggZm9yIGNzcy5cbiAqIEByZXR1cm4ge3N0cmluZ30gQ29uY2F0ZW5hdGVkIENTUyBjb250ZW50IGZyb20gc3BlY2lmaWVkIGBkb20tbW9kdWxlYHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNzc0Zyb21Nb2R1bGVzKG1vZHVsZUlkcykge1xuIGxldCBtb2R1bGVzID0gbW9kdWxlSWRzLnRyaW0oKS5zcGxpdCgvXFxzKy8pO1xuIGxldCBjc3NUZXh0ID0gJyc7XG4gZm9yIChsZXQgaT0wOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgY3NzVGV4dCArPSBjc3NGcm9tTW9kdWxlKG1vZHVsZXNbaV0pO1xuIH1cbiByZXR1cm4gY3NzVGV4dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIENTUyB0ZXh0IG9mIHN0eWxlcyBpbiBhIGdpdmVuIGBkb20tbW9kdWxlYC4gIENTUyBpbiBhIGBkb20tbW9kdWxlYFxuICogY2FuIGNvbWUgZWl0aGVyIGZyb20gYDxzdHlsZT5gcyB3aXRoaW4gdGhlIGZpcnN0IGA8dGVtcGxhdGU+YCwgb3IgZWxzZVxuICogZnJvbSBvbmUgb3IgbW9yZSBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmAgbGlua3Mgb3V0c2lkZSB0aGVcbiAqIHRlbXBsYXRlLlxuICpcbiAqIEFueSBgPHN0eWxlcz5gIHByb2Nlc3NlZCBhcmUgcmVtb3ZlZCBmcm9tIHRoZWlyIG9yaWdpbmFsIGxvY2F0aW9uLlxuICogTm90ZTogVGhpcyBtZXRob2QgaXMgZGVwcmVjYXRlZCwgdXNlIGBzdHlsZUZyb21Nb2R1bGVgIGluc3RlYWQuXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZCBkb20tbW9kdWxlIGlkIHRvIGdhdGhlciBzdHlsZXMgZnJvbVxuICogQHJldHVybiB7c3RyaW5nfSBDb25jYXRlbmF0ZWQgQ1NTIGNvbnRlbnQgZnJvbSBzcGVjaWZpZWQgYGRvbS1tb2R1bGVgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjc3NGcm9tTW9kdWxlKG1vZHVsZUlkKSB7XG4gIGxldCBtID0gaW1wb3J0TW9kdWxlKG1vZHVsZUlkKTtcbiAgaWYgKG0gJiYgbS5fY3NzVGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gbW9kdWxlIGltcG9ydHM6IDxsaW5rIHJlbD1cImltcG9ydFwiIHR5cGU9XCJjc3NcIj5cbiAgICBsZXQgY3NzVGV4dCA9IF9jc3NGcm9tTW9kdWxlSW1wb3J0cyhtKTtcbiAgICAvLyBpbmNsdWRlIGNzcyBmcm9tIHRoZSBmaXJzdCB0ZW1wbGF0ZSBpbiB0aGUgbW9kdWxlXG4gICAgbGV0IHQgPSAvKiogQHR5cGUgez9IVE1MVGVtcGxhdGVFbGVtZW50fSAqLyhtLnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlJykpO1xuICAgIGlmICh0KSB7XG4gICAgICBjc3NUZXh0ICs9IGNzc0Zyb21UZW1wbGF0ZSh0LFxuICAgICAgICAvKiogQHR5cGUge3RlbXBsYXRlV2l0aEFzc2V0UGF0aH0gKi8obSkuYXNzZXRwYXRoKTtcbiAgICB9XG4gICAgbS5fY3NzVGV4dCA9IGNzc1RleHQgfHwgbnVsbDtcbiAgfVxuICBpZiAoIW0pIHtcbiAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBmaW5kIHN0eWxlIGRhdGEgaW4gbW9kdWxlIG5hbWVkJywgbW9kdWxlSWQpO1xuICB9XG4gIHJldHVybiBtICYmIG0uX2Nzc1RleHQgfHwgJyc7XG59XG5cbi8qKlxuICogUmV0dXJucyBDU1MgdGV4dCBvZiBgPHN0eWxlcz5gIHdpdGhpbiBhIGdpdmVuIHRlbXBsYXRlLlxuICpcbiAqIEFueSBgPHN0eWxlcz5gIHByb2Nlc3NlZCBhcmUgcmVtb3ZlZCBmcm9tIHRoZWlyIG9yaWdpbmFsIGxvY2F0aW9uLlxuICogTm90ZTogVGhpcyBtZXRob2QgaXMgZGVwcmVjYXRlZCwgdXNlIGBzdHlsZUZyb21UZW1wbGF0ZWAgaW5zdGVhZC5cbiAqXG4gKiBAZGVwcmVjYXRlZFxuICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgdG8gZ2F0aGVyIHN0eWxlcyBmcm9tXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSSSBCYXNlIFVSSSB0byByZXNvbHZlIHRoZSBVUkwgYWdhaW5zdFxuICogQHJldHVybiB7c3RyaW5nfSBDb25jYXRlbmF0ZWQgQ1NTIGNvbnRlbnQgZnJvbSBzcGVjaWZpZWQgdGVtcGxhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNzc0Zyb21UZW1wbGF0ZSh0ZW1wbGF0ZSwgYmFzZVVSSSkge1xuICBsZXQgY3NzVGV4dCA9ICcnO1xuICBjb25zdCBlJCA9IHN0eWxlc0Zyb21UZW1wbGF0ZSh0ZW1wbGF0ZSwgYmFzZVVSSSk7XG4gIC8vIGlmIGVsZW1lbnQgaXMgYSB0ZW1wbGF0ZSwgZ2V0IGNvbnRlbnQgZnJvbSBpdHMgLmNvbnRlbnRcbiAgZm9yIChsZXQgaT0wOyBpIDwgZSQubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgZSA9IGUkW2ldO1xuICAgIGlmIChlLnBhcmVudE5vZGUpIHtcbiAgICAgIGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKTtcbiAgICB9XG4gICAgY3NzVGV4dCArPSBlLnRleHRDb250ZW50O1xuICB9XG4gIHJldHVybiBjc3NUZXh0O1xufVxuXG4vKipcbiAqIFJldHVybnMgQ1NTIHRleHQgZnJvbSBzdHlsZXNoZWV0cyBsb2FkZWQgdmlhIGA8bGluayByZWw9XCJpbXBvcnRcIiB0eXBlPVwiY3NzXCI+YFxuICogbGlua3Mgd2l0aGluIHRoZSBzcGVjaWZpZWQgYGRvbS1tb2R1bGVgLlxuICpcbiAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIGRlcHJlY2F0ZWQsIHVzZSBgc3R5bGVzRnJvbU1vZHVsZUltcG9ydHNgIGluc3RlYWQuXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlSWQgSWQgb2YgYGRvbS1tb2R1bGVgIHRvIGdhdGhlciBDU1MgZnJvbVxuICogQHJldHVybiB7c3RyaW5nfSBDb25jYXRlbmF0ZWQgQ1NTIGNvbnRlbnQgZnJvbSBsaW5rcyBpbiBzcGVjaWZpZWQgYGRvbS1tb2R1bGVgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjc3NGcm9tTW9kdWxlSW1wb3J0cyhtb2R1bGVJZCkge1xuICBsZXQgbSA9IGltcG9ydE1vZHVsZShtb2R1bGVJZCk7XG4gIHJldHVybiBtID8gX2Nzc0Zyb21Nb2R1bGVJbXBvcnRzKG0pIDogJyc7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBtb2R1bGUgZG9tLW1vZHVsZSBlbGVtZW50IHRoYXQgY291bGQgY29udGFpbiBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmAgc3R5bGVzXG4gKiBAcmV0dXJuIHtzdHJpbmd9IENvbmNhdGVuYXRlZCBDU1MgY29udGVudCBmcm9tIGxpbmtzIGluIHRoZSBkb20tbW9kdWxlXG4gKi9cbmZ1bmN0aW9uIF9jc3NGcm9tTW9kdWxlSW1wb3J0cyhtb2R1bGUpIHtcbiAgbGV0IGNzc1RleHQgPSAnJztcbiAgbGV0IHN0eWxlcyA9IF9zdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyhtb2R1bGUpO1xuICBmb3IgKGxldCBpPTA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjc3NUZXh0ICs9IHN0eWxlc1tpXS50ZXh0Q29udGVudDtcbiAgfVxuICByZXR1cm4gY3NzVGV4dDtcbn1cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbi8qIGVzbGludC1kaXNhYmxlIHZhbGlkLWpzZG9jICovXG4vKipcbiAqIE5vZGUgd3JhcHBlciB0byBlbnN1cmUgU2hhZG93RE9NIHNhZmUgb3BlcmF0aW9uIHJlZ2FyZGxlc3Mgb2YgcG9seWZpbGxcbiAqIHByZXNlbmNlIG9yIG1vZGUuIE5vdGUgdGhhdCB3aXRoIHRoZSBpbnRyb2R1Y3Rpb24gb2YgYFNoYWR5RE9NLm5vUGF0Y2hgLFxuICogYSBub2RlIHdyYXBwZXIgbXVzdCBiZSB1c2VkIHRvIGFjY2VzcyBTaGFkb3dET00gQVBJLlxuICogVGhpcyBpcyBzaW1pbGFyIHRvIHVzaW5nIGBQb2x5bWVyLmRvbWAgYnV0IHJlbGllcyBleGNsdXNpdmVseVxuICogb24gdGhlIHByZXNlbmNlIG9mIHRoZSBTaGFkeURPTSBwb2x5ZmlsbCByYXRoZXIgdGhhbiByZXF1aXJpbmcgdGhlIGxvYWRpbmdcbiAqIG9mIGxlZ2FjeSAoUG9seW1lci5kb20pIEFQSS5cbiAqIEB0eXBlIHtmdW5jdGlvbihOb2RlKTpOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgd3JhcCA9ICh3aW5kb3dbJ1NoYWR5RE9NJ10gJiYgd2luZG93WydTaGFkeURPTSddWydub1BhdGNoJ10gJiYgd2luZG93WydTaGFkeURPTSddWyd3cmFwJ10pID9cbiAgd2luZG93WydTaGFkeURPTSddWyd3cmFwJ10gOlxuICAod2luZG93WydTaGFkeURPTSddID8gKG4pID0+IFNoYWR5RE9NWydwYXRjaCddKG4pIDogKG4pID0+IG4pO1xuXG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuL2Jvb3QuanMnO1xuXG4vKipcbiAqIE1vZHVsZSB3aXRoIHV0aWxpdGllcyBmb3IgbWFuaXB1bGF0aW5nIHN0cnVjdHVyZWQgZGF0YSBwYXRoIHN0cmluZ3MuXG4gKlxuICogQHN1bW1hcnkgTW9kdWxlIHdpdGggdXRpbGl0aWVzIGZvciBtYW5pcHVsYXRpbmcgc3RydWN0dXJlZCBkYXRhIHBhdGggc3RyaW5ncy5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gc3RyaW5nIGlzIGEgc3RydWN0dXJlZCBkYXRhIHBhdGggKGhhcyBkb3RzKS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYFxuICogaXNQYXRoKCdmb28uYmFyLmJheicpIC8vIHRydWVcbiAqIGlzUGF0aCgnZm9vJykgICAgICAgICAvLyBmYWxzZVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBzdHJpbmdcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHN0cmluZyBjb250YWluZWQgb25lIG9yIG1vcmUgZG90c1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguaW5kZXhPZignLicpID49IDA7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcm9vdCBwcm9wZXJ0eSBuYW1lIGZvciB0aGUgZ2l2ZW4gcGF0aC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYFxuICogcm9vdCgnZm9vLmJhci5iYXonKSAvLyAnZm9vJ1xuICogcm9vdCgnZm9vJykgICAgICAgICAvLyAnZm9vJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ30gUm9vdCBwcm9wZXJ0eSBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb290KHBhdGgpIHtcbiAgbGV0IGRvdEluZGV4ID0gcGF0aC5pbmRleE9mKCcuJyk7XG4gIGlmIChkb3RJbmRleCA9PT0gLTEpIHtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuICByZXR1cm4gcGF0aC5zbGljZSgwLCBkb3RJbmRleCk7XG59XG5cbi8qKlxuICogR2l2ZW4gYGJhc2VgIGlzIGBmb28uYmFyYCwgYGZvb2AgaXMgYW4gYW5jZXN0b3IsIGBmb28uYmFyYCBpcyBub3RcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gcGF0aCBpcyBhbiBhbmNlc3RvciBvZiB0aGUgYmFzZSBwYXRoLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgXG4gKiBpc0FuY2VzdG9yKCdmb28uYmFyJywgJ2ZvbycpICAgICAgICAgLy8gdHJ1ZVxuICogaXNBbmNlc3RvcignZm9vLmJhcicsICdmb28uYmFyJykgICAgIC8vIGZhbHNlXG4gKiBpc0FuY2VzdG9yKCdmb28uYmFyJywgJ2Zvby5iYXIuYmF6JykgLy8gZmFsc2VcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlIFBhdGggc3RyaW5nIHRvIHRlc3QgYWdhaW5zdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggc3RyaW5nIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBwYXRoYCBpcyBhbiBhbmNlc3RvciBvZiBgYmFzZWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FuY2VzdG9yKGJhc2UsIHBhdGgpIHtcbiAgLy8gICAgIGJhc2Uuc3RhcnRzV2l0aChwYXRoICsgJy4nKTtcbiAgcmV0dXJuIGJhc2UuaW5kZXhPZihwYXRoICsgJy4nKSA9PT0gMDtcbn1cblxuLyoqXG4gKiBHaXZlbiBgYmFzZWAgaXMgYGZvby5iYXJgLCBgZm9vLmJhci5iYXpgIGlzIGFuIGRlc2NlbmRhbnRcbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYFxuICogaXNEZXNjZW5kYW50KCdmb28uYmFyJywgJ2Zvby5iYXIuYmF6JykgLy8gdHJ1ZVxuICogaXNEZXNjZW5kYW50KCdmb28uYmFyJywgJ2Zvby5iYXInKSAgICAgLy8gZmFsc2VcbiAqIGlzRGVzY2VuZGFudCgnZm9vLmJhcicsICdmb28nKSAgICAgICAgIC8vIGZhbHNlXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZSBQYXRoIHN0cmluZyB0byB0ZXN0IGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHN0cmluZyB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgcGF0aGAgaXMgYSBkZXNjZW5kYW50IG9mIGBiYXNlYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGVzY2VuZGFudChiYXNlLCBwYXRoKSB7XG4gIC8vICAgICBwYXRoLnN0YXJ0c1dpdGgoYmFzZSArICcuJyk7XG4gIHJldHVybiBwYXRoLmluZGV4T2YoYmFzZSArICcuJykgPT09IDA7XG59XG5cbi8qKlxuICogUmVwbGFjZXMgYSBwcmV2aW91cyBiYXNlIHBhdGggd2l0aCBhIG5ldyBiYXNlIHBhdGgsIHByZXNlcnZpbmcgdGhlXG4gKiByZW1haW5kZXIgb2YgdGhlIHBhdGguXG4gKlxuICogVXNlciBtdXN0IGVuc3VyZSBgcGF0aGAgaGFzIGEgcHJlZml4IG9mIGBiYXNlYC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYFxuICogdHJhbnNsYXRlKCdmb28uYmFyJywgJ3pvdCcsICdmb28uYmFyLmJheicpIC8vICd6b3QuYmF6J1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2UgQ3VycmVudCBiYXNlIHN0cmluZyB0byByZW1vdmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXdCYXNlIE5ldyBiYXNlIHN0cmluZyB0byByZXBsYWNlIHdpdGhcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggdG8gdHJhbnNsYXRlXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRyYW5zbGF0ZWQgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGUoYmFzZSwgbmV3QmFzZSwgcGF0aCkge1xuICByZXR1cm4gbmV3QmFzZSArIHBhdGguc2xpY2UoYmFzZS5sZW5ndGgpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlIFBhdGggc3RyaW5nIHRvIHRlc3QgYWdhaW5zdFxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBzdHJpbmcgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgcGF0aGAgaXMgZXF1YWwgdG8gYGJhc2VgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaGVzKGJhc2UsIHBhdGgpIHtcbiAgcmV0dXJuIChiYXNlID09PSBwYXRoKSB8fFxuICAgICAgICAgaXNBbmNlc3RvcihiYXNlLCBwYXRoKSB8fFxuICAgICAgICAgaXNEZXNjZW5kYW50KGJhc2UsIHBhdGgpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGFycmF5LWJhc2VkIHBhdGhzIHRvIGZsYXR0ZW5lZCBwYXRoLiAgU3RyaW5nLWJhc2VkIHBhdGhzXG4gKiBhcmUgcmV0dXJuZWQgYXMtaXMuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIG5vcm1hbGl6ZShbJ2Zvby5iYXInLCAwLCAnYmF6J10pICAvLyAnZm9vLmJhci4wLmJheidcbiAqIG5vcm1hbGl6ZSgnZm9vLmJhci4wLmJheicpICAgICAgICAvLyAnZm9vLmJhci4wLmJheidcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIElucHV0IHBhdGhcbiAqIEByZXR1cm4ge3N0cmluZ30gRmxhdHRlbmVkIHBhdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShwYXRoKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdGgpKSB7XG4gICAgbGV0IHBhcnRzID0gW107XG4gICAgZm9yIChsZXQgaT0wOyBpPHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBhcmdzID0gcGF0aFtpXS50b1N0cmluZygpLnNwbGl0KCcuJyk7XG4gICAgICBmb3IgKGxldCBqPTA7IGo8YXJncy5sZW5ndGg7IGorKykge1xuICAgICAgICBwYXJ0cy5wdXNoKGFyZ3Nbal0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFydHMuam9pbignLicpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXRoO1xuICB9XG59XG5cbi8qKlxuICogU3BsaXRzIGEgcGF0aCBpbnRvIGFuIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLiBBY2NlcHRzIGVpdGhlciBhcnJheXNcbiAqIG9mIHBhdGggcGFydHMgb3Igc3RyaW5ncy5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYFxuICogc3BsaXQoWydmb28uYmFyJywgMCwgJ2JheiddKSAgLy8gWydmb28nLCAnYmFyJywgJzAnLCAnYmF6J11cbiAqIHNwbGl0KCdmb28uYmFyLjAuYmF6JykgICAgICAgIC8vIFsnZm9vJywgJ2JhcicsICcwJywgJ2JheiddXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBJbnB1dCBwYXRoXG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn0gQXJyYXkgb2YgcGF0aCBwYXJ0c1xuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BsaXQocGF0aCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXRoKSkge1xuICAgIHJldHVybiBub3JtYWxpemUocGF0aCkuc3BsaXQoJy4nKTtcbiAgfVxuICByZXR1cm4gcGF0aC50b1N0cmluZygpLnNwbGl0KCcuJyk7XG59XG5cbi8qKlxuICogUmVhZHMgYSB2YWx1ZSBmcm9tIGEgcGF0aC4gIElmIGFueSBzdWItcHJvcGVydHkgaW4gdGhlIHBhdGggaXMgYHVuZGVmaW5lZGAsXG4gKiB0aGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgICh3aWxsIG5ldmVyIHRocm93LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByb290IE9iamVjdCBmcm9tIHdoaWNoIHRvIGRlcmVmZXJlbmNlIHBhdGggZnJvbVxuICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggUGF0aCB0byByZWFkXG4gKiBAcGFyYW0ge09iamVjdD19IGluZm8gSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIHRvIGBpbmZvYCwgdGhlIG5vcm1hbGl6ZWRcbiAqICAoZmxhdHRlbmVkKSBwYXRoIHdpbGwgYmUgc2V0IHRvIGBpbmZvLnBhdGhgLlxuICogQHJldHVybiB7Kn0gVmFsdWUgYXQgcGF0aCwgb3IgYHVuZGVmaW5lZGAgaWYgdGhlIHBhdGggY291bGQgbm90IGJlXG4gKiAgZnVsbHkgZGVyZWZlcmVuY2VkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0KHJvb3QsIHBhdGgsIGluZm8pIHtcbiAgbGV0IHByb3AgPSByb290O1xuICBsZXQgcGFydHMgPSBzcGxpdChwYXRoKTtcbiAgLy8gTG9vcCBvdmVyIHBhdGggcGFydHNbMC4ubi0xXSBhbmQgZGVyZWZlcmVuY2VcbiAgZm9yIChsZXQgaT0wOyBpPHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFwcm9wKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBwYXJ0ID0gcGFydHNbaV07XG4gICAgcHJvcCA9IHByb3BbcGFydF07XG4gIH1cbiAgaWYgKGluZm8pIHtcbiAgICBpbmZvLnBhdGggPSBwYXJ0cy5qb2luKCcuJyk7XG4gIH1cbiAgcmV0dXJuIHByb3A7XG59XG5cbi8qKlxuICogU2V0cyBhIHZhbHVlIHRvIGEgcGF0aC4gIElmIGFueSBzdWItcHJvcGVydHkgaW4gdGhlIHBhdGggaXMgYHVuZGVmaW5lZGAsXG4gKiB0aGlzIG1ldGhvZCB3aWxsIG5vLW9wLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByb290IE9iamVjdCBmcm9tIHdoaWNoIHRvIGRlcmVmZXJlbmNlIHBhdGggZnJvbVxuICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggUGF0aCB0byBzZXRcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0IHRvIHBhdGhcbiAqIEByZXR1cm4ge3N0cmluZyB8IHVuZGVmaW5lZH0gVGhlIG5vcm1hbGl6ZWQgdmVyc2lvbiBvZiB0aGUgaW5wdXQgcGF0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KHJvb3QsIHBhdGgsIHZhbHVlKSB7XG4gIGxldCBwcm9wID0gcm9vdDtcbiAgbGV0IHBhcnRzID0gc3BsaXQocGF0aCk7XG4gIGxldCBsYXN0ID0gcGFydHNbcGFydHMubGVuZ3RoLTFdO1xuICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xuICAgIC8vIExvb3Agb3ZlciBwYXRoIHBhcnRzWzAuLm4tMl0gYW5kIGRlcmVmZXJlbmNlXG4gICAgZm9yIChsZXQgaT0wOyBpPHBhcnRzLmxlbmd0aC0xOyBpKyspIHtcbiAgICAgIGxldCBwYXJ0ID0gcGFydHNbaV07XG4gICAgICBwcm9wID0gcHJvcFtwYXJ0XTtcbiAgICAgIGlmICghcHJvcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFNldCB2YWx1ZSB0byBvYmplY3QgYXQgZW5kIG9mIHBhdGhcbiAgICBwcm9wW2xhc3RdID0gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gU2ltcGxlIHByb3BlcnR5IHNldFxuICAgIHByb3BbcGF0aF0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcGFydHMuam9pbignLicpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gc3RyaW5nIGlzIGEgc3RydWN0dXJlZCBkYXRhIHBhdGggKGhhcyBkb3RzKS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQuICBVc2UgYGlzUGF0aGAgaW5zdGVhZC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYFxuICogaXNEZWVwKCdmb28uYmFyLmJheicpIC8vIHRydWVcbiAqIGlzRGVlcCgnZm9vJykgICAgICAgICAvLyBmYWxzZVxuICogYGBgXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggc3RyaW5nXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBzdHJpbmcgY29udGFpbmVkIG9uZSBvciBtb3JlIGRvdHNcbiAqL1xuZXhwb3J0IGNvbnN0IGlzRGVlcCA9IGlzUGF0aDtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbmNvbnN0IGNhc2VNYXAgPSB7fTtcbmNvbnN0IERBU0hfVE9fQ0FNRUwgPSAvLVthLXpdL2c7XG5jb25zdCBDQU1FTF9UT19EQVNIID0gLyhbQS1aXSkvZztcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IE1vZHVsZSB3aXRoIHV0aWxpdGllcyBmb3IgY29udmVydGluZyBiZXR3ZWVuIFwiZGFzaC1jYXNlXCIgYW5kXG4gKiBcImNhbWVsQ2FzZVwiIGlkZW50aWZpZXJzLlxuICovXG5cbi8qKlxuICogQ29udmVydHMgXCJkYXNoLWNhc2VcIiBpZGVudGlmaWVyIChlLmcuIGBmb28tYmFyLWJhemApIHRvIFwiY2FtZWxDYXNlXCJcbiAqIChlLmcuIGBmb29CYXJCYXpgKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZGFzaCBEYXNoLWNhc2UgaWRlbnRpZmllclxuICogQHJldHVybiB7c3RyaW5nfSBDYW1lbC1jYXNlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpZGVudGlmaWVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkYXNoVG9DYW1lbENhc2UoZGFzaCkge1xuICByZXR1cm4gY2FzZU1hcFtkYXNoXSB8fCAoXG4gICAgY2FzZU1hcFtkYXNoXSA9IGRhc2guaW5kZXhPZignLScpIDwgMCA/IGRhc2ggOiBkYXNoLnJlcGxhY2UoREFTSF9UT19DQU1FTCxcbiAgICAgIChtKSA9PiBtWzFdLnRvVXBwZXJDYXNlKClcbiAgICApXG4gICk7XG59XG5cbi8qKlxuICogQ29udmVydHMgXCJjYW1lbENhc2VcIiBpZGVudGlmaWVyIChlLmcuIGBmb29CYXJCYXpgKSB0byBcImRhc2gtY2FzZVwiXG4gKiAoZS5nLiBgZm9vLWJhci1iYXpgKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY2FtZWwgQ2FtZWwtY2FzZSBpZGVudGlmaWVyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IERhc2gtY2FzZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgaWRlbnRpZmllclxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FtZWxUb0Rhc2hDYXNlKGNhbWVsKSB7XG4gIHJldHVybiBjYXNlTWFwW2NhbWVsXSB8fCAoXG4gICAgY2FzZU1hcFtjYW1lbF0gPSBjYW1lbC5yZXBsYWNlKENBTUVMX1RPX0RBU0gsICctJDEnKS50b0xvd2VyQ2FzZSgpXG4gICk7XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqXG4gKiBUaGlzIG1vZHVsZSBwcm92aWRlcyBhIG51bWJlciBvZiBzdHJhdGVnaWVzIGZvciBlbnF1ZXVpbmcgYXN5bmNocm9ub3VzXG4gKiB0YXNrcy4gRWFjaCBzdWItbW9kdWxlIHByb3ZpZGVzIGEgc3RhbmRhcmQgYHJ1bihmbilgIGludGVyZmFjZSB0aGF0IHJldHVybnMgYVxuICogaGFuZGxlLCBhbmQgYSBgY2FuY2VsKGhhbmRsZSlgIGludGVyZmFjZSBmb3IgY2FuY2VsaW5nIGFzeW5jIHRhc2tzIGJlZm9yZVxuICogdGhleSBydW4uXG4gKlxuICogQHN1bW1hcnkgTW9kdWxlIHRoYXQgcHJvdmlkZXMgYSBudW1iZXIgb2Ygc3RyYXRlZ2llcyBmb3IgZW5xdWV1aW5nXG4gKiBhc3luY2hyb25vdXMgdGFza3MuXG4gKi9cblxuaW1wb3J0ICcuL2Jvb3QuanMnO1xuXG4vLyBNaWNyb3Rhc2sgaW1wbGVtZW50ZWQgdXNpbmcgTXV0YXRpb24gT2JzZXJ2ZXJcbmxldCBtaWNyb3Rhc2tDdXJySGFuZGxlID0gMDtcbmxldCBtaWNyb3Rhc2tMYXN0SGFuZGxlID0gMDtcbmxldCBtaWNyb3Rhc2tDYWxsYmFja3MgPSBbXTtcbmxldCBtaWNyb3Rhc2tOb2RlQ29udGVudCA9IDA7XG5sZXQgbWljcm90YXNrU2NoZWR1bGVkID0gZmFsc2U7XG5sZXQgbWljcm90YXNrTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbm5ldyB3aW5kb3cuTXV0YXRpb25PYnNlcnZlcihtaWNyb3Rhc2tGbHVzaCkub2JzZXJ2ZShtaWNyb3Rhc2tOb2RlLCB7Y2hhcmFjdGVyRGF0YTogdHJ1ZX0pO1xuXG5mdW5jdGlvbiBtaWNyb3Rhc2tGbHVzaCgpIHtcbiAgbWljcm90YXNrU2NoZWR1bGVkID0gZmFsc2U7XG4gIGNvbnN0IGxlbiA9IG1pY3JvdGFza0NhbGxiYWNrcy5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBsZXQgY2IgPSBtaWNyb3Rhc2tDYWxsYmFja3NbaV07XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhyb3cgZTsgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG1pY3JvdGFza0NhbGxiYWNrcy5zcGxpY2UoMCwgbGVuKTtcbiAgbWljcm90YXNrTGFzdEhhbmRsZSArPSBsZW47XG59XG5cbi8qKlxuICogQXN5bmMgaW50ZXJmYWNlIHdyYXBwZXIgYXJvdW5kIGBzZXRUaW1lb3V0YC5cbiAqXG4gKiBAbmFtZXNwYWNlXG4gKiBAc3VtbWFyeSBBc3luYyBpbnRlcmZhY2Ugd3JhcHBlciBhcm91bmQgYHNldFRpbWVvdXRgLlxuICovXG5jb25zdCB0aW1lT3V0ID0ge1xuICAvKipcbiAgICogUmV0dXJucyBhIHN1Yi1tb2R1bGUgd2l0aCB0aGUgYXN5bmMgaW50ZXJmYWNlIHByb3ZpZGluZyB0aGUgcHJvdmlkZWRcbiAgICogZGVsYXkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiB0aW1lT3V0XG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gZGVsYXkgVGltZSB0byB3YWl0IGJlZm9yZSBjYWxsaW5nIGNhbGxiYWNrcyBpbiBtc1xuICAgKiBAcmV0dXJuIHshQXN5bmNJbnRlcmZhY2V9IEFuIGFzeW5jIHRpbWVvdXQgaW50ZXJmYWNlXG4gICAqL1xuICBhZnRlcihkZWxheSkge1xuICAgIHJldHVybiB7XG4gICAgICBydW4oZm4pIHsgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGZuLCBkZWxheSk7IH0sXG4gICAgICBjYW5jZWwoaGFuZGxlKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFuZGxlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBmdW5jdGlvbiBjYWxsZWQgaW4gdGhlIG5leHQgdGFzay5cbiAgICpcbiAgICogQG1lbWJlcm9mIHRpbWVPdXRcbiAgICogQHBhcmFtIHshRnVuY3Rpb259IGZuIENhbGxiYWNrIHRvIHJ1blxuICAgKiBAcGFyYW0ge251bWJlcj19IGRlbGF5IERlbGF5IGluIG1pbGxpc2Vjb25kc1xuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEhhbmRsZSB1c2VkIGZvciBjYW5jZWxpbmcgdGFza1xuICAgKi9cbiAgcnVuKGZuLCBkZWxheSkge1xuICAgIHJldHVybiB3aW5kb3cuc2V0VGltZW91dChmbiwgZGVsYXkpO1xuICB9LFxuICAvKipcbiAgICogQ2FuY2VscyBhIHByZXZpb3VzbHkgZW5xdWV1ZWQgYHRpbWVPdXRgIGNhbGxiYWNrLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgdGltZU91dFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGFuZGxlIEhhbmRsZSByZXR1cm5lZCBmcm9tIGBydW5gIG9mIGNhbGxiYWNrIHRvIGNhbmNlbFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgY2FuY2VsKGhhbmRsZSkge1xuICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFuZGxlKTtcbiAgfVxufTtcbmV4cG9ydCB7dGltZU91dH07XG5cbi8qKlxuICogQXN5bmMgaW50ZXJmYWNlIHdyYXBwZXIgYXJvdW5kIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgLlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBzdW1tYXJ5IEFzeW5jIGludGVyZmFjZSB3cmFwcGVyIGFyb3VuZCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYC5cbiAqL1xuY29uc3QgYW5pbWF0aW9uRnJhbWUgPSB7XG4gIC8qKlxuICAgKiBFbnF1ZXVlcyBhIGZ1bmN0aW9uIGNhbGxlZCBhdCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCB0aW1pbmcuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBhbmltYXRpb25GcmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG51bWJlcik6dm9pZH0gZm4gQ2FsbGJhY2sgdG8gcnVuXG4gICAqIEByZXR1cm4ge251bWJlcn0gSGFuZGxlIHVzZWQgZm9yIGNhbmNlbGluZyB0YXNrXG4gICAqL1xuICBydW4oZm4pIHtcbiAgICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7XG4gIH0sXG4gIC8qKlxuICAgKiBDYW5jZWxzIGEgcHJldmlvdXNseSBlbnF1ZXVlZCBgYW5pbWF0aW9uRnJhbWVgIGNhbGxiYWNrLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgYW5pbWF0aW9uRnJhbWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhhbmRsZSBIYW5kbGUgcmV0dXJuZWQgZnJvbSBgcnVuYCBvZiBjYWxsYmFjayB0byBjYW5jZWxcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGNhbmNlbChoYW5kbGUpIHtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaGFuZGxlKTtcbiAgfVxufTtcbmV4cG9ydCB7YW5pbWF0aW9uRnJhbWV9O1xuXG4vKipcbiAqIEFzeW5jIGludGVyZmFjZSB3cmFwcGVyIGFyb3VuZCBgcmVxdWVzdElkbGVDYWxsYmFja2AuICBGYWxscyBiYWNrIHRvXG4gKiBgc2V0VGltZW91dGAgb24gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBgcmVxdWVzdElkbGVDYWxsYmFja2AuXG4gKlxuICogQG5hbWVzcGFjZVxuICogQHN1bW1hcnkgQXN5bmMgaW50ZXJmYWNlIHdyYXBwZXIgYXJvdW5kIGByZXF1ZXN0SWRsZUNhbGxiYWNrYC5cbiAqL1xuY29uc3QgaWRsZVBlcmlvZCA9IHtcbiAgLyoqXG4gICAqIEVucXVldWVzIGEgZnVuY3Rpb24gY2FsbGVkIGF0IGByZXF1ZXN0SWRsZUNhbGxiYWNrYCB0aW1pbmcuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBpZGxlUGVyaW9kXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUlkbGVEZWFkbGluZSk6dm9pZH0gZm4gQ2FsbGJhY2sgdG8gcnVuXG4gICAqIEByZXR1cm4ge251bWJlcn0gSGFuZGxlIHVzZWQgZm9yIGNhbmNlbGluZyB0YXNrXG4gICAqL1xuICBydW4oZm4pIHtcbiAgICByZXR1cm4gd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2sgP1xuICAgICAgd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2soZm4pIDpcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZuLCAxNik7XG4gIH0sXG4gIC8qKlxuICAgKiBDYW5jZWxzIGEgcHJldmlvdXNseSBlbnF1ZXVlZCBgaWRsZVBlcmlvZGAgY2FsbGJhY2suXG4gICAqXG4gICAqIEBtZW1iZXJvZiBpZGxlUGVyaW9kXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoYW5kbGUgSGFuZGxlIHJldHVybmVkIGZyb20gYHJ1bmAgb2YgY2FsbGJhY2sgdG8gY2FuY2VsXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBjYW5jZWwoaGFuZGxlKSB7XG4gICAgd2luZG93LmNhbmNlbElkbGVDYWxsYmFjayA/XG4gICAgICB3aW5kb3cuY2FuY2VsSWRsZUNhbGxiYWNrKGhhbmRsZSkgOlxuICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYW5kbGUpO1xuICB9XG59O1xuZXhwb3J0IHtpZGxlUGVyaW9kfTtcblxuLyoqXG4gKiBBc3luYyBpbnRlcmZhY2UgZm9yIGVucXVldWluZyBjYWxsYmFja3MgdGhhdCBydW4gYXQgbWljcm90YXNrIHRpbWluZy5cbiAqXG4gKiBOb3RlIHRoYXQgbWljcm90YXNrIHRpbWluZyBpcyBhY2hpZXZlZCB2aWEgYSBzaW5nbGUgYE11dGF0aW9uT2JzZXJ2ZXJgLFxuICogYW5kIHRodXMgY2FsbGJhY2tzIGVucXVldWVkIHdpdGggdGhpcyBBUEkgd2lsbCBhbGwgcnVuIGluIGEgc2luZ2xlXG4gKiBiYXRjaCwgYW5kIG5vdCBpbnRlcmxlYXZlZCB3aXRoIG90aGVyIG1pY3JvdGFza3Mgc3VjaCBhcyBwcm9taXNlcy5cbiAqIFByb21pc2VzIGFyZSBhdm9pZGVkIGFzIGFuIGltcGxlbWVudGF0aW9uIGNob2ljZSBmb3IgdGhlIHRpbWUgYmVpbmdcbiAqIGR1ZSB0byBTYWZhcmkgYnVncyB0aGF0IGNhdXNlIFByb21pc2VzIHRvIGxhY2sgbWljcm90YXNrIGd1YXJhbnRlZXMuXG4gKlxuICogQG5hbWVzcGFjZVxuICogQHN1bW1hcnkgQXN5bmMgaW50ZXJmYWNlIGZvciBlbnF1ZXVpbmcgY2FsbGJhY2tzIHRoYXQgcnVuIGF0IG1pY3JvdGFza1xuICogICB0aW1pbmcuXG4gKi9cbmNvbnN0IG1pY3JvVGFzayA9IHtcblxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBmdW5jdGlvbiBjYWxsZWQgYXQgbWljcm90YXNrIHRpbWluZy5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1pY3JvVGFza1xuICAgKiBAcGFyYW0geyFGdW5jdGlvbj19IGNhbGxiYWNrIENhbGxiYWNrIHRvIHJ1blxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEhhbmRsZSB1c2VkIGZvciBjYW5jZWxpbmcgdGFza1xuICAgKi9cbiAgcnVuKGNhbGxiYWNrKSB7XG4gICAgaWYgKCFtaWNyb3Rhc2tTY2hlZHVsZWQpIHtcbiAgICAgIG1pY3JvdGFza1NjaGVkdWxlZCA9IHRydWU7XG4gICAgICBtaWNyb3Rhc2tOb2RlLnRleHRDb250ZW50ID0gbWljcm90YXNrTm9kZUNvbnRlbnQrKztcbiAgICB9XG4gICAgbWljcm90YXNrQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiBtaWNyb3Rhc2tDdXJySGFuZGxlKys7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbmNlbHMgYSBwcmV2aW91c2x5IGVucXVldWVkIGBtaWNyb1Rhc2tgIGNhbGxiYWNrLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbWljcm9UYXNrXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoYW5kbGUgSGFuZGxlIHJldHVybmVkIGZyb20gYHJ1bmAgb2YgY2FsbGJhY2sgdG8gY2FuY2VsXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBjYW5jZWwoaGFuZGxlKSB7XG4gICAgY29uc3QgaWR4ID0gaGFuZGxlIC0gbWljcm90YXNrTGFzdEhhbmRsZTtcbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIGlmICghbWljcm90YXNrQ2FsbGJhY2tzW2lkeF0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGFzeW5jIGhhbmRsZTogJyArIGhhbmRsZSk7XG4gICAgICB9XG4gICAgICBtaWNyb3Rhc2tDYWxsYmFja3NbaWR4XSA9IG51bGw7XG4gICAgfVxuICB9XG5cbn07XG5leHBvcnQge21pY3JvVGFza307XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcblxuaW1wb3J0IHsgZGVkdXBpbmdNaXhpbiB9IGZyb20gJy4uL3V0aWxzL21peGluLmpzJztcbmltcG9ydCB7IG1pY3JvVGFzayB9IGZyb20gJy4uL3V0aWxzL2FzeW5jLmpzJztcbmltcG9ydCB7IHdyYXAgfSBmcm9tICcuLi91dGlscy93cmFwLmpzJztcblxuLyoqIEBjb25zdCB7IUFzeW5jSW50ZXJmYWNlfSAqL1xuY29uc3QgbWljcm90YXNrID0gbWljcm9UYXNrO1xuXG4vKipcbiAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBiYXNpYyBtZXRhLXByb2dyYW1taW5nIGZvciBjcmVhdGluZyBvbmVcbiAqIG9yIG1vcmUgcHJvcGVydHkgYWNjZXNzb3JzIChnZXR0ZXIvc2V0dGVyIHBhaXIpIHRoYXQgZW5xdWV1ZSBhbiBhc3luY1xuICogKGJhdGNoZWQpIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrLlxuICpcbiAqIEZvciBiYXNpYyB1c2FnZSBvZiB0aGlzIG1peGluLCBjYWxsIGBNeUNsYXNzLmNyZWF0ZVByb3BlcnRpZXMocHJvcHMpYFxuICogb25jZSBhdCBjbGFzcyBkZWZpbml0aW9uIHRpbWUgdG8gY3JlYXRlIHByb3BlcnR5IGFjY2Vzc29ycyBmb3IgcHJvcGVydGllc1xuICogbmFtZWQgaW4gcHJvcHMsIGltcGxlbWVudCBgX3Byb3BlcnRpZXNDaGFuZ2VkYCB0byByZWFjdCBhcyBkZXNpcmVkIHRvXG4gKiBwcm9wZXJ0eSBjaGFuZ2VzLCBhbmQgaW1wbGVtZW50IGBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpYCBhbmRcbiAqIGluY2x1ZGUgbG93ZXJjYXNlIHZlcnNpb25zIG9mIGFueSBwcm9wZXJ0eSBuYW1lcyB0aGF0IHNob3VsZCBiZSBzZXQgZnJvbVxuICogYXR0cmlidXRlcy4gTGFzdCwgY2FsbCBgdGhpcy5fZW5hYmxlUHJvcGVydGllcygpYCBpbiB0aGUgZWxlbWVudCdzXG4gKiBgY29ubmVjdGVkQ2FsbGJhY2tgIHRvIGVuYWJsZSB0aGUgYWNjZXNzb3JzLlxuICpcbiAqIEBtaXhpbkZ1bmN0aW9uXG4gKiBAcG9seW1lclxuICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiBmb3IgcmVhY3RpbmcgdG8gcHJvcGVydHkgY2hhbmdlcyBmcm9tXG4gKiAgIGdlbmVyYXRlZCBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3MgQ2xhc3MgdG8gYXBwbHkgbWl4aW4gdG8uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3Mgd2l0aCBtaXhpbiBhcHBsaWVkLlxuICovXG5leHBvcnQgY29uc3QgUHJvcGVydGllc0NoYW5nZWQgPSBkZWR1cGluZ01peGluKFxuICAgIC8qKlxuICAgICAqIEB0ZW1wbGF0ZSBUXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3MgQ2xhc3MgdG8gYXBwbHkgbWl4aW4gdG8uXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24obmV3OlQpfSBzdXBlckNsYXNzIHdpdGggbWl4aW4gYXBwbGllZC5cbiAgICAgKi9cbiAgICAoc3VwZXJDbGFzcykgPT4ge1xuXG4gIC8qKlxuICAgKiBAcG9seW1lclxuICAgKiBAbWl4aW5DbGFzc1xuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0aWVzQ2hhbmdlZH1cbiAgICogQHVucmVzdHJpY3RlZFxuICAgKi9cbiAgY2xhc3MgUHJvcGVydGllc0NoYW5nZWQgZXh0ZW5kcyBzdXBlckNsYXNzIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgcHJvcGVydHkgYWNjZXNzb3JzIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBwcm9wcyBPYmplY3Qgd2hvc2Uga2V5cyBhcmUgbmFtZXMgb2YgYWNjZXNzb3JzLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZVByb3BlcnRpZXMocHJvcHMpIHtcbiAgICAgIGNvbnN0IHByb3RvID0gdGhpcy5wcm90b3R5cGU7XG4gICAgICBmb3IgKGxldCBwcm9wIGluIHByb3BzKSB7XG4gICAgICAgIC8vIGRvbid0IHN0b21wIGFuIGV4aXN0aW5nIGFjY2Vzc29yXG4gICAgICAgIGlmICghKHByb3AgaW4gcHJvdG8pKSB7XG4gICAgICAgICAgcHJvdG8uX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IocHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGF0dHJpYnV0ZSBuYW1lIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqIFRoZSBhdHRyaWJ1dGUgbmFtZSBpcyB0aGUgbG93ZXJjYXNlZCBwcm9wZXJ0eSBuYW1lLiBPdmVycmlkZSB0b1xuICAgICAqIGN1c3RvbWl6ZSB0aGlzIG1hcHBpbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IHRvIGNvbnZlcnRcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IEF0dHJpYnV0ZSBuYW1lIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHByb3BlcnR5LnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgcG9pbnQgdG8gcHJvdmlkZSBhIHR5cGUgdG8gd2hpY2ggdG8gZGVzZXJpYWxpemUgYSB2YWx1ZSB0b1xuICAgICAqIGEgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBwcm9wZXJ0eVxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIHR5cGVGb3JQcm9wZXJ0eShuYW1lKSB7IH0gLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0dGVyL2dldHRlciBwYWlyIGZvciB0aGUgbmFtZWQgcHJvcGVydHkgd2l0aCBpdHMgb3duXG4gICAgICogbG9jYWwgc3RvcmFnZS4gIFRoZSBnZXR0ZXIgcmV0dXJucyB0aGUgdmFsdWUgaW4gdGhlIGxvY2FsIHN0b3JhZ2UsXG4gICAgICogYW5kIHRoZSBzZXR0ZXIgY2FsbHMgYF9zZXRQcm9wZXJ0eWAsIHdoaWNoIHVwZGF0ZXMgdGhlIGxvY2FsIHN0b3JhZ2VcbiAgICAgKiBmb3IgdGhlIHByb3BlcnR5IGFuZCBlbnF1ZXVlcyBhIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgbWF5IGJlIGNhbGxlZCBvbiBhIHByb3RvdHlwZSBvciBhbiBpbnN0YW5jZS4gIENhbGxpbmdcbiAgICAgKiB0aGlzIG1ldGhvZCBtYXkgb3ZlcndyaXRlIGEgcHJvcGVydHkgdmFsdWUgdGhhdCBhbHJlYWR5IGV4aXN0cyBvblxuICAgICAqIHRoZSBwcm90b3R5cGUvaW5zdGFuY2UgYnkgY3JlYXRpbmcgdGhlIGFjY2Vzc29yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gcmVhZE9ubHkgV2hlbiB0cnVlLCBubyBzZXR0ZXIgaXMgY3JlYXRlZDsgdGhlXG4gICAgICogICBwcm90ZWN0ZWQgYF9zZXRQcm9wZXJ0eWAgZnVuY3Rpb24gbXVzdCBiZSB1c2VkIHRvIHNldCB0aGUgcHJvcGVydHlcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfY3JlYXRlUHJvcGVydHlBY2Nlc3Nvcihwcm9wZXJ0eSwgcmVhZE9ubHkpIHtcbiAgICAgIHRoaXMuX2FkZFByb3BlcnR5VG9BdHRyaWJ1dGVNYXAocHJvcGVydHkpO1xuICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19fZGF0YUhhc0FjY2Vzc29yJywgdGhpcykpKSB7XG4gICAgICAgIHRoaXMuX19kYXRhSGFzQWNjZXNzb3IgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9fZGF0YUhhc0FjY2Vzc29yKTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcltwcm9wZXJ0eV0pIHtcbiAgICAgICAgdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcltwcm9wZXJ0eV0gPSB0cnVlO1xuICAgICAgICB0aGlzLl9kZWZpbmVQcm9wZXJ0eUFjY2Vzc29yKHByb3BlcnR5LCByZWFkT25seSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgZ2l2ZW4gYHByb3BlcnR5YCB0byBhIG1hcCBtYXRjaGluZyBhdHRyaWJ1dGUgbmFtZXNcbiAgICAgKiB0byBwcm9wZXJ0eSBuYW1lcywgdXNpbmcgYGF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eWAuIFRoaXMgbWFwIGlzXG4gICAgICogdXNlZCB3aGVuIGRlc2VyaWFsaXppbmcgYXR0cmlidXRlIHZhbHVlcyB0byBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2FkZFByb3BlcnR5VG9BdHRyaWJ1dGVNYXAocHJvcGVydHkpIHtcbiAgICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX2RhdGFBdHRyaWJ1dGVzJywgdGhpcykpKSB7XG4gICAgICAgIHRoaXMuX19kYXRhQXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX19kYXRhQXR0cmlidXRlcyk7XG4gICAgICB9XG4gICAgICAvLyBUaGlzIGNoZWNrIGlzIHRlY2huaWNhbGx5IG5vdCBjb3JyZWN0OyBpdCdzIGFuIG9wdGltaXphdGlvbiB0aGF0XG4gICAgICAvLyBhc3N1bWVzIHRoYXQgaWYgYSBfcHJvcGVydHlfIG5hbWUgaXMgYWxyZWFkeSBpbiB0aGUgbWFwIChub3RlIHRoaXMgaXNcbiAgICAgIC8vIGFuIGF0dHItPnByb3BlcnR5IG1hcCksIHRoZSBwcm9wZXJ0eSBtYXBwZWQgZGlyZWN0bHkgdG8gdGhlIGF0dHJpYnV0ZVxuICAgICAgLy8gYW5kIGl0IGhhcyBhbHJlYWR5IGJlZW4gbWFwcGVkLiAgVGhpcyB3b3VsZCBmYWlsIGlmXG4gICAgICAvLyBgYXR0cmlidXRlTmFtZUZvclByb3BlcnR5YCB3ZXJlIG92ZXJyaWRkZW4gc3VjaCB0aGF0IHRoaXMgd2FzIG5vdCB0aGVcbiAgICAgIC8vIGNhc2UuXG4gICAgICBsZXQgYXR0ciA9IHRoaXMuX19kYXRhQXR0cmlidXRlc1twcm9wZXJ0eV07XG4gICAgICBpZiAoIWF0dHIpIHtcbiAgICAgICAgYXR0ciA9IHRoaXMuY29uc3RydWN0b3IuYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHByb3BlcnR5KTtcbiAgICAgICAgdGhpcy5fX2RhdGFBdHRyaWJ1dGVzW2F0dHJdID0gcHJvcGVydHk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXR0cjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGEgcHJvcGVydHkgYWNjZXNzb3IgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSByZWFkT25seSBXaGVuIHRydWUsIG5vIHNldHRlciBpcyBjcmVhdGVkXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICAgX2RlZmluZVByb3BlcnR5QWNjZXNzb3IocHJvcGVydHksIHJlYWRPbmx5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgcHJvcGVydHksIHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MgKi9cbiAgICAgICAgLyoqIEB0aGlzIHtQcm9wZXJ0aWVzQ2hhbmdlZH0gKi9cbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIC8vIElubGluZSBmb3IgcGVyZiBpbnN0ZWFkIG9mIHVzaW5nIGBfZ2V0UHJvcGVydHlgXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhW3Byb3BlcnR5XTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0aGlzIHtQcm9wZXJ0aWVzQ2hhbmdlZH0gKi9cbiAgICAgICAgc2V0OiByZWFkT25seSA/IGZ1bmN0aW9uICgpIHt9IDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgLy8gSW5saW5lIGZvciBwZXJmIGluc3RlYWQgb2YgdXNpbmcgYF9zZXRQcm9wZXJ0eWBcbiAgICAgICAgICBpZiAodGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSwgdHJ1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICAgIHRoaXMuX19kYXRhRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2RhdGFSZWFkeSA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2RhdGFJbnZhbGlkID0gZmFsc2U7XG4gICAgICB0aGlzLl9fZGF0YSA9IHt9O1xuICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nID0gbnVsbDtcbiAgICAgIHRoaXMuX19kYXRhT2xkID0gbnVsbDtcbiAgICAgIHRoaXMuX19kYXRhSW5zdGFuY2VQcm9wcyA9IG51bGw7XG4gICAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICAgIC8vIE5PVEU6IHVzZWQgdG8gdHJhY2sgcmUtZW50cmFudCBjYWxscyB0byBgX2ZsdXNoUHJvcGVydGllc2BcbiAgICAgIHRoaXMuX19kYXRhQ291bnRlciA9IDA7XG4gICAgICB0aGlzLl9fc2VyaWFsaXppbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2luaXRpYWxpemVQcm9wZXJ0aWVzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlmZWN5Y2xlIGNhbGxiYWNrIGNhbGxlZCB3aGVuIHByb3BlcnRpZXMgYXJlIGVuYWJsZWQgdmlhXG4gICAgICogYF9lbmFibGVQcm9wZXJ0aWVzYC5cbiAgICAgKlxuICAgICAqIFVzZXJzIG1heSBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIHRvIGltcGxlbWVudCBiZWhhdmlvciB0aGF0IGlzXG4gICAgICogZGVwZW5kZW50IG9uIHRoZSBlbGVtZW50IGhhdmluZyBpdHMgcHJvcGVydHkgZGF0YSBpbml0aWFsaXplZCwgZS5nLlxuICAgICAqIGZyb20gZGVmYXVsdHMgKGluaXRpYWxpemVkIGZyb20gYGNvbnN0cnVjdG9yYCwgYF9pbml0aWFsaXplUHJvcGVydGllc2ApLFxuICAgICAqIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgLCBvciB2YWx1ZXMgcHJvcGFnYXRlZCBmcm9tIGhvc3QgZS5nLiB2aWFcbiAgICAgKiBiaW5kaW5ncy4gIGBzdXBlci5yZWFkeSgpYCBtdXN0IGJlIGNhbGxlZCB0byBlbnN1cmUgdGhlIGRhdGEgc3lzdGVtXG4gICAgICogYmVjb21lcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHVibGljXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgcmVhZHkoKSB7XG4gICAgICB0aGlzLl9fZGF0YVJlYWR5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBsb2NhbCBzdG9yYWdlIGZvciBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gICAgICpcbiAgICAgKiBQcm92aWRlZCBhcyBhbiBvdmVycmlkZSBwb2ludCBmb3IgcGVyZm9ybWluZyBhbnkgc2V0dXAgd29yayBwcmlvclxuICAgICAqIHRvIGluaXRpYWxpemluZyB0aGUgcHJvcGVydHkgYWNjZXNzb3Igc3lzdGVtLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2luaXRpYWxpemVQcm9wZXJ0aWVzKCkge1xuICAgICAgLy8gQ2FwdHVyZSBpbnN0YW5jZSBwcm9wZXJ0aWVzOyB0aGVzZSB3aWxsIGJlIHNldCBpbnRvIGFjY2Vzc29yc1xuICAgICAgLy8gZHVyaW5nIGZpcnN0IGZsdXNoLiBEb24ndCBzZXQgdGhlbSBoZXJlLCBzaW5jZSB3ZSB3YW50XG4gICAgICAvLyB0aGVzZSB0byBvdmVyd3JpdGUgZGVmYXVsdHMvY29uc3RydWN0b3IgYXNzaWdubWVudHNcbiAgICAgIGZvciAobGV0IHAgaW4gdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcikge1xuICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICAgIHRoaXMuX19kYXRhSW5zdGFuY2VQcm9wcyA9IHRoaXMuX19kYXRhSW5zdGFuY2VQcm9wcyB8fCB7fTtcbiAgICAgICAgICB0aGlzLl9fZGF0YUluc3RhbmNlUHJvcHNbcF0gPSB0aGlzW3BdO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzW3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGF0IHJlYWR5IHRpbWUgd2l0aCBiYWcgb2YgaW5zdGFuY2UgcHJvcGVydGllcyB0aGF0IG92ZXJ3cm90ZVxuICAgICAqIGFjY2Vzc29ycyB3aGVuIHRoZSBlbGVtZW50IHVwZ3JhZGVkLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gc2V0cyB0aGVzZSBwcm9wZXJ0aWVzIGJhY2sgaW50byB0aGVcbiAgICAgKiBzZXR0ZXIgYXQgcmVhZHkgdGltZS4gIFRoaXMgbWV0aG9kIGlzIHByb3ZpZGVkIGFzIGFuIG92ZXJyaWRlXG4gICAgICogcG9pbnQgZm9yIGN1c3RvbWl6aW5nIG9yIHByb3ZpZGluZyBtb3JlIGVmZmljaWVudCBpbml0aWFsaXphdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgcHJvcGVydHkgdmFsdWVzIHRoYXQgd2VyZSBvdmVyd3JpdHRlblxuICAgICAqICAgd2hlbiBjcmVhdGluZyBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2luaXRpYWxpemVJbnN0YW5jZVByb3BlcnRpZXMocHJvcHMpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgcHJvcHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGxvY2FsIHN0b3JhZ2UgZm9yIGEgcHJvcGVydHkgKHZpYSBgX3NldFBlbmRpbmdQcm9wZXJ0eWApXG4gICAgICogYW5kIGVucXVldWVzIGEgYF9wcm9lcHJ0aWVzQ2hhbmdlZGAgY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkocHJvcGVydHksIHZhbHVlKSkge1xuICAgICAgICB0aGlzLl9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAgICAgKiBAcmV0dXJuIHsqfSBWYWx1ZSBmb3IgdGhlIGdpdmVuIHByb3BlcnR5XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9nZXRQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhW3Byb3BlcnR5XTtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGxvY2FsIHN0b3JhZ2UgZm9yIGEgcHJvcGVydHksIHJlY29yZHMgdGhlIHByZXZpb3VzIHZhbHVlLFxuICAgICAqIGFuZCBhZGRzIGl0IHRvIHRoZSBzZXQgb2YgXCJwZW5kaW5nIGNoYW5nZXNcIiB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZVxuICAgICAqIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrLiAgVGhpcyBtZXRob2QgZG9lcyBub3QgZW5xdWV1ZSB0aGVcbiAgICAgKiBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0XG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gZXh0IE5vdCB1c2VkIGhlcmU7IGFmZm9yZGFuY2UgZm9yIGNsb3N1cmVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3BlcnR5IGNoYW5nZWRcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUsIGV4dCkge1xuICAgICAgbGV0IG9sZCA9IHRoaXMuX19kYXRhW3Byb3BlcnR5XTtcbiAgICAgIGxldCBjaGFuZ2VkID0gdGhpcy5fc2hvdWxkUHJvcGVydHlDaGFuZ2UocHJvcGVydHksIHZhbHVlLCBvbGQpO1xuICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9fZGF0YVBlbmRpbmcpIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmcgPSB7fTtcbiAgICAgICAgICB0aGlzLl9fZGF0YU9sZCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSBvbGQgaXMgY2FwdHVyZWQgZnJvbSB0aGUgbGFzdCB0dXJuXG4gICAgICAgIGlmICh0aGlzLl9fZGF0YU9sZCAmJiAhKHByb3BlcnR5IGluIHRoaXMuX19kYXRhT2xkKSkge1xuICAgICAgICAgIHRoaXMuX19kYXRhT2xkW3Byb3BlcnR5XSA9IG9sZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9fZGF0YVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoYW5nZWQ7XG4gICAgfVxuICAgIC8qIGVzbGludC1lbmFibGUgKi9cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvcGVydHkgaXMgcGVuZGluZy5cbiAgICAgKi9cbiAgICBfaXNQcm9wZXJ0eVBlbmRpbmcocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiAhISh0aGlzLl9fZGF0YVBlbmRpbmcgJiYgdGhpcy5fX2RhdGFQZW5kaW5nLmhhc093blByb3BlcnR5KHByb3BlcnR5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFya3MgdGhlIHByb3BlcnRpZXMgYXMgaW52YWxpZCwgYW5kIGVucXVldWVzIGFuIGFzeW5jXG4gICAgICogYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfaW52YWxpZGF0ZVByb3BlcnRpZXMoKSB7XG4gICAgICBpZiAoIXRoaXMuX19kYXRhSW52YWxpZCAmJiB0aGlzLl9fZGF0YVJlYWR5KSB7XG4gICAgICAgIHRoaXMuX19kYXRhSW52YWxpZCA9IHRydWU7XG4gICAgICAgIG1pY3JvdGFzay5ydW4oKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLl9fZGF0YUludmFsaWQpIHtcbiAgICAgICAgICAgIHRoaXMuX19kYXRhSW52YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsIHRvIGVuYWJsZSBwcm9wZXJ0eSBhY2Nlc3NvciBwcm9jZXNzaW5nLiBCZWZvcmUgdGhpcyBtZXRob2QgaXNcbiAgICAgKiBjYWxsZWQgYWNjZXNzb3IgdmFsdWVzIHdpbGwgYmUgc2V0IGJ1dCBzaWRlIGVmZmVjdHMgYXJlXG4gICAgICogcXVldWVkLiBXaGVuIGNhbGxlZCwgYW55IHBlbmRpbmcgc2lkZSBlZmZlY3RzIG9jY3VyIGltbWVkaWF0ZWx5LlxuICAgICAqIEZvciBlbGVtZW50cywgZ2VuZXJhbGx5IGBjb25uZWN0ZWRDYWxsYmFja2AgaXMgYSBub3JtYWwgc3BvdCB0byBkbyBzby5cbiAgICAgKiBJdCBpcyBzYWZlIHRvIGNhbGwgdGhpcyBtZXRob2QgbXVsdGlwbGUgdGltZXMgYXMgaXQgb25seSB0dXJucyBvblxuICAgICAqIHByb3BlcnR5IGFjY2Vzc29ycyBvbmNlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2VuYWJsZVByb3BlcnRpZXMoKSB7XG4gICAgICBpZiAoIXRoaXMuX19kYXRhRW5hYmxlZCkge1xuICAgICAgICB0aGlzLl9fZGF0YUVuYWJsZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5fX2RhdGFJbnN0YW5jZVByb3BzKSB7XG4gICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZUluc3RhbmNlUHJvcGVydGllcyh0aGlzLl9fZGF0YUluc3RhbmNlUHJvcHMpO1xuICAgICAgICAgIHRoaXMuX19kYXRhSW5zdGFuY2VQcm9wcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWFkeSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxzIHRoZSBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBjYWxsYmFjayB3aXRoIHRoZSBjdXJyZW50IHNldCBvZlxuICAgICAqIHBlbmRpbmcgY2hhbmdlcyAoYW5kIG9sZCB2YWx1ZXMgcmVjb3JkZWQgd2hlbiBwZW5kaW5nIGNoYW5nZXMgd2VyZVxuICAgICAqIHNldCksIGFuZCByZXNldHMgdGhlIHBlbmRpbmcgc2V0IG9mIGNoYW5nZXMuIEdlbmVyYWxseSwgdGhpcyBtZXRob2RcbiAgICAgKiBzaG91bGQgbm90IGJlIGNhbGxlZCBpbiB1c2VyIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfZmx1c2hQcm9wZXJ0aWVzKCkge1xuICAgICAgdGhpcy5fX2RhdGFDb3VudGVyKys7XG4gICAgICBjb25zdCBwcm9wcyA9IHRoaXMuX19kYXRhO1xuICAgICAgY29uc3QgY2hhbmdlZFByb3BzID0gdGhpcy5fX2RhdGFQZW5kaW5nO1xuICAgICAgY29uc3Qgb2xkID0gdGhpcy5fX2RhdGFPbGQ7XG4gICAgICBpZiAodGhpcy5fc2hvdWxkUHJvcGVydGllc0NoYW5nZShwcm9wcywgY2hhbmdlZFByb3BzLCBvbGQpKSB7XG4gICAgICAgIHRoaXMuX19kYXRhUGVuZGluZyA9IG51bGw7XG4gICAgICAgIHRoaXMuX19kYXRhT2xkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJvcGVydGllc0NoYW5nZWQocHJvcHMsIGNoYW5nZWRQcm9wcywgb2xkKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19kYXRhQ291bnRlci0tO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBpbiBgX2ZsdXNoUHJvcGVydGllc2AgdG8gZGV0ZXJtaW5lIGlmIGBfcHJvcGVydGllc0NoYW5nZWRgXG4gICAgICogc2hvdWxkIGJlIGNhbGxlZC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gcmV0dXJucyB0cnVlIGlmXG4gICAgICogcHJvcGVydGllcyBhcmUgcGVuZGluZy4gT3ZlcnJpZGUgdG8gY3VzdG9taXplIHdoZW5cbiAgICAgKiBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBpcyBjYWxsZWQuXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBjdXJyZW50UHJvcHMgQmFnIG9mIGFsbCBjdXJyZW50IGFjY2Vzc29yIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7P09iamVjdH0gY2hhbmdlZFByb3BzIEJhZyBvZiBwcm9wZXJ0aWVzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3RcbiAgICAgKiAgIGNhbGwgdG8gYF9wcm9wZXJ0aWVzQ2hhbmdlZGBcbiAgICAgKiBAcGFyYW0gez9PYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGVhY2ggcHJvcGVydHlcbiAgICAgKiAgIGluIGBjaGFuZ2VkUHJvcHNgXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBjaGFuZ2VkUHJvcHMgaXMgdHJ1dGh5XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3Nob3VsZFByb3BlcnRpZXNDaGFuZ2UoY3VycmVudFByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBCb29sZWFuKGNoYW5nZWRQcm9wcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gYW55IHByb3BlcnRpZXMgd2l0aCBhY2Nlc3NvcnMgY3JlYXRlZCB2aWFcbiAgICAgKiBgX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3JgIGhhdmUgYmVlbiBzZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFPYmplY3R9IGN1cnJlbnRQcm9wcyBCYWcgb2YgYWxsIGN1cnJlbnQgYWNjZXNzb3IgdmFsdWVzXG4gICAgICogQHBhcmFtIHs/T2JqZWN0fSBjaGFuZ2VkUHJvcHMgQmFnIG9mIHByb3BlcnRpZXMgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdFxuICAgICAqICAgY2FsbCB0byBgX3Byb3BlcnRpZXNDaGFuZ2VkYFxuICAgICAqIEBwYXJhbSB7P09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgZWFjaCBwcm9wZXJ0eVxuICAgICAqICAgaW4gYGNoYW5nZWRQcm9wc2BcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfcHJvcGVydGllc0NoYW5nZWQoY3VycmVudFByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRob2QgY2FsbGVkIHRvIGRldGVybWluZSB3aGV0aGVyIGEgcHJvcGVydHkgdmFsdWUgc2hvdWxkIGJlXG4gICAgICogY29uc2lkZXJlZCBhcyBhIGNoYW5nZSBhbmQgY2F1c2UgdGhlIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrXG4gICAgICogdG8gYmUgZW5xdWV1ZWQuXG4gICAgICpcbiAgICAgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiByZXR1cm5zIGB0cnVlYCBpZiBhIHN0cmljdCBlcXVhbGl0eVxuICAgICAqIGNoZWNrIGZhaWxzLiBUaGUgbWV0aG9kIGFsd2F5cyByZXR1cm5zIGZhbHNlIGZvciBgTmFOYC5cbiAgICAgKlxuICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGUuZy4gcHJvdmlkZSBzdHJpY3RlciBjaGVja2luZyBmb3JcbiAgICAgKiBPYmplY3RzL0FycmF5cyB3aGVuIHVzaW5nIGltbXV0YWJsZSBwYXR0ZXJucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBOZXcgcHJvcGVydHkgdmFsdWVcbiAgICAgKiBAcGFyYW0geyp9IG9sZCBQcmV2aW91cyBwcm9wZXJ0eSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSBjb25zaWRlcmVkIGEgY2hhbmdlXG4gICAgICogICBhbmQgZW5xdWV1ZSBhIGBfcHJvZXBydGllc0NoYW5nZWRgIGNhbGxiYWNrXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9zaG91bGRQcm9wZXJ0eUNoYW5nZShwcm9wZXJ0eSwgdmFsdWUsIG9sZCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgLy8gU3RyaWN0IGVxdWFsaXR5IGNoZWNrXG4gICAgICAgIChvbGQgIT09IHZhbHVlICYmXG4gICAgICAgICAgLy8gVGhpcyBlbnN1cmVzIChvbGQ9PU5hTiwgdmFsdWU9PU5hTikgYWx3YXlzIHJldHVybnMgZmFsc2VcbiAgICAgICAgICAob2xkID09PSBvbGQgfHwgdmFsdWUgPT09IHZhbHVlKSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50cyBuYXRpdmUgQ3VzdG9tIEVsZW1lbnRzIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgIHRvXG4gICAgICogc2V0IGFuIGF0dHJpYnV0ZSB2YWx1ZSB0byBhIHByb3BlcnR5IHZpYSBgX2F0dHJpYnV0ZVRvUHJvcGVydHlgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBhdHRyaWJ1dGUgdGhhdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSBvbGQgT2xkIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgTmV3IGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gbmFtZXNwYWNlIEF0dHJpYnV0ZSBuYW1lc3BhY2UuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBTdXBlciBtYXkgb3IgbWF5IG5vdCBpbXBsZW1lbnQgdGhlIGNhbGxiYWNrXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZCwgdmFsdWUsIG5hbWVzcGFjZSkge1xuICAgICAgaWYgKG9sZCAhPT0gdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3VwZXIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKSB7XG4gICAgICAgIHN1cGVyLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGQsIHZhbHVlLCBuYW1lc3BhY2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc2VyaWFsaXplcyBhbiBhdHRyaWJ1dGUgdG8gaXRzIGFzc29jaWF0ZWQgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBjYWxscyB0aGUgYF9kZXNlcmlhbGl6ZVZhbHVlYCBtZXRob2QgdG8gY29udmVydCB0aGUgc3RyaW5nIHRvXG4gICAgICogYSB0eXBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGUgTmFtZSBvZiBhdHRyaWJ1dGUgdG8gZGVzZXJpYWxpemUuXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7Kj19IHR5cGUgdHlwZSB0byBkZXNlcmlhbGl6ZSB0bywgZGVmYXVsdHMgdG8gdGhlIHZhbHVlXG4gICAgICogcmV0dXJuZWQgZnJvbSBgdHlwZUZvclByb3BlcnR5YFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2F0dHJpYnV0ZVRvUHJvcGVydHkoYXR0cmlidXRlLCB2YWx1ZSwgdHlwZSkge1xuICAgICAgaWYgKCF0aGlzLl9fc2VyaWFsaXppbmcpIHtcbiAgICAgICAgY29uc3QgbWFwID0gdGhpcy5fX2RhdGFBdHRyaWJ1dGVzO1xuICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IG1hcCAmJiBtYXBbYXR0cmlidXRlXSB8fCBhdHRyaWJ1dGU7XG4gICAgICAgIHRoaXNbcHJvcGVydHldID0gdGhpcy5fZGVzZXJpYWxpemVWYWx1ZSh2YWx1ZSwgdHlwZSB8fFxuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IudHlwZUZvclByb3BlcnR5KHByb3BlcnR5KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyBhIHByb3BlcnR5IHRvIGl0cyBhc3NvY2lhdGVkIGF0dHJpYnV0ZS5cbiAgICAgKlxuICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfSBDbG9zdXJlIGNhbid0IGZpZ3VyZSBvdXQgYHRoaXNgIGlzIGFuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZSB0byByZWZsZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gYXR0cmlidXRlIEF0dHJpYnV0ZSBuYW1lIHRvIHJlZmxlY3QgdG8uXG4gICAgICogQHBhcmFtIHsqPX0gdmFsdWUgUHJvcGVydHkgdmFsdWUgdG8gcmVmZWN0LlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3Byb3BlcnR5VG9BdHRyaWJ1dGUocHJvcGVydHksIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICAgIHRoaXMuX19zZXJpYWxpemluZyA9IHRydWU7XG4gICAgICB2YWx1ZSA9IChhcmd1bWVudHMubGVuZ3RoIDwgMykgPyB0aGlzW3Byb3BlcnR5XSA6IHZhbHVlO1xuICAgICAgdGhpcy5fdmFsdWVUb05vZGVBdHRyaWJ1dGUoLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKHRoaXMpLCB2YWx1ZSxcbiAgICAgICAgYXR0cmlidXRlIHx8IHRoaXMuY29uc3RydWN0b3IuYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHByb3BlcnR5KSk7XG4gICAgICB0aGlzLl9fc2VyaWFsaXppbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdHlwZWQgdmFsdWUgdG8gYW4gSFRNTCBhdHRyaWJ1dGUgb24gYSBub2RlLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgY2FsbHMgdGhlIGBfc2VyaWFsaXplVmFsdWVgIG1ldGhvZCB0byBjb252ZXJ0IHRoZSB0eXBlZFxuICAgICAqIHZhbHVlIHRvIGEgc3RyaW5nLiAgSWYgdGhlIGBfc2VyaWFsaXplVmFsdWVgIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIHRoZSBhdHRyaWJ1dGUgd2lsbCBiZSByZW1vdmVkICh0aGlzIGlzIHRoZSBkZWZhdWx0IGZvciBib29sZWFuXG4gICAgICogdHlwZSBgZmFsc2VgKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZSBFbGVtZW50IHRvIHNldCBhdHRyaWJ1dGUgdG8uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXJpYWxpemUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZSBBdHRyaWJ1dGUgbmFtZSB0byBzZXJpYWxpemUgdG8uXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfdmFsdWVUb05vZGVBdHRyaWJ1dGUobm9kZSwgdmFsdWUsIGF0dHJpYnV0ZSkge1xuICAgICAgY29uc3Qgc3RyID0gdGhpcy5fc2VyaWFsaXplVmFsdWUodmFsdWUpO1xuICAgICAgaWYgKGF0dHJpYnV0ZSA9PT0gJ2NsYXNzJyB8fCBhdHRyaWJ1dGUgPT09ICduYW1lJyB8fCBhdHRyaWJ1dGUgPT09ICdzbG90Jykge1xuICAgICAgICBub2RlID0gLyoqIEB0eXBlIHs/RWxlbWVudH0gKi8od3JhcChub2RlKSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgc3RyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIHR5cGVkIEphdmFTY3JpcHQgdmFsdWUgdG8gYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiBzZXR0aW5nIEpTIHByb3BlcnR5IHZhbHVlcyB0b1xuICAgICAqIEhUTUwgYXR0cmlidXRlcy4gIFVzZXJzIG1heSBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwcm92aWRlXG4gICAgICogc2VyaWFsaXphdGlvbiBmb3IgY3VzdG9tIHR5cGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBQcm9wZXJ0eSB2YWx1ZSB0byBzZXJpYWxpemUuXG4gICAgICogQHJldHVybiB7c3RyaW5nIHwgdW5kZWZpbmVkfSBTdHJpbmcgc2VyaWFsaXplZCBmcm9tIHRoZSBwcm92aWRlZFxuICAgICAqIHByb3BlcnR5ICB2YWx1ZS5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfc2VyaWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgIHJldHVybiB2YWx1ZSA/ICcnIDogdW5kZWZpbmVkO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsID8gdmFsdWUudG9TdHJpbmcoKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIHN0cmluZyB0byBhIHR5cGVkIEphdmFTY3JpcHQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiByZWFkaW5nIEhUTUwgYXR0cmlidXRlIHZhbHVlcyB0b1xuICAgICAqIEpTIHByb3BlcnRpZXMuICBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcHJvdmlkZVxuICAgICAqIGRlc2VyaWFsaXphdGlvbiBmb3IgY3VzdG9tIGB0eXBlYHMuIFR5cGVzIGZvciBgQm9vbGVhbmAsIGBTdHJpbmdgLFxuICAgICAqIGFuZCBgTnVtYmVyYCBjb252ZXJ0IGF0dHJpYnV0ZXMgdG8gdGhlIGV4cGVjdGVkIHR5cGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byBkZXNlcmlhbGl6ZS5cbiAgICAgKiBAcGFyYW0geyo9fSB0eXBlIFR5cGUgdG8gZGVzZXJpYWxpemUgdGhlIHN0cmluZyB0by5cbiAgICAgKiBAcmV0dXJuIHsqfSBUeXBlZCB2YWx1ZSBkZXNlcmlhbGl6ZWQgZnJvbSB0aGUgcHJvdmlkZWQgc3RyaW5nLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9kZXNlcmlhbGl6ZVZhbHVlKHZhbHVlLCB0eXBlKSB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgICAgIHJldHVybiAodmFsdWUgIT09IG51bGwpO1xuICAgICAgICBjYXNlIE51bWJlcjpcbiAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gUHJvcGVydGllc0NoYW5nZWQ7XG59KTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4uL3V0aWxzL2Jvb3QuanMnO1xuXG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuaW1wb3J0IHsgY2FtZWxUb0Rhc2hDYXNlLCBkYXNoVG9DYW1lbENhc2UgfSBmcm9tICcuLi91dGlscy9jYXNlLW1hcC5qcyc7XG5pbXBvcnQgeyBQcm9wZXJ0aWVzQ2hhbmdlZCB9IGZyb20gJy4vcHJvcGVydGllcy1jaGFuZ2VkLmpzJztcblxuLy8gU2F2ZSBtYXAgb2YgbmF0aXZlIHByb3BlcnRpZXM7IHRoaXMgZm9ybXMgYSBibGFja2xpc3Qgb3IgcHJvcGVydGllc1xuLy8gdGhhdCB3b24ndCBoYXZlIHRoZWlyIHZhbHVlcyBcInNhdmVkXCIgYnkgYHNhdmVBY2Nlc3NvclZhbHVlYCwgc2luY2Vcbi8vIHJlYWRpbmcgZnJvbSBhbiBIVE1MRWxlbWVudCBhY2Nlc3NvciBmcm9tIHRoZSBjb250ZXh0IG9mIGEgcHJvdG90eXBlIHRocm93c1xuY29uc3QgbmF0aXZlUHJvcGVydGllcyA9IHt9O1xubGV0IHByb3RvID0gSFRNTEVsZW1lbnQucHJvdG90eXBlO1xud2hpbGUgKHByb3RvKSB7XG4gIGxldCBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3RvKTtcbiAgZm9yIChsZXQgaT0wOyBpPHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgbmF0aXZlUHJvcGVydGllc1twcm9wc1tpXV0gPSB0cnVlO1xuICB9XG4gIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbn1cblxuLyoqXG4gKiBVc2VkIHRvIHNhdmUgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgdGhhdCB3aWxsIGJlIG92ZXJyaWRkZW4gd2l0aFxuICogYW4gYWNjZXNzb3IuIElmIHRoZSBgbW9kZWxgIGlzIGEgcHJvdG90eXBlLCB0aGUgdmFsdWVzIHdpbGwgYmUgc2F2ZWRcbiAqIGluIGBfX2RhdGFQcm90b2AsIGFuZCBpdCdzIHVwIHRvIHRoZSB1c2VyIChvciBkb3duc3RyZWFtIG1peGluKSB0b1xuICogZGVjaWRlIGhvdy93aGVuIHRvIHNldCB0aGVzZSB2YWx1ZXMgYmFjayBpbnRvIHRoZSBhY2Nlc3NvcnMuXG4gKiBJZiBgbW9kZWxgIGlzIGFscmVhZHkgYW4gaW5zdGFuY2UgKGl0IGhhcyBhIGBfX2RhdGFgIHByb3BlcnR5KSwgdGhlblxuICogdGhlIHZhbHVlIHdpbGwgYmUgc2V0IGFzIGEgcGVuZGluZyBwcm9wZXJ0eSwgbWVhbmluZyB0aGUgdXNlciBzaG91bGRcbiAqIGNhbGwgYF9pbnZhbGlkYXRlUHJvcGVydGllc2Agb3IgYF9mbHVzaFByb3BlcnRpZXNgIHRvIHRha2UgZWZmZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG1vZGVsIFByb3RvdHlwZSBvciBpbnN0YW5jZVxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzYXZlQWNjZXNzb3JWYWx1ZShtb2RlbCwgcHJvcGVydHkpIHtcbiAgLy8gRG9uJ3QgcmVhZC9zdG9yZSB2YWx1ZSBmb3IgYW55IG5hdGl2ZSBwcm9wZXJ0aWVzIHNpbmNlIHRoZXkgY291bGQgdGhyb3dcbiAgaWYgKCFuYXRpdmVQcm9wZXJ0aWVzW3Byb3BlcnR5XSkge1xuICAgIGxldCB2YWx1ZSA9IG1vZGVsW3Byb3BlcnR5XTtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKG1vZGVsLl9fZGF0YSkge1xuICAgICAgICAvLyBBZGRpbmcgYWNjZXNzb3IgdG8gaW5zdGFuY2U7IHVwZGF0ZSB0aGUgcHJvcGVydHlcbiAgICAgICAgLy8gSXQgaXMgdGhlIHVzZXIncyByZXNwb25zaWJpbGl0eSB0byBjYWxsIF9mbHVzaFByb3BlcnRpZXNcbiAgICAgICAgbW9kZWwuX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQWRkaW5nIGFjY2Vzc29yIHRvIHByb3RvOyBzYXZlIHByb3RvJ3MgdmFsdWUgZm9yIGluc3RhbmNlLXRpbWUgdXNlXG4gICAgICAgIGlmICghbW9kZWwuX19kYXRhUHJvdG8pIHtcbiAgICAgICAgICBtb2RlbC5fX2RhdGFQcm90byA9IHt9O1xuICAgICAgICB9IGVsc2UgaWYgKCFtb2RlbC5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX2RhdGFQcm90bycsIG1vZGVsKSkpIHtcbiAgICAgICAgICBtb2RlbC5fX2RhdGFQcm90byA9IE9iamVjdC5jcmVhdGUobW9kZWwuX19kYXRhUHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIG1vZGVsLl9fZGF0YVByb3RvW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBiYXNpYyBtZXRhLXByb2dyYW1taW5nIGZvciBjcmVhdGluZyBvbmVcbiAqIG9yIG1vcmUgcHJvcGVydHkgYWNjZXNzb3JzIChnZXR0ZXIvc2V0dGVyIHBhaXIpIHRoYXQgZW5xdWV1ZSBhbiBhc3luY1xuICogKGJhdGNoZWQpIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrLlxuICpcbiAqIEZvciBiYXNpYyB1c2FnZSBvZiB0aGlzIG1peGluOlxuICpcbiAqIC0gICBEZWNsYXJlIGF0dHJpYnV0ZXMgdG8gb2JzZXJ2ZSB2aWEgdGhlIHN0YW5kYXJkIGBzdGF0aWMgZ2V0XG4gKiAgICAgb2JzZXJ2ZWRBdHRyaWJ1dGVzKClgLiBVc2UgYGRhc2gtY2FzZWAgYXR0cmlidXRlIG5hbWVzIHRvIHJlcHJlc2VudFxuICogICAgIGBjYW1lbENhc2VgIHByb3BlcnR5IG5hbWVzLlxuICogLSAgIEltcGxlbWVudCB0aGUgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgY2FsbGJhY2sgb24gdGhlIGNsYXNzLlxuICogLSAgIENhbGwgYE15Q2xhc3MuY3JlYXRlUHJvcGVydGllc0ZvckF0dHJpYnV0ZXMoKWAgKipvbmNlKiogb24gdGhlIGNsYXNzIHRvXG4gKiAgICAgZ2VuZXJhdGUgcHJvcGVydHkgYWNjZXNzb3JzIGZvciBlYWNoIG9ic2VydmVkIGF0dHJpYnV0ZS4gVGhpcyBtdXN0IGJlXG4gKiAgICAgY2FsbGVkIGJlZm9yZSB0aGUgZmlyc3QgaW5zdGFuY2UgaXMgY3JlYXRlZCwgZm9yIGV4YW1wbGUsIGJ5IGNhbGxpbmcgaXRcbiAqICAgICBiZWZvcmUgY2FsbGluZyBgY3VzdG9tRWxlbWVudHMuZGVmaW5lYC4gSXQgY2FuIGFsc28gYmUgY2FsbGVkIGxhemlseSBmcm9tXG4gKiAgICAgdGhlIGVsZW1lbnQncyBgY29uc3RydWN0b3JgLCBhcyBsb25nIGFzIGl0J3MgZ3VhcmRlZCBzbyB0aGF0IHRoZSBjYWxsIGlzXG4gKiAgICAgb25seSBtYWRlIG9uY2UsIHdoZW4gdGhlIGZpcnN0IGluc3RhbmNlIGlzIGNyZWF0ZWQuXG4gKiAtICAgQ2FsbCBgdGhpcy5fZW5hYmxlUHJvcGVydGllcygpYCBpbiB0aGUgZWxlbWVudCdzIGBjb25uZWN0ZWRDYWxsYmFja2AgdG9cbiAqICAgICBlbmFibGUgdGhlIGFjY2Vzc29ycy5cbiAqXG4gKiBBbnkgYG9ic2VydmVkQXR0cmlidXRlc2Agd2lsbCBhdXRvbWF0aWNhbGx5IGJlXG4gKiBkZXNlcmlhbGl6ZWQgdmlhIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgIGFuZCBzZXQgdG8gdGhlIGFzc29jaWF0ZWRcbiAqIHByb3BlcnR5IHVzaW5nIGBkYXNoLWNhc2VgLXRvLWBjYW1lbENhc2VgIGNvbnZlbnRpb24uXG4gKlxuICogQG1peGluRnVuY3Rpb25cbiAqIEBwb2x5bWVyXG4gKiBAYXBwbGllc01peGluIFByb3BlcnRpZXNDaGFuZ2VkXG4gKiBAc3VtbWFyeSBFbGVtZW50IGNsYXNzIG1peGluIGZvciByZWFjdGluZyB0byBwcm9wZXJ0eSBjaGFuZ2VzIGZyb21cbiAqICAgZ2VuZXJhdGVkIHByb3BlcnR5IGFjY2Vzc29ycy5cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyBDbGFzcyB0byBhcHBseSBtaXhpbiB0by5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyB3aXRoIG1peGluIGFwcGxpZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBQcm9wZXJ0eUFjY2Vzc29ycyA9IGRlZHVwaW5nTWl4aW4oc3VwZXJDbGFzcyA9PiB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0aWVzQ2hhbmdlZH1cbiAgICogQHVucmVzdHJpY3RlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgIGNvbnN0IGJhc2UgPSBQcm9wZXJ0aWVzQ2hhbmdlZChzdXBlckNsYXNzKTtcblxuICAvKipcbiAgICogQHBvbHltZXJcbiAgICogQG1peGluQ2xhc3NcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlBY2Nlc3NvcnN9XG4gICAqIEBleHRlbmRzIHtiYXNlfVxuICAgKiBAdW5yZXN0cmljdGVkXG4gICAqL1xuICBjbGFzcyBQcm9wZXJ0eUFjY2Vzc29ycyBleHRlbmRzIGJhc2Uge1xuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIHByb3BlcnR5IGFjY2Vzc29ycyBmb3IgYWxsIGF0dHJpYnV0ZXMgaW4gdGhlIHN0YW5kYXJkXG4gICAgICogc3RhdGljIGBvYnNlcnZlZEF0dHJpYnV0ZXNgIGFycmF5LlxuICAgICAqXG4gICAgICogQXR0cmlidXRlIG5hbWVzIGFyZSBtYXBwZWQgdG8gcHJvcGVydHkgbmFtZXMgdXNpbmcgdGhlIGBkYXNoLWNhc2VgIHRvXG4gICAgICogYGNhbWVsQ2FzZWAgY29udmVudGlvblxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVQcm9wZXJ0aWVzRm9yQXR0cmlidXRlcygpIHtcbiAgICAgIGxldCBhJCA9ICAvKiogQHR5cGUgez99ICovICh0aGlzKS5vYnNlcnZlZEF0dHJpYnV0ZXM7XG4gICAgICBmb3IgKGxldCBpPTA7IGkgPCBhJC5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnByb3RvdHlwZS5fY3JlYXRlUHJvcGVydHlBY2Nlc3NvcihkYXNoVG9DYW1lbENhc2UoYSRbaV0pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGF0dHJpYnV0ZSBuYW1lIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqIEJ5IGRlZmF1bHQsIGNvbnZlcnRzIGNhbWVsIHRvIGRhc2ggY2FzZSwgZS5nLiBgZm9vQmFyYCB0byBgZm9vLWJhcmAuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IHRvIGNvbnZlcnRcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IEF0dHJpYnV0ZSBuYW1lIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIGNhbWVsVG9EYXNoQ2FzZShwcm9wZXJ0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIFByb3BlcnRpZXNDaGFuZ2VkIGltcGxlbWVudGF0aW9uIHRvIGluaXRpYWxpemUgdmFsdWVzIGZvclxuICAgICAqIGFjY2Vzc29ycyBjcmVhdGVkIGZvciB2YWx1ZXMgdGhhdCBhbHJlYWR5IGV4aXN0ZWQgb24gdGhlIGVsZW1lbnRcbiAgICAgKiBwcm90b3R5cGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfaW5pdGlhbGl6ZVByb3BlcnRpZXMoKSB7XG4gICAgICBpZiAodGhpcy5fX2RhdGFQcm90bykge1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplUHJvdG9Qcm9wZXJ0aWVzKHRoaXMuX19kYXRhUHJvdG8pO1xuICAgICAgICB0aGlzLl9fZGF0YVByb3RvID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHN1cGVyLl9pbml0aWFsaXplUHJvcGVydGllcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBhdCBpbnN0YW5jZSB0aW1lIHdpdGggYmFnIG9mIHByb3BlcnRpZXMgdGhhdCB3ZXJlIG92ZXJ3cml0dGVuXG4gICAgICogYnkgYWNjZXNzb3JzIG9uIHRoZSBwcm90b3R5cGUgd2hlbiBhY2Nlc3NvcnMgd2VyZSBjcmVhdGVkLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gc2V0cyB0aGVzZSBwcm9wZXJ0aWVzIGJhY2sgaW50byB0aGVcbiAgICAgKiBzZXR0ZXIgYXQgaW5zdGFuY2UgdGltZS4gIFRoaXMgbWV0aG9kIGlzIHByb3ZpZGVkIGFzIGFuIG92ZXJyaWRlXG4gICAgICogcG9pbnQgZm9yIGN1c3RvbWl6aW5nIG9yIHByb3ZpZGluZyBtb3JlIGVmZmljaWVudCBpbml0aWFsaXphdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgcHJvcGVydHkgdmFsdWVzIHRoYXQgd2VyZSBvdmVyd3JpdHRlblxuICAgICAqICAgd2hlbiBjcmVhdGluZyBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2luaXRpYWxpemVQcm90b1Byb3BlcnRpZXMocHJvcHMpIHtcbiAgICAgIGZvciAobGV0IHAgaW4gcHJvcHMpIHtcbiAgICAgICAgdGhpcy5fc2V0UHJvcGVydHkocCwgcHJvcHNbcF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuc3VyZXMgdGhlIGVsZW1lbnQgaGFzIHRoZSBnaXZlbiBhdHRyaWJ1dGUuIElmIGl0IGRvZXMgbm90LFxuICAgICAqIGFzc2lnbnMgdGhlIGdpdmVuIHZhbHVlIHRvIHRoZSBhdHRyaWJ1dGUuXG4gICAgICpcbiAgICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c30gQ2xvc3VyZSBjYW4ndCBmaWd1cmUgb3V0IGB0aGlzYCBpcyBpbmZhY3QgYW5cbiAgICAgKiAgICAgZWxlbWVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZSBOYW1lIG9mIGF0dHJpYnV0ZSB0byBlbnN1cmUgaXMgc2V0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2Vuc3VyZUF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgICBjb25zdCBlbCA9IC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyh0aGlzKTtcbiAgICAgIGlmICghZWwuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgdGhpcy5fdmFsdWVUb05vZGVBdHRyaWJ1dGUoZWwsIHZhbHVlLCBhdHRyaWJ1dGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBQcm9wZXJ0aWVzQ2hhbmdlZCBpbXBsZW1lbnRpb24gdG8gc2VyaWFsaXplIG9iamVjdHMgYXMgSlNPTi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgUHJvcGVydHkgdmFsdWUgdG8gc2VyaWFsaXplLlxuICAgICAqIEByZXR1cm4ge3N0cmluZyB8IHVuZGVmaW5lZH0gU3RyaW5nIHNlcmlhbGl6ZWQgZnJvbSB0aGUgcHJvdmlkZWQgcHJvcGVydHlcbiAgICAgKiAgICAgdmFsdWUuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3NlcmlhbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICAgICAgfSBjYXRjaCh4KSB7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gc3VwZXIuX3NlcmlhbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIHN0cmluZyB0byBhIHR5cGVkIEphdmFTY3JpcHQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgUG9seW1lciB3aGVuIHJlYWRpbmcgSFRNTCBhdHRyaWJ1dGUgdmFsdWVzIHRvXG4gICAgICogSlMgcHJvcGVydGllcy4gIFVzZXJzIG1heSBvdmVycmlkZSB0aGlzIG1ldGhvZCBvbiBQb2x5bWVyIGVsZW1lbnRcbiAgICAgKiBwcm90b3R5cGVzIHRvIHByb3ZpZGUgZGVzZXJpYWxpemF0aW9uIGZvciBjdXN0b20gYHR5cGVgcy4gIE5vdGUsXG4gICAgICogdGhlIGB0eXBlYCBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGB0eXBlYCBmaWVsZCBwcm92aWRlZCBpbiB0aGVcbiAgICAgKiBgcHJvcGVydGllc2AgY29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGEgZ2l2ZW4gcHJvcGVydHksIGFuZCBpc1xuICAgICAqIGJ5IGNvbnZlbnRpb24gdGhlIGNvbnN0cnVjdG9yIGZvciB0aGUgdHlwZSB0byBkZXNlcmlhbGl6ZS5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBBdHRyaWJ1dGUgdmFsdWUgdG8gZGVzZXJpYWxpemUuXG4gICAgICogQHBhcmFtIHsqPX0gdHlwZSBUeXBlIHRvIGRlc2VyaWFsaXplIHRoZSBzdHJpbmcgdG8uXG4gICAgICogQHJldHVybiB7Kn0gVHlwZWQgdmFsdWUgZGVzZXJpYWxpemVkIGZyb20gdGhlIHByb3ZpZGVkIHN0cmluZy5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfZGVzZXJpYWxpemVWYWx1ZSh2YWx1ZSwgdHlwZSkge1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7Kn1cbiAgICAgICAqL1xuICAgICAgbGV0IG91dFZhbHVlO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgT2JqZWN0OlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvdXRWYWx1ZSA9IEpTT04ucGFyc2UoLyoqIEB0eXBlIHtzdHJpbmd9ICovKHZhbHVlKSk7XG4gICAgICAgICAgfSBjYXRjaCh4KSB7XG4gICAgICAgICAgICAvLyBhbGxvdyBub24tSlNPTiBsaXRlcmFscyBsaWtlIFN0cmluZ3MgYW5kIE51bWJlcnNcbiAgICAgICAgICAgIG91dFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFycmF5OlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvdXRWYWx1ZSA9IEpTT04ucGFyc2UoLyoqIEB0eXBlIHtzdHJpbmd9ICovKHZhbHVlKSk7XG4gICAgICAgICAgfSBjYXRjaCh4KSB7XG4gICAgICAgICAgICBvdXRWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFBvbHltZXI6OkF0dHJpYnV0ZXM6IGNvdWxkbid0IGRlY29kZSBBcnJheSBhcyBKU09OOiAke3ZhbHVlfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBEYXRlOlxuICAgICAgICAgIG91dFZhbHVlID0gaXNOYU4odmFsdWUpID8gU3RyaW5nKHZhbHVlKSA6IE51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgb3V0VmFsdWUgPSBuZXcgRGF0ZShvdXRWYWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgb3V0VmFsdWUgPSBzdXBlci5fZGVzZXJpYWxpemVWYWx1ZSh2YWx1ZSwgdHlwZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0VmFsdWU7XG4gICAgfVxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tZmFsbHRocm91Z2ggKi9cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBQcm9wZXJ0aWVzQ2hhbmdlZCBpbXBsZW1lbnRhdGlvbiB0byBzYXZlIGV4aXN0aW5nIHByb3RvdHlwZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIHNvIHRoYXQgaXQgY2FuIGJlIHJlc2V0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlYWRPbmx5IFdoZW4gdHJ1ZSwgbm8gc2V0dGVyIGlzIGNyZWF0ZWRcbiAgICAgKlxuICAgICAqIFdoZW4gY2FsbGluZyBvbiBhIHByb3RvdHlwZSwgYW55IG92ZXJ3cml0dGVuIHZhbHVlcyBhcmUgc2F2ZWQgaW5cbiAgICAgKiBgX19kYXRhUHJvdG9gLCBhbmQgaXQgaXMgdXAgdG8gdGhlIHN1YmNsYXNzZXIgdG8gZGVjaWRlIGhvdy93aGVuXG4gICAgICogdG8gc2V0IHRob3NlIHByb3BlcnRpZXMgYmFjayBpbnRvIHRoZSBhY2Nlc3Nvci4gIFdoZW4gY2FsbGluZyBvbiBhblxuICAgICAqIGluc3RhbmNlLCB0aGUgb3ZlcndyaXR0ZW4gdmFsdWUgaXMgc2V0IHZpYSBgX3NldFBlbmRpbmdQcm9wZXJ0eWAsXG4gICAgICogYW5kIHRoZSB1c2VyIHNob3VsZCBjYWxsIGBfaW52YWxpZGF0ZVByb3BlcnRpZXNgIG9yIGBfZmx1c2hQcm9wZXJ0aWVzYFxuICAgICAqIGZvciB0aGUgdmFsdWVzIHRvIHRha2UgZWZmZWN0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9kZWZpbmVQcm9wZXJ0eUFjY2Vzc29yKHByb3BlcnR5LCByZWFkT25seSkge1xuICAgICAgc2F2ZUFjY2Vzc29yVmFsdWUodGhpcywgcHJvcGVydHkpO1xuICAgICAgc3VwZXIuX2RlZmluZVByb3BlcnR5QWNjZXNzb3IocHJvcGVydHksIHJlYWRPbmx5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBsaWJyYXJ5IGNyZWF0ZWQgYW4gYWNjZXNzb3IgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbiBhY2Nlc3NvciB3YXMgY3JlYXRlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9oYXNBY2Nlc3Nvcihwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhSGFzQWNjZXNzb3IgJiYgdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcltwcm9wZXJ0eV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgaGFzIGEgcGVuZGluZyBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBwcm9wZXJ0eSBoYXMgYSBwZW5kaW5nIGNoYW5nZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfaXNQcm9wZXJ0eVBlbmRpbmcocHJvcCkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5fX2RhdGFQZW5kaW5nICYmIChwcm9wIGluIHRoaXMuX19kYXRhUGVuZGluZykpO1xuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIFByb3BlcnR5QWNjZXNzb3JzO1xuXG59KTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4uL3V0aWxzL2Jvb3QuanMnO1xuXG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuXG4vLyAxLnggYmFja3dhcmRzLWNvbXBhdGlibGUgYXV0by13cmFwcGVyIGZvciB0ZW1wbGF0ZSB0eXBlIGV4dGVuc2lvbnNcbi8vIFRoaXMgaXMgYSBjbGVhciBsYXllcmluZyB2aW9sYXRpb24gYW5kIGdpdmVzIGZhdm9yZWQtbmF0aW9uIHN0YXR1cyB0b1xuLy8gZG9tLWlmIGFuZCBkb20tcmVwZWF0IHRlbXBsYXRlcy4gIFRoaXMgaXMgYSBjb25jZWl0IHdlJ3JlIGNob29zaW5nIHRvIGtlZXBcbi8vIGEuKSB0byBlYXNlIDEueCBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBkdWUgdG8gbG9zcyBvZiBgaXNgLCBhbmRcbi8vIGIuKSB0byBtYWludGFpbiBpZi9yZXBlYXQgY2FwYWJpbGl0eSBpbiBwYXJzZXItY29uc3RyYWluZWQgZWxlbWVudHNcbi8vICAgICAoZS5nLiB0YWJsZSwgc2VsZWN0KSBpbiBsaWV1IG9mIG5hdGl2ZSBDRSB0eXBlIGV4dGVuc2lvbnMgd2l0aG91dFxuLy8gICAgIG1hc3NpdmUgbmV3IGludmVudGlvbiBpbiB0aGlzIHNwYWNlIChlLmcuIGRpcmVjdGl2ZSBzeXN0ZW0pXG5jb25zdCB0ZW1wbGF0ZUV4dGVuc2lvbnMgPSB7XG4gICdkb20taWYnOiB0cnVlLFxuICAnZG9tLXJlcGVhdCc6IHRydWVcbn07XG5cbmxldCBwbGFjZWhvbGRlckJ1Z0RldGVjdCA9IGZhbHNlO1xubGV0IHBsYWNlaG9sZGVyQnVnID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGhhc1BsYWNlaG9sZGVyQnVnKCkge1xuICBpZiAoIXBsYWNlaG9sZGVyQnVnRGV0ZWN0KSB7XG4gICAgcGxhY2Vob2xkZXJCdWdEZXRlY3QgPSB0cnVlO1xuICAgIGNvbnN0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIHQucGxhY2Vob2xkZXIgPSAnYSc7XG4gICAgcGxhY2Vob2xkZXJCdWcgPSB0LnBsYWNlaG9sZGVyID09PSB0LnRleHRDb250ZW50O1xuICB9XG4gIHJldHVybiBwbGFjZWhvbGRlckJ1Zztcbn1cblxuLyoqXG4gKiBTb21lIGJyb3dzZXJzIGhhdmUgYSBidWcgd2l0aCB0ZXh0YXJlYSwgd2hlcmUgcGxhY2Vob2xkZXIgdGV4dCBpcyBjb3BpZWQgYXNcbiAqIGEgdGV4dG5vZGUgY2hpbGQgb2YgdGhlIHRleHRhcmVhLlxuICpcbiAqIElmIHRoZSBwbGFjZWhvbGRlciBpcyBhIGJpbmRpbmcsIHRoaXMgY2FuIGJyZWFrIHRlbXBsYXRlIHN0YW1waW5nIGluIHR3b1xuICogd2F5cy5cbiAqXG4gKiBPbmUgaXNzdWUgaXMgdGhhdCB3aGVuIHRoZSBgcGxhY2Vob2xkZXJgIGF0dHJpYnV0ZSBpcyByZW1vdmVkIHdoZW4gdGhlXG4gKiBiaW5kaW5nIGlzIHByb2Nlc3NlZCwgdGhlIHRleHRub2RlIGNoaWxkIG9mIHRoZSB0ZXh0YXJlYSBpcyBkZWxldGVkLCBhbmQgdGhlXG4gKiB0ZW1wbGF0ZSBpbmZvIHRyaWVzIHRvIGJpbmQgaW50byB0aGF0IG5vZGUuXG4gKlxuICogV2l0aCBgbGVnYWN5T3B0aW1pemF0aW9uc2AgaW4gdXNlLCB3aGVuIHRoZSB0ZW1wbGF0ZSBpcyBzdGFtcGVkIGFuZCB0aGVcbiAqIGB0ZXh0YXJlYS50ZXh0Q29udGVudGAgYmluZGluZyBpcyBwcm9jZXNzZWQsIG5vIGNvcnJlc3BvbmRpbmcgbm9kZSBpcyBmb3VuZFxuICogYmVjYXVzZSBpdCB3YXMgcmVtb3ZlZCBkdXJpbmcgcGFyc2luZy4gQW4gZXhjZXB0aW9uIGlzIGdlbmVyYXRlZCB3aGVuIHRoaXNcbiAqIGJpbmRpbmcgaXMgdXBkYXRlZC5cbiAqXG4gKiBXaXRoIGBsZWdhY3lPcHRpbWl6YXRpb25zYCBub3QgaW4gdXNlLCB0aGUgdGVtcGxhdGUgaXMgY2xvbmVkIGJlZm9yZVxuICogcHJvY2Vzc2luZyBhbmQgdGhpcyBjaGFuZ2VzIHRoZSBhYm92ZSBiZWhhdmlvci4gVGhlIGNsb25lZCB0ZW1wbGF0ZSBhbHNvIGhhc1xuICogYSB2YWx1ZSBwcm9wZXJ0eSBzZXQgdG8gdGhlIHBsYWNlaG9sZGVyIGFuZCB0ZXh0Q29udGVudC4gVGhpcyBwcmV2ZW50cyB0aGVcbiAqIHJlbW92YWwgb2YgdGhlIHRleHRDb250ZW50IHdoZW4gdGhlIHBsYWNlaG9sZGVyIGF0dHJpYnV0ZSBpcyByZW1vdmVkLlxuICogVGhlcmVmb3JlIHRoZSBleGNlcHRpb24gZG9lcyBub3Qgb2NjdXIuIEhvd2V2ZXIsIHRoZXJlIGlzIGFuIGV4dHJhXG4gKiB1bm5lY2Vzc2FyeSBiaW5kaW5nLlxuICpcbiAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgQ2hlY2sgbm9kZSBmb3IgcGxhY2Vob2xkZXIgYnVnXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5mdW5jdGlvbiBmaXhQbGFjZWhvbGRlcihub2RlKSB7XG4gIGlmIChoYXNQbGFjZWhvbGRlckJ1ZygpICYmIG5vZGUubG9jYWxOYW1lID09PSAndGV4dGFyZWEnICYmIG5vZGUucGxhY2Vob2xkZXJcbiAgICAgICAgJiYgbm9kZS5wbGFjZWhvbGRlciA9PT0gbm9kZS50ZXh0Q29udGVudCkge1xuICAgIG5vZGUudGV4dENvbnRlbnQgPSBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdyYXBUZW1wbGF0ZUV4dGVuc2lvbihub2RlKSB7XG4gIGxldCBpcyA9IG5vZGUuZ2V0QXR0cmlidXRlKCdpcycpO1xuICBpZiAoaXMgJiYgdGVtcGxhdGVFeHRlbnNpb25zW2lzXSkge1xuICAgIGxldCB0ID0gbm9kZTtcbiAgICB0LnJlbW92ZUF0dHJpYnV0ZSgnaXMnKTtcbiAgICBub2RlID0gdC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXMpO1xuICAgIHQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobm9kZSwgdCk7XG4gICAgbm9kZS5hcHBlbmRDaGlsZCh0KTtcbiAgICB3aGlsZSh0LmF0dHJpYnV0ZXMubGVuZ3RoKSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSh0LmF0dHJpYnV0ZXNbMF0ubmFtZSwgdC5hdHRyaWJ1dGVzWzBdLnZhbHVlKTtcbiAgICAgIHQucmVtb3ZlQXR0cmlidXRlKHQuYXR0cmlidXRlc1swXS5uYW1lKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIGZpbmRUZW1wbGF0ZU5vZGUocm9vdCwgbm9kZUluZm8pIHtcbiAgLy8gcmVjdXJzaXZlbHkgYXNjZW5kIHRyZWUgdW50aWwgd2UgaGl0IHJvb3RcbiAgbGV0IHBhcmVudCA9IG5vZGVJbmZvLnBhcmVudEluZm8gJiYgZmluZFRlbXBsYXRlTm9kZShyb290LCBub2RlSW5mby5wYXJlbnRJbmZvKTtcbiAgLy8gdW53aW5kIHRoZSBzdGFjaywgcmV0dXJuaW5nIHRoZSBpbmRleGVkIG5vZGUgYXQgZWFjaCBsZXZlbFxuICBpZiAocGFyZW50KSB7XG4gICAgLy8gbm90ZTogbWFyZ2luYWxseSBmYXN0ZXIgdGhhbiBpbmRleGluZyB2aWEgY2hpbGROb2Rlc1xuICAgIC8vIChodHRwOi8vanNwZXJmLmNvbS9jaGlsZG5vZGVzLWxvb2t1cClcbiAgICBmb3IgKGxldCBuPXBhcmVudC5maXJzdENoaWxkLCBpPTA7IG47IG49bi5uZXh0U2libGluZykge1xuICAgICAgaWYgKG5vZGVJbmZvLnBhcmVudEluZGV4ID09PSBpKyspIHtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByb290O1xuICB9XG59XG5cbi8vIGNvbnN0cnVjdCBgJGAgbWFwIChmcm9tIGlkIGFubm90YXRpb25zKVxuZnVuY3Rpb24gYXBwbHlJZFRvTWFwKGluc3QsIG1hcCwgbm9kZSwgbm9kZUluZm8pIHtcbiAgaWYgKG5vZGVJbmZvLmlkKSB7XG4gICAgbWFwW25vZGVJbmZvLmlkXSA9IG5vZGU7XG4gIH1cbn1cblxuLy8gaW5zdGFsbCBldmVudCBsaXN0ZW5lcnMgKGZyb20gZXZlbnQgYW5ub3RhdGlvbnMpXG5mdW5jdGlvbiBhcHBseUV2ZW50TGlzdGVuZXIoaW5zdCwgbm9kZSwgbm9kZUluZm8pIHtcbiAgaWYgKG5vZGVJbmZvLmV2ZW50cyAmJiBub2RlSW5mby5ldmVudHMubGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgaj0wLCBlJD1ub2RlSW5mby5ldmVudHMsIGU7IChqPGUkLmxlbmd0aCkgJiYgKGU9ZSRbal0pOyBqKyspIHtcbiAgICAgIGluc3QuX2FkZE1ldGhvZEV2ZW50TGlzdGVuZXJUb05vZGUobm9kZSwgZS5uYW1lLCBlLnZhbHVlLCBpbnN0KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gcHVzaCBjb25maWd1cmF0aW9uIHJlZmVyZW5jZXMgYXQgY29uZmlndXJlIHRpbWVcbmZ1bmN0aW9uIGFwcGx5VGVtcGxhdGVJbmZvKGluc3QsIG5vZGUsIG5vZGVJbmZvLCBwYXJlbnRUZW1wbGF0ZUluZm8pIHtcbiAgaWYgKG5vZGVJbmZvLnRlbXBsYXRlSW5mbykge1xuICAgIC8vIEdpdmUgdGhlIG5vZGUgYW4gaW5zdGFuY2Ugb2YgdGhpcyB0ZW1wbGF0ZUluZm8gYW5kIHNldCBpdHMgcGFyZW50XG4gICAgbm9kZS5fdGVtcGxhdGVJbmZvID0gbm9kZUluZm8udGVtcGxhdGVJbmZvO1xuICAgIG5vZGUuX3BhcmVudFRlbXBsYXRlSW5mbyA9IHBhcmVudFRlbXBsYXRlSW5mbztcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVOb2RlRXZlbnRIYW5kbGVyKGNvbnRleHQsIGV2ZW50TmFtZSwgbWV0aG9kTmFtZSkge1xuICAvLyBJbnN0YW5jZXMgY2FuIG9wdGlvbmFsbHkgaGF2ZSBhIF9tZXRob2RIb3N0IHdoaWNoIGFsbG93cyByZWRpcmVjdGluZyB3aGVyZVxuICAvLyB0byBmaW5kIG1ldGhvZHMuIEN1cnJlbnRseSB1c2VkIGJ5IGB0ZW1wbGF0aXplYC5cbiAgY29udGV4dCA9IGNvbnRleHQuX21ldGhvZEhvc3QgfHwgY29udGV4dDtcbiAgbGV0IGhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGNvbnRleHRbbWV0aG9kTmFtZV0pIHtcbiAgICAgIGNvbnRleHRbbWV0aG9kTmFtZV0oZSwgZS5kZXRhaWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2xpc3RlbmVyIG1ldGhvZCBgJyArIG1ldGhvZE5hbWUgKyAnYCBub3QgZGVmaW5lZCcpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhhbmRsZXI7XG59XG5cbi8qKlxuICogRWxlbWVudCBtaXhpbiB0aGF0IHByb3ZpZGVzIGJhc2ljIHRlbXBsYXRlIHBhcnNpbmcgYW5kIHN0YW1waW5nLCBpbmNsdWRpbmdcbiAqIHRoZSBmb2xsb3dpbmcgdGVtcGxhdGUtcmVsYXRlZCBmZWF0dXJlcyBmb3Igc3RhbXBlZCB0ZW1wbGF0ZXM6XG4gKlxuICogLSBEZWNsYXJhdGl2ZSBldmVudCBsaXN0ZW5lcnMgKGBvbi1ldmVudG5hbWU9XCJsaXN0ZW5lclwiYClcbiAqIC0gTWFwIG9mIG5vZGUgaWQncyB0byBzdGFtcGVkIG5vZGUgaW5zdGFuY2VzIChgdGhpcy4kLmlkYClcbiAqIC0gTmVzdGVkIHRlbXBsYXRlIGNvbnRlbnQgY2FjaGluZy9yZW1vdmFsIGFuZCByZS1pbnN0YWxsYXRpb24gKHBlcmZvcm1hbmNlXG4gKiAgIG9wdGltaXphdGlvbilcbiAqXG4gKiBAbWl4aW5GdW5jdGlvblxuICogQHBvbHltZXJcbiAqIEBzdW1tYXJ5IEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBiYXNpYyB0ZW1wbGF0ZSBwYXJzaW5nIGFuZCBzdGFtcGluZ1xuICovXG5leHBvcnQgY29uc3QgVGVtcGxhdGVTdGFtcCA9IGRlZHVwaW5nTWl4aW4oXG4gICAgLyoqXG4gICAgICogQHRlbXBsYXRlIFRcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyBDbGFzcyB0byBhcHBseSBtaXhpbiB0by5cbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3Mgd2l0aCBtaXhpbiBhcHBsaWVkLlxuICAgICAqL1xuICAgIChzdXBlckNsYXNzKSA9PiB7XG5cbiAgLyoqXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtaXhpbkNsYXNzXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1RlbXBsYXRlU3RhbXB9XG4gICAqL1xuICBjbGFzcyBUZW1wbGF0ZVN0YW1wIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG5cbiAgICAvKipcbiAgICAgKiBTY2FucyBhIHRlbXBsYXRlIHRvIHByb2R1Y2UgdGVtcGxhdGUgbWV0YWRhdGEuXG4gICAgICpcbiAgICAgKiBUZW1wbGF0ZS1zcGVjaWZpYyBtZXRhZGF0YSBhcmUgc3RvcmVkIGluIHRoZSBvYmplY3QgcmV0dXJuZWQsIGFuZCBub2RlLVxuICAgICAqIHNwZWNpZmljIG1ldGFkYXRhIGFyZSBzdG9yZWQgaW4gb2JqZWN0cyBpbiBpdHMgZmxhdHRlbmVkIGBub2RlSW5mb0xpc3RgXG4gICAgICogYXJyYXkuICBPbmx5IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSB0aGF0IHdlcmUgcGFyc2VkIGFzIG5vZGVzIG9mXG4gICAgICogaW50ZXJlc3QgY29udGFpbiBhbiBvYmplY3QgaW4gYG5vZGVJbmZvTGlzdGAuICBFYWNoIGBub2RlSW5mb2Agb2JqZWN0XG4gICAgICogY29udGFpbnMgYW4gYGluZGV4YCAoYGNoaWxkTm9kZXNgIGluZGV4IGluIHBhcmVudCkgYW5kIG9wdGlvbmFsbHlcbiAgICAgKiBgcGFyZW50YCwgd2hpY2ggcG9pbnRzIHRvIG5vZGUgaW5mbyBvZiBpdHMgcGFyZW50IChpbmNsdWRpbmcgaXRzIGluZGV4KS5cbiAgICAgKlxuICAgICAqIFRoZSB0ZW1wbGF0ZSBtZXRhZGF0YSBvYmplY3QgcmV0dXJuZWQgZnJvbSB0aGlzIG1ldGhvZCBoYXMgdGhlIGZvbGxvd2luZ1xuICAgICAqIHN0cnVjdHVyZSAobWFueSBmaWVsZHMgb3B0aW9uYWwpOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIHtcbiAgICAgKiAgICAgLy8gRmxhdHRlbmVkIGxpc3Qgb2Ygbm9kZSBtZXRhZGF0YSAoZm9yIG5vZGVzIHRoYXQgZ2VuZXJhdGVkIG1ldGFkYXRhKVxuICAgICAqICAgICBub2RlSW5mb0xpc3Q6IFtcbiAgICAgKiAgICAgICB7XG4gICAgICogICAgICAgICAvLyBgaWRgIGF0dHJpYnV0ZSBmb3IgYW55IG5vZGVzIHdpdGggaWQncyBmb3IgZ2VuZXJhdGluZyBgJGAgbWFwXG4gICAgICogICAgICAgICBpZDoge3N0cmluZ30sXG4gICAgICogICAgICAgICAvLyBgb24tZXZlbnQ9XCJoYW5kbGVyXCJgIG1ldGFkYXRhXG4gICAgICogICAgICAgICBldmVudHM6IFtcbiAgICAgKiAgICAgICAgICAge1xuICAgICAqICAgICAgICAgICAgIG5hbWU6IHtzdHJpbmd9LCAgIC8vIGV2ZW50IG5hbWVcbiAgICAgKiAgICAgICAgICAgICB2YWx1ZToge3N0cmluZ30sICAvLyBoYW5kbGVyIG1ldGhvZCBuYW1lXG4gICAgICogICAgICAgICAgIH0sIC4uLlxuICAgICAqICAgICAgICAgXSxcbiAgICAgKiAgICAgICAgIC8vIE5vdGVzIHdoZW4gdGhlIHRlbXBsYXRlIGNvbnRhaW5lZCBhIGA8c2xvdD5gIGZvciBzaGFkeSBET01cbiAgICAgKiAgICAgICAgIC8vIG9wdGltaXphdGlvbiBwdXJwb3Nlc1xuICAgICAqICAgICAgICAgaGFzSW5zZXJ0aW9uUG9pbnQ6IHtib29sZWFufSxcbiAgICAgKiAgICAgICAgIC8vIEZvciBuZXN0ZWQgYDx0ZW1wbGF0ZT5gYCBub2RlcywgbmVzdGVkIHRlbXBsYXRlIG1ldGFkYXRhXG4gICAgICogICAgICAgICB0ZW1wbGF0ZUluZm86IHtvYmplY3R9LCAvLyBuZXN0ZWQgdGVtcGxhdGUgbWV0YWRhdGFcbiAgICAgKiAgICAgICAgIC8vIE1ldGFkYXRhIHRvIGFsbG93IGVmZmljaWVudCByZXRyaWV2YWwgb2YgaW5zdGFuY2VkIG5vZGVcbiAgICAgKiAgICAgICAgIC8vIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBtZXRhZGF0YVxuICAgICAqICAgICAgICAgcGFyZW50SW5mbzoge251bWJlcn0sICAgLy8gcmVmZXJlbmNlIHRvIHBhcmVudCBub2RlSW5mbz5cbiAgICAgKiAgICAgICAgIHBhcmVudEluZGV4OiB7bnVtYmVyfSwgIC8vIGluZGV4IGluIHBhcmVudCdzIGBjaGlsZE5vZGVzYCBjb2xsZWN0aW9uXG4gICAgICogICAgICAgICBpbmZvSW5kZXg6IHtudW1iZXJ9LCAgICAvLyBpbmRleCBvZiB0aGlzIGBub2RlSW5mb2AgaW4gYHRlbXBsYXRlSW5mby5ub2RlSW5mb0xpc3RgXG4gICAgICogICAgICAgfSxcbiAgICAgKiAgICAgICAuLi5cbiAgICAgKiAgICAgXSxcbiAgICAgKiAgICAgLy8gV2hlbiB0cnVlLCB0aGUgdGVtcGxhdGUgaGFkIHRoZSBgc3RyaXAtd2hpdGVzcGFjZWAgYXR0cmlidXRlXG4gICAgICogICAgIC8vIG9yIHdhcyBuZXN0ZWQgaW4gYSB0ZW1wbGF0ZSB3aXRoIHRoYXQgc2V0dGluZ1xuICAgICAqICAgICBzdHJpcFdoaXRlc3BhY2U6IHtib29sZWFufSxcbiAgICAgKiAgICAgLy8gRm9yIG5lc3RlZCB0ZW1wbGF0ZXMsIG5lc3RlZCB0ZW1wbGF0ZSBjb250ZW50IGlzIG1vdmVkIGludG9cbiAgICAgKiAgICAgLy8gYSBkb2N1bWVudCBmcmFnbWVudCBzdG9yZWQgaGVyZTsgdGhpcyBpcyBhbiBvcHRpbWl6YXRpb24gdG9cbiAgICAgKiAgICAgLy8gYXZvaWQgdGhlIGNvc3Qgb2YgbmVzdGVkIHRlbXBsYXRlIGNsb25pbmdcbiAgICAgKiAgICAgY29udGVudDoge0RvY3VtZW50RnJhZ21lbnR9XG4gICAgICogICB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBraWNrcyBvZmYgYSByZWN1cnNpdmUgdHJlZXdhbGsgYXMgZm9sbG93czpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqICAgIF9wYXJzZVRlbXBsYXRlIDwtLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gICAgICogICAgICBfcGFyc2VUZW1wbGF0ZUNvbnRlbnQgICAgICAgICAgICAgIHxcbiAgICAgKiAgICAgICAgX3BhcnNlVGVtcGxhdGVOb2RlICA8LS0tLS0tLS0tLS0tfC0tK1xuICAgICAqICAgICAgICAgIF9wYXJzZVRlbXBsYXRlTmVzdGVkVGVtcGxhdGUgLS0rICB8XG4gICAgICogICAgICAgICAgX3BhcnNlVGVtcGxhdGVDaGlsZE5vZGVzIC0tLS0tLS0tLStcbiAgICAgKiAgICAgICAgICBfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGVzXG4gICAgICogICAgICAgICAgICBfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGVcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlc2UgbWV0aG9kcyBtYXkgYmUgb3ZlcnJpZGRlbiB0byBhZGQgY3VzdG9tIG1ldGFkYXRhIGFib3V0IHRlbXBsYXRlc1xuICAgICAqIHRvIGVpdGhlciBgdGVtcGxhdGVJbmZvYCBvciBgbm9kZUluZm9gLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoaXMgbWV0aG9kIG1heSBiZSBkZXN0cnVjdGl2ZSB0byB0aGUgdGVtcGxhdGUsIGluIHRoYXRcbiAgICAgKiBlLmcuIGV2ZW50IGFubm90YXRpb25zIG1heSBiZSByZW1vdmVkIGFmdGVyIGJlaW5nIG5vdGVkIGluIHRoZVxuICAgICAqIHRlbXBsYXRlIG1ldGFkYXRhLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgdG8gcGFyc2VcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mbz19IG91dGVyVGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZyb20gdGhlIG91dGVyXG4gICAgICogICB0ZW1wbGF0ZSwgZm9yIHBhcnNpbmcgbmVzdGVkIHRlbXBsYXRlc1xuICAgICAqIEByZXR1cm4geyFUZW1wbGF0ZUluZm99IFBhcnNlZCB0ZW1wbGF0ZSBtZXRhZGF0YVxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlKHRlbXBsYXRlLCBvdXRlclRlbXBsYXRlSW5mbykge1xuICAgICAgLy8gc2luY2UgYSB0ZW1wbGF0ZSBtYXkgYmUgcmUtdXNlZCwgbWVtby1pemUgbWV0YWRhdGFcbiAgICAgIGlmICghdGVtcGxhdGUuX3RlbXBsYXRlSW5mbykge1xuICAgICAgICAvLyBUT0RPKHJpY3RpYyk6IGZpeCB0eXBpbmdcbiAgICAgICAgbGV0IC8qKiA/ICovIHRlbXBsYXRlSW5mbyA9IHRlbXBsYXRlLl90ZW1wbGF0ZUluZm8gPSB7fTtcbiAgICAgICAgdGVtcGxhdGVJbmZvLm5vZGVJbmZvTGlzdCA9IFtdO1xuICAgICAgICB0ZW1wbGF0ZUluZm8ubmVzdGVkVGVtcGxhdGUgPSBCb29sZWFuKG91dGVyVGVtcGxhdGVJbmZvKTtcbiAgICAgICAgdGVtcGxhdGVJbmZvLnN0cmlwV2hpdGVTcGFjZSA9XG4gICAgICAgICAgKG91dGVyVGVtcGxhdGVJbmZvICYmIG91dGVyVGVtcGxhdGVJbmZvLnN0cmlwV2hpdGVTcGFjZSkgfHxcbiAgICAgICAgICB0ZW1wbGF0ZS5oYXNBdHRyaWJ1dGUoJ3N0cmlwLXdoaXRlc3BhY2UnKTtcbiAgICAgICAgIC8vIFRPRE8ocmljdGljKTogZml4IHR5cGluZ1xuICAgICAgICAgdGhpcy5fcGFyc2VUZW1wbGF0ZUNvbnRlbnQoXG4gICAgICAgICAgICAgdGVtcGxhdGUsIHRlbXBsYXRlSW5mbywgLyoqIEB0eXBlIHs/fSAqLyAoe3BhcmVudDogbnVsbH0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZW1wbGF0ZS5fdGVtcGxhdGVJbmZvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlZSBkb2NzIGZvciBfcGFyc2VUZW1wbGF0ZU5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSAuXG4gICAgICogQHBhcmFtIHshVGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gLlxuICAgICAqIEBwYXJhbSB7IU5vZGVJbmZvfSBub2RlSW5mbyAuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gLlxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlQ29udGVudCh0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykge1xuICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlVGVtcGxhdGVOb2RlKHRlbXBsYXRlLmNvbnRlbnQsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0ZW1wbGF0ZSBub2RlIGFuZCBhZGRzIHRlbXBsYXRlIGFuZCBub2RlIG1ldGFkYXRhIGJhc2VkIG9uXG4gICAgICogdGhlIGN1cnJlbnQgbm9kZSwgYW5kIGl0cyBgY2hpbGROb2Rlc2AgYW5kIGBhdHRyaWJ1dGVzYC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG1heSBiZSBvdmVycmlkZGVuIHRvIGFkZCBjdXN0b20gbm9kZSBvciB0ZW1wbGF0ZSBzcGVjaWZpY1xuICAgICAqIG1ldGFkYXRhIGJhc2VkIG9uIHRoaXMgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIHRvIHBhcnNlXG4gICAgICogQHBhcmFtIHshVGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0geyFOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZS5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZpc2l0ZWQgbm9kZSBhZGRlZCBub2RlLXNwZWNpZmljXG4gICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVOb2RlKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgIGxldCBub3RlZCA9IGZhbHNlO1xuICAgICAgbGV0IGVsZW1lbnQgPSAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyAobm9kZSk7XG4gICAgICBpZiAoZWxlbWVudC5sb2NhbE5hbWUgPT0gJ3RlbXBsYXRlJyAmJiAhZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3ByZXNlcnZlLWNvbnRlbnQnKSkge1xuICAgICAgICBub3RlZCA9IHRoaXMuX3BhcnNlVGVtcGxhdGVOZXN0ZWRUZW1wbGF0ZShlbGVtZW50LCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKSB8fCBub3RlZDtcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5sb2NhbE5hbWUgPT09ICdzbG90Jykge1xuICAgICAgICAvLyBGb3IgU2hhZHlEb20gb3B0aW1pemF0aW9uLCBpbmRpY2F0aW5nIHRoZXJlIGlzIGFuIGluc2VydGlvbiBwb2ludFxuICAgICAgICB0ZW1wbGF0ZUluZm8uaGFzSW5zZXJ0aW9uUG9pbnQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgZml4UGxhY2Vob2xkZXIoZWxlbWVudCk7XG4gICAgICBpZiAoZWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICAgIHRoaXMuX3BhcnNlVGVtcGxhdGVDaGlsZE5vZGVzKGVsZW1lbnQsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pO1xuICAgICAgfVxuICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlcyAmJiBlbGVtZW50Lmhhc0F0dHJpYnV0ZXMoKSkge1xuICAgICAgICBub3RlZCA9IHRoaXMuX3BhcnNlVGVtcGxhdGVOb2RlQXR0cmlidXRlcyhlbGVtZW50LCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKSB8fCBub3RlZDtcbiAgICAgIH1cbiAgICAgIC8vIENoZWNraW5nIGBub2RlSW5mby5ub3RlZGAgYWxsb3dzIGEgY2hpbGQgbm9kZSBvZiB0aGlzIG5vZGUgKHdobyBnZXRzXG4gICAgICAvLyBhY2Nlc3MgdG8gYHBhcmVudEluZm9gKSB0byBjYXVzZSB0aGUgcGFyZW50IHRvIGJlIG5vdGVkLCB3aGljaFxuICAgICAgLy8gb3RoZXJ3aXNlIGhhcyBubyByZXR1cm4gcGF0aCB2aWEgYF9wYXJzZVRlbXBsYXRlQ2hpbGROb2Rlc2AgKHVzZWQgYnlcbiAgICAgIC8vIHNvbWUgb3B0aW1pemF0aW9ucylcbiAgICAgIHJldHVybiBub3RlZCB8fCBub2RlSW5mby5ub3RlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGVtcGxhdGUgY2hpbGQgbm9kZXMgZm9yIHRoZSBnaXZlbiByb290IG5vZGUuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBhbHNvIHdyYXBzIHdoaXRlbGlzdGVkIGxlZ2FjeSB0ZW1wbGF0ZSBleHRlbnNpb25zXG4gICAgICogKGBpcz1cImRvbS1pZlwiYCBhbmQgYGlzPVwiZG9tLXJlcGVhdFwiYCkgd2l0aCB0aGVpciBlcXVpdmFsZW50IGVsZW1lbnRcbiAgICAgKiB3cmFwcGVycywgY29sbGFwc2VzIHRleHQgbm9kZXMsIGFuZCBzdHJpcHMgd2hpdGVzcGFjZSBmcm9tIHRoZSB0ZW1wbGF0ZVxuICAgICAqIGlmIHRoZSBgdGVtcGxhdGVJbmZvLnN0cmlwV2hpdGVzcGFjZWAgc2V0dGluZyB3YXMgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge05vZGV9IHJvb3QgUm9vdCBub2RlIHdob3NlIGBjaGlsZE5vZGVzYCB3aWxsIGJlIHBhcnNlZFxuICAgICAqIEBwYXJhbSB7IVRlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHshTm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVDaGlsZE5vZGVzKHJvb3QsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgIGlmIChyb290LmxvY2FsTmFtZSA9PT0gJ3NjcmlwdCcgfHwgcm9vdC5sb2NhbE5hbWUgPT09ICdzdHlsZScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgbm9kZT1yb290LmZpcnN0Q2hpbGQsIHBhcmVudEluZGV4PTAsIG5leHQ7IG5vZGU7IG5vZGU9bmV4dCkge1xuICAgICAgICAvLyBXcmFwIHRlbXBsYXRlc1xuICAgICAgICBpZiAobm9kZS5sb2NhbE5hbWUgPT0gJ3RlbXBsYXRlJykge1xuICAgICAgICAgIG5vZGUgPSB3cmFwVGVtcGxhdGVFeHRlbnNpb24obm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29sbGFwc2UgYWRqYWNlbnQgdGV4dE5vZGVzOiBmaXhlcyBhbiBJRSBpc3N1ZSB0aGF0IGNhbiBjYXVzZVxuICAgICAgICAvLyB0ZXh0IG5vZGVzIHRvIGJlIGluZXhwbGljYWJseSBzcGxpdCA9KFxuICAgICAgICAvLyBub3RlIHRoYXQgcm9vdC5ub3JtYWxpemUoKSBzaG91bGQgd29yayBidXQgZG9lcyBub3Qgc28gd2UgZG8gdGhpc1xuICAgICAgICAvLyBtYW51YWxseS5cbiAgICAgICAgbmV4dCA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgICAgIGxldCAvKiogTm9kZSAqLyBuID0gbmV4dDtcbiAgICAgICAgICB3aGlsZSAobiAmJiAobi5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpKSB7XG4gICAgICAgICAgICBub2RlLnRleHRDb250ZW50ICs9IG4udGV4dENvbnRlbnQ7XG4gICAgICAgICAgICBuZXh0ID0gbi5uZXh0U2libGluZztcbiAgICAgICAgICAgIHJvb3QucmVtb3ZlQ2hpbGQobik7XG4gICAgICAgICAgICBuID0gbmV4dDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gb3B0aW9uYWxseSBzdHJpcCB3aGl0ZXNwYWNlXG4gICAgICAgICAgaWYgKHRlbXBsYXRlSW5mby5zdHJpcFdoaXRlU3BhY2UgJiYgIW5vZGUudGV4dENvbnRlbnQudHJpbSgpKSB7XG4gICAgICAgICAgICByb290LnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBjaGlsZEluZm8gPVxuICAgICAgICAgICAgLyoqIEB0eXBlIHshTm9kZUluZm99ICovICh7cGFyZW50SW5kZXgsIHBhcmVudEluZm86IG5vZGVJbmZvfSk7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzZVRlbXBsYXRlTm9kZShub2RlLCB0ZW1wbGF0ZUluZm8sIGNoaWxkSW5mbykpIHtcbiAgICAgICAgICBjaGlsZEluZm8uaW5mb0luZGV4ID0gdGVtcGxhdGVJbmZvLm5vZGVJbmZvTGlzdC5wdXNoKGNoaWxkSW5mbykgLSAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIEluY3JlbWVudCBpZiBub3QgcmVtb3ZlZFxuICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgcGFyZW50SW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0ZW1wbGF0ZSBjb250ZW50IGZvciB0aGUgZ2l2ZW4gbmVzdGVkIGA8dGVtcGxhdGU+YC5cbiAgICAgKlxuICAgICAqIE5lc3RlZCB0ZW1wbGF0ZSBpbmZvIGlzIHN0b3JlZCBhcyBgdGVtcGxhdGVJbmZvYCBpbiB0aGUgY3VycmVudCBub2RlJ3NcbiAgICAgKiBgbm9kZUluZm9gLiBgdGVtcGxhdGUuY29udGVudGAgaXMgcmVtb3ZlZCBhbmQgc3RvcmVkIGluIGB0ZW1wbGF0ZUluZm9gLlxuICAgICAqIEl0IHdpbGwgdGhlbiBiZSB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIGhvc3QgdG8gc2V0IGl0IGJhY2sgdG8gdGhlXG4gICAgICogdGVtcGxhdGUgYW5kIGZvciB1c2VycyBzdGFtcGluZyBuZXN0ZWQgdGVtcGxhdGVzIHRvIHVzZSB0aGVcbiAgICAgKiBgX2NvbnRlbnRGb3JUZW1wbGF0ZWAgbWV0aG9kIHRvIHJldHJpZXZlIHRoZSBjb250ZW50IGZvciB0aGlzIHRlbXBsYXRlXG4gICAgICogKGFuIG9wdGltaXphdGlvbiB0byBhdm9pZCB0aGUgY29zdCBvZiBjbG9uaW5nIG5lc3RlZCB0ZW1wbGF0ZSBjb250ZW50KS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gbm9kZSBOb2RlIHRvIHBhcnNlIChhIDx0ZW1wbGF0ZT4pXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUluZm99IG91dGVyVGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAgICogICB0aGF0IGluY2x1ZGVzIHRoZSB0ZW1wbGF0ZSBgbm9kZWBcbiAgICAgKiBAcGFyYW0geyFOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZS5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZpc2l0ZWQgbm9kZSBhZGRlZCBub2RlLXNwZWNpZmljXG4gICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVOZXN0ZWRUZW1wbGF0ZShub2RlLCBvdXRlclRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgIC8vIFRPRE8ocmljdGljKTogdGhlIHR5cGUgb2Ygbm9kZSBzaG91bGQgYmUgbm9uLW51bGxcbiAgICAgIGxldCBlbGVtZW50ID0gLyoqIEB0eXBlIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gKi8gKG5vZGUpO1xuICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IHRoaXMuX3BhcnNlVGVtcGxhdGUoZWxlbWVudCwgb3V0ZXJUZW1wbGF0ZUluZm8pO1xuICAgICAgbGV0IGNvbnRlbnQgPSB0ZW1wbGF0ZUluZm8uY29udGVudCA9XG4gICAgICAgICAgZWxlbWVudC5jb250ZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgY29udGVudC5hcHBlbmRDaGlsZChlbGVtZW50LmNvbnRlbnQpO1xuICAgICAgbm9kZUluZm8udGVtcGxhdGVJbmZvID0gdGVtcGxhdGVJbmZvO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRlbXBsYXRlIG5vZGUgYXR0cmlidXRlcyBhbmQgYWRkcyBub2RlIG1ldGFkYXRhIHRvIGBub2RlSW5mb2BcbiAgICAgKiBmb3Igbm9kZXMgb2YgaW50ZXJlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgTm9kZSB0byBwYXJzZVxuICAgICAqIEBwYXJhbSB7IVRlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50XG4gICAgICogICAgIHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHshTm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAqICAgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZXMobm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykge1xuICAgICAgLy8gTWFrZSBjb3B5IG9mIG9yaWdpbmFsIGF0dHJpYnV0ZSBsaXN0LCBzaW5jZSB0aGUgb3JkZXIgbWF5IGNoYW5nZVxuICAgICAgLy8gYXMgYXR0cmlidXRlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWRcbiAgICAgIGxldCBub3RlZCA9IGZhbHNlO1xuICAgICAgbGV0IGF0dHJzID0gQXJyYXkuZnJvbShub2RlLmF0dHJpYnV0ZXMpO1xuICAgICAgZm9yIChsZXQgaT1hdHRycy5sZW5ndGgtMSwgYTsgKGE9YXR0cnNbaV0pOyBpLS0pIHtcbiAgICAgICAgbm90ZWQgPSB0aGlzLl9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCBhLm5hbWUsIGEudmFsdWUpIHx8IG5vdGVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vdGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIHNpbmdsZSB0ZW1wbGF0ZSBub2RlIGF0dHJpYnV0ZSBhbmQgYWRkcyBub2RlIG1ldGFkYXRhIHRvXG4gICAgICogYG5vZGVJbmZvYCBmb3IgYXR0cmlidXRlcyBvZiBpbnRlcmVzdC5cbiAgICAgKlxuICAgICAqIFRoaXMgaW1wbGVtZW50YXRpb24gYWRkcyBtZXRhZGF0YSBmb3IgYG9uLWV2ZW50PVwiaGFuZGxlclwiYCBhdHRyaWJ1dGVzXG4gICAgICogYW5kIGBpZGAgYXR0cmlidXRlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZSBOb2RlIHRvIHBhcnNlXG4gICAgICogQHBhcmFtIHshVGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0geyFOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBdHRyaWJ1dGUgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBBdHRyaWJ1dGUgdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZpc2l0ZWQgbm9kZSBhZGRlZCBub2RlLXNwZWNpZmljXG4gICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVOb2RlQXR0cmlidXRlKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8sIG5hbWUsIHZhbHVlKSB7XG4gICAgICAvLyBldmVudHMgKG9uLSopXG4gICAgICBpZiAobmFtZS5zbGljZSgwLCAzKSA9PT0gJ29uLScpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIG5vZGVJbmZvLmV2ZW50cyA9IG5vZGVJbmZvLmV2ZW50cyB8fCBbXTtcbiAgICAgICAgbm9kZUluZm8uZXZlbnRzLnB1c2goe1xuICAgICAgICAgIG5hbWU6IG5hbWUuc2xpY2UoMyksXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gc3RhdGljIGlkXG4gICAgICBlbHNlIGlmIChuYW1lID09PSAnaWQnKSB7XG4gICAgICAgIG5vZGVJbmZvLmlkID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGBjb250ZW50YCBkb2N1bWVudCBmcmFnbWVudCBmb3IgYSBnaXZlbiB0ZW1wbGF0ZS5cbiAgICAgKlxuICAgICAqIEZvciBuZXN0ZWQgdGVtcGxhdGVzLCBQb2x5bWVyIHBlcmZvcm1zIGFuIG9wdGltaXphdGlvbiB0byBjYWNoZSBuZXN0ZWRcbiAgICAgKiB0ZW1wbGF0ZSBjb250ZW50IHRvIGF2b2lkIHRoZSBjb3N0IG9mIGNsb25pbmcgZGVlcGx5IG5lc3RlZCB0ZW1wbGF0ZXMuXG4gICAgICogVGhpcyBtZXRob2QgcmV0cmlldmVzIHRoZSBjYWNoZWQgY29udGVudCBmb3IgYSBnaXZlbiB0ZW1wbGF0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgdG8gcmV0cmlldmUgYGNvbnRlbnRgIGZvclxuICAgICAqIEByZXR1cm4ge0RvY3VtZW50RnJhZ21lbnR9IENvbnRlbnQgZnJhZ21lbnRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfY29udGVudEZvclRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgICBsZXQgdGVtcGxhdGVJbmZvID0gLyoqIEB0eXBlIHtIVE1MVGVtcGxhdGVFbGVtZW50V2l0aEluZm99ICovICh0ZW1wbGF0ZSkuX3RlbXBsYXRlSW5mbztcbiAgICAgIHJldHVybiAodGVtcGxhdGVJbmZvICYmIHRlbXBsYXRlSW5mby5jb250ZW50KSB8fCB0ZW1wbGF0ZS5jb250ZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb25lcyB0aGUgcHJvdmlkZWQgdGVtcGxhdGUgY29udGVudCBhbmQgcmV0dXJucyBhIGRvY3VtZW50IGZyYWdtZW50XG4gICAgICogY29udGFpbmluZyB0aGUgY2xvbmVkIGRvbS5cbiAgICAgKlxuICAgICAqIFRoZSB0ZW1wbGF0ZSBpcyBwYXJzZWQgKG9uY2UgYW5kIG1lbW9pemVkKSB1c2luZyB0aGlzIGxpYnJhcnknc1xuICAgICAqIHRlbXBsYXRlIHBhcnNpbmcgZmVhdHVyZXMsIGFuZCBwcm92aWRlcyB0aGUgZm9sbG93aW5nIHZhbHVlLWFkZGVkXG4gICAgICogZmVhdHVyZXM6XG4gICAgICogKiBBZGRzIGRlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVycyBmb3IgYG9uLWV2ZW50PVwiaGFuZGxlclwiYCBhdHRyaWJ1dGVzXG4gICAgICogKiBHZW5lcmF0ZXMgYW4gXCJpZCBtYXBcIiBmb3IgYWxsIG5vZGVzIHdpdGggaWQncyB1bmRlciBgJGAgb24gcmV0dXJuZWRcbiAgICAgKiAgIGRvY3VtZW50IGZyYWdtZW50XG4gICAgICogKiBQYXNzZXMgdGVtcGxhdGUgaW5mbyBpbmNsdWRpbmcgYGNvbnRlbnRgIGJhY2sgdG8gdGVtcGxhdGVzIGFzXG4gICAgICogICBgX3RlbXBsYXRlSW5mb2AgKGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHRvIGF2b2lkIGRlZXAgdGVtcGxhdGVcbiAgICAgKiAgIGNsb25pbmcpXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhlIG1lbW9pemVkIHRlbXBsYXRlIHBhcnNpbmcgcHJvY2VzcyBpcyBkZXN0cnVjdGl2ZSB0byB0aGVcbiAgICAgKiB0ZW1wbGF0ZTogYXR0cmlidXRlcyBmb3IgYmluZGluZ3MgYW5kIGRlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVycyBhcmVcbiAgICAgKiByZW1vdmVkIGFmdGVyIGJlaW5nIG5vdGVkIGluIG5vdGVzLCBhbmQgYW55IG5lc3RlZCBgPHRlbXBsYXRlPi5jb250ZW50YFxuICAgICAqIGlzIHJlbW92ZWQgYW5kIHN0b3JlZCBpbiBub3RlcyBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgdG8gc3RhbXBcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mbz19IHRlbXBsYXRlSW5mbyBPcHRpb25hbCB0ZW1wbGF0ZSBpbmZvIGFzc29jaWF0ZWRcbiAgICAgKiAgIHdpdGggdGhlIHRlbXBsYXRlIHRvIGJlIHN0YW1wZWQ7IGlmIG9taXR0ZWQgdGhlIHRlbXBsYXRlIHdpbGwgYmVcbiAgICAgKiAgIGF1dG9tYXRpY2FsbHkgcGFyc2VkLlxuICAgICAqIEByZXR1cm4geyFTdGFtcGVkVGVtcGxhdGV9IENsb25lZCB0ZW1wbGF0ZSBjb250ZW50XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3N0YW1wVGVtcGxhdGUodGVtcGxhdGUsIHRlbXBsYXRlSW5mbykge1xuICAgICAgLy8gUG9seWZpbGwgc3VwcG9ydDogYm9vdHN0cmFwIHRoZSB0ZW1wbGF0ZSBpZiBpdCBoYXMgbm90IGFscmVhZHkgYmVlblxuICAgICAgaWYgKHRlbXBsYXRlICYmICF0ZW1wbGF0ZS5jb250ZW50ICYmXG4gICAgICAgICAgd2luZG93LkhUTUxUZW1wbGF0ZUVsZW1lbnQgJiYgSFRNTFRlbXBsYXRlRWxlbWVudC5kZWNvcmF0ZSkge1xuICAgICAgICBIVE1MVGVtcGxhdGVFbGVtZW50LmRlY29yYXRlKHRlbXBsYXRlKTtcbiAgICAgIH1cbiAgICAgIC8vIEFjY2VwdGluZyB0aGUgYHRlbXBsYXRlSW5mb2AgdmlhIGFuIGFyZ3VtZW50IGFsbG93cyBmb3IgY3JlYXRpbmdcbiAgICAgIC8vIGluc3RhbmNlcyBvZiB0aGUgYHRlbXBsYXRlSW5mb2AgYnkgdGhlIGNhbGxlciwgdXNlZnVsIGZvciBhZGRpbmdcbiAgICAgIC8vIGluc3RhbmNlLXRpbWUgaW5mb3JtYXRpb24gdG8gdGhlIHByb3RvdHlwaWNhbCBkYXRhXG4gICAgICB0ZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm8gfHwgdGhpcy5jb25zdHJ1Y3Rvci5fcGFyc2VUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICBsZXQgbm9kZUluZm8gPSB0ZW1wbGF0ZUluZm8ubm9kZUluZm9MaXN0O1xuICAgICAgbGV0IGNvbnRlbnQgPSB0ZW1wbGF0ZUluZm8uY29udGVudCB8fCB0ZW1wbGF0ZS5jb250ZW50O1xuICAgICAgbGV0IGRvbSA9IC8qKiBAdHlwZSB7RG9jdW1lbnRGcmFnbWVudH0gKi8gKGRvY3VtZW50LmltcG9ydE5vZGUoY29udGVudCwgdHJ1ZSkpO1xuICAgICAgLy8gTk9URTogU2hhZHlEb20gb3B0aW1pemF0aW9uIGluZGljYXRpbmcgdGhlcmUgaXMgYW4gaW5zZXJ0aW9uIHBvaW50XG4gICAgICBkb20uX19ub0luc2VydGlvblBvaW50ID0gIXRlbXBsYXRlSW5mby5oYXNJbnNlcnRpb25Qb2ludDtcbiAgICAgIGxldCBub2RlcyA9IGRvbS5ub2RlTGlzdCA9IG5ldyBBcnJheShub2RlSW5mby5sZW5ndGgpO1xuICAgICAgZG9tLiQgPSB7fTtcbiAgICAgIGZvciAobGV0IGk9MCwgbD1ub2RlSW5mby5sZW5ndGgsIGluZm87IChpPGwpICYmIChpbmZvPW5vZGVJbmZvW2ldKTsgaSsrKSB7XG4gICAgICAgIGxldCBub2RlID0gbm9kZXNbaV0gPSBmaW5kVGVtcGxhdGVOb2RlKGRvbSwgaW5mbyk7XG4gICAgICAgIGFwcGx5SWRUb01hcCh0aGlzLCBkb20uJCwgbm9kZSwgaW5mbyk7XG4gICAgICAgIGFwcGx5VGVtcGxhdGVJbmZvKHRoaXMsIG5vZGUsIGluZm8sIHRlbXBsYXRlSW5mbyk7XG4gICAgICAgIGFwcGx5RXZlbnRMaXN0ZW5lcih0aGlzLCBub2RlLCBpbmZvKTtcbiAgICAgIH1cbiAgICAgIGRvbSA9IC8qKiBAdHlwZSB7IVN0YW1wZWRUZW1wbGF0ZX0gKi8oZG9tKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWFzc2lnblxuICAgICAgcmV0dXJuIGRvbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIGJ5IG1ldGhvZCBuYW1lIGZvciB0aGUgZXZlbnQgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBnZW5lcmF0ZXMgYSBoYW5kbGVyIGZ1bmN0aW9uIHRoYXQgbG9va3MgdXAgdGhlIG1ldGhvZFxuICAgICAqIG5hbWUgYXQgaGFuZGxpbmcgdGltZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSBub2RlIE5vZGUgdG8gYWRkIGxpc3RlbmVyIG9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIGV2ZW50XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgTmFtZSBvZiBtZXRob2RcbiAgICAgKiBAcGFyYW0geyo9fSBjb250ZXh0IENvbnRleHQgdGhlIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCBvbiAoZGVmYXVsdHNcbiAgICAgKiAgIHRvIGBub2RlYClcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gR2VuZXJhdGVkIGhhbmRsZXIgZnVuY3Rpb25cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfYWRkTWV0aG9kRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBldmVudE5hbWUsIG1ldGhvZE5hbWUsIGNvbnRleHQpIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8IG5vZGU7XG4gICAgICBsZXQgaGFuZGxlciA9IGNyZWF0ZU5vZGVFdmVudEhhbmRsZXIoY29udGV4dCwgZXZlbnROYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJUb05vZGUobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgIHJldHVybiBoYW5kbGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHBvaW50IGZvciBhZGRpbmcgY3VzdG9tIG9yIHNpbXVsYXRlZCBldmVudCBoYW5kbGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSBub2RlIE5vZGUgdG8gYWRkIGV2ZW50IGxpc3RlbmVyIHRvXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIGV2ZW50XG4gICAgICogQHBhcmFtIHtmdW5jdGlvbighRXZlbnQpOnZvaWR9IGhhbmRsZXIgTGlzdGVuZXIgZnVuY3Rpb24gdG8gYWRkXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfYWRkRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHBvaW50IGZvciBhZGRpbmcgY3VzdG9tIG9yIHNpbXVsYXRlZCBldmVudCBoYW5kbGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSBub2RlIE5vZGUgdG8gcmVtb3ZlIGV2ZW50IGxpc3RlbmVyIGZyb21cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIE5hbWUgb2YgZXZlbnRcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFFdmVudCk6dm9pZH0gaGFuZGxlciBMaXN0ZW5lciBmdW5jdGlvbiB0byByZW1vdmVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9yZW1vdmVFdmVudExpc3RlbmVyRnJvbU5vZGUobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiBUZW1wbGF0ZVN0YW1wO1xuXG59KTtcbiIsIi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQHN1cHByZXNzIHtjaGVja1Byb3RvdHlwYWxUeXBlc31cbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcbmltcG9ydCB7IHdyYXAgfSBmcm9tICcuLi91dGlscy93cmFwLmpzJztcbmltcG9ydCB7IGRlZHVwaW5nTWl4aW4gfSBmcm9tICcuLi91dGlscy9taXhpbi5qcyc7XG5pbXBvcnQgeyByb290LCBpc0FuY2VzdG9yLCBpc0Rlc2NlbmRhbnQsIGdldCwgdHJhbnNsYXRlLCBpc1BhdGgsIHNldCwgbm9ybWFsaXplIH0gZnJvbSAnLi4vdXRpbHMvcGF0aC5qcyc7XG4vKiBmb3Igbm90aWZ5LCByZWZsZWN0ICovXG5pbXBvcnQgeyBjYW1lbFRvRGFzaENhc2UsIGRhc2hUb0NhbWVsQ2FzZSB9IGZyb20gJy4uL3V0aWxzL2Nhc2UtbWFwLmpzJztcbmltcG9ydCB7IFByb3BlcnR5QWNjZXNzb3JzIH0gZnJvbSAnLi9wcm9wZXJ0eS1hY2Nlc3NvcnMuanMnO1xuLyogZm9yIGFubm90YXRlZCBlZmZlY3RzICovXG5pbXBvcnQgeyBUZW1wbGF0ZVN0YW1wIH0gZnJvbSAnLi90ZW1wbGF0ZS1zdGFtcC5qcyc7XG5pbXBvcnQgeyBzYW5pdGl6ZURPTVZhbHVlLCBsZWdhY3lVbmRlZmluZWQsIG9yZGVyZWRDb21wdXRlZCwgcmVtb3ZlTmVzdGVkVGVtcGxhdGVzLCBmYXN0RG9tSWYgfSBmcm9tICcuLi91dGlscy9zZXR0aW5ncy5qcyc7XG5cbi8vIE1vbm90b25pY2FsbHkgaW5jcmVhc2luZyB1bmlxdWUgSUQgdXNlZCBmb3IgZGUtZHVwaW5nIGVmZmVjdHMgdHJpZ2dlcmVkXG4vLyBmcm9tIG11bHRpcGxlIHByb3BlcnRpZXMgaW4gdGhlIHNhbWUgdHVyblxubGV0IGRlZHVwZUlkID0gMDtcblxuY29uc3QgTk9PUCA9IFtdO1xuXG4vKipcbiAqIFByb3BlcnR5IGVmZmVjdCB0eXBlczsgZWZmZWN0cyBhcmUgc3RvcmVkIG9uIHRoZSBwcm90b3R5cGUgdXNpbmcgdGhlc2Uga2V5c1xuICogQGVudW0ge3N0cmluZ31cbiAqL1xuY29uc3QgVFlQRVMgPSB7XG4gIENPTVBVVEU6ICdfX2NvbXB1dGVFZmZlY3RzJyxcbiAgUkVGTEVDVDogJ19fcmVmbGVjdEVmZmVjdHMnLFxuICBOT1RJRlk6ICdfX25vdGlmeUVmZmVjdHMnLFxuICBQUk9QQUdBVEU6ICdfX3Byb3BhZ2F0ZUVmZmVjdHMnLFxuICBPQlNFUlZFOiAnX19vYnNlcnZlRWZmZWN0cycsXG4gIFJFQURfT05MWTogJ19fcmVhZE9ubHknXG59O1xuXG5jb25zdCBDT01QVVRFX0lORk8gPSAnX19jb21wdXRlSW5mbyc7XG5cbi8qKiBAY29uc3QgeyFSZWdFeHB9ICovXG5jb25zdCBjYXBpdGFsQXR0cmlidXRlUmVnZXggPSAvW0EtWl0vO1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiBuYW1lOiAoc3RyaW5nIHwgdW5kZWZpbmVkKSxcbiAqIHN0cnVjdHVyZWQ6IChib29sZWFuIHwgdW5kZWZpbmVkKSxcbiAqIHdpbGRjYXJkOiAoYm9vbGVhbiB8IHVuZGVmaW5lZClcbiAqIH19XG4gKi9cbmxldCBEYXRhVHJpZ2dlcjsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqIGluZm86ID8sXG4gKiB0cmlnZ2VyOiAoIURhdGFUcmlnZ2VyIHwgdW5kZWZpbmVkKSxcbiAqIGZuOiAoIUZ1bmN0aW9uIHwgdW5kZWZpbmVkKVxuICogfX1cbiAqL1xubGV0IERhdGFFZmZlY3Q7IC8vZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4vKipcbiAqIEVuc3VyZXMgdGhhdCB0aGUgbW9kZWwgaGFzIGFuIG93bi1wcm9wZXJ0eSBtYXAgb2YgZWZmZWN0cyBmb3IgdGhlIGdpdmVuIHR5cGUuXG4gKiBUaGUgbW9kZWwgbWF5IGJlIGEgcHJvdG90eXBlIG9yIGFuIGluc3RhbmNlLlxuICpcbiAqIFByb3BlcnR5IGVmZmVjdHMgYXJlIHN0b3JlZCBhcyBhcnJheXMgb2YgZWZmZWN0cyBieSBwcm9wZXJ0eSBpbiBhIG1hcCxcbiAqIGJ5IG5hbWVkIHR5cGUgb24gdGhlIG1vZGVsLiBlLmcuXG4gKlxuICogICBfX2NvbXB1dGVFZmZlY3RzOiB7XG4gKiAgICAgZm9vOiBbIC4uLiBdLFxuICogICAgIGJhcjogWyAuLi4gXVxuICogICB9XG4gKlxuICogSWYgdGhlIG1vZGVsIGRvZXMgbm90IHlldCBoYXZlIGFuIGVmZmVjdCBtYXAgZm9yIHRoZSB0eXBlLCBvbmUgaXMgY3JlYXRlZFxuICogYW5kIHJldHVybmVkLiAgSWYgaXQgZG9lcywgYnV0IGl0IGlzIG5vdCBhbiBvd24gcHJvcGVydHkgKGkuZS4gdGhlXG4gKiBwcm90b3R5cGUgaGFkIGVmZmVjdHMpLCB0aGUgdGhlIG1hcCBpcyBkZWVwbHkgY2xvbmVkIGFuZCB0aGUgY29weSBpc1xuICogc2V0IG9uIHRoZSBtb2RlbCBhbmQgcmV0dXJuZWQsIHJlYWR5IGZvciBuZXcgZWZmZWN0cyB0byBiZSBhZGRlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbW9kZWwgUHJvdG90eXBlIG9yIGluc3RhbmNlXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBQcm9wZXJ0eSBlZmZlY3QgdHlwZVxuICogQHBhcmFtIHtib29sZWFuPX0gY2xvbmVBcnJheXMgQ2xvbmUgYW55IGFycmF5cyBhc3NpZ25lZCB0byB0aGUgbWFwIHdoZW5cbiAqICAgZXh0ZW5kaW5nIGEgc3VwZXJjbGFzcyBtYXAgb250byB0aGlzIHN1YmNsYXNzXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBvd24tcHJvcGVydHkgbWFwIG9mIGVmZmVjdHMgZm9yIHRoZSBnaXZlbiB0eXBlXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnN1cmVPd25FZmZlY3RNYXAobW9kZWwsIHR5cGUsIGNsb25lQXJyYXlzKSB7XG4gIGxldCBlZmZlY3RzID0gbW9kZWxbdHlwZV07XG4gIGlmICghZWZmZWN0cykge1xuICAgIGVmZmVjdHMgPSBtb2RlbFt0eXBlXSA9IHt9O1xuICB9IGVsc2UgaWYgKCFtb2RlbC5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkge1xuICAgIGVmZmVjdHMgPSBtb2RlbFt0eXBlXSA9IE9iamVjdC5jcmVhdGUobW9kZWxbdHlwZV0pO1xuICAgIGlmIChjbG9uZUFycmF5cykge1xuICAgICAgZm9yIChsZXQgcCBpbiBlZmZlY3RzKSB7XG4gICAgICAgIGxldCBwcm90b0Z4ID0gZWZmZWN0c1twXTtcbiAgICAgICAgLy8gUGVyZiBvcHRpbWl6YXRpb24gb3ZlciBBcnJheS5zbGljZVxuICAgICAgICBsZXQgaW5zdEZ4ID0gZWZmZWN0c1twXSA9IEFycmF5KHByb3RvRngubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHByb3RvRngubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpbnN0RnhbaV0gPSBwcm90b0Z4W2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBlZmZlY3RzO1xufVxuXG4vLyAtLSBlZmZlY3RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBSdW5zIGFsbCBlZmZlY3RzIG9mIGEgZ2l2ZW4gdHlwZSBmb3IgdGhlIGdpdmVuIHNldCBvZiBwcm9wZXJ0eSBjaGFuZ2VzXG4gKiBvbiBhbiBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2Ugd2l0aCBlZmZlY3RzIHRvIHJ1blxuICogQHBhcmFtIHs/T2JqZWN0fSBlZmZlY3RzIE9iamVjdCBtYXAgb2YgcHJvcGVydHktdG8tQXJyYXkgb2YgZWZmZWN0c1xuICogQHBhcmFtIHs/T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gKiBAcGFyYW0gez9PYmplY3Q9fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gKiBAcGFyYW0geyo9fSBleHRyYUFyZ3MgQWRkaXRpb25hbCBtZXRhZGF0YSB0byBwYXNzIHRvIGVmZmVjdCBmdW5jdGlvblxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbiBlZmZlY3QgcmFuIGZvciB0aGlzIHByb3BlcnR5XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBydW5FZmZlY3RzKGluc3QsIGVmZmVjdHMsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMsIGV4dHJhQXJncykge1xuICBpZiAoZWZmZWN0cykge1xuICAgIGxldCByYW4gPSBmYWxzZTtcbiAgICBjb25zdCBpZCA9IGRlZHVwZUlkKys7XG4gICAgZm9yIChsZXQgcHJvcCBpbiBwcm9wcykge1xuICAgICAgLy8gSW5saW5lIGBydW5FZmZlY3RzRm9yUHJvcGVydHlgIGZvciBwZXJmLlxuICAgICAgbGV0IHJvb3RQcm9wZXJ0eSA9IGhhc1BhdGhzID8gcm9vdChwcm9wKSA6IHByb3A7XG4gICAgICBsZXQgZnhzID0gZWZmZWN0c1tyb290UHJvcGVydHldO1xuICAgICAgaWYgKGZ4cykge1xuICAgICAgICBmb3IgKGxldCBpPTAsIGw9ZnhzLmxlbmd0aCwgZng7IChpPGwpICYmIChmeD1meHNbaV0pOyBpKyspIHtcbiAgICAgICAgICBpZiAoKCFmeC5pbmZvIHx8IGZ4LmluZm8ubGFzdFJ1biAhPT0gaWQpICYmXG4gICAgICAgICAgICAgICghaGFzUGF0aHMgfHwgcGF0aE1hdGNoZXNUcmlnZ2VyKHByb3AsIGZ4LnRyaWdnZXIpKSkge1xuICAgICAgICAgICAgaWYgKGZ4LmluZm8pIHtcbiAgICAgICAgICAgICAgZnguaW5mby5sYXN0UnVuID0gaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmeC5mbihpbnN0LCBwcm9wLCBwcm9wcywgb2xkUHJvcHMsIGZ4LmluZm8sIGhhc1BhdGhzLCBleHRyYUFyZ3MpO1xuICAgICAgICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJhbjtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUnVucyBhIGxpc3Qgb2YgZWZmZWN0cyBmb3IgYSBnaXZlbiBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2Ugd2l0aCBlZmZlY3RzIHRvIHJ1blxuICogQHBhcmFtIHshT2JqZWN0fSBlZmZlY3RzIE9iamVjdCBtYXAgb2YgcHJvcGVydHktdG8tQXJyYXkgb2YgZWZmZWN0c1xuICogQHBhcmFtIHtudW1iZXJ9IGRlZHVwZUlkIENvdW50ZXIgdXNlZCBmb3IgZGUtZHVwaW5nIGVmZmVjdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIE5hbWUgb2YgY2hhbmdlZCBwcm9wZXJ0eVxuICogQHBhcmFtIHsqfSBwcm9wcyBDaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7Kn0gb2xkUHJvcHMgT2xkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gKiBAcGFyYW0geyo9fSBleHRyYUFyZ3MgQWRkaXRpb25hbCBtZXRhZGF0YSB0byBwYXNzIHRvIGVmZmVjdCBmdW5jdGlvblxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbiBlZmZlY3QgcmFuIGZvciB0aGlzIHByb3BlcnR5XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBydW5FZmZlY3RzRm9yUHJvcGVydHkoaW5zdCwgZWZmZWN0cywgZGVkdXBlSWQsIHByb3AsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMsIGV4dHJhQXJncykge1xuICBsZXQgcmFuID0gZmFsc2U7XG4gIGxldCByb290UHJvcGVydHkgPSBoYXNQYXRocyA/IHJvb3QocHJvcCkgOiBwcm9wO1xuICBsZXQgZnhzID0gZWZmZWN0c1tyb290UHJvcGVydHldO1xuICBpZiAoZnhzKSB7XG4gICAgZm9yIChsZXQgaT0wLCBsPWZ4cy5sZW5ndGgsIGZ4OyAoaTxsKSAmJiAoZng9ZnhzW2ldKTsgaSsrKSB7XG4gICAgICBpZiAoKCFmeC5pbmZvIHx8IGZ4LmluZm8ubGFzdFJ1biAhPT0gZGVkdXBlSWQpICYmXG4gICAgICAgICAgKCFoYXNQYXRocyB8fCBwYXRoTWF0Y2hlc1RyaWdnZXIocHJvcCwgZngudHJpZ2dlcikpKSB7XG4gICAgICAgIGlmIChmeC5pbmZvKSB7XG4gICAgICAgICAgZnguaW5mby5sYXN0UnVuID0gZGVkdXBlSWQ7XG4gICAgICAgIH1cbiAgICAgICAgZnguZm4oaW5zdCwgcHJvcCwgcHJvcHMsIG9sZFByb3BzLCBmeC5pbmZvLCBoYXNQYXRocywgZXh0cmFBcmdzKTtcbiAgICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJhbjtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBwcm9wZXJ0eS9wYXRoIHRoYXQgaGFzIGNoYW5nZWQgbWF0Y2hlcyB0aGUgdHJpZ2dlclxuICogY3JpdGVyaWEgZm9yIGFuIGVmZmVjdC4gIEEgdHJpZ2dlciBpcyBhIGRlc2NyaXB0b3Igd2l0aCB0aGUgZm9sbG93aW5nXG4gKiBzdHJ1Y3R1cmUsIHdoaWNoIG1hdGNoZXMgdGhlIGRlc2NyaXB0b3JzIHJldHVybmVkIGZyb20gYHBhcnNlQXJnYC5cbiAqIGUuZy4gZm9yIGBmb28uYmFyLipgOlxuICogYGBgXG4gKiB0cmlnZ2VyOiB7XG4gKiAgIG5hbWU6ICdhLmInLFxuICogICBzdHJ1Y3R1cmVkOiB0cnVlLFxuICogICB3aWxkY2FyZDogdHJ1ZVxuICogfVxuICogYGBgXG4gKiBJZiBubyB0cmlnZ2VyIGlzIGdpdmVuLCB0aGUgcGF0aCBpcyBkZWVtZWQgdG8gbWF0Y2guXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBvciBwcm9wZXJ0eSB0aGF0IGNoYW5nZWRcbiAqIEBwYXJhbSB7P0RhdGFUcmlnZ2VyfSB0cmlnZ2VyIERlc2NyaXB0b3JcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHBhdGggbWF0Y2hlZCB0aGUgdHJpZ2dlclxuICovXG5mdW5jdGlvbiBwYXRoTWF0Y2hlc1RyaWdnZXIocGF0aCwgdHJpZ2dlcikge1xuICBpZiAodHJpZ2dlcikge1xuICAgIGxldCB0cmlnZ2VyUGF0aCA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAodHJpZ2dlci5uYW1lKTtcbiAgICByZXR1cm4gKHRyaWdnZXJQYXRoID09IHBhdGgpIHx8XG4gICAgICAgICEhKHRyaWdnZXIuc3RydWN0dXJlZCAmJiBpc0FuY2VzdG9yKHRyaWdnZXJQYXRoLCBwYXRoKSkgfHxcbiAgICAgICAgISEodHJpZ2dlci53aWxkY2FyZCAmJiBpc0Rlc2NlbmRhbnQodHJpZ2dlclBhdGgsIHBhdGgpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwib2JzZXJ2ZXJcIiBlZmZlY3QuXG4gKlxuICogQ2FsbHMgdGhlIG1ldGhvZCB3aXRoIGBpbmZvLm1ldGhvZE5hbWVgIG9uIHRoZSBpbnN0YW5jZSwgcGFzc2luZyB0aGVcbiAqIG5ldyBhbmQgb2xkIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2UgdGhlIGVmZmVjdCB3aWxsIGJlIHJ1biBvblxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gez99IGluZm8gRWZmZWN0IG1ldGFkYXRhXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuT2JzZXJ2ZXJFZmZlY3QoaW5zdCwgcHJvcGVydHksIHByb3BzLCBvbGRQcm9wcywgaW5mbykge1xuICBsZXQgZm4gPSB0eXBlb2YgaW5mby5tZXRob2QgPT09IFwic3RyaW5nXCIgPyBpbnN0W2luZm8ubWV0aG9kXSA6IGluZm8ubWV0aG9kO1xuICBsZXQgY2hhbmdlZFByb3AgPSBpbmZvLnByb3BlcnR5O1xuICBpZiAoZm4pIHtcbiAgICBmbi5jYWxsKGluc3QsIGluc3QuX19kYXRhW2NoYW5nZWRQcm9wXSwgb2xkUHJvcHNbY2hhbmdlZFByb3BdKTtcbiAgfSBlbHNlIGlmICghaW5mby5keW5hbWljRm4pIHtcbiAgICBjb25zb2xlLndhcm4oJ29ic2VydmVyIG1ldGhvZCBgJyArIGluZm8ubWV0aG9kICsgJ2Agbm90IGRlZmluZWQnKTtcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnMgXCJub3RpZnlcIiBlZmZlY3RzIGZvciBhIHNldCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMuXG4gKlxuICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIHRoZSBnZW5lcmljIGBydW5FZmZlY3RzYCBtZXRob2QgaW4gdGhhdCBpdFxuICogd2lsbCBkaXNwYXRjaCBwYXRoIG5vdGlmaWNhdGlvbiBldmVudHMgaW4gdGhlIGNhc2UgdGhhdCB0aGUgcHJvcGVydHlcbiAqIGNoYW5nZWQgd2FzIGEgcGF0aCBhbmQgdGhlIHJvb3QgcHJvcGVydHkgZm9yIHRoYXQgcGF0aCBkaWRuJ3QgaGF2ZSBhXG4gKiBcIm5vdGlmeVwiIGVmZmVjdC4gIFRoaXMgaXMgdG8gbWFpbnRhaW4gMS4wIGJlaGF2aW9yIHRoYXQgZGlkIG5vdCByZXF1aXJlXG4gKiBgbm90aWZ5OiB0cnVlYCB0byBlbnN1cmUgb2JqZWN0IHN1Yi1wcm9wZXJ0eSBub3RpZmljYXRpb25zIHdlcmVcbiAqIHNlbnQuXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGluc3RhbmNlIHdpdGggZWZmZWN0cyB0byBydW5cbiAqIEBwYXJhbSB7T2JqZWN0fSBub3RpZnlQcm9wcyBCYWcgb2YgcHJvcGVydGllcyB0byBub3RpZnlcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuTm90aWZ5RWZmZWN0cyhpbnN0LCBub3RpZnlQcm9wcywgcHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocykge1xuICAvLyBOb3RpZnlcbiAgbGV0IGZ4cyA9IGluc3RbVFlQRVMuTk9USUZZXTtcbiAgbGV0IG5vdGlmaWVkO1xuICBsZXQgaWQgPSBkZWR1cGVJZCsrO1xuICAvLyBUcnkgbm9ybWFsIG5vdGlmeSBlZmZlY3RzOyBpZiBub25lLCBmYWxsIGJhY2sgdG8gdHJ5IHBhdGggbm90aWZpY2F0aW9uXG4gIGZvciAobGV0IHByb3AgaW4gbm90aWZ5UHJvcHMpIHtcbiAgICBpZiAobm90aWZ5UHJvcHNbcHJvcF0pIHtcbiAgICAgIGlmIChmeHMgJiYgcnVuRWZmZWN0c0ZvclByb3BlcnR5KGluc3QsIGZ4cywgaWQsIHByb3AsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpKSB7XG4gICAgICAgIG5vdGlmaWVkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoaGFzUGF0aHMgJiYgbm90aWZ5UGF0aChpbnN0LCBwcm9wLCBwcm9wcykpIHtcbiAgICAgICAgbm90aWZpZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBGbHVzaCBob3N0IGlmIHdlIGFjdHVhbGx5IG5vdGlmaWVkIGFuZCBob3N0IHdhcyBiYXRjaGluZ1xuICAvLyBBbmQgdGhlIGhvc3QgaGFzIGFscmVhZHkgaW5pdGlhbGl6ZWQgY2xpZW50czsgdGhpcyBwcmV2ZW50c1xuICAvLyBhbiBpc3N1ZSB3aXRoIGEgaG9zdCBvYnNlcnZpbmcgZGF0YSBjaGFuZ2VzIGJlZm9yZSBjbGllbnRzIGFyZSByZWFkeS5cbiAgbGV0IGhvc3Q7XG4gIGlmIChub3RpZmllZCAmJiAoaG9zdCA9IGluc3QuX19kYXRhSG9zdCkgJiYgaG9zdC5faW52YWxpZGF0ZVByb3BlcnRpZXMpIHtcbiAgICBob3N0Ll9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2hlcyB7cHJvcGVydHl9LWNoYW5nZWQgZXZlbnRzIHdpdGggcGF0aCBpbmZvcm1hdGlvbiBpbiB0aGUgZGV0YWlsXG4gKiBvYmplY3QgdG8gaW5kaWNhdGUgYSBzdWItcGF0aCBvZiB0aGUgcHJvcGVydHkgd2FzIGNoYW5nZWQuXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGVsZW1lbnQgZnJvbSB3aGljaCB0byBmaXJlIHRoZVxuICogICAgIGV2ZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCB0aGF0IHdhcyBjaGFuZ2VkXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBwYXRoIHdhcyBub3RpZmllZFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbm90aWZ5UGF0aChpbnN0LCBwYXRoLCBwcm9wcykge1xuICBsZXQgcm9vdFByb3BlcnR5ID0gcm9vdChwYXRoKTtcbiAgaWYgKHJvb3RQcm9wZXJ0eSAhPT0gcGF0aCkge1xuICAgIGxldCBldmVudE5hbWUgPSBjYW1lbFRvRGFzaENhc2Uocm9vdFByb3BlcnR5KSArICctY2hhbmdlZCc7XG4gICAgZGlzcGF0Y2hOb3RpZnlFdmVudChpbnN0LCBldmVudE5hbWUsIHByb3BzW3BhdGhdLCBwYXRoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogRGlzcGF0Y2hlcyB7cHJvcGVydHl9LWNoYW5nZWQgZXZlbnRzIHRvIGluZGljYXRlIGEgcHJvcGVydHkgKG9yIHBhdGgpXG4gKiBjaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IFRoZSBlbGVtZW50IGZyb20gd2hpY2ggdG8gZmlyZSB0aGVcbiAqICAgICBldmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gc2VuZFxuICogICAgICgne3Byb3BlcnR5fS1jaGFuZ2VkJylcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBjaGFuZ2VkIHByb3BlcnR5XG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IHBhdGggSWYgYSBzdWItcGF0aCBvZiB0aGlzIHByb3BlcnR5XG4gKiAgICAgY2hhbmdlZCwgdGhlIHBhdGggdGhhdCBjaGFuZ2VkIChvcHRpb25hbCkuXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfVxuICovXG5mdW5jdGlvbiBkaXNwYXRjaE5vdGlmeUV2ZW50KGluc3QsIGV2ZW50TmFtZSwgdmFsdWUsIHBhdGgpIHtcbiAgbGV0IGRldGFpbCA9IHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgcXVldWVQcm9wZXJ0eTogdHJ1ZVxuICB9O1xuICBpZiAocGF0aCkge1xuICAgIGRldGFpbC5wYXRoID0gcGF0aDtcbiAgfVxuICAvLyBBcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiwgd2UgY291bGQgZWxpZGUgdGhlIHdyYXAgaGVyZSBzaW5jZSBub3RpZnlpbmdcbiAgLy8gZXZlbnRzIGFyZSBub24tYnViYmxpbmcgYW5kIHNob3VsZG4ndCBuZWVkIHJldGFyZ2V0aW5nLiBIb3dldmVyLCBhIHZlcnlcbiAgLy8gc21hbGwgbnVtYmVyIG9mIGludGVybmFsIHRlc3RzIGZhaWxlZCBpbiBvYnNjdXJlIHdheXMsIHdoaWNoIG1heSBpbmRpY2F0ZVxuICAvLyB1c2VyIGNvZGUgcmVsaWVkIG9uIHRpbWluZyBkaWZmZXJlbmNlcyByZXN1bHRpbmcgZnJvbSBTaGFkeURPTSBmbHVzaGluZ1xuICAvLyBhcyBhIHJlc3VsdCBvZiB0aGUgd3JhcHBlZCBgZGlzcGF0Y2hFdmVudGAuXG4gIHdyYXAoLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKGluc3QpKS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChldmVudE5hbWUsIHsgZGV0YWlsIH0pKTtcbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBcIm5vdGlmeVwiIGVmZmVjdC5cbiAqXG4gKiBEaXNwYXRjaGVzIGEgbm9uLWJ1YmJsaW5nIGV2ZW50IG5hbWVkIGBpbmZvLmV2ZW50TmFtZWAgb24gdGhlIGluc3RhbmNlXG4gKiB3aXRoIGEgZGV0YWlsIG9iamVjdCBjb250YWluaW5nIHRoZSBuZXcgYHZhbHVlYC5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2UgdGhlIGVmZmVjdCB3aWxsIGJlIHJ1biBvblxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gez99IGluZm8gRWZmZWN0IG1ldGFkYXRhXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuTm90aWZ5RWZmZWN0KGluc3QsIHByb3BlcnR5LCBwcm9wcywgb2xkUHJvcHMsIGluZm8sIGhhc1BhdGhzKSB7XG4gIGxldCByb290UHJvcGVydHkgPSBoYXNQYXRocyA/IHJvb3QocHJvcGVydHkpIDogcHJvcGVydHk7XG4gIGxldCBwYXRoID0gcm9vdFByb3BlcnR5ICE9IHByb3BlcnR5ID8gcHJvcGVydHkgOiBudWxsO1xuICBsZXQgdmFsdWUgPSBwYXRoID8gZ2V0KGluc3QsIHBhdGgpIDogaW5zdC5fX2RhdGFbcHJvcGVydHldO1xuICBpZiAocGF0aCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsdWUgPSBwcm9wc1twcm9wZXJ0eV07ICAvLyBzcGVjaWZpY2FsbHkgZm9yIC5zcGxpY2VzXG4gIH1cbiAgZGlzcGF0Y2hOb3RpZnlFdmVudChpbnN0LCBpbmZvLmV2ZW50TmFtZSwgdmFsdWUsIHBhdGgpO1xufVxuXG4vKipcbiAqIEhhbmRsZXIgZnVuY3Rpb24gZm9yIDItd2F5IG5vdGlmaWNhdGlvbiBldmVudHMuIFJlY2VpdmVzIGNvbnRleHRcbiAqIGluZm9ybWF0aW9uIGNhcHR1cmVkIGluIHRoZSBgYWRkTm90aWZ5TGlzdGVuZXJgIGNsb3N1cmUgZnJvbSB0aGVcbiAqIGBfX25vdGlmeUxpc3RlbmVyc2AgbWV0YWRhdGEuXG4gKlxuICogU2V0cyB0aGUgdmFsdWUgb2YgdGhlIG5vdGlmaWVkIHByb3BlcnR5IHRvIHRoZSBob3N0IHByb3BlcnR5IG9yIHBhdGguICBJZlxuICogdGhlIGV2ZW50IGNvbnRhaW5lZCBwYXRoIGluZm9ybWF0aW9uLCB0cmFuc2xhdGUgdGhhdCBwYXRoIHRvIHRoZSBob3N0XG4gKiBzY29wZSdzIG5hbWUgZm9yIHRoYXQgcGF0aCBmaXJzdC5cbiAqXG4gKiBAcGFyYW0ge0N1c3RvbUV2ZW50fSBldmVudCBOb3RpZmljYXRpb24gZXZlbnQgKGUuZy4gJzxwcm9wZXJ0eT4tY2hhbmdlZCcpXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBIb3N0IGVsZW1lbnQgaW5zdGFuY2UgaGFuZGxpbmcgdGhlXG4gKiAgICAgbm90aWZpY2F0aW9uIGV2ZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZnJvbVByb3AgQ2hpbGQgZWxlbWVudCBwcm9wZXJ0eSB0aGF0IHdhcyBib3VuZFxuICogQHBhcmFtIHtzdHJpbmd9IHRvUGF0aCBIb3N0IHByb3BlcnR5L3BhdGggdGhhdCB3YXMgYm91bmRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbmVnYXRlIFdoZXRoZXIgdGhlIGJpbmRpbmcgd2FzIG5lZ2F0ZWRcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBoYW5kbGVOb3RpZmljYXRpb24oZXZlbnQsIGluc3QsIGZyb21Qcm9wLCB0b1BhdGgsIG5lZ2F0ZSkge1xuICBsZXQgdmFsdWU7XG4gIGxldCBkZXRhaWwgPSAvKiogQHR5cGUge09iamVjdH0gKi8oZXZlbnQuZGV0YWlsKTtcbiAgbGV0IGZyb21QYXRoID0gZGV0YWlsICYmIGRldGFpbC5wYXRoO1xuICBpZiAoZnJvbVBhdGgpIHtcbiAgICB0b1BhdGggPSB0cmFuc2xhdGUoZnJvbVByb3AsIHRvUGF0aCwgZnJvbVBhdGgpO1xuICAgIHZhbHVlID0gZGV0YWlsICYmIGRldGFpbC52YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXRbZnJvbVByb3BdO1xuICB9XG4gIHZhbHVlID0gbmVnYXRlID8gIXZhbHVlIDogdmFsdWU7XG4gIGlmICghaW5zdFtUWVBFUy5SRUFEX09OTFldIHx8ICFpbnN0W1RZUEVTLlJFQURfT05MWV1bdG9QYXRoXSkge1xuICAgIGlmIChpbnN0Ll9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgodG9QYXRoLCB2YWx1ZSwgdHJ1ZSwgQm9vbGVhbihmcm9tUGF0aCkpXG4gICAgICAmJiAoIWRldGFpbCB8fCAhZGV0YWlsLnF1ZXVlUHJvcGVydHkpKSB7XG4gICAgICBpbnN0Ll9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwicmVmbGVjdFwiIGVmZmVjdC5cbiAqXG4gKiBTZXRzIHRoZSBhdHRyaWJ1dGUgbmFtZWQgYGluZm8uYXR0ck5hbWVgIHRvIHRoZSBnaXZlbiBwcm9wZXJ0eSB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2UgdGhlIGVmZmVjdCB3aWxsIGJlIHJ1biBvblxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gez99IGluZm8gRWZmZWN0IG1ldGFkYXRhXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuUmVmbGVjdEVmZmVjdChpbnN0LCBwcm9wZXJ0eSwgcHJvcHMsIG9sZFByb3BzLCBpbmZvKSB7XG4gIGxldCB2YWx1ZSA9IGluc3QuX19kYXRhW3Byb3BlcnR5XTtcbiAgaWYgKHNhbml0aXplRE9NVmFsdWUpIHtcbiAgICB2YWx1ZSA9IHNhbml0aXplRE9NVmFsdWUodmFsdWUsIGluZm8uYXR0ck5hbWUsICdhdHRyaWJ1dGUnLCAvKiogQHR5cGUge05vZGV9ICovKGluc3QpKTtcbiAgfVxuICBpbnN0Ll9wcm9wZXJ0eVRvQXR0cmlidXRlKHByb3BlcnR5LCBpbmZvLmF0dHJOYW1lLCB2YWx1ZSk7XG59XG5cbi8qKlxuICogUnVucyBcImNvbXB1dGVkXCIgZWZmZWN0cyBmb3IgYSBzZXQgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzLlxuICpcbiAqIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSB0aGUgZ2VuZXJpYyBgcnVuRWZmZWN0c2AgbWV0aG9kIGluIHRoYXQgaXRcbiAqIGNvbnRpbnVlcyB0byBydW4gY29tcHV0ZWQgZWZmZWN0cyBiYXNlZCBvbiB0aGUgb3V0cHV0IG9mIGVhY2ggcGFzcyB1bnRpbFxuICogdGhlcmUgYXJlIG5vIG1vcmUgbmV3bHkgY29tcHV0ZWQgcHJvcGVydGllcy4gIFRoaXMgZW5zdXJlcyB0aGF0IGFsbFxuICogcHJvcGVydGllcyB0aGF0IHdpbGwgYmUgY29tcHV0ZWQgYnkgdGhlIGluaXRpYWwgc2V0IG9mIGNoYW5nZXMgYXJlXG4gKiBjb21wdXRlZCBiZWZvcmUgb3RoZXIgZWZmZWN0cyAoYmluZGluZyBwcm9wYWdhdGlvbiwgb2JzZXJ2ZXJzLCBhbmQgbm90aWZ5KVxuICogcnVuLlxuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gKiBAcGFyYW0gez9PYmplY3R9IGNoYW5nZWRQcm9wcyBCYWcgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gez9PYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICogQHBhcmFtIHtib29sZWFufSBoYXNQYXRocyBUcnVlIHdpdGggYHByb3BzYCBjb250YWlucyBvbmUgb3IgbW9yZSBwYXRoc1xuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJ1bkNvbXB1dGVkRWZmZWN0cyhpbnN0LCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocykge1xuICBsZXQgY29tcHV0ZUVmZmVjdHMgPSBpbnN0W1RZUEVTLkNPTVBVVEVdO1xuICBpZiAoY29tcHV0ZUVmZmVjdHMpIHtcbiAgICBpZiAob3JkZXJlZENvbXB1dGVkKSB7XG4gICAgICAvLyBSdW5zIGNvbXB1dGVkIGVmZmVjdHMgaW4gZWZmaWNpZW50IG9yZGVyIGJ5IGtlZXBpbmcgYSB0b3BvbG9naWNhbGx5LVxuICAgICAgLy8gc29ydGVkIHF1ZXVlIG9mIGNvbXB1dGUgZWZmZWN0cyB0byBydW4sIGFuZCBpbnNlcnRpbmcgc3Vic2VxdWVudGx5XG4gICAgICAvLyBpbnZhbGlkYXRlZCBlZmZlY3RzIGFzIHRoZXkgYXJlIHJ1blxuICAgICAgZGVkdXBlSWQrKztcbiAgICAgIGNvbnN0IG9yZGVyID0gZ2V0Q29tcHV0ZWRPcmRlcihpbnN0KTtcbiAgICAgIGNvbnN0IHF1ZXVlID0gW107XG4gICAgICBmb3IgKGxldCBwIGluIGNoYW5nZWRQcm9wcykge1xuICAgICAgICBlbnF1ZXVlRWZmZWN0c0ZvcihwLCBjb21wdXRlRWZmZWN0cywgcXVldWUsIG9yZGVyLCBoYXNQYXRocyk7XG4gICAgICB9XG4gICAgICBsZXQgaW5mbztcbiAgICAgIHdoaWxlICgoaW5mbyA9IHF1ZXVlLnNoaWZ0KCkpKSB7XG4gICAgICAgIGlmIChydW5Db21wdXRlZEVmZmVjdChpbnN0LCAnJywgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaW5mbykpIHtcbiAgICAgICAgICBlbnF1ZXVlRWZmZWN0c0ZvcihpbmZvLm1ldGhvZEluZm8sIGNvbXB1dGVFZmZlY3RzLCBxdWV1ZSwgb3JkZXIsIGhhc1BhdGhzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgT2JqZWN0LmFzc2lnbigvKiogQHR5cGUgeyFPYmplY3R9ICovIChvbGRQcm9wcyksIGluc3QuX19kYXRhT2xkKTtcbiAgICAgIE9iamVjdC5hc3NpZ24oLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoY2hhbmdlZFByb3BzKSwgaW5zdC5fX2RhdGFQZW5kaW5nKTtcbiAgICAgIGluc3QuX19kYXRhUGVuZGluZyA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9yaWdpbmFsIFBvbHltZXIgMi54IGNvbXB1dGVkIGVmZmVjdHMgb3JkZXIsIHdoaWNoIGNvbnRpbnVlcyBydW5uaW5nXG4gICAgICAvLyBlZmZlY3RzIHVudGlsIG5vIGZ1cnRoZXIgY29tcHV0ZWQgcHJvcGVydGllcyBoYXZlIGJlZW4gaW52YWxpZGF0ZWRcbiAgICAgIGxldCBpbnB1dFByb3BzID0gY2hhbmdlZFByb3BzO1xuICAgICAgd2hpbGUgKHJ1bkVmZmVjdHMoaW5zdCwgY29tcHV0ZUVmZmVjdHMsIGlucHV0UHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocykpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbigvKiogQHR5cGUgeyFPYmplY3R9ICovIChvbGRQcm9wcyksIGluc3QuX19kYXRhT2xkKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbigvKiogQHR5cGUgeyFPYmplY3R9ICovIChjaGFuZ2VkUHJvcHMpLCBpbnN0Ll9fZGF0YVBlbmRpbmcpO1xuICAgICAgICBpbnB1dFByb3BzID0gaW5zdC5fX2RhdGFQZW5kaW5nO1xuICAgICAgICBpbnN0Ll9fZGF0YVBlbmRpbmcgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEluc2VydHMgYSBjb21wdXRlZCBlZmZlY3QgaW50byBhIHF1ZXVlLCBnaXZlbiB0aGUgc3BlY2lmaWVkIG9yZGVyLiBQZXJmb3Jtc1xuICogdGhlIGluc2VydCB1c2luZyBhIGJpbmFyeSBzZWFyY2guXG4gKlxuICogVXNlZCBieSBgb3JkZXJlZENvbXB1dGVkOiB0cnVlYCBjb21wdXRlZCBwcm9wZXJ0eSBhbGdvcml0aG0uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluZm8gUHJvcGVydHkgZWZmZWN0cyBtZXRhZGF0YVxuICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBxdWV1ZSBPcmRlcmVkIHF1ZXVlIG9mIGVmZmVjdHNcbiAqIEBwYXJhbSB7TWFwPHN0cmluZyxudW1iZXI+fSBvcmRlciBNYXAgb2YgY29tcHV0ZWQgcHJvcGVydHkgbmFtZS0+dG9wb2xvZ2ljYWxcbiAqICAgc29ydCBvcmRlclxuICovXG5jb25zdCBpbnNlcnRFZmZlY3QgPSAoaW5mbywgcXVldWUsIG9yZGVyKSA9PiB7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBlbmQgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICBsZXQgaWR4ID0gLTE7XG4gIHdoaWxlIChzdGFydCA8PSBlbmQpIHtcbiAgICBjb25zdCBtaWQgPSAoc3RhcnQgKyBlbmQpID4+IDE7XG4gICAgLy8gTm90ZSBgbWV0aG9kSW5mb2AgaXMgd2hlcmUgdGhlIGNvbXB1dGVkIHByb3BlcnR5IG5hbWUgaXMgc3RvcmVkIGluXG4gICAgLy8gdGhlIGVmZmVjdCBtZXRhZGF0YVxuICAgIGNvbnN0IGNtcCA9IG9yZGVyLmdldChxdWV1ZVttaWRdLm1ldGhvZEluZm8pIC0gb3JkZXIuZ2V0KGluZm8ubWV0aG9kSW5mbyk7XG4gICAgaWYgKGNtcCA8IDApIHtcbiAgICAgIHN0YXJ0ID0gbWlkICsgMTtcbiAgICB9IGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICAgIGVuZCA9IG1pZCAtIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlkeCA9IG1pZDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoaWR4IDwgMCkge1xuICAgIGlkeCA9IGVuZCArIDE7XG4gIH1cbiAgcXVldWUuc3BsaWNlKGlkeCwgMCwgaW5mbyk7XG59O1xuXG4vKipcbiAqIEluc2VydHMgYWxsIGRvd25zdHJlYW0gY29tcHV0ZWQgZWZmZWN0cyBpbnZhbGlkYXRlZCBieSB0aGUgc3BlY2lmaWVkIHByb3BlcnR5XG4gKiBpbnRvIHRoZSB0b3BvbG9naWNhbGx5LXNvcnRlZCBxdWV1ZSBvZiBlZmZlY3RzIHRvIGJlIHJ1bi5cbiAqXG4gKiBVc2VkIGJ5IGBvcmRlcmVkQ29tcHV0ZWQ6IHRydWVgIGNvbXB1dGVkIHByb3BlcnR5IGFsZ29yaXRobS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdH0gY29tcHV0ZUVmZmVjdHMgQ29tcHV0ZWQgZWZmZWN0cyBmb3IgdGhpcyBlbGVtZW50XG4gKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IHF1ZXVlIFRvcG9sb2dpY2FsbHktc29ydGVkIHF1ZXVlIG9mIGNvbXB1dGVkIGVmZmVjdHNcbiAqICAgdG8gYmUgcnVuXG4gKiBAcGFyYW0ge01hcDxzdHJpbmcsbnVtYmVyPn0gb3JkZXIgTWFwIG9mIGNvbXB1dGVkIHByb3BlcnR5IG5hbWUtPnRvcG9sb2dpY2FsXG4gKiAgIHNvcnQgb3JkZXJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzUGF0aHMgVHJ1ZSB3aXRoIGBjaGFuZ2VkUHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gKi9cbmNvbnN0IGVucXVldWVFZmZlY3RzRm9yID0gKHByb3AsIGNvbXB1dGVFZmZlY3RzLCBxdWV1ZSwgb3JkZXIsIGhhc1BhdGhzKSA9PiB7XG4gIGNvbnN0IHJvb3RQcm9wZXJ0eSA9IGhhc1BhdGhzID8gcm9vdChwcm9wKSA6IHByb3A7XG4gIGNvbnN0IGZ4cyA9IGNvbXB1dGVFZmZlY3RzW3Jvb3RQcm9wZXJ0eV07XG4gIGlmIChmeHMpIHtcbiAgICBmb3IgKGxldCBpPTA7IGk8ZnhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmeCA9IGZ4c1tpXTtcbiAgICAgIGlmICgoZnguaW5mby5sYXN0UnVuICE9PSBkZWR1cGVJZCkgJiZcbiAgICAgICAgICAoIWhhc1BhdGhzIHx8IHBhdGhNYXRjaGVzVHJpZ2dlcihwcm9wLCBmeC50cmlnZ2VyKSkpIHtcbiAgICAgICAgZnguaW5mby5sYXN0UnVuID0gZGVkdXBlSWQ7XG4gICAgICAgIGluc2VydEVmZmVjdChmeC5pbmZvLCBxdWV1ZSwgb3JkZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYW5kIHJldHJpZXZlcyBhIG1lbW9pemVkIG1hcCBvZiBjb21wdXRlZCBwcm9wZXJ0eSBuYW1lIHRvIGl0c1xuICogdG9wb2xvZ2ljYWxseS1zb3J0ZWQgb3JkZXIuXG4gKlxuICogVGhlIG1hcCBpcyBnZW5lcmF0ZWQgYnkgZmlyc3QgYXNzaWduaW5nIGEgXCJkZXBlbmRlbmN5IGNvdW50XCIgdG8gZWFjaCBwcm9wZXJ0eVxuICogKGRlZmluZWQgYXMgbnVtYmVyIHByb3BlcnRpZXMgaXQgZGVwZW5kcyBvbiwgaW5jbHVkaW5nIGl0cyBtZXRob2QgZm9yXG4gKiBcImR5bmFtaWMgZnVuY3Rpb25zXCIpLiBBbnkgcHJvcGVydGllcyB0aGF0IGhhdmUgbm8gZGVwZW5kZW5jaWVzIGFyZSBhZGRlZCB0b1xuICogdGhlIGByZWFkeWAgcXVldWUsIHdoaWNoIGFyZSBwcm9wZXJ0aWVzIHdob3NlIG9yZGVyIGNhbiBiZSBhZGRlZCB0byB0aGUgZmluYWxcbiAqIG9yZGVyIG1hcC4gUHJvcGVydGllcyBhcmUgcG9wcGVkIG9mZiB0aGUgYHJlYWR5YCBxdWV1ZSBvbmUgYnkgb25lIGFuZCBhLikgYWRkZWQgYXNcbiAqIHRoZSBuZXh0IHByb3BlcnR5IGluIHRoZSBvcmRlciBtYXAsIGFuZCBiLikgZWFjaCBwcm9wZXJ0eSB0aGF0IGl0IGlzIGFcbiAqIGRlcGVuZGVuY3kgZm9yIGhhcyBpdHMgZGVwIGNvdW50IGRlY3JlbWVudGVkIChhbmQgaWYgdGhhdCBwcm9wZXJ0eSdzIGRlcFxuICogY291bnQgZ29lcyB0byB6ZXJvLCBpdCBpcyBhZGRlZCB0byB0aGUgYHJlYWR5YCBxdWV1ZSksIHVudGlsIGFsbCBwcm9wZXJ0aWVzXG4gKiBoYXZlIGJlZW4gdmlzaXRlZCBhbmQgb3JkZXJlZC5cbiAqXG4gKiBVc2VkIGJ5IGBvcmRlcmVkQ29tcHV0ZWQ6IHRydWVgIGNvbXB1dGVkIHByb3BlcnR5IGFsZ29yaXRobS5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2UgdG8gcmV0cmlldmUgdGhlIGNvbXB1dGVkXG4gKiAgIGVmZmVjdCBvcmRlciBmb3IuXG4gKiBAcmV0dXJuIHtNYXA8c3RyaW5nLG51bWJlcj59IE1hcCBvZiBjb21wdXRlZCBwcm9wZXJ0eSBuYW1lLT50b3BvbG9naWNhbCBzb3J0XG4gKiAgIG9yZGVyXG4gKi9cbmZ1bmN0aW9uIGdldENvbXB1dGVkT3JkZXIoaW5zdCkge1xuICBsZXQgb3JkZXJlZCA9IGluc3QuY29uc3RydWN0b3IuX19vcmRlcmVkQ29tcHV0ZWREZXBzO1xuICBpZiAoIW9yZGVyZWQpIHtcbiAgICBvcmRlcmVkID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGVmZmVjdHMgPSBpbnN0W1RZUEVTLkNPTVBVVEVdO1xuICAgIGxldCB7Y291bnRzLCByZWFkeSwgdG90YWx9ID0gZGVwZW5kZW5jeUNvdW50cyhpbnN0KTtcbiAgICBsZXQgY3VycjtcbiAgICB3aGlsZSAoKGN1cnIgPSByZWFkeS5zaGlmdCgpKSkge1xuICAgICAgb3JkZXJlZC5zZXQoY3Vyciwgb3JkZXJlZC5zaXplKTtcbiAgICAgIGNvbnN0IGNvbXB1dGVkQnlDdXJyID0gZWZmZWN0c1tjdXJyXTtcbiAgICAgIGlmIChjb21wdXRlZEJ5Q3Vycikge1xuICAgICAgICBjb21wdXRlZEJ5Q3Vyci5mb3JFYWNoKGZ4ID0+IHtcbiAgICAgICAgICAvLyBOb3RlIGBtZXRob2RJbmZvYCBpcyB3aGVyZSB0aGUgY29tcHV0ZWQgcHJvcGVydHkgbmFtZSBpcyBzdG9yZWRcbiAgICAgICAgICBjb25zdCBjb21wdXRlZFByb3AgPSBmeC5pbmZvLm1ldGhvZEluZm87XG4gICAgICAgICAgLS10b3RhbDtcbiAgICAgICAgICBpZiAoLS1jb3VudHNbY29tcHV0ZWRQcm9wXSA9PT0gMCkge1xuICAgICAgICAgICAgcmVhZHkucHVzaChjb21wdXRlZFByb3ApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0b3RhbCAhPT0gMCkge1xuICAgICAgY29uc3QgZWwgPSAvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyAoaW5zdCk7XG4gICAgICBjb25zb2xlLndhcm4oYENvbXB1dGVkIGdyYXBoIGZvciAke2VsLmxvY2FsTmFtZX0gaW5jb21wbGV0ZTsgY2lyY3VsYXI/YCk7XG4gICAgfVxuICAgIGluc3QuY29uc3RydWN0b3IuX19vcmRlcmVkQ29tcHV0ZWREZXBzID0gb3JkZXJlZDtcbiAgfVxuICByZXR1cm4gb3JkZXJlZDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBtYXAgb2YgcHJvcGVydHktdG8tZGVwZW5kZW5jeSBjb3VudCAoYGNvdW50c2AsIHdoZXJlIFwiZGVwZW5kZW5jeVxuICogY291bnRcIiBpcyB0aGUgbnVtYmVyIG9mIGRlcGVuZGVuY2llcyBhIGdpdmVuIHByb3BlcnR5IGhhcyBhc3N1bWluZyBpdCBpcyBhXG4gKiBjb21wdXRlZCBwcm9wZXJ0eSwgb3RoZXJ3aXNlIDApLiAgSXQgYWxzbyByZXR1cm5zIGEgcHJlLXBvcHVsYXRlZCBsaXN0IG9mXG4gKiBgcmVhZHlgIHByb3BlcnRpZXMgdGhhdCBoYXZlIG5vIGRlcGVuZGVuY2llcyBhbmQgYSBgdG90YWxgIGNvdW50LCB3aGljaCBpc1xuICogdXNlZCBmb3IgZXJyb3ItY2hlY2tpbmcgdGhlIGdyYXBoLlxuICpcbiAqIFVzZWQgYnkgYG9yZGVyZWRDb21wdXRlZDogdHJ1ZWAgY29tcHV0ZWQgcHJvcGVydHkgYWxnb3JpdGhtLlxuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IFRoZSBpbnN0YW5jZSB0byBnZW5lcmF0ZSBkZXBlbmRlbmN5XG4gKiAgIGNvdW50cyBmb3IuXG4gKiBAcmV0dXJuIHshT2JqZWN0fSBPYmplY3QgY29udGFpbmluZyBgY291bnRzYCBtYXAgKHByb3BlcnR5LXRvLWRlcGVuZGVuY3lcbiAqICAgY291bnQpIGFuZCBwcmUtcG9wdWxhdGVkIGByZWFkeWAgYXJyYXkgb2YgcHJvcGVydGllcyB0aGF0IGhhZCB6ZXJvXG4gKiAgIGRlcGVuZGVuY2llcy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kZW5jeUNvdW50cyhpbnN0KSB7XG4gIGNvbnN0IGluZm9Gb3JDb21wdXRlZCA9IGluc3RbQ09NUFVURV9JTkZPXTtcbiAgY29uc3QgY291bnRzID0ge307XG4gIGNvbnN0IGNvbXB1dGVkRGVwcyA9IGluc3RbVFlQRVMuQ09NUFVURV07XG4gIGNvbnN0IHJlYWR5ID0gW107XG4gIGxldCB0b3RhbCA9IDA7XG4gIC8vIENvdW50IGRlcGVuZGVuY2llcyBmb3IgZWFjaCBjb21wdXRlZCBwcm9wZXJ0eVxuICBmb3IgKGxldCBwIGluIGluZm9Gb3JDb21wdXRlZCkge1xuICAgIGNvbnN0IGluZm8gPSBpbmZvRm9yQ29tcHV0ZWRbcF07XG4gICAgLy8gQmUgc3VyZSB0byBhZGQgdGhlIG1ldGhvZCBuYW1lIGl0c2VsZiBpbiBjYXNlIG9mIFwiZHluYW1pYyBmdW5jdGlvbnNcIlxuICAgIHRvdGFsICs9IGNvdW50c1twXSA9XG4gICAgICBpbmZvLmFyZ3MuZmlsdGVyKGEgPT4gIWEubGl0ZXJhbCkubGVuZ3RoICsgKGluZm8uZHluYW1pY0ZuID8gMSA6IDApO1xuICB9XG4gIC8vIEJ1aWxkIGxpc3Qgb2YgcmVhZHkgcHJvcGVydGllcyAodGhhdCBhcmVuJ3QgdGhlbXNlbHZlcyBjb21wdXRlZClcbiAgZm9yIChsZXQgcCBpbiBjb21wdXRlZERlcHMpIHtcbiAgICBpZiAoIWluZm9Gb3JDb21wdXRlZFtwXSkge1xuICAgICAgcmVhZHkucHVzaChwKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtjb3VudHMsIHJlYWR5LCB0b3RhbH07XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgXCJjb21wdXRlZCBwcm9wZXJ0eVwiIGVmZmVjdCBieSBydW5uaW5nIHRoZSBtZXRob2Qgd2l0aCB0aGVcbiAqIHZhbHVlcyBvZiB0aGUgYXJndW1lbnRzIHNwZWNpZmllZCBpbiB0aGUgYGluZm9gIG9iamVjdCBhbmQgc2V0dGluZyB0aGVcbiAqIHJldHVybiB2YWx1ZSB0byB0aGUgY29tcHV0ZWQgcHJvcGVydHkgc3BlY2lmaWVkLlxuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiBwcm9wZXJ0eVxuICogQHBhcmFtIHs/T2JqZWN0fSBjaGFuZ2VkUHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICogQHBhcmFtIHs/T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7P30gaW5mbyBFZmZlY3QgbWV0YWRhdGFcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgd2hlbiB0aGUgcHJvcGVydHkgYmVpbmcgY29tcHV0ZWQgY2hhbmdlZFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuQ29tcHV0ZWRFZmZlY3QoaW5zdCwgcHJvcGVydHksIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGluZm8pIHtcbiAgLy8gRGlydHkgY2hlY2sgZGVwZW5kZW5jaWVzIGFuZCBydW4gaWYgYW55IGludmFsaWRcbiAgbGV0IHJlc3VsdCA9IHJ1bk1ldGhvZEVmZmVjdChpbnN0LCBwcm9wZXJ0eSwgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaW5mbyk7XG4gIC8vIEFib3J0IGlmIG1ldGhvZCByZXR1cm5zIGEgbm8tb3AgcmVzdWx0XG4gIGlmIChyZXN1bHQgPT09IE5PT1ApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IGNvbXB1dGVkUHJvcCA9IGluZm8ubWV0aG9kSW5mbztcbiAgaWYgKGluc3QuX19kYXRhSGFzQWNjZXNzb3IgJiYgaW5zdC5fX2RhdGFIYXNBY2Nlc3Nvcltjb21wdXRlZFByb3BdKSB7XG4gICAgcmV0dXJuIGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eShjb21wdXRlZFByb3AsIHJlc3VsdCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgaW5zdFtjb21wdXRlZFByb3BdID0gcmVzdWx0O1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIENvbXB1dGVzIHBhdGggY2hhbmdlcyBiYXNlZCBvbiBwYXRoIGxpbmtzIHNldCB1cCB1c2luZyB0aGUgYGxpbmtQYXRoc2BcbiAqIEFQSS5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2Ugd2hvc2UgcHJvcHMgYXJlIGNoYW5naW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRoYXQgaGFzIGNoYW5nZWRcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgb2YgY2hhbmdlZCBwYXRoXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUxpbmtlZFBhdGhzKGluc3QsIHBhdGgsIHZhbHVlKSB7XG4gIGxldCBsaW5rcyA9IGluc3QuX19kYXRhTGlua2VkUGF0aHM7XG4gIGlmIChsaW5rcykge1xuICAgIGxldCBsaW5rO1xuICAgIGZvciAobGV0IGEgaW4gbGlua3MpIHtcbiAgICAgIGxldCBiID0gbGlua3NbYV07XG4gICAgICBpZiAoaXNEZXNjZW5kYW50KGEsIHBhdGgpKSB7XG4gICAgICAgIGxpbmsgPSB0cmFuc2xhdGUoYSwgYiwgcGF0aCk7XG4gICAgICAgIGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChsaW5rLCB2YWx1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVzY2VuZGFudChiLCBwYXRoKSkge1xuICAgICAgICBsaW5rID0gdHJhbnNsYXRlKGIsIGEsIHBhdGgpO1xuICAgICAgICBpbnN0Ll9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgobGluaywgdmFsdWUsIHRydWUsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyAtLSBiaW5kaW5ncyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQWRkcyBiaW5kaW5nIG1ldGFkYXRhIHRvIHRoZSBjdXJyZW50IGBub2RlSW5mb2AsIGFuZCBiaW5kaW5nIGVmZmVjdHNcbiAqIGZvciBhbGwgcGFydCBkZXBlbmRlbmNpZXMgdG8gYHRlbXBsYXRlSW5mb2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQ2xhc3MgdGhhdCBgX3BhcnNlVGVtcGxhdGVgIGlzIGN1cnJlbnRseVxuICogICBydW5uaW5nIG9uXG4gKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gKiBAcGFyYW0ge05vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlIG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBraW5kIEJpbmRpbmcga2luZCwgZWl0aGVyICdwcm9wZXJ0eScsICdhdHRyaWJ1dGUnLCBvciAndGV4dCdcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXQgVGFyZ2V0IHByb3BlcnR5IG5hbWVcbiAqIEBwYXJhbSB7IUFycmF5PCFCaW5kaW5nUGFydD59IHBhcnRzIEFycmF5IG9mIGJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICogQHBhcmFtIHtzdHJpbmc9fSBsaXRlcmFsIExpdGVyYWwgdGV4dCBzdXJyb3VuZGluZyBiaW5kaW5nIHBhcnRzIChzcGVjaWZpZWRcbiAqICAgb25seSBmb3IgJ3Byb3BlcnR5JyBiaW5kaW5ncywgc2luY2UgdGhlc2UgbXVzdCBiZSBpbml0aWFsaXplZCBhcyBwYXJ0XG4gKiAgIG9mIGJvb3QtdXApXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkQmluZGluZyhjb25zdHJ1Y3RvciwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywga2luZCwgdGFyZ2V0LCBwYXJ0cywgbGl0ZXJhbCkge1xuICAvLyBDcmVhdGUgYmluZGluZyBtZXRhZGF0YSBhbmQgYWRkIHRvIG5vZGVJbmZvXG4gIG5vZGVJbmZvLmJpbmRpbmdzID0gbm9kZUluZm8uYmluZGluZ3MgfHwgW107XG4gIGxldCAvKiogQmluZGluZyAqLyBiaW5kaW5nID0geyBraW5kLCB0YXJnZXQsIHBhcnRzLCBsaXRlcmFsLCBpc0NvbXBvdW5kOiAocGFydHMubGVuZ3RoICE9PSAxKSB9O1xuICBub2RlSW5mby5iaW5kaW5ncy5wdXNoKGJpbmRpbmcpO1xuICAvLyBBZGQgbGlzdGVuZXIgaW5mbyB0byBiaW5kaW5nIG1ldGFkYXRhXG4gIGlmIChzaG91bGRBZGRMaXN0ZW5lcihiaW5kaW5nKSkge1xuICAgIGxldCB7ZXZlbnQsIG5lZ2F0ZX0gPSBiaW5kaW5nLnBhcnRzWzBdO1xuICAgIGJpbmRpbmcubGlzdGVuZXJFdmVudCA9IGV2ZW50IHx8IChjYW1lbFRvRGFzaENhc2UodGFyZ2V0KSArICctY2hhbmdlZCcpO1xuICAgIGJpbmRpbmcubGlzdGVuZXJOZWdhdGUgPSBuZWdhdGU7XG4gIH1cbiAgLy8gQWRkIFwicHJvcGFnYXRlXCIgcHJvcGVydHkgZWZmZWN0cyB0byB0ZW1wbGF0ZUluZm9cbiAgbGV0IGluZGV4ID0gdGVtcGxhdGVJbmZvLm5vZGVJbmZvTGlzdC5sZW5ndGg7XG4gIGZvciAobGV0IGk9MDsgaTxiaW5kaW5nLnBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IHBhcnQgPSBiaW5kaW5nLnBhcnRzW2ldO1xuICAgIHBhcnQuY29tcG91bmRJbmRleCA9IGk7XG4gICAgYWRkRWZmZWN0Rm9yQmluZGluZ1BhcnQoY29uc3RydWN0b3IsIHRlbXBsYXRlSW5mbywgYmluZGluZywgcGFydCwgaW5kZXgpO1xuICB9XG59XG5cbi8qKlxuICogQWRkcyBwcm9wZXJ0eSBlZmZlY3RzIHRvIHRoZSBnaXZlbiBgdGVtcGxhdGVJbmZvYCBmb3IgdGhlIGdpdmVuIGJpbmRpbmdcbiAqIHBhcnQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQ2xhc3MgdGhhdCBgX3BhcnNlVGVtcGxhdGVgIGlzIGN1cnJlbnRseVxuICogICBydW5uaW5nIG9uXG4gKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gKiBAcGFyYW0geyFCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAqIEBwYXJhbSB7IUJpbmRpbmdQYXJ0fSBwYXJ0IEJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IGludG8gYG5vZGVJbmZvTGlzdGAgZm9yIHRoaXMgbm9kZVxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gYWRkRWZmZWN0Rm9yQmluZGluZ1BhcnQoY29uc3RydWN0b3IsIHRlbXBsYXRlSW5mbywgYmluZGluZywgcGFydCwgaW5kZXgpIHtcbiAgaWYgKCFwYXJ0LmxpdGVyYWwpIHtcbiAgICBpZiAoYmluZGluZy5raW5kID09PSAnYXR0cmlidXRlJyAmJiBiaW5kaW5nLnRhcmdldFswXSA9PT0gJy0nKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0Nhbm5vdCBzZXQgYXR0cmlidXRlICcgKyBiaW5kaW5nLnRhcmdldCArXG4gICAgICAgICcgYmVjYXVzZSBcIi1cIiBpcyBub3QgYSB2YWxpZCBhdHRyaWJ1dGUgc3RhcnRpbmcgY2hhcmFjdGVyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkZXBlbmRlbmNpZXMgPSBwYXJ0LmRlcGVuZGVuY2llcztcbiAgICAgIGxldCBpbmZvID0geyBpbmRleCwgYmluZGluZywgcGFydCwgZXZhbHVhdG9yOiBjb25zdHJ1Y3RvciB9O1xuICAgICAgZm9yIChsZXQgaj0wOyBqPGRlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuICAgICAgICBsZXQgdHJpZ2dlciA9IGRlcGVuZGVuY2llc1tqXTtcbiAgICAgICAgaWYgKHR5cGVvZiB0cmlnZ2VyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdHJpZ2dlciA9IHBhcnNlQXJnKHRyaWdnZXIpO1xuICAgICAgICAgIHRyaWdnZXIud2lsZGNhcmQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0cnVjdG9yLl9hZGRUZW1wbGF0ZVByb3BlcnR5RWZmZWN0KHRlbXBsYXRlSW5mbywgdHJpZ2dlci5yb290UHJvcGVydHksIHtcbiAgICAgICAgICBmbjogcnVuQmluZGluZ0VmZmVjdCxcbiAgICAgICAgICBpbmZvLCB0cmlnZ2VyXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwiYmluZGluZ1wiIChwcm9wZXJ0eS9wYXRoIGJpbmRpbmcpIGVmZmVjdC5cbiAqXG4gKiBOb3RlIHRoYXQgYmluZGluZyBzeW50YXggaXMgb3ZlcnJpZGFibGUgdmlhIGBfcGFyc2VCaW5kaW5nc2AgYW5kXG4gKiBgX2V2YWx1YXRlQmluZGluZ2AuICBUaGlzIG1ldGhvZCB3aWxsIGNhbGwgYF9ldmFsdWF0ZUJpbmRpbmdgIGZvciBhbnlcbiAqIG5vbi1saXRlcmFsIHBhcnRzIHJldHVybmVkIGZyb20gYF9wYXJzZUJpbmRpbmdzYC4gIEhvd2V2ZXIsXG4gKiB0aGVyZSBpcyBubyBzdXBwb3J0IGZvciBfcGF0aF8gYmluZGluZ3MgdmlhIGN1c3RvbSBiaW5kaW5nIHBhcnRzLFxuICogYXMgdGhpcyBpcyBzcGVjaWZpYyB0byBQb2x5bWVyJ3MgcGF0aCBiaW5kaW5nIHN5bnRheC5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2UgdGhlIGVmZmVjdCB3aWxsIGJlIHJ1biBvblxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggTmFtZSBvZiBwcm9wZXJ0eVxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7P30gaW5mbyBFZmZlY3QgbWV0YWRhdGFcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzUGF0aHMgVHJ1ZSB3aXRoIGBwcm9wc2AgY29udGFpbnMgb25lIG9yIG1vcmUgcGF0aHNcbiAqIEBwYXJhbSB7QXJyYXl9IG5vZGVMaXN0IExpc3Qgb2Ygbm9kZXMgYXNzb2NpYXRlZCB3aXRoIGBub2RlSW5mb0xpc3RgIHRlbXBsYXRlXG4gKiAgIG1ldGFkYXRhXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuQmluZGluZ0VmZmVjdChpbnN0LCBwYXRoLCBwcm9wcywgb2xkUHJvcHMsIGluZm8sIGhhc1BhdGhzLCBub2RlTGlzdCkge1xuICBsZXQgbm9kZSA9IG5vZGVMaXN0W2luZm8uaW5kZXhdO1xuICBsZXQgYmluZGluZyA9IGluZm8uYmluZGluZztcbiAgbGV0IHBhcnQgPSBpbmZvLnBhcnQ7XG4gIC8vIFN1YnBhdGggbm90aWZpY2F0aW9uOiB0cmFuc2Zvcm0gcGF0aCBhbmQgc2V0IHRvIGNsaWVudFxuICAvLyBlLmcuOiBmb289XCJ7e29iai5zdWJ9fVwiLCBwYXRoOiAnb2JqLnN1Yi5wcm9wJywgc2V0ICdmb28ucHJvcCc9b2JqLnN1Yi5wcm9wXG4gIGlmIChoYXNQYXRocyAmJiBwYXJ0LnNvdXJjZSAmJiAocGF0aC5sZW5ndGggPiBwYXJ0LnNvdXJjZS5sZW5ndGgpICYmXG4gICAgICAoYmluZGluZy5raW5kID09ICdwcm9wZXJ0eScpICYmICFiaW5kaW5nLmlzQ29tcG91bmQgJiZcbiAgICAgIG5vZGUuX19pc1Byb3BlcnR5RWZmZWN0c0NsaWVudCAmJlxuICAgICAgbm9kZS5fX2RhdGFIYXNBY2Nlc3NvciAmJiBub2RlLl9fZGF0YUhhc0FjY2Vzc29yW2JpbmRpbmcudGFyZ2V0XSkge1xuICAgIGxldCB2YWx1ZSA9IHByb3BzW3BhdGhdO1xuICAgIHBhdGggPSB0cmFuc2xhdGUocGFydC5zb3VyY2UsIGJpbmRpbmcudGFyZ2V0LCBwYXRoKTtcbiAgICBpZiAobm9kZS5fc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKHBhdGgsIHZhbHVlLCBmYWxzZSwgdHJ1ZSkpIHtcbiAgICAgIGluc3QuX2VucXVldWVDbGllbnQobm9kZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCB2YWx1ZSA9IGluZm8uZXZhbHVhdG9yLl9ldmFsdWF0ZUJpbmRpbmcoaW5zdCwgcGFydCwgcGF0aCwgcHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgLy8gUHJvcGFnYXRlIHZhbHVlIHRvIGNoaWxkXG4gICAgLy8gQWJvcnQgaWYgdmFsdWUgaXMgYSBuby1vcCByZXN1bHRcbiAgICBpZiAodmFsdWUgIT09IE5PT1ApIHtcbiAgICAgIGFwcGx5QmluZGluZ1ZhbHVlKGluc3QsIG5vZGUsIGJpbmRpbmcsIHBhcnQsIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBTZXRzIHRoZSB2YWx1ZSBmb3IgYW4gXCJiaW5kaW5nXCIgKGJpbmRpbmcpIGVmZmVjdCB0byBhIG5vZGUsXG4gKiBlaXRoZXIgYXMgYSBwcm9wZXJ0eSBvciBhdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGluc3RhbmNlIG93bmluZyB0aGUgYmluZGluZyBlZmZlY3RcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUYXJnZXQgbm9kZSBmb3IgYmluZGluZ1xuICogQHBhcmFtIHshQmluZGluZ30gYmluZGluZyBCaW5kaW5nIG1ldGFkYXRhXG4gKiBAcGFyYW0geyFCaW5kaW5nUGFydH0gcGFydCBCaW5kaW5nIHBhcnQgbWV0YWRhdGFcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0XG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYXBwbHlCaW5kaW5nVmFsdWUoaW5zdCwgbm9kZSwgYmluZGluZywgcGFydCwgdmFsdWUpIHtcbiAgdmFsdWUgPSBjb21wdXRlQmluZGluZ1ZhbHVlKG5vZGUsIHZhbHVlLCBiaW5kaW5nLCBwYXJ0KTtcbiAgaWYgKHNhbml0aXplRE9NVmFsdWUpIHtcbiAgICB2YWx1ZSA9IHNhbml0aXplRE9NVmFsdWUodmFsdWUsIGJpbmRpbmcudGFyZ2V0LCBiaW5kaW5nLmtpbmQsIG5vZGUpO1xuICB9XG4gIGlmIChiaW5kaW5nLmtpbmQgPT0gJ2F0dHJpYnV0ZScpIHtcbiAgICAvLyBBdHRyaWJ1dGUgYmluZGluZ1xuICAgIGluc3QuX3ZhbHVlVG9Ob2RlQXR0cmlidXRlKC8qKiBAdHlwZSB7RWxlbWVudH0gKi8obm9kZSksIHZhbHVlLCBiaW5kaW5nLnRhcmdldCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gUHJvcGVydHkgYmluZGluZ1xuICAgIGxldCBwcm9wID0gYmluZGluZy50YXJnZXQ7XG4gICAgaWYgKG5vZGUuX19pc1Byb3BlcnR5RWZmZWN0c0NsaWVudCAmJlxuICAgICAgICBub2RlLl9fZGF0YUhhc0FjY2Vzc29yICYmIG5vZGUuX19kYXRhSGFzQWNjZXNzb3JbcHJvcF0pIHtcbiAgICAgIGlmICghbm9kZVtUWVBFUy5SRUFEX09OTFldIHx8ICFub2RlW1RZUEVTLlJFQURfT05MWV1bcHJvcF0pIHtcbiAgICAgICAgaWYgKG5vZGUuX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wLCB2YWx1ZSkpIHtcbiAgICAgICAgICBpbnN0Ll9lbnF1ZXVlQ2xpZW50KG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEluIGxlZ2FjeSBuby1iYXRjaGluZyBtb2RlLCBiaW5kaW5ncyBhcHBsaWVkIGJlZm9yZSBkYXRhUmVhZHkgYXJlXG4gICAgICAvLyBlcXVpdmFsZW50IHRvIHRoZSBcImFwcGx5IGNvbmZpZ1wiIHBoYXNlLCB3aGljaCBvbmx5IHNldCBtYW5hZ2VkIHByb3BzXG4gICAgICBpbnN0Ll9zZXRVbm1hbmFnZWRQcm9wZXJ0eVRvTm9kZShub2RlLCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVHJhbnNmb3JtcyBhbiBcImJpbmRpbmdcIiBlZmZlY3QgdmFsdWUgYmFzZWQgb24gY29tcG91bmQgJiBuZWdhdGlvblxuICogZWZmZWN0IG1ldGFkYXRhLCBhcyB3ZWxsIGFzIGhhbmRsaW5nIGZvciBzcGVjaWFsLWNhc2UgcHJvcGVydGllc1xuICpcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIHRoZSB2YWx1ZSB3aWxsIGJlIHNldCB0b1xuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXRcbiAqIEBwYXJhbSB7IUJpbmRpbmd9IGJpbmRpbmcgQmluZGluZyBtZXRhZGF0YVxuICogQHBhcmFtIHshQmluZGluZ1BhcnR9IHBhcnQgQmluZGluZyBwYXJ0IG1ldGFkYXRhXG4gKiBAcmV0dXJuIHsqfSBUcmFuc2Zvcm1lZCB2YWx1ZSB0byBzZXRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVCaW5kaW5nVmFsdWUobm9kZSwgdmFsdWUsIGJpbmRpbmcsIHBhcnQpIHtcbiAgaWYgKGJpbmRpbmcuaXNDb21wb3VuZCkge1xuICAgIGxldCBzdG9yYWdlID0gbm9kZS5fX2RhdGFDb21wb3VuZFN0b3JhZ2VbYmluZGluZy50YXJnZXRdO1xuICAgIHN0b3JhZ2VbcGFydC5jb21wb3VuZEluZGV4XSA9IHZhbHVlO1xuICAgIHZhbHVlID0gc3RvcmFnZS5qb2luKCcnKTtcbiAgfVxuICBpZiAoYmluZGluZy5raW5kICE9PSAnYXR0cmlidXRlJykge1xuICAgIC8vIFNvbWUgYnJvd3NlcnMgc2VyaWFsaXplIGB1bmRlZmluZWRgIHRvIGBcInVuZGVmaW5lZFwiYFxuICAgIGlmIChiaW5kaW5nLnRhcmdldCA9PT0gJ3RleHRDb250ZW50JyB8fFxuICAgICAgICAoYmluZGluZy50YXJnZXQgPT09ICd2YWx1ZScgJiZcbiAgICAgICAgICAobm9kZS5sb2NhbE5hbWUgPT09ICdpbnB1dCcgfHwgbm9kZS5sb2NhbE5hbWUgPT09ICd0ZXh0YXJlYScpKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZSA9PSB1bmRlZmluZWQgPyAnJyA6IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgYmluZGluZydzIG1ldGFkYXRhIG1lZXRzIGFsbCB0aGUgcmVxdWlyZW1lbnRzIHRvIGFsbG93XG4gKiAyLXdheSBiaW5kaW5nLCBhbmQgdGhlcmVmb3JlIGEgYDxwcm9wZXJ0eT4tY2hhbmdlZGAgZXZlbnQgbGlzdGVuZXIgc2hvdWxkIGJlXG4gKiBhZGRlZDpcbiAqIC0gdXNlZCBjdXJseSBicmFjZXNcbiAqIC0gaXMgYSBwcm9wZXJ0eSAobm90IGF0dHJpYnV0ZSkgYmluZGluZ1xuICogLSBpcyBub3QgYSB0ZXh0Q29udGVudCBiaW5kaW5nXG4gKiAtIGlzIG5vdCBjb21wb3VuZFxuICpcbiAqIEBwYXJhbSB7IUJpbmRpbmd9IGJpbmRpbmcgQmluZGluZyBtZXRhZGF0YVxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiAyLXdheSBsaXN0ZW5lciBzaG91bGQgYmUgYWRkZWRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNob3VsZEFkZExpc3RlbmVyKGJpbmRpbmcpIHtcbiAgcmV0dXJuIEJvb2xlYW4oYmluZGluZy50YXJnZXQpICYmXG4gICAgICAgICBiaW5kaW5nLmtpbmQgIT0gJ2F0dHJpYnV0ZScgJiZcbiAgICAgICAgIGJpbmRpbmcua2luZCAhPSAndGV4dCcgJiZcbiAgICAgICAgICFiaW5kaW5nLmlzQ29tcG91bmQgJiZcbiAgICAgICAgIGJpbmRpbmcucGFydHNbMF0ubW9kZSA9PT0gJ3snO1xufVxuXG4vKipcbiAqIFNldHVwIGNvbXBvdW5kIGJpbmRpbmcgc3RvcmFnZSBzdHJ1Y3R1cmVzLCBub3RpZnkgbGlzdGVuZXJzLCBhbmQgZGF0YUhvc3RcbiAqIHJlZmVyZW5jZXMgb250byB0aGUgYm91bmQgbm9kZUxpc3QuXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgSW5zdGFuY2UgdGhhdCBiYXMgYmVlbiBwcmV2aW91c2x5XG4gKiAgICAgYm91bmRcbiAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGFcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cEJpbmRpbmdzKGluc3QsIHRlbXBsYXRlSW5mbykge1xuICAvLyBTZXR1cCBjb21wb3VuZCBzdG9yYWdlLCBkYXRhSG9zdCwgYW5kIG5vdGlmeSBsaXN0ZW5lcnNcbiAgbGV0IHtub2RlTGlzdCwgbm9kZUluZm9MaXN0fSA9IHRlbXBsYXRlSW5mbztcbiAgaWYgKG5vZGVJbmZvTGlzdC5sZW5ndGgpIHtcbiAgICBmb3IgKGxldCBpPTA7IGkgPCBub2RlSW5mb0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBpbmZvID0gbm9kZUluZm9MaXN0W2ldO1xuICAgICAgbGV0IG5vZGUgPSBub2RlTGlzdFtpXTtcbiAgICAgIGxldCBiaW5kaW5ncyA9IGluZm8uYmluZGluZ3M7XG4gICAgICBpZiAoYmluZGluZ3MpIHtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPGJpbmRpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGV0IGJpbmRpbmcgPSBiaW5kaW5nc1tpXTtcbiAgICAgICAgICBzZXR1cENvbXBvdW5kU3RvcmFnZShub2RlLCBiaW5kaW5nKTtcbiAgICAgICAgICBhZGROb3RpZnlMaXN0ZW5lcihub2RlLCBpbnN0LCBiaW5kaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gVGhpcyBlbnN1cmVzIGFsbCBib3VuZCBlbGVtZW50cyBoYXZlIGEgaG9zdCBzZXQsIHJlZ2FyZGxlc3NcbiAgICAgIC8vIG9mIHdoZXRoZXIgdGhleSB1cGdyYWRlIHN5bmNocm9ub3VzIHRvIGNyZWF0aW9uXG4gICAgICBub2RlLl9fZGF0YUhvc3QgPSBpbnN0O1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIGBfX2RhdGFDb21wb3VuZFN0b3JhZ2VgIGxvY2FsIHN0b3JhZ2Ugb24gYSBib3VuZCBub2RlIHdpdGhcbiAqIGluaXRpYWwgbGl0ZXJhbCBkYXRhIGZvciBjb21wb3VuZCBiaW5kaW5ncywgYW5kIHNldHMgdGhlIGpvaW5lZFxuICogbGl0ZXJhbCBwYXJ0cyB0byB0aGUgYm91bmQgcHJvcGVydHkuXG4gKlxuICogV2hlbiBjaGFuZ2VzIHRvIGNvbXBvdW5kIHBhcnRzIG9jY3VyLCB0aGV5IGFyZSBmaXJzdCBzZXQgaW50byB0aGUgY29tcG91bmRcbiAqIHN0b3JhZ2UgYXJyYXkgZm9yIHRoYXQgcHJvcGVydHksIGFuZCB0aGVuIHRoZSBhcnJheSBpcyBqb2luZWQgdG8gcmVzdWx0IGluXG4gKiB0aGUgZmluYWwgdmFsdWUgc2V0IHRvIHRoZSBwcm9wZXJ0eS9hdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIHtOb2RlfSBub2RlIEJvdW5kIG5vZGUgdG8gaW5pdGlhbGl6ZVxuICogQHBhcmFtIHtCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cENvbXBvdW5kU3RvcmFnZShub2RlLCBiaW5kaW5nKSB7XG4gIGlmIChiaW5kaW5nLmlzQ29tcG91bmQpIHtcbiAgICAvLyBDcmVhdGUgY29tcG91bmQgc3RvcmFnZSBtYXBcbiAgICBsZXQgc3RvcmFnZSA9IG5vZGUuX19kYXRhQ29tcG91bmRTdG9yYWdlIHx8XG4gICAgICAobm9kZS5fX2RhdGFDb21wb3VuZFN0b3JhZ2UgPSB7fSk7XG4gICAgbGV0IHBhcnRzID0gYmluZGluZy5wYXJ0cztcbiAgICAvLyBDb3B5IGxpdGVyYWxzIGZyb20gcGFydHMgaW50byBzdG9yYWdlIGZvciB0aGlzIGJpbmRpbmdcbiAgICBsZXQgbGl0ZXJhbHMgPSBuZXcgQXJyYXkocGFydHMubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBqPTA7IGo8cGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGxpdGVyYWxzW2pdID0gcGFydHNbal0ubGl0ZXJhbDtcbiAgICB9XG4gICAgbGV0IHRhcmdldCA9IGJpbmRpbmcudGFyZ2V0O1xuICAgIHN0b3JhZ2VbdGFyZ2V0XSA9IGxpdGVyYWxzO1xuICAgIC8vIENvbmZpZ3VyZSBwcm9wZXJ0aWVzIHdpdGggdGhlaXIgbGl0ZXJhbCBwYXJ0c1xuICAgIGlmIChiaW5kaW5nLmxpdGVyYWwgJiYgYmluZGluZy5raW5kID09ICdwcm9wZXJ0eScpIHtcbiAgICAgIC8vIE5vdGUsIGNsYXNzTmFtZSBuZWVkcyBzdHlsZSBzY29waW5nIHNvIHRoaXMgbmVlZHMgd3JhcHBpbmcuXG4gICAgICAvLyBXZSBtYXkgYWxzbyB3YW50IHRvIGNvbnNpZGVyIGRvaW5nIHRoaXMgZm9yIGB0ZXh0Q29udGVudGAgYW5kXG4gICAgICAvLyBgaW5uZXJIVE1MYC5cbiAgICAgIGlmICh0YXJnZXQgPT09ICdjbGFzc05hbWUnKSB7XG4gICAgICAgIG5vZGUgPSB3cmFwKG5vZGUpO1xuICAgICAgfVxuICAgICAgbm9kZVt0YXJnZXRdID0gYmluZGluZy5saXRlcmFsO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFkZHMgYSAyLXdheSBiaW5kaW5nIG5vdGlmaWNhdGlvbiBldmVudCBsaXN0ZW5lciB0byB0aGUgbm9kZSBzcGVjaWZpZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbm9kZSBDaGlsZCBlbGVtZW50IHRvIGFkZCBsaXN0ZW5lciB0b1xuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgSG9zdCBlbGVtZW50IGluc3RhbmNlIHRvIGhhbmRsZVxuICogICAgIG5vdGlmaWNhdGlvbiBldmVudFxuICogQHBhcmFtIHtCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGROb3RpZnlMaXN0ZW5lcihub2RlLCBpbnN0LCBiaW5kaW5nKSB7XG4gIGlmIChiaW5kaW5nLmxpc3RlbmVyRXZlbnQpIHtcbiAgICBsZXQgcGFydCA9IGJpbmRpbmcucGFydHNbMF07XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGJpbmRpbmcubGlzdGVuZXJFdmVudCwgZnVuY3Rpb24oZSkge1xuICAgICAgaGFuZGxlTm90aWZpY2F0aW9uKGUsIGluc3QsIGJpbmRpbmcudGFyZ2V0LCBwYXJ0LnNvdXJjZSwgcGFydC5uZWdhdGUpO1xuICAgIH0pO1xuICB9XG59XG5cbi8vIC0tIGZvciBtZXRob2QtYmFzZWQgZWZmZWN0cyAoY29tcGxleE9ic2VydmVyICYgY29tcHV0ZWQpIC0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQWRkcyBwcm9wZXJ0eSBlZmZlY3RzIGZvciBlYWNoIGFyZ3VtZW50IGluIHRoZSBtZXRob2Qgc2lnbmF0dXJlIChhbmRcbiAqIG9wdGlvbmFsbHksIGZvciB0aGUgbWV0aG9kIG5hbWUgaWYgYGR5bmFtaWNgIGlzIHRydWUpIHRoYXQgY2FsbHMgdGhlXG4gKiBwcm92aWRlZCBlZmZlY3QgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtFbGVtZW50IHwgT2JqZWN0fSBtb2RlbCBQcm90b3R5cGUgb3IgaW5zdGFuY2VcbiAqIEBwYXJhbSB7IU1ldGhvZFNpZ25hdHVyZX0gc2lnIE1ldGhvZCBzaWduYXR1cmUgbWV0YWRhdGFcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFR5cGUgb2YgcHJvcGVydHkgZWZmZWN0IHRvIGFkZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWZmZWN0Rm4gRnVuY3Rpb24gdG8gcnVuIHdoZW4gYXJndW1lbnRzIGNoYW5nZVxuICogQHBhcmFtIHsqPX0gbWV0aG9kSW5mbyBFZmZlY3Qtc3BlY2lmaWMgaW5mb3JtYXRpb24gdG8gYmUgaW5jbHVkZWQgaW5cbiAqICAgbWV0aG9kIGVmZmVjdCBtZXRhZGF0YVxuICogQHBhcmFtIHtib29sZWFufE9iamVjdD19IGR5bmFtaWNGbiBCb29sZWFuIG9yIG9iamVjdCBtYXAgaW5kaWNhdGluZyB3aGV0aGVyXG4gKiAgIG1ldGhvZCBuYW1lcyBzaG91bGQgYmUgaW5jbHVkZWQgYXMgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuIE5vdGUsXG4gKiAgIGRlZmF1bHRzIHRvIHRydWUgaWYgdGhlIHNpZ25hdHVyZSBpcyBzdGF0aWMgKHNpZy5zdGF0aWMgaXMgdHJ1ZSkuXG4gKiBAcmV0dXJuIHshT2JqZWN0fSBFZmZlY3QgbWV0YWRhdGEgZm9yIHRoaXMgbWV0aG9kIGVmZmVjdFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWV0aG9kRWZmZWN0KG1vZGVsLCBzaWcsIHR5cGUsIGVmZmVjdEZuLCBtZXRob2RJbmZvLCBkeW5hbWljRm4pIHtcbiAgZHluYW1pY0ZuID0gc2lnLnN0YXRpYyB8fCAoZHluYW1pY0ZuICYmXG4gICAgKHR5cGVvZiBkeW5hbWljRm4gIT09ICdvYmplY3QnIHx8IGR5bmFtaWNGbltzaWcubWV0aG9kTmFtZV0pKTtcbiAgbGV0IGluZm8gPSB7XG4gICAgbWV0aG9kTmFtZTogc2lnLm1ldGhvZE5hbWUsXG4gICAgYXJnczogc2lnLmFyZ3MsXG4gICAgbWV0aG9kSW5mbyxcbiAgICBkeW5hbWljRm5cbiAgfTtcbiAgZm9yIChsZXQgaT0wLCBhcmc7IChpPHNpZy5hcmdzLmxlbmd0aCkgJiYgKGFyZz1zaWcuYXJnc1tpXSk7IGkrKykge1xuICAgIGlmICghYXJnLmxpdGVyYWwpIHtcbiAgICAgIG1vZGVsLl9hZGRQcm9wZXJ0eUVmZmVjdChhcmcucm9vdFByb3BlcnR5LCB0eXBlLCB7XG4gICAgICAgIGZuOiBlZmZlY3RGbiwgaW5mbzogaW5mbywgdHJpZ2dlcjogYXJnXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKGR5bmFtaWNGbikge1xuICAgIG1vZGVsLl9hZGRQcm9wZXJ0eUVmZmVjdChzaWcubWV0aG9kTmFtZSwgdHlwZSwge1xuICAgICAgZm46IGVmZmVjdEZuLCBpbmZvOiBpbmZvXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGluZm87XG59XG5cbi8qKlxuICogQ2FsbHMgYSBtZXRob2Qgd2l0aCBhcmd1bWVudHMgbWFyc2hhbGVkIGZyb20gcHJvcGVydGllcyBvbiB0aGUgaW5zdGFuY2VcbiAqIGJhc2VkIG9uIHRoZSBtZXRob2Qgc2lnbmF0dXJlIGNvbnRhaW5lZCBpbiB0aGUgZWZmZWN0IG1ldGFkYXRhLlxuICpcbiAqIE11bHRpLXByb3BlcnR5IG9ic2VydmVycywgY29tcHV0ZWQgcHJvcGVydGllcywgYW5kIGlubGluZSBjb21wdXRpbmdcbiAqIGZ1bmN0aW9ucyBjYWxsIHRoaXMgZnVuY3Rpb24gdG8gaW52b2tlIHRoZSBtZXRob2QsIHRoZW4gdXNlIHRoZSByZXR1cm5cbiAqIHZhbHVlIGFjY29yZGluZ2x5LlxuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiBwcm9wZXJ0eVxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7P30gaW5mbyBFZmZlY3QgbWV0YWRhdGFcbiAqIEByZXR1cm4geyp9IFJldHVybnMgdGhlIHJldHVybiB2YWx1ZSBmcm9tIHRoZSBtZXRob2QgaW52b2NhdGlvblxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuTWV0aG9kRWZmZWN0KGluc3QsIHByb3BlcnR5LCBwcm9wcywgb2xkUHJvcHMsIGluZm8pIHtcbiAgLy8gSW5zdGFuY2VzIGNhbiBvcHRpb25hbGx5IGhhdmUgYSBfbWV0aG9kSG9zdCB3aGljaCBhbGxvd3MgcmVkaXJlY3Rpbmcgd2hlcmVcbiAgLy8gdG8gZmluZCBtZXRob2RzLiBDdXJyZW50bHkgdXNlZCBieSBgdGVtcGxhdGl6ZWAuXG4gIGxldCBjb250ZXh0ID0gaW5zdC5fbWV0aG9kSG9zdCB8fCBpbnN0O1xuICBsZXQgZm4gPSBjb250ZXh0W2luZm8ubWV0aG9kTmFtZV07XG4gIGlmIChmbikge1xuICAgIGxldCBhcmdzID0gaW5zdC5fbWFyc2hhbEFyZ3MoaW5mby5hcmdzLCBwcm9wZXJ0eSwgcHJvcHMpO1xuICAgIHJldHVybiBhcmdzID09PSBOT09QID8gTk9PUCA6IGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICB9IGVsc2UgaWYgKCFpbmZvLmR5bmFtaWNGbikge1xuICAgIGNvbnNvbGUud2FybignbWV0aG9kIGAnICsgaW5mby5tZXRob2ROYW1lICsgJ2Agbm90IGRlZmluZWQnKTtcbiAgfVxufVxuXG5jb25zdCBlbXB0eUFycmF5ID0gW107XG5cbi8vIFJlZ3VsYXIgZXhwcmVzc2lvbnMgdXNlZCBmb3IgYmluZGluZ1xuY29uc3QgSURFTlQgID0gJyg/OicgKyAnW2EtekEtWl8kXVtcXFxcdy46JFxcXFwtKl0qJyArICcpJztcbmNvbnN0IE5VTUJFUiA9ICcoPzonICsgJ1stK10/WzAtOV0qXFxcXC4/WzAtOV0rKD86W2VFXVstK10/WzAtOV0rKT8nICsgJyknO1xuY29uc3QgU1FVT1RFX1NUUklORyA9ICcoPzonICsgJ1xcJyg/OlteXFwnXFxcXFxcXFxdfFxcXFxcXFxcLikqXFwnJyArICcpJztcbmNvbnN0IERRVU9URV9TVFJJTkcgPSAnKD86JyArICdcIig/OlteXCJcXFxcXFxcXF18XFxcXFxcXFwuKSpcIicgKyAnKSc7XG5jb25zdCBTVFJJTkcgPSAnKD86JyArIFNRVU9URV9TVFJJTkcgKyAnfCcgKyBEUVVPVEVfU1RSSU5HICsgJyknO1xuY29uc3QgQVJHVU1FTlQgPSAnKD86KCcgKyBJREVOVCArICd8JyArIE5VTUJFUiArICd8JyArICBTVFJJTkcgKyAnKVxcXFxzKicgKyAnKSc7XG5jb25zdCBBUkdVTUVOVFMgPSAnKD86JyArIEFSR1VNRU5UICsgJyg/OixcXFxccyonICsgQVJHVU1FTlQgKyAnKSonICsgJyknO1xuY29uc3QgQVJHVU1FTlRfTElTVCA9ICcoPzonICsgJ1xcXFwoXFxcXHMqJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnKD86JyArIEFSR1VNRU5UUyArICc/JyArICcpJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcXFwpXFxcXHMqJyArICcpJztcbmNvbnN0IEJJTkRJTkcgPSAnKCcgKyBJREVOVCArICdcXFxccyonICsgQVJHVU1FTlRfTElTVCArICc/JyArICcpJzsgLy8gR3JvdXAgM1xuY29uc3QgT1BFTl9CUkFDS0VUID0gJyhcXFxcW1xcXFxbfHt7KScgKyAnXFxcXHMqJztcbmNvbnN0IENMT1NFX0JSQUNLRVQgPSAnKD86XV18fX0pJztcbmNvbnN0IE5FR0FURSA9ICcoPzooISlcXFxccyopPyc7IC8vIEdyb3VwIDJcbmNvbnN0IEVYUFJFU1NJT04gPSBPUEVOX0JSQUNLRVQgKyBORUdBVEUgKyBCSU5ESU5HICsgQ0xPU0VfQlJBQ0tFVDtcbmNvbnN0IGJpbmRpbmdSZWdleCA9IG5ldyBSZWdFeHAoRVhQUkVTU0lPTiwgXCJnXCIpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHN0cmluZyBmcm9tIGJpbmRpbmcgcGFydHMgb2YgYWxsIHRoZSBsaXRlcmFsIHBhcnRzXG4gKlxuICogQHBhcmFtIHshQXJyYXk8QmluZGluZ1BhcnQ+fSBwYXJ0cyBBbGwgcGFydHMgdG8gc3RyaW5naWZ5XG4gKiBAcmV0dXJuIHtzdHJpbmd9IFN0cmluZyBtYWRlIGZyb20gdGhlIGxpdGVyYWwgcGFydHNcbiAqL1xuZnVuY3Rpb24gbGl0ZXJhbEZyb21QYXJ0cyhwYXJ0cykge1xuICBsZXQgcyA9ICcnO1xuICBmb3IgKGxldCBpPTA7IGk8cGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgbGl0ZXJhbCA9IHBhcnRzW2ldLmxpdGVyYWw7XG4gICAgcyArPSBsaXRlcmFsIHx8ICcnO1xuICB9XG4gIHJldHVybiBzO1xufVxuXG4vKipcbiAqIFBhcnNlcyBhbiBleHByZXNzaW9uIHN0cmluZyBmb3IgYSBtZXRob2Qgc2lnbmF0dXJlLCBhbmQgcmV0dXJucyBhIG1ldGFkYXRhXG4gKiBkZXNjcmliaW5nIHRoZSBtZXRob2QgaW4gdGVybXMgb2YgYG1ldGhvZE5hbWVgLCBgc3RhdGljYCAod2hldGhlciBhbGwgdGhlXG4gKiBhcmd1bWVudHMgYXJlIGxpdGVyYWxzKSwgYW5kIGFuIGFycmF5IG9mIGBhcmdzYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBleHByZXNzaW9uIHRvIHBhcnNlXG4gKiBAcmV0dXJuIHs/TWV0aG9kU2lnbmF0dXJlfSBUaGUgbWV0aG9kIG1ldGFkYXRhIG9iamVjdCBpZiBhIG1ldGhvZCBleHByZXNzaW9uIHdhc1xuICogICBmb3VuZCwgb3RoZXJ3aXNlIGB1bmRlZmluZWRgXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwYXJzZU1ldGhvZChleHByZXNzaW9uKSB7XG4gIC8vIHRyaWVzIHRvIG1hdGNoIHZhbGlkIGphdmFzY3JpcHQgcHJvcGVydHkgbmFtZXNcbiAgbGV0IG0gPSBleHByZXNzaW9uLm1hdGNoKC8oW15cXHNdKz8pXFwoKFtcXHNcXFNdKilcXCkvKTtcbiAgaWYgKG0pIHtcbiAgICBsZXQgbWV0aG9kTmFtZSA9IG1bMV07XG4gICAgbGV0IHNpZyA9IHsgbWV0aG9kTmFtZSwgc3RhdGljOiB0cnVlLCBhcmdzOiBlbXB0eUFycmF5IH07XG4gICAgaWYgKG1bMl0udHJpbSgpKSB7XG4gICAgICAvLyByZXBsYWNlIGVzY2FwZWQgY29tbWFzIHdpdGggY29tbWEgZW50aXR5LCBzcGxpdCBvbiB1bi1lc2NhcGVkIGNvbW1hc1xuICAgICAgbGV0IGFyZ3MgPSBtWzJdLnJlcGxhY2UoL1xcXFwsL2csICcmY29tbWE7Jykuc3BsaXQoJywnKTtcbiAgICAgIHJldHVybiBwYXJzZUFyZ3MoYXJncywgc2lnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHNpZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUGFyc2VzIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBhbmQgc2V0cyB0aGUgYGFyZ3NgIHByb3BlcnR5IG9mIHRoZSBzdXBwbGllZFxuICogc2lnbmF0dXJlIG1ldGFkYXRhIG9iamVjdC4gU2V0cyB0aGUgYHN0YXRpY2AgcHJvcGVydHkgdG8gZmFsc2UgaWYgYW55XG4gKiBhcmd1bWVudCBpcyBhIG5vbi1saXRlcmFsLlxuICpcbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IGFyZ0xpc3QgQXJyYXkgb2YgYXJndW1lbnQgbmFtZXNcbiAqIEBwYXJhbSB7IU1ldGhvZFNpZ25hdHVyZX0gc2lnIE1ldGhvZCBzaWduYXR1cmUgbWV0YWRhdGEgb2JqZWN0XG4gKiBAcmV0dXJuIHshTWV0aG9kU2lnbmF0dXJlfSBUaGUgdXBkYXRlZCBzaWduYXR1cmUgbWV0YWRhdGEgb2JqZWN0XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwYXJzZUFyZ3MoYXJnTGlzdCwgc2lnKSB7XG4gIHNpZy5hcmdzID0gYXJnTGlzdC5tYXAoZnVuY3Rpb24ocmF3QXJnKSB7XG4gICAgbGV0IGFyZyA9IHBhcnNlQXJnKHJhd0FyZyk7XG4gICAgaWYgKCFhcmcubGl0ZXJhbCkge1xuICAgICAgc2lnLnN0YXRpYyA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gYXJnO1xuICB9LCB0aGlzKTtcbiAgcmV0dXJuIHNpZztcbn1cblxuLyoqXG4gKiBQYXJzZXMgYW4gaW5kaXZpZHVhbCBhcmd1bWVudCwgYW5kIHJldHVybnMgYW4gYXJndW1lbnQgbWV0YWRhdGEgb2JqZWN0XG4gKiB3aXRoIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICpcbiAqICAge1xuICogICAgIHZhbHVlOiAncHJvcCcsICAgICAgICAvLyBwcm9wZXJ0eS9wYXRoIG9yIGxpdGVyYWwgdmFsdWVcbiAqICAgICBsaXRlcmFsOiBmYWxzZSwgICAgICAgLy8gd2hldGhlciBhcmd1bWVudCBpcyBhIGxpdGVyYWxcbiAqICAgICBzdHJ1Y3R1cmVkOiBmYWxzZSwgICAgLy8gd2hldGhlciB0aGUgcHJvcGVydHkgaXMgYSBwYXRoXG4gKiAgICAgcm9vdFByb3BlcnR5OiAncHJvcCcsIC8vIHRoZSByb290IHByb3BlcnR5IG9mIHRoZSBwYXRoXG4gKiAgICAgd2lsZGNhcmQ6IGZhbHNlICAgICAgIC8vIHdoZXRoZXIgdGhlIGFyZ3VtZW50IHdhcyBhIHdpbGRjYXJkICcuKicgcGF0aFxuICogICB9XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJhd0FyZyBUaGUgc3RyaW5nIHZhbHVlIG9mIHRoZSBhcmd1bWVudFxuICogQHJldHVybiB7IU1ldGhvZEFyZ30gQXJndW1lbnQgbWV0YWRhdGEgb2JqZWN0XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwYXJzZUFyZyhyYXdBcmcpIHtcbiAgLy8gY2xlYW4gdXAgd2hpdGVzcGFjZVxuICBsZXQgYXJnID0gcmF3QXJnLnRyaW0oKVxuICAgIC8vIHJlcGxhY2UgY29tbWEgZW50aXR5IHdpdGggY29tbWFcbiAgICAucmVwbGFjZSgvJmNvbW1hOy9nLCAnLCcpXG4gICAgLy8gcmVwYWlyIGV4dHJhIGVzY2FwZSBzZXF1ZW5jZXM7IG5vdGUgb25seSBjb21tYXMgc3RyaWN0bHkgbmVlZFxuICAgIC8vIGVzY2FwaW5nLCBidXQgd2UgYWxsb3cgYW55IG90aGVyIGNoYXIgdG8gYmUgZXNjYXBlZCBzaW5jZSBpdHNcbiAgICAvLyBsaWtlbHkgdXNlcnMgd2lsbCBkbyB0aGlzXG4gICAgLnJlcGxhY2UoL1xcXFwoLikvZywgJ1xcJDEnKVxuICAgIDtcbiAgLy8gYmFzaWMgYXJndW1lbnQgZGVzY3JpcHRvclxuICBsZXQgYSA9IHtcbiAgICBuYW1lOiBhcmcsXG4gICAgdmFsdWU6ICcnLFxuICAgIGxpdGVyYWw6IGZhbHNlXG4gIH07XG4gIC8vIGRldGVjdCBsaXRlcmFsIHZhbHVlIChtdXN0IGJlIFN0cmluZyBvciBOdW1iZXIpXG4gIGxldCBmYyA9IGFyZ1swXTtcbiAgaWYgKGZjID09PSAnLScpIHtcbiAgICBmYyA9IGFyZ1sxXTtcbiAgfVxuICBpZiAoZmMgPj0gJzAnICYmIGZjIDw9ICc5Jykge1xuICAgIGZjID0gJyMnO1xuICB9XG4gIHN3aXRjaChmYykge1xuICAgIGNhc2UgXCInXCI6XG4gICAgY2FzZSAnXCInOlxuICAgICAgYS52YWx1ZSA9IGFyZy5zbGljZSgxLCAtMSk7XG4gICAgICBhLmxpdGVyYWwgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnIyc6XG4gICAgICBhLnZhbHVlID0gTnVtYmVyKGFyZyk7XG4gICAgICBhLmxpdGVyYWwgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgLy8gaWYgbm90IGxpdGVyYWwsIGxvb2sgZm9yIHN0cnVjdHVyZWQgcGF0aFxuICBpZiAoIWEubGl0ZXJhbCkge1xuICAgIGEucm9vdFByb3BlcnR5ID0gcm9vdChhcmcpO1xuICAgIC8vIGRldGVjdCBzdHJ1Y3R1cmVkIHBhdGggKGhhcyBkb3RzKVxuICAgIGEuc3RydWN0dXJlZCA9IGlzUGF0aChhcmcpO1xuICAgIGlmIChhLnN0cnVjdHVyZWQpIHtcbiAgICAgIGEud2lsZGNhcmQgPSAoYXJnLnNsaWNlKC0yKSA9PSAnLionKTtcbiAgICAgIGlmIChhLndpbGRjYXJkKSB7XG4gICAgICAgIGEubmFtZSA9IGFyZy5zbGljZSgwLCAtMik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiBnZXRBcmdWYWx1ZShkYXRhLCBwcm9wcywgcGF0aCkge1xuICBsZXQgdmFsdWUgPSBnZXQoZGF0YSwgcGF0aCk7XG4gIC8vIHdoZW4gZGF0YSBpcyBub3Qgc3RvcmVkIGUuZy4gYHNwbGljZXNgLCBnZXQgdGhlIHZhbHVlIGZyb20gY2hhbmdlZFByb3BzXG4gIC8vIFRPRE8oa3NjaGFhZik6IE5vdGUsIHRoaXMgY2FuIGNhdXNlIGEgcmFyZSBpc3N1ZSB3aGVyZSB0aGUgd2lsZGNhcmRcbiAgLy8gaW5mby52YWx1ZSBjb3VsZCBwdWxsIGEgc3RhbGUgdmFsdWUgb3V0IG9mIGNoYW5nZWRQcm9wcyBkdXJpbmcgYSByZWVudHJhbnRcbiAgLy8gY2hhbmdlIHRoYXQgc2V0cyB0aGUgdmFsdWUgYmFjayB0byB1bmRlZmluZWQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyL3BvbHltZXIvaXNzdWVzLzU0NzlcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IHByb3BzW3BhdGhdO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gZGF0YSBhcGlcblxuLyoqXG4gKiBTZW5kcyBhcnJheSBzcGxpY2Ugbm90aWZpY2F0aW9ucyAoYC5zcGxpY2VzYCBhbmQgYC5sZW5ndGhgKVxuICpcbiAqIE5vdGU6IHRoaXMgaW1wbGVtZW50YXRpb24gb25seSBhY2NlcHRzIG5vcm1hbGl6ZWQgcGF0aHNcbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBJbnN0YW5jZSB0byBzZW5kIG5vdGlmaWNhdGlvbnMgdG9cbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0aGUgbXV0YXRpb25zIG9jY3VycmVkIG9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCB0byB0aGUgYXJyYXkgdGhhdCB3YXMgbXV0YXRlZFxuICogQHBhcmFtIHtBcnJheX0gc3BsaWNlcyBBcnJheSBvZiBzcGxpY2UgcmVjb3Jkc1xuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG5vdGlmeVNwbGljZXMoaW5zdCwgYXJyYXksIHBhdGgsIHNwbGljZXMpIHtcbiAgY29uc3Qgc3BsaWNlc0RhdGEgPSB7IGluZGV4U3BsaWNlczogc3BsaWNlcyB9O1xuICAvLyBMZWdhY3kgYmVoYXZpb3Igc3RvcmVkIHNwbGljZXMgaW4gYF9fZGF0YV9fYCBzbyBpdCB3YXMgKm5vdCogZXBoZW1lcmFsLlxuICAvLyBUbyBtYXRjaCB0aGlzIGJlaGF2aW9yLCB3ZSBzdG9yZSBzcGxpY2VzIGRpcmVjdGx5IG9uIHRoZSBhcnJheS5cbiAgaWYgKGxlZ2FjeVVuZGVmaW5lZCAmJiAhaW5zdC5fb3ZlcnJpZGVMZWdhY3lVbmRlZmluZWQpIHtcbiAgICBhcnJheS5zcGxpY2VzID0gc3BsaWNlc0RhdGE7XG4gIH1cbiAgaW5zdC5ub3RpZnlQYXRoKHBhdGggKyAnLnNwbGljZXMnLCBzcGxpY2VzRGF0YSk7XG4gIGluc3Qubm90aWZ5UGF0aChwYXRoICsgJy5sZW5ndGgnLCBhcnJheS5sZW5ndGgpO1xuICAvLyBDbGVhciBzcGxpY2UgZGF0YSBvbmx5IHdoZW4gaXQncyBzdG9yZWQgb24gdGhlIGFycmF5LlxuICBpZiAobGVnYWN5VW5kZWZpbmVkICYmICFpbnN0Ll9vdmVycmlkZUxlZ2FjeVVuZGVmaW5lZCkge1xuICAgIHNwbGljZXNEYXRhLmluZGV4U3BsaWNlcyA9IFtdO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNwbGljZSByZWNvcmQgYW5kIHNlbmRzIGFuIGFycmF5IHNwbGljZSBub3RpZmljYXRpb24gZm9yXG4gKiB0aGUgZGVzY3JpYmVkIG11dGF0aW9uXG4gKlxuICogTm90ZTogdGhpcyBpbXBsZW1lbnRhdGlvbiBvbmx5IGFjY2VwdHMgbm9ybWFsaXplZCBwYXRoc1xuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IEluc3RhbmNlIHRvIHNlbmQgbm90aWZpY2F0aW9ucyB0b1xuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRoZSBtdXRhdGlvbnMgb2NjdXJyZWQgb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIHRoZSBhcnJheSB0aGF0IHdhcyBtdXRhdGVkXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdGhlIGFycmF5IG11dGF0aW9uIG9jY3VycmVkXG4gKiBAcGFyYW0ge251bWJlcn0gYWRkZWRDb3VudCBOdW1iZXIgb2YgYWRkZWQgaXRlbXNcbiAqIEBwYXJhbSB7QXJyYXl9IHJlbW92ZWQgQXJyYXkgb2YgcmVtb3ZlZCBpdGVtc1xuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG5vdGlmeVNwbGljZShpbnN0LCBhcnJheSwgcGF0aCwgaW5kZXgsIGFkZGVkQ291bnQsIHJlbW92ZWQpIHtcbiAgbm90aWZ5U3BsaWNlcyhpbnN0LCBhcnJheSwgcGF0aCwgW3tcbiAgICBpbmRleDogaW5kZXgsXG4gICAgYWRkZWRDb3VudDogYWRkZWRDb3VudCxcbiAgICByZW1vdmVkOiByZW1vdmVkLFxuICAgIG9iamVjdDogYXJyYXksXG4gICAgdHlwZTogJ3NwbGljZSdcbiAgfV0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gdXBwZXItY2FzZWQgdmVyc2lvbiBvZiB0aGUgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFN0cmluZyB0byB1cHBlcmNhc2VcbiAqIEByZXR1cm4ge3N0cmluZ30gVXBwZXJjYXNlZCBzdHJpbmdcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHVwcGVyKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWVbMF0udG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyaW5nKDEpO1xufVxuXG4vKipcbiAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBtZXRhLXByb2dyYW1taW5nIGZvciBQb2x5bWVyJ3MgdGVtcGxhdGVcbiAqIGJpbmRpbmcgYW5kIGRhdGEgb2JzZXJ2YXRpb24gKGNvbGxlY3RpdmVseSwgXCJwcm9wZXJ0eSBlZmZlY3RzXCIpIHN5c3RlbS5cbiAqXG4gKiBUaGlzIG1peGluIHVzZXMgcHJvdmlkZXMgdGhlIGZvbGxvd2luZyBrZXkgc3RhdGljIG1ldGhvZHMgZm9yIGFkZGluZ1xuICogcHJvcGVydHkgZWZmZWN0cyB0byBhbiBlbGVtZW50IGNsYXNzOlxuICogLSBgYWRkUHJvcGVydHlFZmZlY3RgXG4gKiAtIGBjcmVhdGVQcm9wZXJ0eU9ic2VydmVyYFxuICogLSBgY3JlYXRlTWV0aG9kT2JzZXJ2ZXJgXG4gKiAtIGBjcmVhdGVOb3RpZnlpbmdQcm9wZXJ0eWBcbiAqIC0gYGNyZWF0ZVJlYWRPbmx5UHJvcGVydHlgXG4gKiAtIGBjcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eWBcbiAqIC0gYGNyZWF0ZUNvbXB1dGVkUHJvcGVydHlgXG4gKiAtIGBiaW5kVGVtcGxhdGVgXG4gKlxuICogRWFjaCBtZXRob2QgY3JlYXRlcyBvbmUgb3IgbW9yZSBwcm9wZXJ0eSBhY2Nlc3NvcnMsIGFsb25nIHdpdGggbWV0YWRhdGFcbiAqIHVzZWQgYnkgdGhpcyBtaXhpbidzIGltcGxlbWVudGF0aW9uIG9mIGBfcHJvcGVydGllc0NoYW5nZWRgIHRvIHBlcmZvcm1cbiAqIHRoZSBwcm9wZXJ0eSBlZmZlY3RzLlxuICpcbiAqIFVuZGVyc2NvcmVkIHZlcnNpb25zIG9mIHRoZSBhYm92ZSBtZXRob2RzIGFsc28gZXhpc3Qgb24gdGhlIGVsZW1lbnRcbiAqIHByb3RvdHlwZSBmb3IgYWRkaW5nIHByb3BlcnR5IGVmZmVjdHMgb24gaW5zdGFuY2VzIGF0IHJ1bnRpbWUuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgbWl4aW4gb3ZlcnJpZGVzIHNldmVyYWwgYFByb3BlcnR5QWNjZXNzb3JzYCBtZXRob2RzLCBpblxuICogbWFueSBjYXNlcyB0byBtYWludGFpbiBndWFyYW50ZWVzIHByb3ZpZGVkIGJ5IHRoZSBQb2x5bWVyIDEueCBmZWF0dXJlcztcbiAqIG5vdGFibHkgaXQgY2hhbmdlcyBwcm9wZXJ0eSBhY2Nlc3NvcnMgdG8gYmUgc3luY2hyb25vdXMgYnkgZGVmYXVsdFxuICogd2hlcmVhcyB0aGUgZGVmYXVsdCB3aGVuIHVzaW5nIGBQcm9wZXJ0eUFjY2Vzc29yc2Agc3RhbmRhbG9uZSBpcyB0byBiZVxuICogYXN5bmMgYnkgZGVmYXVsdC5cbiAqXG4gKiBAbWl4aW5GdW5jdGlvblxuICogQHBvbHltZXJcbiAqIEBhcHBsaWVzTWl4aW4gVGVtcGxhdGVTdGFtcFxuICogQGFwcGxpZXNNaXhpbiBQcm9wZXJ0eUFjY2Vzc29yc1xuICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIG1ldGEtcHJvZ3JhbW1pbmcgZm9yIFBvbHltZXInc1xuICogdGVtcGxhdGUgYmluZGluZyBhbmQgZGF0YSBvYnNlcnZhdGlvbiBzeXN0ZW0uXG4gKi9cbmV4cG9ydCBjb25zdCBQcm9wZXJ0eUVmZmVjdHMgPSBkZWR1cGluZ01peGluKHN1cGVyQ2xhc3MgPT4ge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlBY2Nlc3NvcnN9XG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1RlbXBsYXRlU3RhbXB9XG4gICAqIEB1bnJlc3RyaWN0ZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnN0IHByb3BlcnR5RWZmZWN0c0Jhc2UgPSBUZW1wbGF0ZVN0YW1wKFByb3BlcnR5QWNjZXNzb3JzKHN1cGVyQ2xhc3MpKTtcblxuICAvKipcbiAgICogQHBvbHltZXJcbiAgICogQG1peGluQ2xhc3NcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlFZmZlY3RzfVxuICAgKiBAZXh0ZW5kcyB7cHJvcGVydHlFZmZlY3RzQmFzZX1cbiAgICogQHVucmVzdHJpY3RlZFxuICAgKi9cbiAgY2xhc3MgUHJvcGVydHlFZmZlY3RzIGV4dGVuZHMgcHJvcGVydHlFZmZlY3RzQmFzZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICAvLyBVc2VkIHRvIGlkZW50aWZ5IHVzZXJzIG9mIHRoaXMgbWl4aW4sIGFsYSBpbnN0YW5jZW9mXG4gICAgICB0aGlzLl9faXNQcm9wZXJ0eUVmZmVjdHNDbGllbnQgPSB0cnVlO1xuICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgdGhpcy5fX2RhdGFDbGllbnRzUmVhZHk7XG4gICAgICAvKiogQHR5cGUge0FycmF5fSAqL1xuICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nQ2xpZW50cztcbiAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX2RhdGFUb05vdGlmeTtcbiAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX2RhdGFMaW5rZWRQYXRocztcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICAgIHRoaXMuX19kYXRhSGFzUGF0aHM7XG4gICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgIHRoaXMuX19kYXRhQ29tcG91bmRTdG9yYWdlO1xuICAgICAgLyoqIEB0eXBlIHtQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gKi9cbiAgICAgIHRoaXMuX19kYXRhSG9zdDtcbiAgICAgIC8qKiBAdHlwZSB7IU9iamVjdH0gKi9cbiAgICAgIHRoaXMuX19kYXRhVGVtcDtcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICAgIHRoaXMuX19kYXRhQ2xpZW50c0luaXRpYWxpemVkO1xuICAgICAgLyoqIEB0eXBlIHshT2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX2RhdGE7XG4gICAgICAvKiogQHR5cGUgeyFPYmplY3R8bnVsbH0gKi9cbiAgICAgIHRoaXMuX19kYXRhUGVuZGluZztcbiAgICAgIC8qKiBAdHlwZSB7IU9iamVjdH0gKi9cbiAgICAgIHRoaXMuX19kYXRhT2xkO1xuICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICB0aGlzLl9fY29tcHV0ZUVmZmVjdHM7XG4gICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgIHRoaXMuX19jb21wdXRlSW5mbztcbiAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX3JlZmxlY3RFZmZlY3RzO1xuICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICB0aGlzLl9fbm90aWZ5RWZmZWN0cztcbiAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX3Byb3BhZ2F0ZUVmZmVjdHM7XG4gICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgIHRoaXMuX19vYnNlcnZlRWZmZWN0cztcbiAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX3JlYWRPbmx5O1xuICAgICAgLyoqIEB0eXBlIHshVGVtcGxhdGVJbmZvfSAqL1xuICAgICAgdGhpcy5fX3RlbXBsYXRlSW5mbztcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICAgIHRoaXMuX292ZXJyaWRlTGVnYWN5VW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGdldCBQUk9QRVJUWV9FRkZFQ1RfVFlQRVMoKSB7XG4gICAgICByZXR1cm4gVFlQRVM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfaW5pdGlhbGl6ZVByb3BlcnRpZXMoKSB7XG4gICAgICBzdXBlci5faW5pdGlhbGl6ZVByb3BlcnRpZXMoKTtcbiAgICAgIHRoaXMuX3JlZ2lzdGVySG9zdCgpO1xuICAgICAgdGhpcy5fX2RhdGFDbGllbnRzUmVhZHkgPSBmYWxzZTtcbiAgICAgIHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHMgPSBudWxsO1xuICAgICAgdGhpcy5fX2RhdGFUb05vdGlmeSA9IG51bGw7XG4gICAgICB0aGlzLl9fZGF0YUxpbmtlZFBhdGhzID0gbnVsbDtcbiAgICAgIHRoaXMuX19kYXRhSGFzUGF0aHMgPSBmYWxzZTtcbiAgICAgIC8vIE1heSBiZSBzZXQgb24gaW5zdGFuY2UgcHJpb3IgdG8gdXBncmFkZVxuICAgICAgdGhpcy5fX2RhdGFDb21wb3VuZFN0b3JhZ2UgPSB0aGlzLl9fZGF0YUNvbXBvdW5kU3RvcmFnZSB8fCBudWxsO1xuICAgICAgdGhpcy5fX2RhdGFIb3N0ID0gdGhpcy5fX2RhdGFIb3N0IHx8IG51bGw7XG4gICAgICB0aGlzLl9fZGF0YVRlbXAgPSB7fTtcbiAgICAgIHRoaXMuX19kYXRhQ2xpZW50c0luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgX3JlZ2lzdGVySG9zdCgpIHtcbiAgICAgIGlmIChob3N0U3RhY2subGVuZ3RoKSB7XG4gICAgICAgIGxldCBob3N0ID0gaG9zdFN0YWNrW2hvc3RTdGFjay5sZW5ndGgtMV07XG4gICAgICAgIGhvc3QuX2VucXVldWVDbGllbnQodGhpcyk7XG4gICAgICAgIC8vIFRoaXMgZW5zdXJlcyBldmVuIG5vbi1ib3VuZCBlbGVtZW50cyBoYXZlIGEgaG9zdCBzZXQsIGFzXG4gICAgICAgIC8vIGxvbmcgYXMgdGhleSB1cGdyYWRlIHN5bmNocm9ub3VzbHlcbiAgICAgICAgdGhpcy5fX2RhdGFIb3N0ID0gaG9zdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgYFByb3BlcnR5QWNjZXNzb3JzYCBpbXBsZW1lbnRhdGlvbiB0byBwcm92aWRlIGFcbiAgICAgKiBtb3JlIGVmZmljaWVudCBpbXBsZW1lbnRhdGlvbiBvZiBpbml0aWFsaXppbmcgcHJvcGVydGllcyBmcm9tXG4gICAgICogdGhlIHByb3RvdHlwZSBvbiB0aGUgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgUHJvcGVydGllcyB0byBpbml0aWFsaXplIG9uIHRoZSBwcm90b3R5cGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9pbml0aWFsaXplUHJvdG9Qcm9wZXJ0aWVzKHByb3BzKSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IE9iamVjdC5jcmVhdGUocHJvcHMpO1xuICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nID0gT2JqZWN0LmNyZWF0ZShwcm9wcyk7XG4gICAgICB0aGlzLl9fZGF0YU9sZCA9IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBgUHJvcGVydHlBY2Nlc3NvcnNgIGltcGxlbWVudGF0aW9uIHRvIGF2b2lkIHNldHRpbmdcbiAgICAgKiBgX3NldFByb3BlcnR5YCdzIGBzaG91bGROb3RpZnk6IHRydWVgLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIFByb3BlcnRpZXMgdG8gaW5pdGlhbGl6ZSBvbiB0aGUgaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9pbml0aWFsaXplSW5zdGFuY2VQcm9wZXJ0aWVzKHByb3BzKSB7XG4gICAgICBsZXQgcmVhZE9ubHkgPSB0aGlzW1RZUEVTLlJFQURfT05MWV07XG4gICAgICBmb3IgKGxldCBwcm9wIGluIHByb3BzKSB7XG4gICAgICAgIGlmICghcmVhZE9ubHkgfHwgIXJlYWRPbmx5W3Byb3BdKSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nID0gdGhpcy5fX2RhdGFQZW5kaW5nIHx8IHt9O1xuICAgICAgICAgIHRoaXMuX19kYXRhT2xkID0gdGhpcy5fX2RhdGFPbGQgfHwge307XG4gICAgICAgICAgdGhpcy5fX2RhdGFbcHJvcF0gPSB0aGlzLl9fZGF0YVBlbmRpbmdbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFByb3RvdHlwZSBzZXR1cCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvKipcbiAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgYWRkUHJvcGVydHlFZmZlY3RgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICogZnVsbCBBUEkgZG9jcy5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSB0aGF0IHNob3VsZCB0cmlnZ2VyIHRoZSBlZmZlY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBFZmZlY3QgdHlwZSwgZnJvbSB0aGlzLlBST1BFUlRZX0VGRkVDVF9UWVBFU1xuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gZWZmZWN0IEVmZmVjdCBtZXRhZGF0YSBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfYWRkUHJvcGVydHlFZmZlY3QocHJvcGVydHksIHR5cGUsIGVmZmVjdCkge1xuICAgICAgdGhpcy5fY3JlYXRlUHJvcGVydHlBY2Nlc3Nvcihwcm9wZXJ0eSwgdHlwZSA9PSBUWVBFUy5SRUFEX09OTFkpO1xuICAgICAgLy8gZWZmZWN0cyBhcmUgYWNjdW11bGF0ZWQgaW50byBhcnJheXMgcGVyIHByb3BlcnR5IGJhc2VkIG9uIHR5cGVcbiAgICAgIGxldCBlZmZlY3RzID0gZW5zdXJlT3duRWZmZWN0TWFwKHRoaXMsIHR5cGUsIHRydWUpW3Byb3BlcnR5XTtcbiAgICAgIGlmICghZWZmZWN0cykge1xuICAgICAgICBlZmZlY3RzID0gdGhpc1t0eXBlXVtwcm9wZXJ0eV0gPSBbXTtcbiAgICAgIH1cbiAgICAgIGVmZmVjdHMucHVzaChlZmZlY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGdpdmVuIHByb3BlcnR5IGVmZmVjdC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSB0aGUgZWZmZWN0IHdhcyBhc3NvY2lhdGVkIHdpdGhcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBFZmZlY3QgdHlwZSwgZnJvbSB0aGlzLlBST1BFUlRZX0VGRkVDVF9UWVBFU1xuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gZWZmZWN0IEVmZmVjdCBtZXRhZGF0YSBvYmplY3QgdG8gcmVtb3ZlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfcmVtb3ZlUHJvcGVydHlFZmZlY3QocHJvcGVydHksIHR5cGUsIGVmZmVjdCkge1xuICAgICAgbGV0IGVmZmVjdHMgPSBlbnN1cmVPd25FZmZlY3RNYXAodGhpcywgdHlwZSwgdHJ1ZSlbcHJvcGVydHldO1xuICAgICAgbGV0IGlkeCA9IGVmZmVjdHMuaW5kZXhPZihlZmZlY3QpO1xuICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgIGVmZmVjdHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYSBwcm9wZXJ0eSBlZmZlY3RcbiAgICAgKiBvZiBhIGNlcnRhaW4gdHlwZS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSB0eXBlIEVmZmVjdCB0eXBlLCBmcm9tIHRoaXMuUFJPUEVSVFlfRUZGRUNUX1RZUEVTXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhbiBlZmZlY3Qgb2YgdGhpc1xuICAgICAqICAgICB0eXBlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9oYXNQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgdHlwZSkge1xuICAgICAgbGV0IGVmZmVjdHMgPSB0aGlzW3R5cGVdO1xuICAgICAgcmV0dXJuIEJvb2xlYW4oZWZmZWN0cyAmJiBlZmZlY3RzW3Byb3BlcnR5XSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYSBcInJlYWQgb25seVwiXG4gICAgICogYWNjZXNzb3IgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhbiBlZmZlY3Qgb2YgdGhpc1xuICAgICAqICAgICB0eXBlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9oYXNSZWFkT25seUVmZmVjdChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hhc1Byb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5SRUFEX09OTFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGEgXCJub3RpZnlcIlxuICAgICAqIHByb3BlcnR5IGVmZmVjdCBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGFuIGVmZmVjdCBvZiB0aGlzXG4gICAgICogICAgIHR5cGVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2hhc05vdGlmeUVmZmVjdChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hhc1Byb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5OT1RJRlkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGEgXCJyZWZsZWN0IHRvXG4gICAgICogYXR0cmlidXRlXCIgcHJvcGVydHkgZWZmZWN0IGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYW4gZWZmZWN0IG9mIHRoaXNcbiAgICAgKiAgICAgdHlwZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfaGFzUmVmbGVjdEVmZmVjdChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hhc1Byb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5SRUZMRUNUKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhIFwiY29tcHV0ZWRcIlxuICAgICAqIHByb3BlcnR5IGVmZmVjdCBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGFuIGVmZmVjdCBvZiB0aGlzXG4gICAgICogICAgIHR5cGVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2hhc0NvbXB1dGVkRWZmZWN0KHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gdGhpcy5faGFzUHJvcGVydHlFZmZlY3QocHJvcGVydHksIFRZUEVTLkNPTVBVVEUpO1xuICAgIH1cblxuICAgIC8vIFJ1bnRpbWUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIHBlbmRpbmcgcHJvcGVydHkgb3IgcGF0aC4gIElmIHRoZSByb290IHByb3BlcnR5IG9mIHRoZSBwYXRoIGluXG4gICAgICogcXVlc3Rpb24gaGFkIG5vIGFjY2Vzc29yLCB0aGUgcGF0aCBpcyBzZXQsIG90aGVyd2lzZSBpdCBpcyBlbnF1ZXVlZFxuICAgICAqIHZpYSBgX3NldFBlbmRpbmdQcm9wZXJ0eWAuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzb2xhdGVzIHJlbGF0aXZlbHkgZXhwZW5zaXZlIGZ1bmN0aW9uYWxpdHkgbmVjZXNzYXJ5XG4gICAgICogZm9yIHRoZSBwdWJsaWMgQVBJIChgc2V0YCwgYHNldFByb3BlcnRpZXNgLCBgbm90aWZ5UGF0aGAsIGFuZCBwcm9wZXJ0eVxuICAgICAqIGNoYW5nZSBsaXN0ZW5lcnMgdmlhIHt7Li4ufX0gYmluZGluZ3MpLCBzdWNoIHRoYXQgaXQgaXMgb25seSBkb25lXG4gICAgICogd2hlbiBwYXRocyBlbnRlciB0aGUgc3lzdGVtLCBhbmQgbm90IGF0IGV2ZXJ5IHByb3BhZ2F0aW9uIHN0ZXAuICBJdFxuICAgICAqIGFsc28gc2V0cyBhIGBfX2RhdGFIYXNQYXRoc2AgZmxhZyBvbiB0aGUgaW5zdGFuY2Ugd2hpY2ggaXMgdXNlZCB0b1xuICAgICAqIGZhc3QtcGF0aCBzbG93ZXIgcGF0aC1tYXRjaGluZyBjb2RlIGluIHRoZSBwcm9wZXJ0eSBlZmZlY3RzIGhvc3QgcGF0aHMuXG4gICAgICpcbiAgICAgKiBgcGF0aGAgY2FuIGJlIGEgcGF0aCBzdHJpbmcgb3IgYXJyYXkgb2YgcGF0aCBwYXJ0cyBhcyBhY2NlcHRlZCBieSB0aGVcbiAgICAgKiBwdWJsaWMgQVBJLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8bnVtYmVyfHN0cmluZz59IHBhdGggUGF0aCB0byBzZXRcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHNob3VsZE5vdGlmeSBTZXQgdG8gdHJ1ZSBpZiB0aGlzIGNoYW5nZSBzaG91bGRcbiAgICAgKiAgY2F1c2UgYSBwcm9wZXJ0eSBub3RpZmljYXRpb24gZXZlbnQgZGlzcGF0Y2hcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBpc1BhdGhOb3RpZmljYXRpb24gSWYgdGhlIHBhdGggYmVpbmcgc2V0IGlzIGEgcGF0aFxuICAgICAqICAgbm90aWZpY2F0aW9uIG9mIGFuIGFscmVhZHkgY2hhbmdlZCB2YWx1ZSwgYXMgb3Bwb3NlZCB0byBhIHJlcXVlc3RcbiAgICAgKiAgIHRvIHNldCBhbmQgbm90aWZ5IHRoZSBjaGFuZ2UuICBJbiB0aGUgbGF0dGVyIGBmYWxzZWAgY2FzZSwgYSBkaXJ0eVxuICAgICAqICAgY2hlY2sgaXMgcGVyZm9ybWVkIGFuZCB0aGVuIHRoZSB2YWx1ZSBpcyBzZXQgdG8gdGhlIHBhdGggYmVmb3JlXG4gICAgICogICBlbnF1ZXVpbmcgdGhlIHBlbmRpbmcgcHJvcGVydHkgY2hhbmdlLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvcGVydHkvcGF0aCB3YXMgZW5xdWV1ZWQgaW5cbiAgICAgKiAgIHRoZSBwZW5kaW5nIGNoYW5nZXMgYmFnLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKHBhdGgsIHZhbHVlLCBzaG91bGROb3RpZnksIGlzUGF0aE5vdGlmaWNhdGlvbikge1xuICAgICAgaWYgKGlzUGF0aE5vdGlmaWNhdGlvbiB8fFxuICAgICAgICAgIHJvb3QoQXJyYXkuaXNBcnJheShwYXRoKSA/IHBhdGhbMF0gOiBwYXRoKSAhPT0gcGF0aCkge1xuICAgICAgICAvLyBEaXJ0eSBjaGVjayBjaGFuZ2VzIGJlaW5nIHNldCB0byBhIHBhdGggYWdhaW5zdCB0aGUgYWN0dWFsIG9iamVjdCxcbiAgICAgICAgLy8gc2luY2UgdGhpcyBpcyB0aGUgZW50cnkgcG9pbnQgZm9yIHBhdGhzIGludG8gdGhlIHN5c3RlbTsgZnJvbSBoZXJlXG4gICAgICAgIC8vIHRoZSBvbmx5IGRpcnR5IGNoZWNrcyBhcmUgYWdhaW5zdCB0aGUgYF9fZGF0YVRlbXBgIGNhY2hlIHRvIHByZXZlbnRcbiAgICAgICAgLy8gZHVwbGljYXRlIHdvcmsgaW4gdGhlIHNhbWUgdHVybiBvbmx5LiBOb3RlLCBpZiB0aGlzIHdhcyBhIG5vdGlmaWNhdGlvblxuICAgICAgICAvLyBvZiBhIGNoYW5nZSBhbHJlYWR5IHNldCB0byBhIHBhdGggKGlzUGF0aE5vdGlmaWNhdGlvbjogdHJ1ZSksXG4gICAgICAgIC8vIHdlIGFsd2F5cyBsZXQgdGhlIGNoYW5nZSB0aHJvdWdoIGFuZCBza2lwIHRoZSBgc2V0YCBzaW5jZSBpdCB3YXNcbiAgICAgICAgLy8gYWxyZWFkeSBkaXJ0eSBjaGVja2VkIGF0IHRoZSBwb2ludCBvZiBlbnRyeSBhbmQgdGhlIHVuZGVybHlpbmdcbiAgICAgICAgLy8gb2JqZWN0IGhhcyBhbHJlYWR5IGJlZW4gdXBkYXRlZFxuICAgICAgICBpZiAoIWlzUGF0aE5vdGlmaWNhdGlvbikge1xuICAgICAgICAgIGxldCBvbGQgPSBnZXQodGhpcywgcGF0aCk7XG4gICAgICAgICAgcGF0aCA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoc2V0KHRoaXMsIHBhdGgsIHZhbHVlKSk7XG4gICAgICAgICAgLy8gVXNlIHByb3BlcnR5LWFjY2Vzc29yJ3Mgc2ltcGxlciBkaXJ0eSBjaGVja1xuICAgICAgICAgIGlmICghcGF0aCB8fCAhc3VwZXIuX3Nob3VsZFByb3BlcnR5Q2hhbmdlKHBhdGgsIHZhbHVlLCBvbGQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX19kYXRhSGFzUGF0aHMgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5KC8qKkB0eXBle3N0cmluZ30qLyhwYXRoKSwgdmFsdWUsIHNob3VsZE5vdGlmeSkpIHtcbiAgICAgICAgICBjb21wdXRlTGlua2VkUGF0aHModGhpcywgLyoqQHR5cGV7c3RyaW5nfSovIChwYXRoKSwgdmFsdWUpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5fX2RhdGFIYXNBY2Nlc3NvciAmJiB0aGlzLl9fZGF0YUhhc0FjY2Vzc29yW3BhdGhdKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eSgvKipAdHlwZXtzdHJpbmd9Ki8ocGF0aCksIHZhbHVlLCBzaG91bGROb3RpZnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXNbcGF0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYSB2YWx1ZSB0byBhIG5vbi1Qb2x5bWVyIGVsZW1lbnQvbm9kZSdzIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogVGhlIGltcGxlbWVudGF0aW9uIG1ha2VzIGEgYmVzdC1lZmZvcnQgYXQgYmluZGluZyBpbnRlcm9wOlxuICAgICAqIFNvbWUgbmF0aXZlIGVsZW1lbnQgcHJvcGVydGllcyBoYXZlIHNpZGUtZWZmZWN0cyB3aGVuXG4gICAgICogcmUtc2V0dGluZyB0aGUgc2FtZSB2YWx1ZSAoZS5nLiBzZXR0aW5nIGA8aW5wdXQ+LnZhbHVlYCByZXNldHMgdGhlXG4gICAgICogY3Vyc29yIHBvc2l0aW9uKSwgc28gd2UgZG8gYSBkaXJ0eS1jaGVjayBiZWZvcmUgc2V0dGluZyB0aGUgdmFsdWUuXG4gICAgICogSG93ZXZlciwgZm9yIGJldHRlciBpbnRlcm9wIHdpdGggbm9uLVBvbHltZXIgY3VzdG9tIGVsZW1lbnRzIHRoYXRcbiAgICAgKiBhY2NlcHQgb2JqZWN0cywgd2UgZXhwbGljaXRseSByZS1zZXQgb2JqZWN0IGNoYW5nZXMgY29taW5nIGZyb20gdGhlXG4gICAgICogUG9seW1lciB3b3JsZCAod2hpY2ggbWF5IGluY2x1ZGUgZGVlcCBvYmplY3QgY2hhbmdlcyB3aXRob3V0IHRoZVxuICAgICAqIHRvcCByZWZlcmVuY2UgY2hhbmdpbmcpLCBlcnJpbmcgb24gdGhlIHNpZGUgb2YgcHJvdmlkaW5nIG1vcmVcbiAgICAgKiBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIFVzZXJzIG1heSBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwcm92aWRlIGFsdGVybmF0ZSBhcHByb2FjaGVzLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHshTm9kZX0gbm9kZSBUaGUgbm9kZSB0byBzZXQgYSBwcm9wZXJ0eSBvblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFRoZSBwcm9wZXJ0eSB0byBzZXRcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfc2V0VW5tYW5hZ2VkUHJvcGVydHlUb05vZGUobm9kZSwgcHJvcCwgdmFsdWUpIHtcbiAgICAgIC8vIEl0IGlzIGEganVkZ21lbnQgY2FsbCB0aGF0IHJlc2V0dGluZyBwcmltaXRpdmVzIGlzXG4gICAgICAvLyBcImJhZFwiIGFuZCByZXNldHRpbmdzIG9iamVjdHMgaXMgYWxzbyBcImdvb2RcIjsgYWx0ZXJuYXRpdmVseSB3ZSBjb3VsZFxuICAgICAgLy8gaW1wbGVtZW50IGEgd2hpdGVsaXN0IG9mIHRhZyAmIHByb3BlcnR5IHZhbHVlcyB0aGF0IHNob3VsZCBuZXZlclxuICAgICAgLy8gYmUgcmVzZXQgKGUuZy4gPGlucHV0Pi52YWx1ZSAmJiA8c2VsZWN0Pi52YWx1ZSlcbiAgICAgIGlmICh2YWx1ZSAhPT0gbm9kZVtwcm9wXSB8fCB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm90ZSwgY2xhc3NOYW1lIG5lZWRzIHN0eWxlIHNjb3Bpbmcgc28gdGhpcyBuZWVkcyB3cmFwcGluZy5cbiAgICAgICAgaWYgKHByb3AgPT09ICdjbGFzc05hbWUnKSB7XG4gICAgICAgICAgbm9kZSA9IC8qKiBAdHlwZSB7IU5vZGV9ICovKHdyYXAobm9kZSkpO1xuICAgICAgICB9XG4gICAgICAgIG5vZGVbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgdGhlIGBQcm9wZXJ0aWVzQ2hhbmdlZGAgaW1wbGVtZW50YXRpb24gdG8gaW50cm9kdWNlIHNwZWNpYWxcbiAgICAgKiBkaXJ0eSBjaGVjayBsb2dpYyBkZXBlbmRpbmcgb24gdGhlIHByb3BlcnR5ICYgdmFsdWUgYmVpbmcgc2V0OlxuICAgICAqXG4gICAgICogMS4gQW55IHZhbHVlIHNldCB0byBhIHBhdGggKGUuZy4gJ29iai5wcm9wJzogNDIgb3IgJ29iai5wcm9wJzogey4uLn0pXG4gICAgICogICAgU3RvcmVkIGluIGBfX2RhdGFUZW1wYCwgZGlydHkgY2hlY2tlZCBhZ2FpbnN0IGBfX2RhdGFUZW1wYFxuICAgICAqIDIuIE9iamVjdCBzZXQgdG8gc2ltcGxlIHByb3BlcnR5IChlLmcuICdwcm9wJzogey4uLn0pXG4gICAgICogICAgU3RvcmVkIGluIGBfX2RhdGFUZW1wYCBhbmQgYF9fZGF0YWAsIGRpcnR5IGNoZWNrZWQgYWdhaW5zdFxuICAgICAqICAgIGBfX2RhdGFUZW1wYCBieSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIGBfc2hvdWxkUHJvcGVydHlDaGFuZ2VgXG4gICAgICogMy4gUHJpbWl0aXZlIHZhbHVlIHNldCB0byBzaW1wbGUgcHJvcGVydHkgKGUuZy4gJ3Byb3AnOiA0MilcbiAgICAgKiAgICBTdG9yZWQgaW4gYF9fZGF0YWAsIGRpcnR5IGNoZWNrZWQgYWdhaW5zdCBgX19kYXRhYFxuICAgICAqXG4gICAgICogVGhlIGRpcnR5LWNoZWNrIGlzIGltcG9ydGFudCB0byBwcmV2ZW50IGN5Y2xlcyBkdWUgdG8gdHdvLXdheVxuICAgICAqIG5vdGlmaWNhdGlvbiwgYnV0IHBhdGhzIGFuZCBvYmplY3RzIGFyZSBvbmx5IGRpcnR5IGNoZWNrZWQgYWdhaW5zdCBhbnlcbiAgICAgKiBwcmV2aW91cyB2YWx1ZSBzZXQgZHVyaW5nIHRoaXMgdHVybiB2aWEgYSBcInRlbXBvcmFyeSBjYWNoZVwiIHRoYXQgaXNcbiAgICAgKiBjbGVhcmVkIHdoZW4gdGhlIGxhc3QgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgZXhpdHMuIFRoaXMgaXMgc286XG4gICAgICogYS4gYW55IGNhY2hlZCBhcnJheSBwYXRocyAoZS5nLiAnYXJyYXkuMy5wcm9wJykgbWF5IGJlIGludmFsaWRhdGVkXG4gICAgICogICAgZHVlIHRvIGFycmF5IG11dGF0aW9ucyBsaWtlIHNoaWZ0L3Vuc2hpZnQvc3BsaWNlOyB0aGlzIGlzIGZpbmVcbiAgICAgKiAgICBzaW5jZSBwYXRoIGNoYW5nZXMgYXJlIGRpcnR5LWNoZWNrZWQgYXQgdXNlciBlbnRyeSBwb2ludHMgbGlrZSBgc2V0YFxuICAgICAqIGIuIGRpcnR5LWNoZWNraW5nIGZvciBvYmplY3RzIG9ubHkgbGFzdHMgb25lIHR1cm4gdG8gYWxsb3cgdGhlIHVzZXJcbiAgICAgKiAgICB0byBtdXRhdGUgdGhlIG9iamVjdCBpbi1wbGFjZSBhbmQgcmUtc2V0IGl0IHdpdGggdGhlIHNhbWUgaWRlbnRpdHlcbiAgICAgKiAgICBhbmQgaGF2ZSBhbGwgc3ViLXByb3BlcnRpZXMgcmUtcHJvcGFnYXRlZCBpbiBhIHN1YnNlcXVlbnQgdHVybi5cbiAgICAgKlxuICAgICAqIFRoZSB0ZW1wIGNhY2hlIGlzIG5vdCBuZWNlc3NhcmlseSBzdWZmaWNpZW50IHRvIHByZXZlbnQgaW52YWxpZCBhcnJheVxuICAgICAqIHBhdGhzLCBzaW5jZSBhIHNwbGljZSBjYW4gaGFwcGVuIGR1cmluZyB0aGUgc2FtZSB0dXJuICh3aXRoIHBhdGhvbG9naWNhbFxuICAgICAqIHVzZXIgY29kZSk7IHdlIGNvdWxkIGludHJvZHVjZSBhIFwiZml4dXBcIiBmb3IgdGVtcG9yYXJpbHkgY2FjaGVkIGFycmF5XG4gICAgICogcGF0aHMgaWYgbmVlZGVkOiBodHRwczovL2dpdGh1Yi5jb20vUG9seW1lci9wb2x5bWVyL2lzc3Vlcy80MjI3XG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHNob3VsZE5vdGlmeSBUcnVlIGlmIHByb3BlcnR5IHNob3VsZCBmaXJlIG5vdGlmaWNhdGlvblxuICAgICAqICAgZXZlbnQgKGFwcGxpZXMgb25seSBmb3IgYG5vdGlmeTogdHJ1ZWAgcHJvcGVydGllcylcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3BlcnR5IGNoYW5nZWRcbiAgICAgKi9cbiAgICBfc2V0UGVuZGluZ1Byb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSwgc2hvdWxkTm90aWZ5KSB7XG4gICAgICBsZXQgcHJvcElzUGF0aCA9IHRoaXMuX19kYXRhSGFzUGF0aHMgJiYgaXNQYXRoKHByb3BlcnR5KTtcbiAgICAgIGxldCBwcmV2UHJvcHMgPSBwcm9wSXNQYXRoID8gdGhpcy5fX2RhdGFUZW1wIDogdGhpcy5fX2RhdGE7XG4gICAgICBpZiAodGhpcy5fc2hvdWxkUHJvcGVydHlDaGFuZ2UocHJvcGVydHksIHZhbHVlLCBwcmV2UHJvcHNbcHJvcGVydHldKSkge1xuICAgICAgICBpZiAoIXRoaXMuX19kYXRhUGVuZGluZykge1xuICAgICAgICAgIHRoaXMuX19kYXRhUGVuZGluZyA9IHt9O1xuICAgICAgICAgIHRoaXMuX19kYXRhT2xkID0ge307XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIG9sZCBpcyBjYXB0dXJlZCBmcm9tIHRoZSBsYXN0IHR1cm5cbiAgICAgICAgaWYgKCEocHJvcGVydHkgaW4gdGhpcy5fX2RhdGFPbGQpKSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFPbGRbcHJvcGVydHldID0gdGhpcy5fX2RhdGFbcHJvcGVydHldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBhdGhzIGFyZSBzdG9yZWQgaW4gdGVtcG9yYXJ5IGNhY2hlIChjbGVhcmVkIGF0IGVuZCBvZiB0dXJuKSxcbiAgICAgICAgLy8gd2hpY2ggaXMgdXNlZCBmb3IgZGlydHktY2hlY2tpbmcsIGFsbCBvdGhlcnMgc3RvcmVkIGluIF9fZGF0YVxuICAgICAgICBpZiAocHJvcElzUGF0aCkge1xuICAgICAgICAgIHRoaXMuX19kYXRhVGVtcFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbGwgY2hhbmdlcyBnbyBpbnRvIHBlbmRpbmcgcHJvcGVydHkgYmFnLCBwYXNzZWQgdG8gX3Byb3BlcnRpZXNDaGFuZ2VkXG4gICAgICAgIHRoaXMuX19kYXRhUGVuZGluZ1twcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgLy8gVHJhY2sgcHJvcGVydGllcyB0aGF0IHNob3VsZCBub3RpZnkgc2VwYXJhdGVseVxuICAgICAgICBpZiAocHJvcElzUGF0aCB8fCAodGhpc1tUWVBFUy5OT1RJRlldICYmIHRoaXNbVFlQRVMuTk9USUZZXVtwcm9wZXJ0eV0pKSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFUb05vdGlmeSA9IHRoaXMuX19kYXRhVG9Ob3RpZnkgfHwge307XG4gICAgICAgICAgdGhpcy5fX2RhdGFUb05vdGlmeVtwcm9wZXJ0eV0gPSBzaG91bGROb3RpZnk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIGJhc2UgaW1wbGVtZW50YXRpb24gdG8gZW5zdXJlIGFsbCBhY2Nlc3NvcnMgc2V0IGBzaG91bGROb3RpZnlgXG4gICAgICogdG8gdHJ1ZSwgZm9yIHBlci1wcm9wZXJ0eSBub3RpZmljYXRpb24gdHJhY2tpbmcuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgX3NldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUsIHRydWUpKSB7XG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIGBQcm9wZXJ0eUFjY2Vzc29yYCdzIGRlZmF1bHQgYXN5bmMgcXVldWluZyBvZlxuICAgICAqIGBfcHJvcGVydGllc0NoYW5nZWRgOiBpZiBgX19kYXRhUmVhZHlgIGlzIGZhbHNlIChoYXMgbm90IHlldCBiZWVuXG4gICAgICogbWFudWFsbHkgZmx1c2hlZCksIHRoZSBmdW5jdGlvbiBuby1vcHM7IG90aGVyd2lzZSBmbHVzaGVzXG4gICAgICogYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgc3luY2hyb25vdXNseS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCkge1xuICAgICAgaWYgKHRoaXMuX19kYXRhUmVhZHkpIHtcbiAgICAgICAgdGhpcy5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5xdWV1ZXMgdGhlIGdpdmVuIGNsaWVudCBvbiBhIGxpc3Qgb2YgcGVuZGluZyBjbGllbnRzLCB3aG9zZVxuICAgICAqIHBlbmRpbmcgcHJvcGVydHkgY2hhbmdlcyBjYW4gbGF0ZXIgYmUgZmx1c2hlZCB2aWEgYSBjYWxsIHRvXG4gICAgICogYF9mbHVzaENsaWVudHNgLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNsaWVudCBQcm9wZXJ0eUVmZmVjdHMgY2xpZW50IHRvIGVucXVldWVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfZW5xdWV1ZUNsaWVudChjbGllbnQpIHtcbiAgICAgIHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHMgPSB0aGlzLl9fZGF0YVBlbmRpbmdDbGllbnRzIHx8IFtdO1xuICAgICAgaWYgKGNsaWVudCAhPT0gdGhpcykge1xuICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmdDbGllbnRzLnB1c2goY2xpZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbHVzaGVzIGFueSBjbGllbnRzIHByZXZpb3VzbHkgZW5xdWV1ZWQgdmlhIGBfZW5xdWV1ZUNsaWVudGAsIGNhdXNpbmdcbiAgICAgKiB0aGVpciBgX2ZsdXNoUHJvcGVydGllc2AgbWV0aG9kIHRvIHJ1bi5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9mbHVzaENsaWVudHMoKSB7XG4gICAgICBpZiAoIXRoaXMuX19kYXRhQ2xpZW50c1JlYWR5KSB7XG4gICAgICAgIHRoaXMuX19kYXRhQ2xpZW50c1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVhZHlDbGllbnRzKCk7XG4gICAgICAgIC8vIE92ZXJyaWRlIHBvaW50IHdoZXJlIGFjY2Vzc29ycyBhcmUgdHVybmVkIG9uOyBpbXBvcnRhbnRseSxcbiAgICAgICAgLy8gdGhpcyBpcyBhZnRlciBjbGllbnRzIGhhdmUgZnVsbHkgcmVhZGllZCwgcHJvdmlkaW5nIGEgZ3VhcmFudGVlXG4gICAgICAgIC8vIHRoYXQgYW55IHByb3BlcnR5IGVmZmVjdHMgb2NjdXIgb25seSBhZnRlciBhbGwgY2xpZW50cyBhcmUgcmVhZHkuXG4gICAgICAgIHRoaXMuX19kYXRhUmVhZHkgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX2VuYWJsZU9yRmx1c2hDbGllbnRzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTk9URTogV2UgZW5zdXJlIGNsaWVudHMgZWl0aGVyIGVuYWJsZSBvciBmbHVzaCBhcyBhcHByb3ByaWF0ZS4gVGhpc1xuICAgIC8vIGhhbmRsZXMgdHdvIGNvcm5lciBjYXNlczpcbiAgICAvLyAoMSkgY2xpZW50cyBmbHVzaCBwcm9wZXJseSB3aGVuIGNvbm5lY3RlZC9lbmFibGVkIGJlZm9yZSB0aGUgaG9zdFxuICAgIC8vIGVuYWJsZXM7IGUuZy5cbiAgICAvLyAgIChhKSBUZW1wbGF0aXplIHN0YW1wcyB3aXRoIG5vIHByb3BlcnRpZXMgYW5kIGRvZXMgbm90IGZsdXNoIGFuZFxuICAgIC8vICAgKGIpIHRoZSBpbnN0YW5jZSBpcyBpbnNlcnRlZCBpbnRvIGRvbSBhbmRcbiAgICAvLyAgIChjKSB0aGVuIHRoZSBpbnN0YW5jZSBmbHVzaGVzLlxuICAgIC8vICgyKSBjbGllbnRzIGVuYWJsZSBwcm9wZXJseSB3aGVuIG5vdCBjb25uZWN0ZWQvZW5hYmxlZCB3aGVuIHRoZSBob3N0XG4gICAgLy8gZmx1c2hlczsgZS5nLlxuICAgIC8vICAgKGEpIGEgdGVtcGxhdGUgaXMgcnVudGltZSBzdGFtcGVkIGFuZCBub3QgeWV0IGNvbm5lY3RlZC9lbmFibGVkXG4gICAgLy8gICAoYikgYSBob3N0IHNldHMgYSBwcm9wZXJ0eSwgY2F1c2luZyBzdGFtcGVkIGRvbSB0byBmbHVzaFxuICAgIC8vICAgKGMpIHRoZSBzdGFtcGVkIGRvbSBlbmFibGVzLlxuICAgIF9fZW5hYmxlT3JGbHVzaENsaWVudHMoKSB7XG4gICAgICBsZXQgY2xpZW50cyA9IHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHM7XG4gICAgICBpZiAoY2xpZW50cykge1xuICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmdDbGllbnRzID0gbnVsbDtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgY2xpZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCBjbGllbnQgPSBjbGllbnRzW2ldO1xuICAgICAgICAgIGlmICghY2xpZW50Ll9fZGF0YUVuYWJsZWQpIHtcbiAgICAgICAgICAgIGNsaWVudC5fZW5hYmxlUHJvcGVydGllcygpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2xpZW50Ll9fZGF0YVBlbmRpbmcpIHtcbiAgICAgICAgICAgIGNsaWVudC5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhbnkgaW5pdGlhbCBzZXR1cCBvbiBjbGllbnQgZG9tLiBDYWxsZWQgYmVmb3JlIHRoZSBmaXJzdFxuICAgICAqIGBfZmx1c2hQcm9wZXJ0aWVzYCBjYWxsIG9uIGNsaWVudCBkb20gYW5kIGJlZm9yZSBhbnkgZWxlbWVudFxuICAgICAqIG9ic2VydmVycyBhcmUgY2FsbGVkLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3JlYWR5Q2xpZW50cygpIHtcbiAgICAgIHRoaXMuX19lbmFibGVPckZsdXNoQ2xpZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBiYWcgb2YgcHJvcGVydHkgY2hhbmdlcyB0byB0aGlzIGluc3RhbmNlLCBhbmRcbiAgICAgKiBzeW5jaHJvbm91c2x5IHByb2Nlc3NlcyBhbGwgZWZmZWN0cyBvZiB0aGUgcHJvcGVydGllcyBhcyBhIGJhdGNoLlxuICAgICAqXG4gICAgICogUHJvcGVydHkgbmFtZXMgbXVzdCBiZSBzaW1wbGUgcHJvcGVydGllcywgbm90IHBhdGhzLiAgQmF0Y2hlZFxuICAgICAqIHBhdGggcHJvcGFnYXRpb24gaXMgbm90IHN1cHBvcnRlZC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2Ygb25lIG9yIG1vcmUga2V5LXZhbHVlIHBhaXJzIHdob3NlIGtleSBpc1xuICAgICAqICAgYSBwcm9wZXJ0eSBhbmQgdmFsdWUgaXMgdGhlIG5ldyB2YWx1ZSB0byBzZXQgZm9yIHRoYXQgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gc2V0UmVhZE9ubHkgV2hlbiB0cnVlLCBhbnkgcHJpdmF0ZSB2YWx1ZXMgc2V0IGluXG4gICAgICogICBgcHJvcHNgIHdpbGwgYmUgc2V0LiBCeSBkZWZhdWx0LCBgc2V0UHJvcGVydGllc2Agd2lsbCBub3Qgc2V0XG4gICAgICogICBgcmVhZE9ubHk6IHRydWVgIHJvb3QgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzZXRQcm9wZXJ0aWVzKHByb3BzLCBzZXRSZWFkT25seSkge1xuICAgICAgZm9yIChsZXQgcGF0aCBpbiBwcm9wcykge1xuICAgICAgICBpZiAoc2V0UmVhZE9ubHkgfHwgIXRoaXNbVFlQRVMuUkVBRF9PTkxZXSB8fCAhdGhpc1tUWVBFUy5SRUFEX09OTFldW3BhdGhdKSB7XG4gICAgICAgICAgLy9UT0RPKGtzY2hhYWYpOiBleHBsaWNpdGx5IGRpc2FsbG93IHBhdGhzIGluIHNldFByb3BlcnR5P1xuICAgICAgICAgIC8vIHdpbGRjYXJkIG9ic2VydmVycyBjdXJyZW50bHkgb25seSBwYXNzIHRoZSBmaXJzdCBjaGFuZ2VkIHBhdGhcbiAgICAgICAgICAvLyBpbiB0aGUgYGluZm9gIG9iamVjdCwgYW5kIHlvdSBjb3VsZCBkbyBzb21lIG9kZCB0aGluZ3MgYmF0Y2hpbmdcbiAgICAgICAgICAvLyBwYXRocywgZS5nLiB7J2Zvby5iYXInOiB7Li4ufSwgJ2Zvbyc6IG51bGx9XG4gICAgICAgICAgdGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKHBhdGgsIHByb3BzW3BhdGhdLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5faW52YWxpZGF0ZVByb3BlcnRpZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgYFByb3BlcnR5QWNjZXNzb3JzYCBzbyB0aGF0IHByb3BlcnR5IGFjY2Vzc29yXG4gICAgICogc2lkZSBlZmZlY3RzIGFyZSBub3QgZW5hYmxlZCB1bnRpbCBhZnRlciBjbGllbnQgZG9tIGlzIGZ1bGx5IHJlYWR5LlxuICAgICAqIEFsc28gY2FsbHMgYF9mbHVzaENsaWVudHNgIGNhbGxiYWNrIHRvIGVuc3VyZSBjbGllbnQgZG9tIGlzIGVuYWJsZWRcbiAgICAgKiB0aGF0IHdhcyBub3QgZW5hYmxlZCBhcyBhIHJlc3VsdCBvZiBmbHVzaGluZyBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICByZWFkeSgpIHtcbiAgICAgIC8vIEl0IGlzIGltcG9ydGFudCB0aGF0IGBzdXBlci5yZWFkeSgpYCBpcyBub3QgY2FsbGVkIGhlcmUgYXMgaXRcbiAgICAgIC8vIGltbWVkaWF0ZWx5IHR1cm5zIG9uIGFjY2Vzc29ycy4gSW5zdGVhZCwgd2Ugd2FpdCB1bnRpbCBgcmVhZHlDbGllbnRzYFxuICAgICAgLy8gdG8gZW5hYmxlIGFjY2Vzc29ycyB0byBwcm92aWRlIGEgZ3VhcmFudGVlIHRoYXQgY2xpZW50cyBhcmUgcmVhZHlcbiAgICAgIC8vIGJlZm9yZSBwcm9jZXNzaW5nIGFueSBhY2Nlc3NvcnMgc2lkZSBlZmZlY3RzLlxuICAgICAgdGhpcy5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICAvLyBJZiBubyBkYXRhIHdhcyBwZW5kaW5nLCBgX2ZsdXNoUHJvcGVydGllc2Agd2lsbCBub3QgYGZsdXNoQ2xpZW50c2BcbiAgICAgIC8vIHNvIGVuc3VyZSB0aGlzIGlzIGRvbmUuXG4gICAgICBpZiAoIXRoaXMuX19kYXRhQ2xpZW50c1JlYWR5KSB7XG4gICAgICAgIHRoaXMuX2ZsdXNoQ2xpZW50cygpO1xuICAgICAgfVxuICAgICAgLy8gQmVmb3JlIHJlYWR5LCBjbGllbnQgbm90aWZpY2F0aW9ucyBkbyBub3QgdHJpZ2dlciBfZmx1c2hQcm9wZXJ0aWVzLlxuICAgICAgLy8gVGhlcmVmb3JlIGEgZmx1c2ggaXMgbmVjZXNzYXJ5IGhlcmUgaWYgZGF0YSBoYXMgYmVlbiBzZXQuXG4gICAgICBpZiAodGhpcy5fX2RhdGFQZW5kaW5nKSB7XG4gICAgICAgIHRoaXMuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEltcGxlbWVudHMgYFByb3BlcnR5QWNjZXNzb3JzYCdzIHByb3BlcnRpZXMgY2hhbmdlZCBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIFJ1bnMgZWFjaCBjbGFzcyBvZiBlZmZlY3RzIGZvciB0aGUgYmF0Y2ggb2YgY2hhbmdlZCBwcm9wZXJ0aWVzIGluXG4gICAgICogYSBzcGVjaWZpYyBvcmRlciAoY29tcHV0ZSwgcHJvcGFnYXRlLCByZWZsZWN0LCBvYnNlcnZlLCBub3RpZnkpLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBjdXJyZW50UHJvcHMgQmFnIG9mIGFsbCBjdXJyZW50IGFjY2Vzc29yIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7P09iamVjdH0gY2hhbmdlZFByb3BzIEJhZyBvZiBwcm9wZXJ0aWVzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3RcbiAgICAgKiAgIGNhbGwgdG8gYF9wcm9wZXJ0aWVzQ2hhbmdlZGBcbiAgICAgKiBAcGFyYW0gez9PYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGVhY2ggcHJvcGVydHlcbiAgICAgKiAgIGluIGBjaGFuZ2VkUHJvcHNgXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfcHJvcGVydGllc0NoYW5nZWQoY3VycmVudFByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzKSB7XG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAvLyBsZXQgYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGNoYW5nZWRQcm9wcyB8fCB7fSk7XG4gICAgICAvLyB3aW5kb3cuZGVidWcgJiYgY29uc29sZS5ncm91cCh0aGlzLmxvY2FsTmFtZSArICcjJyArIHRoaXMuaWQgKyAnOiAnICsgYyk7XG4gICAgICAvLyBpZiAod2luZG93LmRlYnVnKSB7IGRlYnVnZ2VyOyB9XG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICBsZXQgaGFzUGF0aHMgPSB0aGlzLl9fZGF0YUhhc1BhdGhzO1xuICAgICAgdGhpcy5fX2RhdGFIYXNQYXRocyA9IGZhbHNlO1xuICAgICAgbGV0IG5vdGlmeVByb3BzO1xuICAgICAgLy8gQ29tcHV0ZSBwcm9wZXJ0aWVzXG4gICAgICBydW5Db21wdXRlZEVmZmVjdHModGhpcywgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgLy8gQ2xlYXIgbm90aWZ5IHByb3BlcnRpZXMgcHJpb3IgdG8gcG9zc2libGUgcmVlbnRyeSAocHJvcGFnYXRlLCBvYnNlcnZlKSxcbiAgICAgIC8vIGJ1dCBhZnRlciBjb21wdXRpbmcgZWZmZWN0cyBoYXZlIGEgY2hhbmNlIHRvIGFkZCB0byB0aGVtXG4gICAgICBub3RpZnlQcm9wcyA9IHRoaXMuX19kYXRhVG9Ob3RpZnk7XG4gICAgICB0aGlzLl9fZGF0YVRvTm90aWZ5ID0gbnVsbDtcbiAgICAgIC8vIFByb3BhZ2F0ZSBwcm9wZXJ0aWVzIHRvIGNsaWVudHNcbiAgICAgIHRoaXMuX3Byb3BhZ2F0ZVByb3BlcnR5Q2hhbmdlcyhjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgICAvLyBGbHVzaCBjbGllbnRzXG4gICAgICB0aGlzLl9mbHVzaENsaWVudHMoKTtcbiAgICAgIC8vIFJlZmxlY3QgcHJvcGVydGllc1xuICAgICAgcnVuRWZmZWN0cyh0aGlzLCB0aGlzW1RZUEVTLlJFRkxFQ1RdLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgICAvLyBPYnNlcnZlIHByb3BlcnRpZXNcbiAgICAgIHJ1bkVmZmVjdHModGhpcywgdGhpc1tUWVBFUy5PQlNFUlZFXSwgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgLy8gTm90aWZ5IHByb3BlcnRpZXMgdG8gaG9zdFxuICAgICAgaWYgKG5vdGlmeVByb3BzKSB7XG4gICAgICAgIHJ1bk5vdGlmeUVmZmVjdHModGhpcywgbm90aWZ5UHJvcHMsIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKTtcbiAgICAgIH1cbiAgICAgIC8vIENsZWFyIHRlbXBvcmFyeSBjYWNoZSBhdCBlbmQgb2YgdHVyblxuICAgICAgaWYgKHRoaXMuX19kYXRhQ291bnRlciA9PSAxKSB7XG4gICAgICAgIHRoaXMuX19kYXRhVGVtcCA9IHt9O1xuICAgICAgfVxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgLy8gd2luZG93LmRlYnVnICYmIGNvbnNvbGUuZ3JvdXBFbmQodGhpcy5sb2NhbE5hbWUgKyAnIycgKyB0aGlzLmlkICsgJzogJyArIGMpO1xuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB0byBwcm9wYWdhdGUgYW55IHByb3BlcnR5IGNoYW5nZXMgdG8gc3RhbXBlZCB0ZW1wbGF0ZSBub2Rlc1xuICAgICAqIG1hbmFnZWQgYnkgdGhpcyBlbGVtZW50LlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNoYW5nZWRQcm9wcyBCYWcgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzUGF0aHMgVHJ1ZSB3aXRoIGBwcm9wc2AgY29udGFpbnMgb25lIG9yIG1vcmUgcGF0aHNcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfcHJvcGFnYXRlUHJvcGVydHlDaGFuZ2VzKGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSB7XG4gICAgICBpZiAodGhpc1tUWVBFUy5QUk9QQUdBVEVdKSB7XG4gICAgICAgIHJ1bkVmZmVjdHModGhpcywgdGhpc1tUWVBFUy5QUk9QQUdBVEVdLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX3RlbXBsYXRlSW5mbykge1xuICAgICAgICB0aGlzLl9ydW5FZmZlY3RzRm9yVGVtcGxhdGUodGhpcy5fX3RlbXBsYXRlSW5mbywgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9ydW5FZmZlY3RzRm9yVGVtcGxhdGUodGVtcGxhdGVJbmZvLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocykge1xuICAgICAgY29uc3QgYmFzZVJ1bkVmZmVjdHMgPSAoY2hhbmdlZFByb3BzLCBoYXNQYXRocykgPT4ge1xuICAgICAgICBydW5FZmZlY3RzKHRoaXMsIHRlbXBsYXRlSW5mby5wcm9wZXJ0eUVmZmVjdHMsIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsXG4gICAgICAgICAgaGFzUGF0aHMsIHRlbXBsYXRlSW5mby5ub2RlTGlzdCk7XG4gICAgICAgIGZvciAobGV0IGluZm89dGVtcGxhdGVJbmZvLmZpcnN0Q2hpbGQ7IGluZm87IGluZm89aW5mby5uZXh0U2libGluZykge1xuICAgICAgICAgIHRoaXMuX3J1bkVmZmVjdHNGb3JUZW1wbGF0ZShpbmZvLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBpZiAodGVtcGxhdGVJbmZvLnJ1bkVmZmVjdHMpIHtcbiAgICAgICAgdGVtcGxhdGVJbmZvLnJ1bkVmZmVjdHMoYmFzZVJ1bkVmZmVjdHMsIGNoYW5nZWRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZVJ1bkVmZmVjdHMoY2hhbmdlZFByb3BzLCBoYXNQYXRocyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWxpYXNlcyBvbmUgZGF0YSBwYXRoIGFzIGFub3RoZXIsIHN1Y2ggdGhhdCBwYXRoIG5vdGlmaWNhdGlvbnMgZnJvbSBvbmVcbiAgICAgKiBhcmUgcm91dGVkIHRvIHRoZSBvdGhlci5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSB0byBUYXJnZXQgcGF0aCB0byBsaW5rLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBmcm9tIFNvdXJjZSBwYXRoIHRvIGxpbmsuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgbGlua1BhdGhzKHRvLCBmcm9tKSB7XG4gICAgICB0byA9IG5vcm1hbGl6ZSh0byk7XG4gICAgICBmcm9tID0gbm9ybWFsaXplKGZyb20pO1xuICAgICAgdGhpcy5fX2RhdGFMaW5rZWRQYXRocyA9IHRoaXMuX19kYXRhTGlua2VkUGF0aHMgfHwge307XG4gICAgICB0aGlzLl9fZGF0YUxpbmtlZFBhdGhzW3RvXSA9IGZyb207XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGRhdGEgcGF0aCBhbGlhcyBwcmV2aW91c2x5IGVzdGFibGlzaGVkIHdpdGggYF9saW5rUGF0aHNgLlxuICAgICAqXG4gICAgICogTm90ZSwgdGhlIHBhdGggdG8gdW5saW5rIHNob3VsZCBiZSB0aGUgdGFyZ2V0IChgdG9gKSB1c2VkIHdoZW5cbiAgICAgKiBsaW5raW5nIHRoZSBwYXRocy5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFRhcmdldCBwYXRoIHRvIHVubGluay5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICB1bmxpbmtQYXRocyhwYXRoKSB7XG4gICAgICBwYXRoID0gbm9ybWFsaXplKHBhdGgpO1xuICAgICAgaWYgKHRoaXMuX19kYXRhTGlua2VkUGF0aHMpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX19kYXRhTGlua2VkUGF0aHNbcGF0aF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTm90aWZ5IHRoYXQgYW4gYXJyYXkgaGFzIGNoYW5nZWQuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogICAgIHRoaXMuaXRlbXMgPSBbIHtuYW1lOiAnSmltJ30sIHtuYW1lOiAnVG9kZCd9LCB7bmFtZTogJ0JpbGwnfSBdO1xuICAgICAqICAgICAuLi5cbiAgICAgKiAgICAgdGhpcy5pdGVtcy5zcGxpY2UoMSwgMSwge25hbWU6ICdTYW0nfSk7XG4gICAgICogICAgIHRoaXMuaXRlbXMucHVzaCh7bmFtZTogJ0JvYid9KTtcbiAgICAgKiAgICAgdGhpcy5ub3RpZnlTcGxpY2VzKCdpdGVtcycsIFtcbiAgICAgKiAgICAgICB7IGluZGV4OiAxLCByZW1vdmVkOiBbe25hbWU6ICdUb2RkJ31dLCBhZGRlZENvdW50OiAxLFxuICAgICAqICAgICAgICAgb2JqZWN0OiB0aGlzLml0ZW1zLCB0eXBlOiAnc3BsaWNlJyB9LFxuICAgICAqICAgICAgIHsgaW5kZXg6IDMsIHJlbW92ZWQ6IFtdLCBhZGRlZENvdW50OiAxLFxuICAgICAqICAgICAgICAgb2JqZWN0OiB0aGlzLml0ZW1zLCB0eXBlOiAnc3BsaWNlJ31cbiAgICAgKiAgICAgXSk7XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRoYXQgc2hvdWxkIGJlIG5vdGlmaWVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNwbGljZXMgQXJyYXkgb2Ygc3BsaWNlIHJlY29yZHMgaW5kaWNhdGluZyBvcmRlcmVkXG4gICAgICogICBjaGFuZ2VzIHRoYXQgb2NjdXJyZWQgdG8gdGhlIGFycmF5LiBFYWNoIHJlY29yZCBzaG91bGQgaGF2ZSB0aGVcbiAgICAgKiAgIGZvbGxvd2luZyBmaWVsZHM6XG4gICAgICogICAgKiBpbmRleDogaW5kZXggYXQgd2hpY2ggdGhlIGNoYW5nZSBvY2N1cnJlZFxuICAgICAqICAgICogcmVtb3ZlZDogYXJyYXkgb2YgaXRlbXMgdGhhdCB3ZXJlIHJlbW92ZWQgZnJvbSB0aGlzIGluZGV4XG4gICAgICogICAgKiBhZGRlZENvdW50OiBudW1iZXIgb2YgbmV3IGl0ZW1zIGFkZGVkIGF0IHRoaXMgaW5kZXhcbiAgICAgKiAgICAqIG9iamVjdDogYSByZWZlcmVuY2UgdG8gdGhlIGFycmF5IGluIHF1ZXN0aW9uXG4gICAgICogICAgKiB0eXBlOiB0aGUgc3RyaW5nIGxpdGVyYWwgJ3NwbGljZSdcbiAgICAgKlxuICAgICAqICAgTm90ZSB0aGF0IHNwbGljZSByZWNvcmRzIF9tdXN0XyBiZSBub3JtYWxpemVkIHN1Y2ggdGhhdCB0aGV5IGFyZVxuICAgICAqICAgcmVwb3J0ZWQgaW4gaW5kZXggb3JkZXIgKHJhdyByZXN1bHRzIGZyb20gYE9iamVjdC5vYnNlcnZlYCBhcmUgbm90XG4gICAgICogICBvcmRlcmVkIGFuZCBtdXN0IGJlIG5vcm1hbGl6ZWQvbWVyZ2VkIGJlZm9yZSBub3RpZnlpbmcpLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgbm90aWZ5U3BsaWNlcyhwYXRoLCBzcGxpY2VzKSB7XG4gICAgICBsZXQgaW5mbyA9IHtwYXRoOiAnJ307XG4gICAgICBsZXQgYXJyYXkgPSAvKiogQHR5cGUge0FycmF5fSAqLyhnZXQodGhpcywgcGF0aCwgaW5mbykpO1xuICAgICAgbm90aWZ5U3BsaWNlcyh0aGlzLCBhcnJheSwgaW5mby5wYXRoLCBzcGxpY2VzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgZm9yIHJlYWRpbmcgYSB2YWx1ZSBmcm9tIGEgcGF0aC5cbiAgICAgKlxuICAgICAqIE5vdGUsIGlmIGFueSBwYXJ0IGluIHRoZSBwYXRoIGlzIHVuZGVmaW5lZCwgdGhpcyBtZXRob2QgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgICh0aGlzIG1ldGhvZCBkb2VzIG5vdCB0aHJvdyB3aGVuIGRlcmVmZXJlbmNpbmcgdW5kZWZpbmVkXG4gICAgICogcGF0aHMpLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfCFBcnJheTwoc3RyaW5nfG51bWJlcik+KX0gcGF0aCBQYXRoIHRvIHRoZSB2YWx1ZVxuICAgICAqICAgdG8gcmVhZC4gIFRoZSBwYXRoIG1heSBiZSBzcGVjaWZpZWQgYXMgYSBzdHJpbmcgKGUuZy4gYGZvby5iYXIuYmF6YClcbiAgICAgKiAgIG9yIGFuIGFycmF5IG9mIHBhdGggcGFydHMgKGUuZy4gYFsnZm9vLmJhcicsICdiYXonXWApLiAgTm90ZSB0aGF0XG4gICAgICogICBicmFja2V0ZWQgZXhwcmVzc2lvbnMgYXJlIG5vdCBzdXBwb3J0ZWQ7IHN0cmluZy1iYXNlZCBwYXRoIHBhcnRzXG4gICAgICogICAqbXVzdCogYmUgc2VwYXJhdGVkIGJ5IGRvdHMuICBOb3RlIHRoYXQgd2hlbiBkZXJlZmVyZW5jaW5nIGFycmF5XG4gICAgICogICBpbmRpY2VzLCB0aGUgaW5kZXggbWF5IGJlIHVzZWQgYXMgYSBkb3R0ZWQgcGFydCBkaXJlY3RseVxuICAgICAqICAgKGUuZy4gYHVzZXJzLjEyLm5hbWVgIG9yIGBbJ3VzZXJzJywgMTIsICduYW1lJ11gKS5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IHJvb3QgUm9vdCBvYmplY3QgZnJvbSB3aGljaCB0aGUgcGF0aCBpcyBldmFsdWF0ZWQuXG4gICAgICogQHJldHVybiB7Kn0gVmFsdWUgYXQgdGhlIHBhdGgsIG9yIGB1bmRlZmluZWRgIGlmIGFueSBwYXJ0IG9mIHRoZSBwYXRoXG4gICAgICogICBpcyB1bmRlZmluZWQuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldChwYXRoLCByb290KSB7XG4gICAgICByZXR1cm4gZ2V0KHJvb3QgfHwgdGhpcywgcGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBzZXR0aW5nIGEgdmFsdWUgdG8gYSBwYXRoIGFuZCBub3RpZnlpbmcgYW55XG4gICAgICogZWxlbWVudHMgYm91bmQgdG8gdGhlIHNhbWUgcGF0aC5cbiAgICAgKlxuICAgICAqIE5vdGUsIGlmIGFueSBwYXJ0IGluIHRoZSBwYXRoIGV4Y2VwdCBmb3IgdGhlIGxhc3QgaXMgdW5kZWZpbmVkLFxuICAgICAqIHRoaXMgbWV0aG9kIGRvZXMgbm90aGluZyAodGhpcyBtZXRob2QgZG9lcyBub3QgdGhyb3cgd2hlblxuICAgICAqIGRlcmVmZXJlbmNpbmcgdW5kZWZpbmVkIHBhdGhzKS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7KHN0cmluZ3whQXJyYXk8KHN0cmluZ3xudW1iZXIpPil9IHBhdGggUGF0aCB0byB0aGUgdmFsdWVcbiAgICAgKiAgIHRvIHdyaXRlLiAgVGhlIHBhdGggbWF5IGJlIHNwZWNpZmllZCBhcyBhIHN0cmluZyAoZS5nLiBgJ2Zvby5iYXIuYmF6J2ApXG4gICAgICogICBvciBhbiBhcnJheSBvZiBwYXRoIHBhcnRzIChlLmcuIGBbJ2Zvby5iYXInLCAnYmF6J11gKS4gIE5vdGUgdGhhdFxuICAgICAqICAgYnJhY2tldGVkIGV4cHJlc3Npb25zIGFyZSBub3Qgc3VwcG9ydGVkOyBzdHJpbmctYmFzZWQgcGF0aCBwYXJ0c1xuICAgICAqICAgKm11c3QqIGJlIHNlcGFyYXRlZCBieSBkb3RzLiAgTm90ZSB0aGF0IHdoZW4gZGVyZWZlcmVuY2luZyBhcnJheVxuICAgICAqICAgaW5kaWNlcywgdGhlIGluZGV4IG1heSBiZSB1c2VkIGFzIGEgZG90dGVkIHBhcnQgZGlyZWN0bHlcbiAgICAgKiAgIChlLmcuIGAndXNlcnMuMTIubmFtZSdgIG9yIGBbJ3VzZXJzJywgMTIsICduYW1lJ11gKS5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldCBhdCB0aGUgc3BlY2lmaWVkIHBhdGguXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSByb290IFJvb3Qgb2JqZWN0IGZyb20gd2hpY2ggdGhlIHBhdGggaXMgZXZhbHVhdGVkLlxuICAgICAqICAgV2hlbiBzcGVjaWZpZWQsIG5vIG5vdGlmaWNhdGlvbiB3aWxsIG9jY3VyLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHNldChwYXRoLCB2YWx1ZSwgcm9vdCkge1xuICAgICAgaWYgKHJvb3QpIHtcbiAgICAgICAgc2V0KHJvb3QsIHBhdGgsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpc1tUWVBFUy5SRUFEX09OTFldIHx8ICF0aGlzW1RZUEVTLlJFQURfT05MWV1bLyoqIEB0eXBlIHtzdHJpbmd9ICovKHBhdGgpXSkge1xuICAgICAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgocGF0aCwgdmFsdWUsIHRydWUpKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgaXRlbXMgb250byB0aGUgZW5kIG9mIHRoZSBhcnJheSBhdCB0aGUgcGF0aCBzcGVjaWZpZWQuXG4gICAgICpcbiAgICAgKiBUaGUgYXJndW1lbnRzIGFmdGVyIGBwYXRoYCBhbmQgcmV0dXJuIHZhbHVlIG1hdGNoIHRoYXQgb2ZcbiAgICAgKiBgQXJyYXkucHJvdG90eXBlLnB1c2hgLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgbm90aWZpZXMgb3RoZXIgcGF0aHMgdG8gdGhlIHNhbWUgYXJyYXkgdGhhdCBhXG4gICAgICogc3BsaWNlIG9jY3VycmVkIHRvIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFBhdGggdG8gYXJyYXkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBpdGVtcyBJdGVtcyB0byBwdXNoIG9udG8gYXJyYXlcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IE5ldyBsZW5ndGggb2YgdGhlIGFycmF5LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBwdXNoKHBhdGgsIC4uLml0ZW1zKSB7XG4gICAgICBsZXQgaW5mbyA9IHtwYXRoOiAnJ307XG4gICAgICBsZXQgYXJyYXkgPSAvKiogQHR5cGUge0FycmF5fSovKGdldCh0aGlzLCBwYXRoLCBpbmZvKSk7XG4gICAgICBsZXQgbGVuID0gYXJyYXkubGVuZ3RoO1xuICAgICAgbGV0IHJldCA9IGFycmF5LnB1c2goLi4uaXRlbXMpO1xuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICBub3RpZnlTcGxpY2UodGhpcywgYXJyYXksIGluZm8ucGF0aCwgbGVuLCBpdGVtcy5sZW5ndGgsIFtdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbiBpdGVtIGZyb20gdGhlIGVuZCBvZiBhcnJheSBhdCB0aGUgcGF0aCBzcGVjaWZpZWQuXG4gICAgICpcbiAgICAgKiBUaGUgYXJndW1lbnRzIGFmdGVyIGBwYXRoYCBhbmQgcmV0dXJuIHZhbHVlIG1hdGNoIHRoYXQgb2ZcbiAgICAgKiBgQXJyYXkucHJvdG90eXBlLnBvcGAuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBub3RpZmllcyBvdGhlciBwYXRocyB0byB0aGUgc2FtZSBhcnJheSB0aGF0IGFcbiAgICAgKiBzcGxpY2Ugb2NjdXJyZWQgdG8gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggUGF0aCB0byBhcnJheS5cbiAgICAgKiBAcmV0dXJuIHsqfSBJdGVtIHRoYXQgd2FzIHJlbW92ZWQuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHBvcChwYXRoKSB7XG4gICAgICBsZXQgaW5mbyA9IHtwYXRoOiAnJ307XG4gICAgICBsZXQgYXJyYXkgPSAvKiogQHR5cGUge0FycmF5fSAqLyhnZXQodGhpcywgcGF0aCwgaW5mbykpO1xuICAgICAgbGV0IGhhZExlbmd0aCA9IEJvb2xlYW4oYXJyYXkubGVuZ3RoKTtcbiAgICAgIGxldCByZXQgPSBhcnJheS5wb3AoKTtcbiAgICAgIGlmIChoYWRMZW5ndGgpIHtcbiAgICAgICAgbm90aWZ5U3BsaWNlKHRoaXMsIGFycmF5LCBpbmZvLnBhdGgsIGFycmF5Lmxlbmd0aCwgMCwgW3JldF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydGluZyBmcm9tIHRoZSBzdGFydCBpbmRleCBzcGVjaWZpZWQsIHJlbW92ZXMgMCBvciBtb3JlIGl0ZW1zXG4gICAgICogZnJvbSB0aGUgYXJyYXkgYW5kIGluc2VydHMgMCBvciBtb3JlIG5ldyBpdGVtcyBpbiB0aGVpciBwbGFjZS5cbiAgICAgKlxuICAgICAqIFRoZSBhcmd1bWVudHMgYWZ0ZXIgYHBhdGhgIGFuZCByZXR1cm4gdmFsdWUgbWF0Y2ggdGhhdCBvZlxuICAgICAqIGBBcnJheS5wcm90b3R5cGUuc3BsaWNlYC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG5vdGlmaWVzIG90aGVyIHBhdGhzIHRvIHRoZSBzYW1lIGFycmF5IHRoYXQgYVxuICAgICAqIHNwbGljZSBvY2N1cnJlZCB0byB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIGFycmF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBJbmRleCBmcm9tIHdoaWNoIHRvIHN0YXJ0IHJlbW92aW5nL2luc2VydGluZy5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGRlbGV0ZUNvdW50IE51bWJlciBvZiBpdGVtcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBpdGVtcyBJdGVtcyB0byBpbnNlcnQgaW50byBhcnJheS5cbiAgICAgKiBAcmV0dXJuIHshQXJyYXl9IEFycmF5IG9mIHJlbW92ZWQgaXRlbXMuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHNwbGljZShwYXRoLCBzdGFydCwgZGVsZXRlQ291bnQsIC4uLml0ZW1zKSB7XG4gICAgICBsZXQgaW5mbyA9IHtwYXRoIDogJyd9O1xuICAgICAgbGV0IGFycmF5ID0gLyoqIEB0eXBlIHtBcnJheX0gKi8oZ2V0KHRoaXMsIHBhdGgsIGluZm8pKTtcbiAgICAgIC8vIE5vcm1hbGl6ZSBmYW5jeSBuYXRpdmUgc3BsaWNlIGhhbmRsaW5nIG9mIGNyYXp5IHN0YXJ0IHZhbHVlc1xuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IGFycmF5Lmxlbmd0aCAtIE1hdGguZmxvb3IoLXN0YXJ0KTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnQpIHtcbiAgICAgICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIC8vIGFycmF5LnNwbGljZSBkb2VzIGRpZmZlcmVudCB0aGluZ3MgYmFzZWQgb24gdGhlIG51bWJlciBvZiBhcmd1bWVudHNcbiAgICAgIC8vIHlvdSBwYXNzIGluLiBUaGVyZWZvcmUsIGFycmF5LnNwbGljZSgwKSBhbmQgYXJyYXkuc3BsaWNlKDAsIHVuZGVmaW5lZClcbiAgICAgIC8vIGRvIGRpZmZlcmVudCB0aGluZ3MuIEluIHRoZSBmb3JtZXIsIHRoZSB3aG9sZSBhcnJheSBpcyBjbGVhcmVkLiBJbiB0aGVcbiAgICAgIC8vIGxhdHRlciwgbm8gaXRlbXMgYXJlIHJlbW92ZWQuXG4gICAgICAvLyBUaGlzIG1lYW5zIHRoYXQgd2UgbmVlZCB0byBkZXRlY3Qgd2hldGhlciAxLiBvbmUgb2YgdGhlIGFyZ3VtZW50c1xuICAgICAgLy8gaXMgYWN0dWFsbHkgcGFzc2VkIGluIGFuZCB0aGVuIDIuIGRldGVybWluZSBob3cgbWFueSBhcmd1bWVudHNcbiAgICAgIC8vIHdlIHNob3VsZCBwYXNzIG9uIHRvIHRoZSBuYXRpdmUgYXJyYXkuc3BsaWNlXG4gICAgICAvL1xuICAgICAgbGV0IHJldDtcbiAgICAgIC8vIE9taXQgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGlmIHRoZXkgd2VyZSBub3QgcGFzc2VkIGluXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICByZXQgPSBhcnJheS5zcGxpY2Uoc3RhcnQpO1xuICAgICAgLy8gRWl0aGVyIHN0YXJ0IHdhcyB1bmRlZmluZWQgYW5kIHRoZSBvdGhlcnMgd2VyZSBkZWZpbmVkLCBidXQgaW4gdGhpc1xuICAgICAgLy8gY2FzZSB3ZSBjYW4gc2FmZWx5IHBhc3Mgb24gYWxsIGFyZ3VtZW50c1xuICAgICAgLy9cbiAgICAgIC8vIE5vdGU6IHRoaXMgaW5jbHVkZXMgdGhlIGNhc2Ugd2hlcmUgbm9uZSBvZiB0aGUgYXJndW1lbnRzIHdlcmUgcGFzc2VkIGluLFxuICAgICAgLy8gZS5nLiB0aGlzLnNwbGljZSgnYXJyYXknKS4gSG93ZXZlciwgaWYgYm90aCBzdGFydCBhbmQgZGVsZXRlQ291bnRcbiAgICAgIC8vIGFyZSB1bmRlZmluZWQsIGFycmF5LnNwbGljZSB3aWxsIG5vdCBtb2RpZnkgdGhlIGFycmF5IChhcyBleHBlY3RlZClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldCA9IGFycmF5LnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQsIC4uLml0ZW1zKTtcbiAgICAgIH1cbiAgICAgIC8vIEF0IHRoZSBlbmQsIGNoZWNrIHdoZXRoZXIgYW55IGl0ZW1zIHdlcmUgcGFzc2VkIGluIChlLmcuIGluc2VydGlvbnMpXG4gICAgICAvLyBvciBpZiB0aGUgcmV0dXJuIGFycmF5IGNvbnRhaW5zIGl0ZW1zIChlLmcuIGRlbGV0aW9ucykuXG4gICAgICAvLyBPbmx5IG5vdGlmeSBpZiBpdGVtcyB3ZXJlIGFkZGVkIG9yIGRlbGV0ZWQuXG4gICAgICBpZiAoaXRlbXMubGVuZ3RoIHx8IHJldC5sZW5ndGgpIHtcbiAgICAgICAgbm90aWZ5U3BsaWNlKHRoaXMsIGFycmF5LCBpbmZvLnBhdGgsIHN0YXJ0LCBpdGVtcy5sZW5ndGgsIHJldCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYW4gaXRlbSBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgYXJyYXkgYXQgdGhlIHBhdGggc3BlY2lmaWVkLlxuICAgICAqXG4gICAgICogVGhlIGFyZ3VtZW50cyBhZnRlciBgcGF0aGAgYW5kIHJldHVybiB2YWx1ZSBtYXRjaCB0aGF0IG9mXG4gICAgICogYEFycmF5LnByb3RvdHlwZS5wb3BgLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgbm90aWZpZXMgb3RoZXIgcGF0aHMgdG8gdGhlIHNhbWUgYXJyYXkgdGhhdCBhXG4gICAgICogc3BsaWNlIG9jY3VycmVkIHRvIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFBhdGggdG8gYXJyYXkuXG4gICAgICogQHJldHVybiB7Kn0gSXRlbSB0aGF0IHdhcyByZW1vdmVkLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzaGlmdChwYXRoKSB7XG4gICAgICBsZXQgaW5mbyA9IHtwYXRoOiAnJ307XG4gICAgICBsZXQgYXJyYXkgPSAvKiogQHR5cGUge0FycmF5fSAqLyhnZXQodGhpcywgcGF0aCwgaW5mbykpO1xuICAgICAgbGV0IGhhZExlbmd0aCA9IEJvb2xlYW4oYXJyYXkubGVuZ3RoKTtcbiAgICAgIGxldCByZXQgPSBhcnJheS5zaGlmdCgpO1xuICAgICAgaWYgKGhhZExlbmd0aCkge1xuICAgICAgICBub3RpZnlTcGxpY2UodGhpcywgYXJyYXksIGluZm8ucGF0aCwgMCwgMCwgW3JldF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGl0ZW1zIG9udG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXkgYXQgdGhlIHBhdGggc3BlY2lmaWVkLlxuICAgICAqXG4gICAgICogVGhlIGFyZ3VtZW50cyBhZnRlciBgcGF0aGAgYW5kIHJldHVybiB2YWx1ZSBtYXRjaCB0aGF0IG9mXG4gICAgICogYEFycmF5LnByb3RvdHlwZS5wdXNoYC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG5vdGlmaWVzIG90aGVyIHBhdGhzIHRvIHRoZSBzYW1lIGFycmF5IHRoYXQgYVxuICAgICAqIHNwbGljZSBvY2N1cnJlZCB0byB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIGFycmF5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gaXRlbXMgSXRlbXMgdG8gaW5zZXJ0IGluZm8gYXJyYXlcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IE5ldyBsZW5ndGggb2YgdGhlIGFycmF5LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICB1bnNoaWZ0KHBhdGgsIC4uLml0ZW1zKSB7XG4gICAgICBsZXQgaW5mbyA9IHtwYXRoOiAnJ307XG4gICAgICBsZXQgYXJyYXkgPSAvKiogQHR5cGUge0FycmF5fSAqLyhnZXQodGhpcywgcGF0aCwgaW5mbykpO1xuICAgICAgbGV0IHJldCA9IGFycmF5LnVuc2hpZnQoLi4uaXRlbXMpO1xuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICBub3RpZnlTcGxpY2UodGhpcywgYXJyYXksIGluZm8ucGF0aCwgMCwgaXRlbXMubGVuZ3RoLCBbXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE5vdGlmeSB0aGF0IGEgcGF0aCBoYXMgY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiAgICAgdGhpcy5pdGVtLnVzZXIubmFtZSA9ICdCb2InO1xuICAgICAqICAgICB0aGlzLm5vdGlmeVBhdGgoJ2l0ZW0udXNlci5uYW1lJyk7XG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRoYXQgc2hvdWxkIGJlIG5vdGlmaWVkLlxuICAgICAqIEBwYXJhbSB7Kj19IHZhbHVlIFZhbHVlIGF0IHRoZSBwYXRoIChvcHRpb25hbCkuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgbm90aWZ5UGF0aChwYXRoLCB2YWx1ZSkge1xuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICBsZXQgcHJvcFBhdGg7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIC8vIEdldCB2YWx1ZSBpZiBub3Qgc3VwcGxpZWRcbiAgICAgICAgbGV0IGluZm8gPSB7cGF0aDogJyd9O1xuICAgICAgICB2YWx1ZSA9IGdldCh0aGlzLCBwYXRoLCBpbmZvKTtcbiAgICAgICAgcHJvcFBhdGggPSBpbmZvLnBhdGg7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGF0aCkpIHtcbiAgICAgICAgLy8gTm9ybWFsaXplIHBhdGggaWYgbmVlZGVkXG4gICAgICAgIHByb3BQYXRoID0gbm9ybWFsaXplKHBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvcFBhdGggPSAvKiogQHR5cGV7c3RyaW5nfSAqLyhwYXRoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgocHJvcFBhdGgsIHZhbHVlLCB0cnVlLCB0cnVlKSkge1xuICAgICAgICB0aGlzLl9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVxdWl2YWxlbnQgdG8gc3RhdGljIGBjcmVhdGVSZWFkT25seVByb3BlcnR5YCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgKiBhbiBpbnN0YW5jZSB0byBhZGQgZWZmZWN0cyBhdCBydW50aW1lLiAgU2VlIHRoYXQgbWV0aG9kIGZvclxuICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHByb3RlY3RlZFNldHRlciBDcmVhdGVzIGEgY3VzdG9tIHByb3RlY3RlZCBzZXR0ZXJcbiAgICAgKiAgIHdoZW4gYHRydWVgLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9jcmVhdGVSZWFkT25seVByb3BlcnR5KHByb3BlcnR5LCBwcm90ZWN0ZWRTZXR0ZXIpIHtcbiAgICAgIHRoaXMuX2FkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5SRUFEX09OTFkpO1xuICAgICAgaWYgKHByb3RlY3RlZFNldHRlcikge1xuICAgICAgICB0aGlzWydfc2V0JyArIHVwcGVyKHByb3BlcnR5KV0gPSAvKiogQHRoaXMge1Byb3BlcnR5RWZmZWN0c30gKi9mdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHRoaXMuX3NldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGNyZWF0ZVByb3BlcnR5T2JzZXJ2ZXJgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICogZnVsbCBBUEkgZG9jcy5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb24oKiwqKX0gbWV0aG9kIEZ1bmN0aW9uIG9yIG5hbWUgb2Ygb2JzZXJ2ZXIgbWV0aG9kXG4gICAgICogICAgIHRvIGNhbGxcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBkeW5hbWljRm4gV2hldGhlciB0aGUgbWV0aG9kIG5hbWUgc2hvdWxkIGJlIGluY2x1ZGVkIGFzXG4gICAgICogICBhIGRlcGVuZGVuY3kgdG8gdGhlIGVmZmVjdC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfY3JlYXRlUHJvcGVydHlPYnNlcnZlcihwcm9wZXJ0eSwgbWV0aG9kLCBkeW5hbWljRm4pIHtcbiAgICAgIGxldCBpbmZvID0geyBwcm9wZXJ0eSwgbWV0aG9kLCBkeW5hbWljRm46IEJvb2xlYW4oZHluYW1pY0ZuKSB9O1xuICAgICAgdGhpcy5fYWRkUHJvcGVydHlFZmZlY3QocHJvcGVydHksIFRZUEVTLk9CU0VSVkUsIHtcbiAgICAgICAgZm46IHJ1bk9ic2VydmVyRWZmZWN0LCBpbmZvLCB0cmlnZ2VyOiB7bmFtZTogcHJvcGVydHl9XG4gICAgICB9KTtcbiAgICAgIGlmIChkeW5hbWljRm4pIHtcbiAgICAgICAgdGhpcy5fYWRkUHJvcGVydHlFZmZlY3QoLyoqIEB0eXBlIHtzdHJpbmd9ICovKG1ldGhvZCksIFRZUEVTLk9CU0VSVkUsIHtcbiAgICAgICAgICBmbjogcnVuT2JzZXJ2ZXJFZmZlY3QsIGluZm8sIHRyaWdnZXI6IHtuYW1lOiBtZXRob2R9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVxdWl2YWxlbnQgdG8gc3RhdGljIGBjcmVhdGVNZXRob2RPYnNlcnZlcmAgQVBJIGJ1dCBjYW4gYmUgY2FsbGVkIG9uXG4gICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gTWV0aG9kIGV4cHJlc3Npb25cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0PX0gZHluYW1pY0ZuIEJvb2xlYW4gb3Igb2JqZWN0IG1hcCBpbmRpY2F0aW5nXG4gICAgICogICB3aGV0aGVyIG1ldGhvZCBuYW1lcyBzaG91bGQgYmUgaW5jbHVkZWQgYXMgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2NyZWF0ZU1ldGhvZE9ic2VydmVyKGV4cHJlc3Npb24sIGR5bmFtaWNGbikge1xuICAgICAgbGV0IHNpZyA9IHBhcnNlTWV0aG9kKGV4cHJlc3Npb24pO1xuICAgICAgaWYgKCFzaWcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIG9ic2VydmVyIGV4cHJlc3Npb24gJ1wiICsgZXhwcmVzc2lvbiArIFwiJ1wiKTtcbiAgICAgIH1cbiAgICAgIGNyZWF0ZU1ldGhvZEVmZmVjdCh0aGlzLCBzaWcsIFRZUEVTLk9CU0VSVkUsIHJ1bk1ldGhvZEVmZmVjdCwgbnVsbCwgZHluYW1pY0ZuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgY3JlYXRlTm90aWZ5aW5nUHJvcGVydHlgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICogZnVsbCBBUEkgZG9jcy5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2NyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgICB0aGlzLl9hZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuTk9USUZZLCB7XG4gICAgICAgIGZuOiBydW5Ob3RpZnlFZmZlY3QsXG4gICAgICAgIGluZm86IHtcbiAgICAgICAgICBldmVudE5hbWU6IGNhbWVsVG9EYXNoQ2FzZShwcm9wZXJ0eSkgKyAnLWNoYW5nZWQnLFxuICAgICAgICAgIHByb3BlcnR5OiBwcm9wZXJ0eVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgY3JlYXRlUmVmbGVjdGVkUHJvcGVydHlgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICogZnVsbCBBUEkgZG9jcy5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gZ28vbWlzc2luZ2ZucHJvcHNcbiAgICAgKi9cbiAgICBfY3JlYXRlUmVmbGVjdGVkUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICAgIGxldCBhdHRyID0gdGhpcy5jb25zdHJ1Y3Rvci5hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgaWYgKGF0dHJbMF0gPT09ICctJykge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1Byb3BlcnR5ICcgKyBwcm9wZXJ0eSArICcgY2Fubm90IGJlIHJlZmxlY3RlZCB0byBhdHRyaWJ1dGUgJyArXG4gICAgICAgICAgYXR0ciArICcgYmVjYXVzZSBcIi1cIiBpcyBub3QgYSB2YWxpZCBzdGFydGluZyBhdHRyaWJ1dGUgbmFtZS4gVXNlIGEgbG93ZXJjYXNlIGZpcnN0IGxldHRlciBmb3IgdGhlIHByb3BlcnR5IGluc3RlYWQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9hZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuUkVGTEVDVCwge1xuICAgICAgICAgIGZuOiBydW5SZWZsZWN0RWZmZWN0LFxuICAgICAgICAgIGluZm86IHtcbiAgICAgICAgICAgIGF0dHJOYW1lOiBhdHRyXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgY3JlYXRlQ29tcHV0ZWRQcm9wZXJ0eWAgQVBJIGJ1dCBjYW4gYmUgY2FsbGVkIG9uXG4gICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgY29tcHV0ZWQgcHJvcGVydHkgdG8gc2V0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gTWV0aG9kIGV4cHJlc3Npb25cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0PX0gZHluYW1pY0ZuIEJvb2xlYW4gb3Igb2JqZWN0IG1hcCBpbmRpY2F0aW5nXG4gICAgICogICB3aGV0aGVyIG1ldGhvZCBuYW1lcyBzaG91bGQgYmUgaW5jbHVkZWQgYXMgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2NyZWF0ZUNvbXB1dGVkUHJvcGVydHkocHJvcGVydHksIGV4cHJlc3Npb24sIGR5bmFtaWNGbikge1xuICAgICAgbGV0IHNpZyA9IHBhcnNlTWV0aG9kKGV4cHJlc3Npb24pO1xuICAgICAgaWYgKCFzaWcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIGNvbXB1dGVkIGV4cHJlc3Npb24gJ1wiICsgZXhwcmVzc2lvbiArIFwiJ1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGluZm8gPSBjcmVhdGVNZXRob2RFZmZlY3QodGhpcywgc2lnLCBUWVBFUy5DT01QVVRFLCBydW5Db21wdXRlZEVmZmVjdCwgcHJvcGVydHksIGR5bmFtaWNGbik7XG4gICAgICAvLyBFZmZlY3RzIGFyZSBub3JtYWxseSBzdG9yZWQgYXMgbWFwIG9mIGRlcGVuZGVuY3ktPmVmZmVjdCwgYnV0IGZvclxuICAgICAgLy8gb3JkZXJlZCBjb21wdXRhdGlvbiwgd2UgYWxzbyBuZWVkIHRyZWUgb2YgY29tcHV0ZWRQcm9wLT5kZXBlbmRlbmNpZXNcbiAgICAgIGVuc3VyZU93bkVmZmVjdE1hcCh0aGlzLCBDT01QVVRFX0lORk8pW3Byb3BlcnR5XSA9IGluZm87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2F0aGVyIHRoZSBhcmd1bWVudCB2YWx1ZXMgZm9yIGEgbWV0aG9kIHNwZWNpZmllZCBpbiB0aGUgcHJvdmlkZWQgYXJyYXlcbiAgICAgKiBvZiBhcmd1bWVudCBtZXRhZGF0YS5cbiAgICAgKlxuICAgICAqIFRoZSBgcGF0aGAgYW5kIGB2YWx1ZWAgYXJndW1lbnRzIGFyZSB1c2VkIHRvIGZpbGwgaW4gd2lsZGNhcmQgZGVzY3JpcHRvclxuICAgICAqIHdoZW4gdGhlIG1ldGhvZCBpcyBiZWluZyBjYWxsZWQgYXMgYSByZXN1bHQgb2YgYSBwYXRoIG5vdGlmaWNhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUFycmF5PCFNZXRob2RBcmc+fSBhcmdzIEFycmF5IG9mIGFyZ3VtZW50IG1ldGFkYXRhXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUHJvcGVydHkvcGF0aCBuYW1lIHRoYXQgdHJpZ2dlcmVkIHRoZSBtZXRob2QgZWZmZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAgICAgKiBAcmV0dXJuIHshQXJyYXk8Kj59IEFycmF5IG9mIGFyZ3VtZW50IHZhbHVlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX21hcnNoYWxBcmdzKGFyZ3MsIHBhdGgsIHByb3BzKSB7XG4gICAgICBjb25zdCBkYXRhID0gdGhpcy5fX2RhdGE7XG4gICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IGk9MCwgbD1hcmdzLmxlbmd0aDsgaTxsOyBpKyspIHtcbiAgICAgICAgbGV0IHtuYW1lLCBzdHJ1Y3R1cmVkLCB3aWxkY2FyZCwgdmFsdWUsIGxpdGVyYWx9ID0gYXJnc1tpXTtcbiAgICAgICAgaWYgKCFsaXRlcmFsKSB7XG4gICAgICAgICAgaWYgKHdpbGRjYXJkKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gaXNEZXNjZW5kYW50KG5hbWUsIHBhdGgpO1xuICAgICAgICAgICAgY29uc3QgcGF0aFZhbHVlID0gZ2V0QXJnVmFsdWUoZGF0YSwgcHJvcHMsIG1hdGNoZXMgPyBwYXRoIDogbmFtZSk7XG4gICAgICAgICAgICB2YWx1ZSA9IHtcbiAgICAgICAgICAgICAgcGF0aDogbWF0Y2hlcyA/IHBhdGggOiBuYW1lLFxuICAgICAgICAgICAgICB2YWx1ZTogcGF0aFZhbHVlLFxuICAgICAgICAgICAgICBiYXNlOiBtYXRjaGVzID8gZ2V0KGRhdGEsIG5hbWUpIDogcGF0aFZhbHVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHN0cnVjdHVyZWQgPyBnZXRBcmdWYWx1ZShkYXRhLCBwcm9wcywgbmFtZSkgOiBkYXRhW25hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBXaGVuIHRoZSBgbGVnYWN5VW5kZWZpbmVkYCBmbGFnIGlzIGVuYWJsZWQsIHBhc3MgYSBuby1vcCB2YWx1ZVxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBvYnNlcnZlciwgY29tcHV0ZWQgcHJvcGVydHksIG9yIGNvbXBvdW5kIGJpbmRpbmcgaXMgYWJvcnRlZC5cbiAgICAgICAgaWYgKGxlZ2FjeVVuZGVmaW5lZCAmJiAhdGhpcy5fb3ZlcnJpZGVMZWdhY3lVbmRlZmluZWQgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBhcmdzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICByZXR1cm4gTk9PUDtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgLy8gLS0gc3RhdGljIGNsYXNzIG1ldGhvZHMgLS0tLS0tLS0tLS0tXG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIGFuIGFjY2Vzc29yIGV4aXN0cyBmb3IgdGhlIHNwZWNpZmllZCBwcm9wZXJ0eSwgYW5kIGFkZHNcbiAgICAgKiB0byBhIGxpc3Qgb2YgXCJwcm9wZXJ0eSBlZmZlY3RzXCIgdGhhdCB3aWxsIHJ1biB3aGVuIHRoZSBhY2Nlc3NvciBmb3JcbiAgICAgKiB0aGUgc3BlY2lmaWVkIHByb3BlcnR5IGlzIHNldC4gIEVmZmVjdHMgYXJlIGdyb3VwZWQgYnkgXCJ0eXBlXCIsIHdoaWNoXG4gICAgICogcm91Z2hseSBjb3JyZXNwb25kcyB0byBhIHBoYXNlIGluIGVmZmVjdCBwcm9jZXNzaW5nLiAgVGhlIGVmZmVjdFxuICAgICAqIG1ldGFkYXRhIHNob3VsZCBiZSBpbiB0aGUgZm9sbG93aW5nIGZvcm06XG4gICAgICpcbiAgICAgKiAgICAge1xuICAgICAqICAgICAgIGZuOiBlZmZlY3RGdW5jdGlvbiwgLy8gUmVmZXJlbmNlIHRvIGZ1bmN0aW9uIHRvIGNhbGwgdG8gcGVyZm9ybSBlZmZlY3RcbiAgICAgKiAgICAgICBpbmZvOiB7IC4uLiB9ICAgICAgIC8vIEVmZmVjdCBtZXRhZGF0YSBwYXNzZWQgdG8gZnVuY3Rpb25cbiAgICAgKiAgICAgICB0cmlnZ2VyOiB7ICAgICAgICAgIC8vIE9wdGlvbmFsIHRyaWdnZXJpbmcgbWV0YWRhdGE7IGlmIG5vdCBwcm92aWRlZFxuICAgICAqICAgICAgICAgbmFtZTogc3RyaW5nICAgICAgLy8gdGhlIHByb3BlcnR5IGlzIHRyZWF0ZWQgYXMgYSB3aWxkY2FyZFxuICAgICAqICAgICAgICAgc3RydWN0dXJlZDogYm9vbGVhblxuICAgICAqICAgICAgICAgd2lsZGNhcmQ6IGJvb2xlYW5cbiAgICAgKiAgICAgICB9XG4gICAgICogICAgIH1cbiAgICAgKlxuICAgICAqIEVmZmVjdHMgYXJlIGNhbGxlZCBmcm9tIGBfcHJvcGVydGllc0NoYW5nZWRgIGluIHRoZSBmb2xsb3dpbmcgb3JkZXIgYnlcbiAgICAgKiB0eXBlOlxuICAgICAqXG4gICAgICogMS4gQ09NUFVURVxuICAgICAqIDIuIFBST1BBR0FURVxuICAgICAqIDMuIFJFRkxFQ1RcbiAgICAgKiA0LiBPQlNFUlZFXG4gICAgICogNS4gTk9USUZZXG4gICAgICpcbiAgICAgKiBFZmZlY3QgZnVuY3Rpb25zIGFyZSBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZTpcbiAgICAgKlxuICAgICAqICAgICBlZmZlY3RGdW5jdGlvbihpbnN0LCBwYXRoLCBwcm9wcywgb2xkUHJvcHMsIGluZm8sIGhhc1BhdGhzKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IHRoYXQgc2hvdWxkIHRyaWdnZXIgdGhlIGVmZmVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIEVmZmVjdCB0eXBlLCBmcm9tIHRoaXMuUFJPUEVSVFlfRUZGRUNUX1RZUEVTXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBlZmZlY3QgRWZmZWN0IG1ldGFkYXRhIG9iamVjdFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGFkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCB0eXBlLCBlZmZlY3QpIHtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9hZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgdHlwZSwgZWZmZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2luZ2xlLXByb3BlcnR5IG9ic2VydmVyIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uKCosKil9IG1ldGhvZCBGdW5jdGlvbiBvciBuYW1lIG9mIG9ic2VydmVyIG1ldGhvZCB0byBjYWxsXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gZHluYW1pY0ZuIFdoZXRoZXIgdGhlIG1ldGhvZCBuYW1lIHNob3VsZCBiZSBpbmNsdWRlZCBhc1xuICAgICAqICAgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlUHJvcGVydHlPYnNlcnZlcihwcm9wZXJ0eSwgbWV0aG9kLCBkeW5hbWljRm4pIHtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVQcm9wZXJ0eU9ic2VydmVyKHByb3BlcnR5LCBtZXRob2QsIGR5bmFtaWNGbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG11bHRpLXByb3BlcnR5IFwibWV0aG9kIG9ic2VydmVyXCIgYmFzZWQgb24gdGhlIHByb3ZpZGVkXG4gICAgICogZXhwcmVzc2lvbiwgd2hpY2ggc2hvdWxkIGJlIGEgc3RyaW5nIGluIHRoZSBmb3JtIG9mIGEgbm9ybWFsIEphdmFTY3JpcHRcbiAgICAgKiBmdW5jdGlvbiBzaWduYXR1cmU6IGAnbWV0aG9kTmFtZShhcmcxLCBbLi4uLCBhcmduXSknYC4gIEVhY2ggYXJndW1lbnRcbiAgICAgKiBzaG91bGQgY29ycmVzcG9uZCB0byBhIHByb3BlcnR5IG9yIHBhdGggaW4gdGhlIGNvbnRleHQgb2YgdGhpc1xuICAgICAqIHByb3RvdHlwZSAob3IgaW5zdGFuY2UpLCBvciBtYXkgYmUgYSBsaXRlcmFsIHN0cmluZyBvciBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBNZXRob2QgZXhwcmVzc2lvblxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3Q9fSBkeW5hbWljRm4gQm9vbGVhbiBvciBvYmplY3QgbWFwIGluZGljYXRpbmdcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqICAgd2hldGhlciBtZXRob2QgbmFtZXMgc2hvdWxkIGJlIGluY2x1ZGVkIGFzIGEgZGVwZW5kZW5jeSB0byB0aGUgZWZmZWN0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVNZXRob2RPYnNlcnZlcihleHByZXNzaW9uLCBkeW5hbWljRm4pIHtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVNZXRob2RPYnNlcnZlcihleHByZXNzaW9uLCBkeW5hbWljRm4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhdXNlcyB0aGUgc2V0dGVyIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkgdG8gZGlzcGF0Y2ggYDxwcm9wZXJ0eT4tY2hhbmdlZGBcbiAgICAgKiBldmVudHMgdG8gbm90aWZ5IG9mIGNoYW5nZXMgdG8gdGhlIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVOb3RpZnlpbmdQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5KHByb3BlcnR5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcmVhZC1vbmx5IGFjY2Vzc29yIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBUbyBzZXQgdGhlIHByb3BlcnR5LCB1c2UgdGhlIHByb3RlY3RlZCBgX3NldFByb3BlcnR5YCBBUEkuXG4gICAgICogVG8gY3JlYXRlIGEgY3VzdG9tIHByb3RlY3RlZCBzZXR0ZXIgKGUuZy4gYF9zZXRNeVByb3AoKWAgZm9yXG4gICAgICogcHJvcGVydHkgYG15UHJvcGApLCBwYXNzIGB0cnVlYCBmb3IgYHByb3RlY3RlZFNldHRlcmAuXG4gICAgICpcbiAgICAgKiBOb3RlLCBpZiB0aGUgcHJvcGVydHkgd2lsbCBoYXZlIG90aGVyIHByb3BlcnR5IGVmZmVjdHMsIHRoaXMgbWV0aG9kXG4gICAgICogc2hvdWxkIGJlIGNhbGxlZCBmaXJzdCwgYmVmb3JlIGFkZGluZyBvdGhlciBlZmZlY3RzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBwcm90ZWN0ZWRTZXR0ZXIgQ3JlYXRlcyBhIGN1c3RvbSBwcm90ZWN0ZWQgc2V0dGVyXG4gICAgICogICB3aGVuIGB0cnVlYC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVSZWFkT25seVByb3BlcnR5KHByb3BlcnR5LCBwcm90ZWN0ZWRTZXR0ZXIpIHtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVSZWFkT25seVByb3BlcnR5KHByb3BlcnR5LCBwcm90ZWN0ZWRTZXR0ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhdXNlcyB0aGUgc2V0dGVyIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkgdG8gcmVmbGVjdCB0aGUgcHJvcGVydHkgdmFsdWVcbiAgICAgKiB0byBhIChkYXNoLWNhc2VkKSBhdHRyaWJ1dGUgb2YgdGhlIHNhbWUgbmFtZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlUmVmbGVjdGVkUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eShwcm9wZXJ0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXB1dGVkIHByb3BlcnR5IHdob3NlIHZhbHVlIGlzIHNldCB0byB0aGUgcmVzdWx0IG9mIHRoZVxuICAgICAqIG1ldGhvZCBkZXNjcmliZWQgYnkgdGhlIGdpdmVuIGBleHByZXNzaW9uYCBlYWNoIHRpbWUgb25lIG9yIG1vcmVcbiAgICAgKiBhcmd1bWVudHMgdG8gdGhlIG1ldGhvZCBjaGFuZ2VzLiAgVGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIGEgc3RyaW5nXG4gICAgICogaW4gdGhlIGZvcm0gb2YgYSBub3JtYWwgSmF2YVNjcmlwdCBmdW5jdGlvbiBzaWduYXR1cmU6XG4gICAgICogYCdtZXRob2ROYW1lKGFyZzEsIFsuLi4sIGFyZ25dKSdgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiBjb21wdXRlZCBwcm9wZXJ0eSB0byBzZXRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBNZXRob2QgZXhwcmVzc2lvblxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3Q9fSBkeW5hbWljRm4gQm9vbGVhbiBvciBvYmplY3QgbWFwIGluZGljYXRpbmcgd2hldGhlclxuICAgICAqICAgbWV0aG9kIG5hbWVzIHNob3VsZCBiZSBpbmNsdWRlZCBhcyBhIGRlcGVuZGVuY3kgdG8gdGhlIGVmZmVjdC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVDb21wdXRlZFByb3BlcnR5KHByb3BlcnR5LCBleHByZXNzaW9uLCBkeW5hbWljRm4pIHtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVDb21wdXRlZFByb3BlcnR5KHByb3BlcnR5LCBleHByZXNzaW9uLCBkeW5hbWljRm4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgcHJvdmlkZWQgdGVtcGxhdGUgdG8gZW5zdXJlIGJpbmRpbmcgZWZmZWN0cyBhcmUgY3JlYXRlZFxuICAgICAqIGZvciB0aGVtLCBhbmQgdGhlbiBlbnN1cmVzIHByb3BlcnR5IGFjY2Vzc29ycyBhcmUgY3JlYXRlZCBmb3IgYW55XG4gICAgICogZGVwZW5kZW50IHByb3BlcnRpZXMgaW4gdGhlIHRlbXBsYXRlLiAgQmluZGluZyBlZmZlY3RzIGZvciBib3VuZFxuICAgICAqIHRlbXBsYXRlcyBhcmUgc3RvcmVkIGluIGEgbGlua2VkIGxpc3Qgb24gdGhlIGluc3RhbmNlIHNvIHRoYXRcbiAgICAgKiB0ZW1wbGF0ZXMgY2FuIGJlIGVmZmljaWVudGx5IHN0YW1wZWQgYW5kIHVuc3RhbXBlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIGNvbnRhaW5pbmcgYmluZGluZ1xuICAgICAqICAgYmluZGluZ3NcbiAgICAgKiBAcmV0dXJuIHshVGVtcGxhdGVJbmZvfSBUZW1wbGF0ZSBtZXRhZGF0YSBvYmplY3RcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgYmluZFRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm90b3R5cGUuX2JpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgfVxuXG4gICAgLy8gLS0gYmluZGluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvKlxuICAgICAqIE92ZXJ2aWV3IG9mIGJpbmRpbmcgZmxvdzpcbiAgICAgKlxuICAgICAqIER1cmluZyBmaW5hbGl6YXRpb24gKGBpbnN0YW5jZUJpbmRpbmc9PWZhbHNlYCwgYHdhc1ByZUJvdW5kPT1mYWxzZWApOlxuICAgICAqICBgX2JpbmRUZW1wbGF0ZSh0LCBmYWxzZSlgIGNhbGxlZCBkaXJlY3RseSBkdXJpbmcgZmluYWxpemF0aW9uIC0gcGFyc2VzXG4gICAgICogIHRoZSB0ZW1wbGF0ZSAoZm9yIHRoZSBmaXJzdCB0aW1lKSwgYW5kIHRoZW4gYXNzaWducyB0aGF0IF9wcm90b3R5cGljYWxfXG4gICAgICogIHRlbXBsYXRlIGluZm8gdG8gYF9fcHJlYm91bmRUZW1wbGF0ZUluZm9gIF9vbiB0aGUgcHJvdG90eXBlXzsgbm90ZSBpblxuICAgICAqICB0aGlzIGNhc2UgYHdhc1ByZUJvdW5kYCBpcyBmYWxzZTsgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSB3ZSdyZSBiaW5kaW5nXG4gICAgICogIGl0LCB0aHVzIHdlIGNyZWF0ZSBhY2Nlc3NvcnMuXG4gICAgICpcbiAgICAgKiBEdXJpbmcgZmlyc3Qgc3RhbXBpbmcgKGBpbnN0YW5jZUJpbmRpbmc9PXRydWVgLCBgd2FzUHJlQm91bmQ9PXRydWVgKTpcbiAgICAgKiAgIGBfc3RhbXBUZW1wbGF0ZWAgY2FsbHMgYF9iaW5kVGVtcGxhdGUodCwgdHJ1ZSlgOiB0aGUgYHRlbXBsYXRlSW5mb2BcbiAgICAgKiAgIHJldHVybmVkIG1hdGNoZXMgdGhlIHByZWJvdW5kIG9uZSwgYW5kIHNvIHRoaXMgaXMgYHdhc1ByZUJvdW5kID09IHRydWVgXG4gICAgICogICBzdGF0ZTsgdGh1cyB3ZSBfc2tpcF8gY3JlYXRpbmcgYWNjZXNzb3JzLCBidXQgX2RvXyBjcmVhdGUgYW4gaW5zdGFuY2VcbiAgICAgKiAgIG9mIHRoZSB0ZW1wbGF0ZSBpbmZvIHRvIHNlcnZlIGFzIHRoZSBzdGFydCBvZiBvdXIgbGlua2VkIGxpc3QgKG5lZWRzIHRvXG4gICAgICogICBiZSBhbiBpbnN0YW5jZSwgbm90IHRoZSBwcm90b3R5cGljYWwgb25lLCBzbyB0aGF0IHdlIGNhbiBhZGQgYG5vZGVMaXN0YFxuICAgICAqICAgdG8gaXQgdG8gY29udGFpbiB0aGUgYG5vZGVJbmZvYC1vcmRlcmVkIGxpc3Qgb2YgaW5zdGFuY2Ugbm9kZXMgZm9yXG4gICAgICogICBiaW5kaW5ncywgYW5kIHNvIHdlIGNhbiBjaGFpbiBydW50aW1lLXN0YW1wZWQgdGVtcGxhdGUgaW5mb3Mgb2ZmIG9mXG4gICAgICogICBpdCkuIEF0IHRoaXMgcG9pbnQsIHRoZSBjYWxsIHRvIGBfc3RhbXBUZW1wbGF0ZWAgY2FsbHNcbiAgICAgKiAgIGBhcHBseVRlbXBsYXRlSW5mb2AgZm9yIGVhY2ggbmVzdGVkIGA8dGVtcGxhdGU+YCBmb3VuZCBkdXJpbmcgcGFyc2luZ1xuICAgICAqICAgdG8gaGFuZCBwcm90b3R5cGljYWwgYF90ZW1wbGF0ZUluZm9gIHRvIHRoZW07IHdlIGFsc28gcGFzcyB0aGUgX3BhcmVudF9cbiAgICAgKiAgIGB0ZW1wbGF0ZUluZm9gIHRvIHRoZSBgPHRlbXBsYXRlPmAgc28gdGhhdCB3ZSBoYXZlIHRoZSBpbnN0YW5jZS10aW1lXG4gICAgICogICBwYXJlbnQgdG8gbGluayB0aGUgYHRlbXBsYXRlSW5mb2AgdW5kZXIgaW4gdGhlIGNhc2UgaXQgd2FzXG4gICAgICogICBydW50aW1lLXN0YW1wZWQuXG4gICAgICpcbiAgICAgKiBEdXJpbmcgc3Vic2VxdWVudCBydW50aW1lIHN0YW1waW5nIChgaW5zdGFuY2VCaW5kaW5nPT10cnVlYCxcbiAgICAgKiAgIGB3YXNQcmVCb3VuZD09ZmFsc2VgKTogYF9zdGFtcFRlbXBsYXRlYCBjYWxscyBgX2JpbmRUZW1wbGF0ZSh0LCB0cnVlKWBcbiAgICAgKiAgIC0gaGVyZSBgdGVtcGxhdGVJbmZvYCBpcyBndWFyYW50ZWVkIHRvIF9ub3RfIG1hdGNoIHRoZSBwcmVib3VuZCBvbmUsXG4gICAgICogICBiZWNhdXNlIGl0IHdhcyBlaXRoZXIgYSBkaWZmZXJlbnQgdGVtcGxhdGUgYWx0b2dldGhlciwgb3IgZXZlbiBpZiBpdFxuICAgICAqICAgd2FzIHRoZSBzYW1lIHRlbXBsYXRlLCB0aGUgc3RlcCBhYm92ZSBjcmVhdGVkIGEgaW5zdGFuY2Ugb2YgdGhlIGluZm87XG4gICAgICogICBpbiB0aGlzIGNhc2UgYHdhc1ByZUJvdW5kID09IGZhbHNlYCwgc28gd2UgX2RvXyBjcmVhdGUgYWNjZXNzb3JzLCBfYW5kX1xuICAgICAqICAgbGluayBhIGluc3RhbmNlIGludG8gdGhlIGxpbmtlZCBsaXN0LlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGJpbmRUZW1wbGF0ZWAgQVBJIGJ1dCBjYW4gYmUgY2FsbGVkIG9uIGFuIGluc3RhbmNlXG4gICAgICogdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3IgZnVsbCBBUEkgZG9jcy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG1heSBiZSBjYWxsZWQgb24gdGhlIHByb3RvdHlwZSAoZm9yIHByb3RvdHlwaWNhbCB0ZW1wbGF0ZVxuICAgICAqIGJpbmRpbmcsIHRvIGF2b2lkIGNyZWF0aW5nIGFjY2Vzc29ycyBldmVyeSBpbnN0YW5jZSkgb25jZSBwZXIgcHJvdG90eXBlLFxuICAgICAqIGFuZCB3aWxsIGJlIGNhbGxlZCB3aXRoIGBydW50aW1lQmluZGluZzogdHJ1ZWAgYnkgYF9zdGFtcFRlbXBsYXRlYCB0b1xuICAgICAqIGNyZWF0ZSBhbmQgbGluayBhbiBpbnN0YW5jZSBvZiB0aGUgdGVtcGxhdGUgbWV0YWRhdGEgYXNzb2NpYXRlZCB3aXRoIGFcbiAgICAgKiBwYXJ0aWN1bGFyIHN0YW1waW5nLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgY29udGFpbmluZyBiaW5kaW5nXG4gICAgICogYmluZGluZ3NcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBpbnN0YW5jZUJpbmRpbmcgV2hlbiBmYWxzZSAoZGVmYXVsdCksIHBlcmZvcm1zXG4gICAgICogXCJwcm90b3R5cGljYWxcIiBiaW5kaW5nIG9mIHRoZSB0ZW1wbGF0ZSBhbmQgb3ZlcndyaXRlcyBhbnkgcHJldmlvdXNseVxuICAgICAqIGJvdW5kIHRlbXBsYXRlIGZvciB0aGUgY2xhc3MuIFdoZW4gdHJ1ZSAoYXMgcGFzc2VkIGZyb21cbiAgICAgKiBgX3N0YW1wVGVtcGxhdGVgKSwgdGhlIHRlbXBsYXRlIGluZm8gaXMgaW5zdGFuY2VkIGFuZCBsaW5rZWQgaW50byB0aGVcbiAgICAgKiBsaXN0IG9mIGJvdW5kIHRlbXBsYXRlcy5cbiAgICAgKiBAcmV0dXJuIHshVGVtcGxhdGVJbmZvfSBUZW1wbGF0ZSBtZXRhZGF0YSBvYmplY3Q7IGZvciBgcnVudGltZUJpbmRpbmdgLFxuICAgICAqIHRoaXMgaXMgYW4gaW5zdGFuY2Ugb2YgdGhlIHByb3RvdHlwaWNhbCB0ZW1wbGF0ZSBpbmZvXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IGdvL21pc3NpbmdmbnByb3BzXG4gICAgICovXG4gICAgX2JpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSwgaW5zdGFuY2VCaW5kaW5nKSB7XG4gICAgICBsZXQgdGVtcGxhdGVJbmZvID0gdGhpcy5jb25zdHJ1Y3Rvci5fcGFyc2VUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICBsZXQgd2FzUHJlQm91bmQgPSB0aGlzLl9fcHJlQm91bmRUZW1wbGF0ZUluZm8gPT0gdGVtcGxhdGVJbmZvO1xuICAgICAgLy8gT3B0aW1pemF0aW9uOiBzaW5jZSB0aGlzIGlzIGNhbGxlZCB0d2ljZSBmb3IgcHJvdG8tYm91bmQgdGVtcGxhdGVzLFxuICAgICAgLy8gZG9uJ3QgYXR0ZW1wdCB0byByZWNyZWF0ZSBhY2Nlc3NvcnMgaWYgdGhpcyB0ZW1wbGF0ZSB3YXMgcHJlLWJvdW5kXG4gICAgICBpZiAoIXdhc1ByZUJvdW5kKSB7XG4gICAgICAgIGZvciAobGV0IHByb3AgaW4gdGVtcGxhdGVJbmZvLnByb3BlcnR5RWZmZWN0cykge1xuICAgICAgICAgIHRoaXMuX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IocHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpbnN0YW5jZUJpbmRpbmcpIHtcbiAgICAgICAgLy8gRm9yIGluc3RhbmNlLXRpbWUgYmluZGluZywgY3JlYXRlIGluc3RhbmNlIG9mIHRlbXBsYXRlIG1ldGFkYXRhXG4gICAgICAgIC8vIGFuZCBsaW5rIGludG8gdHJlZSBvZiB0ZW1wbGF0ZXMgaWYgbmVjZXNzYXJ5XG4gICAgICAgIHRlbXBsYXRlSW5mbyA9IC8qKiBAdHlwZSB7IVRlbXBsYXRlSW5mb30gKi8oT2JqZWN0LmNyZWF0ZSh0ZW1wbGF0ZUluZm8pKTtcbiAgICAgICAgdGVtcGxhdGVJbmZvLndhc1ByZUJvdW5kID0gd2FzUHJlQm91bmQ7XG4gICAgICAgIGlmICghdGhpcy5fX3RlbXBsYXRlSW5mbykge1xuICAgICAgICAgIC8vIFNldCB0aGUgaW5mbyB0byB0aGUgcm9vdCBvZiB0aGUgdHJlZVxuICAgICAgICAgIHRoaXMuX190ZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gQXBwZW5kIHRoaXMgdGVtcGxhdGUgaW5mbyBvbnRvIHRoZSBlbmQgb2YgaXRzIHBhcmVudCB0ZW1wbGF0ZSdzXG4gICAgICAgICAgLy8gbGlzdCwgd2hpY2ggd2lsbCBkZXRlcm1pbmUgdGhlIHRyZWUgc3RydWN0dXJlIHZpYSB3aGljaCBwcm9wZXJ0eVxuICAgICAgICAgIC8vIGVmZmVjdHMgYXJlIHJ1bjsgaWYgdGhpcyB0ZW1wbGF0ZSB3YXMgbm90IG5lc3RlZCBpbiBhbm90aGVyXG4gICAgICAgICAgLy8gdGVtcGxhdGUsIHVzZSB0aGUgcm9vdCB0ZW1wbGF0ZSAodGhlIGZpcnN0IHN0YW1wZWQgb25lKSBhcyB0aGVcbiAgICAgICAgICAvLyBwYXJlbnQuIE5vdGUsIGBwYXJlbnRgIGlzIHRoZSBgdGVtcGxhdGVJbmZvYCBpbnN0YW5jZSBmb3IgdGhpc1xuICAgICAgICAgIC8vIHRlbXBsYXRlJ3MgcGFyZW50IChjb250YWluaW5nKSB0ZW1wbGF0ZSwgd2hpY2ggd2FzIHNldCB1cCBpblxuICAgICAgICAgIC8vIGBhcHBseVRlbXBsYXRlSW5mb2AuICBXaGlsZSBhIGdpdmVuIHRlbXBsYXRlJ3MgYHBhcmVudGAgaXMgc2V0XG4gICAgICAgICAgLy8gYXByaW9yaSwgaXQgaXMgb25seSBhZGRlZCB0byB0aGUgcGFyZW50J3MgY2hpbGQgbGlzdCBhdCB0aGUgcG9pbnRcbiAgICAgICAgICAvLyB0aGF0IGl0IGlzIGJlaW5nIGJvdW5kLCBzaW5jZSBhIHRlbXBsYXRlIG1heSBvciBtYXkgbm90IGV2ZXIgYmVcbiAgICAgICAgICAvLyBzdGFtcGVkLCBhbmQgbWF5IGJlIHN0YW1wZWQgbW9yZSB0aGFuIG9uY2UgKGluIHdoaWNoIGNhc2UgaW5zdGFuY2VzXG4gICAgICAgICAgLy8gb2YgdGhlIHRlbXBsYXRlIGluZm8gd2lsbCBiZSBpbiB0aGUgdHJlZSB1bmRlciBpdHMgcGFyZW50IG1vcmUgdGhhblxuICAgICAgICAgIC8vIG9uY2UpLlxuICAgICAgICAgIGNvbnN0IHBhcmVudCA9IHRlbXBsYXRlLl9wYXJlbnRUZW1wbGF0ZUluZm8gfHwgdGhpcy5fX3RlbXBsYXRlSW5mbztcbiAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IHBhcmVudC5sYXN0Q2hpbGQ7XG4gICAgICAgICAgdGVtcGxhdGVJbmZvLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgICBwYXJlbnQubGFzdENoaWxkID0gdGVtcGxhdGVJbmZvO1xuICAgICAgICAgIHRlbXBsYXRlSW5mby5wcmV2aW91c1NpYmxpbmcgPSBwcmV2aW91cztcbiAgICAgICAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgICAgICAgIHByZXZpb3VzLm5leHRTaWJsaW5nID0gdGVtcGxhdGVJbmZvO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJlbnQuZmlyc3RDaGlsZCA9IHRlbXBsYXRlSW5mbztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX19wcmVCb3VuZFRlbXBsYXRlSW5mbyA9IHRlbXBsYXRlSW5mbztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZW1wbGF0ZUluZm87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIHByb3BlcnR5IGVmZmVjdCB0byB0aGUgZ2l2ZW4gdGVtcGxhdGUgbWV0YWRhdGEsIHdoaWNoIGlzIHJ1blxuICAgICAqIGF0IHRoZSBcInByb3BhZ2F0ZVwiIHN0YWdlIG9mIGBfcHJvcGVydGllc0NoYW5nZWRgIHdoZW4gdGhlIHRlbXBsYXRlXG4gICAgICogaGFzIGJlZW4gYm91bmQgdG8gdGhlIGVsZW1lbnQgdmlhIGBfYmluZFRlbXBsYXRlYC5cbiAgICAgKlxuICAgICAqIFRoZSBgZWZmZWN0YCBvYmplY3Qgc2hvdWxkIG1hdGNoIHRoZSBmb3JtYXQgaW4gYF9hZGRQcm9wZXJ0eUVmZmVjdGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIHRvIGFkZCBlZmZlY3QgdG9cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSB0aGF0IHNob3VsZCB0cmlnZ2VyIHRoZSBlZmZlY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGVmZmVjdCBFZmZlY3QgbWV0YWRhdGEgb2JqZWN0XG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX2FkZFRlbXBsYXRlUHJvcGVydHlFZmZlY3QodGVtcGxhdGVJbmZvLCBwcm9wLCBlZmZlY3QpIHtcbiAgICAgIGxldCBob3N0UHJvcHMgPSB0ZW1wbGF0ZUluZm8uaG9zdFByb3BzID0gdGVtcGxhdGVJbmZvLmhvc3RQcm9wcyB8fCB7fTtcbiAgICAgIGhvc3RQcm9wc1twcm9wXSA9IHRydWU7XG4gICAgICBsZXQgZWZmZWN0cyA9IHRlbXBsYXRlSW5mby5wcm9wZXJ0eUVmZmVjdHMgPSB0ZW1wbGF0ZUluZm8ucHJvcGVydHlFZmZlY3RzIHx8IHt9O1xuICAgICAgbGV0IHByb3BFZmZlY3RzID0gZWZmZWN0c1twcm9wXSA9IGVmZmVjdHNbcHJvcF0gfHwgW107XG4gICAgICBwcm9wRWZmZWN0cy5wdXNoKGVmZmVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhbXBzIHRoZSBwcm92aWRlZCB0ZW1wbGF0ZSBhbmQgcGVyZm9ybXMgaW5zdGFuY2UtdGltZSBzZXR1cCBmb3JcbiAgICAgKiBQb2x5bWVyIHRlbXBsYXRlIGZlYXR1cmVzLCBpbmNsdWRpbmcgZGF0YSBiaW5kaW5ncywgZGVjbGFyYXRpdmUgZXZlbnRcbiAgICAgKiBsaXN0ZW5lcnMsIGFuZCB0aGUgYHRoaXMuJGAgbWFwIG9mIGBpZGAncyB0byBub2Rlcy4gIEEgZG9jdW1lbnQgZnJhZ21lbnRcbiAgICAgKiBpcyByZXR1cm5lZCBjb250YWluaW5nIHRoZSBzdGFtcGVkIERPTSwgcmVhZHkgZm9yIGluc2VydGlvbiBpbnRvIHRoZVxuICAgICAqIERPTS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG1heSBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2U7IGhvd2V2ZXIgbm90ZSB0aGF0IGR1ZSB0b1xuICAgICAqIGBzaGFkeWNzc2AgcG9seWZpbGwgbGltaXRhdGlvbnMsIG9ubHkgc3R5bGVzIGZyb20gdGVtcGxhdGVzIHByZXBhcmVkXG4gICAgICogdXNpbmcgYFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZWAgd2lsbCBiZSBjb3JyZWN0bHkgcG9seWZpbGxlZCAoc2NvcGVkXG4gICAgICogdG8gdGhlIHNoYWRvdyByb290IGFuZCBzdXBwb3J0IENTUyBjdXN0b20gcHJvcGVydGllcyksIGFuZCBub3RlIHRoYXRcbiAgICAgKiBgU2hhZHlDU1MucHJlcGFyZVRlbXBsYXRlYCBtYXkgb25seSBiZSBjYWxsZWQgb25jZSBwZXIgZWxlbWVudC4gQXMgc3VjaCxcbiAgICAgKiBhbnkgc3R5bGVzIHJlcXVpcmVkIGJ5IGluIHJ1bnRpbWUtc3RhbXBlZCB0ZW1wbGF0ZXMgbXVzdCBiZSBpbmNsdWRlZFxuICAgICAqIGluIHRoZSBtYWluIGVsZW1lbnQgdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byBzdGFtcFxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvPX0gdGVtcGxhdGVJbmZvIE9wdGlvbmFsIGJvdW5kIHRlbXBsYXRlIGluZm8gYXNzb2NpYXRlZFxuICAgICAqICAgd2l0aCB0aGUgdGVtcGxhdGUgdG8gYmUgc3RhbXBlZDsgaWYgb21pdHRlZCB0aGUgdGVtcGxhdGUgd2lsbCBiZVxuICAgICAqICAgYXV0b21hdGljYWxseSBib3VuZC5cbiAgICAgKiBAcmV0dXJuIHshU3RhbXBlZFRlbXBsYXRlfSBDbG9uZWQgdGVtcGxhdGUgY29udGVudFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfc3RhbXBUZW1wbGF0ZSh0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvKSB7XG4gICAgICB0ZW1wbGF0ZUluZm8gPSAgdGVtcGxhdGVJbmZvIHx8IC8qKiBAdHlwZSB7IVRlbXBsYXRlSW5mb30gKi8odGhpcy5fYmluZFRlbXBsYXRlKHRlbXBsYXRlLCB0cnVlKSk7XG4gICAgICAvLyBFbnN1cmVzIHRoYXQgY3JlYXRlZCBkb20gaXMgYF9lbnF1ZXVlQ2xpZW50YCdkIHRvIHRoaXMgZWxlbWVudCBzb1xuICAgICAgLy8gdGhhdCBpdCBjYW4gYmUgZmx1c2hlZCBvbiBuZXh0IGNhbGwgdG8gYF9mbHVzaFByb3BlcnRpZXNgXG4gICAgICBob3N0U3RhY2sucHVzaCh0aGlzKTtcbiAgICAgIGxldCBkb20gPSBzdXBlci5fc3RhbXBUZW1wbGF0ZSh0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvKTtcbiAgICAgIGhvc3RTdGFjay5wb3AoKTtcbiAgICAgIC8vIEFkZCB0ZW1wbGF0ZS1pbnN0YW5jZS1zcGVjaWZpYyBkYXRhIHRvIGluc3RhbmNlZCB0ZW1wbGF0ZUluZm9cbiAgICAgIHRlbXBsYXRlSW5mby5ub2RlTGlzdCA9IGRvbS5ub2RlTGlzdDtcbiAgICAgIC8vIENhcHR1cmUgY2hpbGQgbm9kZXMgdG8gYWxsb3cgdW5zdGFtcGluZyBvZiBub24tcHJvdG90eXBpY2FsIHRlbXBsYXRlc1xuICAgICAgaWYgKCF0ZW1wbGF0ZUluZm8ud2FzUHJlQm91bmQpIHtcbiAgICAgICAgbGV0IG5vZGVzID0gdGVtcGxhdGVJbmZvLmNoaWxkTm9kZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgbj1kb20uZmlyc3RDaGlsZDsgbjsgbj1uLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgbm9kZXMucHVzaChuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZG9tLnRlbXBsYXRlSW5mbyA9IHRlbXBsYXRlSW5mbztcbiAgICAgIC8vIFNldHVwIGNvbXBvdW5kIHN0b3JhZ2UsIDItd2F5IGxpc3RlbmVycywgYW5kIGRhdGFIb3N0IGZvciBiaW5kaW5nc1xuICAgICAgc2V0dXBCaW5kaW5ncyh0aGlzLCB0ZW1wbGF0ZUluZm8pO1xuICAgICAgLy8gRmx1c2ggcHJvcGVydGllcyBpbnRvIHRlbXBsYXRlIG5vZGVzOyB0aGUgY2hlY2sgb24gYF9fZGF0YUNsaWVudHNSZWFkeWBcbiAgICAgIC8vIGVuc3VyZXMgd2UgZG9uJ3QgbmVlZGxlc3NseSBydW4gZWZmZWN0cyBmb3IgYW4gZWxlbWVudCdzIGluaXRpYWxcbiAgICAgIC8vIHByb3RvdHlwaWNhbCB0ZW1wbGF0ZSBzdGFtcGluZyBzaW5jZSB0aGV5IHdpbGwgaGFwcGVuIGFzIGEgcGFydCBvZiB0aGVcbiAgICAgIC8vIGZpcnN0IGNhbGwgdG8gYF9wcm9wZXJ0aWVzQ2hhbmdlZGAuIFRoaXMgZmxhZyBpcyBzZXQgdG8gdHJ1ZVxuICAgICAgLy8gYWZ0ZXIgcnVubmluZyB0aGUgaW5pdGlhbCBwcm9wYWdhdGUgZWZmZWN0cywgYW5kIGltbWVkaWF0ZWx5IGJlZm9yZVxuICAgICAgLy8gZmx1c2hpbmcgY2xpZW50cy4gU2luY2UgZG93bnN0cmVhbSBjbGllbnRzIGNvdWxkIGNhdXNlIHN0YW1waW5nIG9uXG4gICAgICAvLyB0aGlzIGhvc3QgKGUuZy4gYSBmYXN0RG9tSWYgYGRvbS1pZmAgYmVpbmcgZm9yY2VkIHRvIHJlbmRlclxuICAgICAgLy8gc3luY2hyb25vdXNseSksIHRoaXMgZmxhZyBlbnN1cmVzIGVmZmVjdHMgZm9yIHJ1bnRpbWUtc3RhbXBlZCB0ZW1wbGF0ZXNcbiAgICAgIC8vIGFyZSBydW4gYXQgdGhpcyBwb2ludCBkdXJpbmcgdGhlIGluaXRpYWwgZWxlbWVudCBib290LXVwLlxuICAgICAgaWYgKHRoaXMuX19kYXRhQ2xpZW50c1JlYWR5KSB7XG4gICAgICAgIHRoaXMuX3J1bkVmZmVjdHNGb3JUZW1wbGF0ZSh0ZW1wbGF0ZUluZm8sIHRoaXMuX19kYXRhLCBudWxsLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuX2ZsdXNoQ2xpZW50cygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRvbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFuZCB1bmJpbmRzIHRoZSBub2RlcyBwcmV2aW91c2x5IGNvbnRhaW5lZCBpbiB0aGUgcHJvdmlkZWRcbiAgICAgKiBEb2N1bWVudEZyYWdtZW50IHJldHVybmVkIGZyb20gYF9zdGFtcFRlbXBsYXRlYC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7IVN0YW1wZWRUZW1wbGF0ZX0gZG9tIERvY3VtZW50RnJhZ21lbnQgcHJldmlvdXNseSByZXR1cm5lZFxuICAgICAqICAgZnJvbSBgX3N0YW1wVGVtcGxhdGVgIGFzc29jaWF0ZWQgd2l0aCB0aGUgbm9kZXMgdG8gYmUgcmVtb3ZlZFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9yZW1vdmVCb3VuZERvbShkb20pIHtcbiAgICAgIC8vIFVubGluayB0ZW1wbGF0ZSBpbmZvOyBOb3RlIHRoYXQgd2hpbGUgdGhlIGNoaWxkIGlzIHVubGlua2VkIGZyb20gaXRzXG4gICAgICAvLyBwYXJlbnQgbGlzdCwgYSB0ZW1wbGF0ZSdzIGBwYXJlbnRgIHJlZmVyZW5jZSBpcyBuZXZlciByZW1vdmVkLCBzaW5jZVxuICAgICAgLy8gdGhpcyBpcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSB0cmVlIHN0cnVjdHVyZSBhbmQgYXBwbGllZCBhdFxuICAgICAgLy8gYGFwcGx5VGVtcGxhdGVJbmZvYCB0aW1lLlxuICAgICAgY29uc3QgdGVtcGxhdGVJbmZvID0gZG9tLnRlbXBsYXRlSW5mbztcbiAgICAgIGNvbnN0IHtwcmV2aW91c1NpYmxpbmcsIG5leHRTaWJsaW5nLCBwYXJlbnR9ID0gdGVtcGxhdGVJbmZvO1xuICAgICAgaWYgKHByZXZpb3VzU2libGluZykge1xuICAgICAgICBwcmV2aW91c1NpYmxpbmcubmV4dFNpYmxpbmcgPSBuZXh0U2libGluZztcbiAgICAgIH0gZWxzZSBpZiAocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5maXJzdENoaWxkID0gbmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgICBpZiAobmV4dFNpYmxpbmcpIHtcbiAgICAgICAgbmV4dFNpYmxpbmcucHJldmlvdXNTaWJsaW5nID0gcHJldmlvdXNTaWJsaW5nO1xuICAgICAgfSBlbHNlIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50Lmxhc3RDaGlsZCA9IHByZXZpb3VzU2libGluZztcbiAgICAgIH1cbiAgICAgIHRlbXBsYXRlSW5mby5uZXh0U2libGluZyA9IHRlbXBsYXRlSW5mby5wcmV2aW91c1NpYmxpbmcgPSBudWxsO1xuICAgICAgLy8gUmVtb3ZlIHN0YW1wZWQgbm9kZXNcbiAgICAgIGxldCBub2RlcyA9IHRlbXBsYXRlSW5mby5jaGlsZE5vZGVzO1xuICAgICAgZm9yIChsZXQgaT0wOyBpPG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIHdyYXAod3JhcChub2RlKS5wYXJlbnROb2RlKS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgZGVmYXVsdCBgVGVtcGxhdGVTdGFtcGAgaW1wbGVtZW50YXRpb24gdG8gYWRkIHN1cHBvcnQgZm9yXG4gICAgICogcGFyc2luZyBiaW5kaW5ncyBmcm9tIGBUZXh0Tm9kZWAncycgYHRleHRDb250ZW50YC4gIEEgYGJpbmRpbmdzYFxuICAgICAqIGFycmF5IGlzIGFkZGVkIHRvIGBub2RlSW5mb2AgYW5kIHBvcHVsYXRlZCB3aXRoIGJpbmRpbmcgbWV0YWRhdGFcbiAgICAgKiB3aXRoIGluZm9ybWF0aW9uIGNhcHR1cmluZyB0aGUgYmluZGluZyB0YXJnZXQsIGFuZCBhIGBwYXJ0c2AgYXJyYXlcbiAgICAgKiB3aXRoIG9uZSBvciBtb3JlIG1ldGFkYXRhIG9iamVjdHMgY2FwdHVyaW5nIHRoZSBzb3VyY2Uocykgb2YgdGhlXG4gICAgICogYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIHRvIHBhcnNlXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7Tm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUgbm9kZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmlzaXRlZCBub2RlIGFkZGVkIG5vZGUtc3BlY2lmaWNcbiAgICAgKiAgIG1ldGFkYXRhIHRvIGBub2RlSW5mb2BcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVOb2RlKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgIC8vIFRPRE8oaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWNvbXBpbGVyL2lzc3Vlcy8zMjQwKTpcbiAgICAgIC8vICAgICBDaGFuZ2UgYmFjayB0byBqdXN0IHN1cGVyLm1ldGhvZENhbGwoKVxuICAgICAgbGV0IG5vdGVkID0gcHJvcGVydHlFZmZlY3RzQmFzZS5fcGFyc2VUZW1wbGF0ZU5vZGUuY2FsbChcbiAgICAgICAgdGhpcywgbm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbyk7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgbGV0IHBhcnRzID0gdGhpcy5fcGFyc2VCaW5kaW5ncyhub2RlLnRleHRDb250ZW50LCB0ZW1wbGF0ZUluZm8pO1xuICAgICAgICBpZiAocGFydHMpIHtcbiAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSB0ZXh0Q29udGVudCB3aXRoIGFueSBsaXRlcmFsIHBhcnRzXG4gICAgICAgICAgLy8gTk9URTogZGVmYXVsdCB0byBhIHNwYWNlIGhlcmUgc28gdGhlIHRleHROb2RlIHJlbWFpbnM7IHNvbWUgYnJvd3NlcnNcbiAgICAgICAgICAvLyAoSUUpIG9taXQgYW4gZW1wdHkgdGV4dE5vZGUgZm9sbG93aW5nIGNsb25lTm9kZS9pbXBvcnROb2RlLlxuICAgICAgICAgIG5vZGUudGV4dENvbnRlbnQgPSBsaXRlcmFsRnJvbVBhcnRzKHBhcnRzKSB8fCAnICc7XG4gICAgICAgICAgYWRkQmluZGluZyh0aGlzLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCAndGV4dCcsICd0ZXh0Q29udGVudCcsIHBhcnRzKTtcbiAgICAgICAgICBub3RlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBub3RlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgZGVmYXVsdCBgVGVtcGxhdGVTdGFtcGAgaW1wbGVtZW50YXRpb24gdG8gYWRkIHN1cHBvcnQgZm9yXG4gICAgICogcGFyc2luZyBiaW5kaW5ncyBmcm9tIGF0dHJpYnV0ZXMuICBBIGBiaW5kaW5nc2BcbiAgICAgKiBhcnJheSBpcyBhZGRlZCB0byBgbm9kZUluZm9gIGFuZCBwb3B1bGF0ZWQgd2l0aCBiaW5kaW5nIG1ldGFkYXRhXG4gICAgICogd2l0aCBpbmZvcm1hdGlvbiBjYXB0dXJpbmcgdGhlIGJpbmRpbmcgdGFyZ2V0LCBhbmQgYSBgcGFydHNgIGFycmF5XG4gICAgICogd2l0aCBvbmUgb3IgbW9yZSBtZXRhZGF0YSBvYmplY3RzIGNhcHR1cmluZyB0aGUgc291cmNlKHMpIG9mIHRoZVxuICAgICAqIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgTm9kZSB0byBwYXJzZVxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0ge05vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlIG5vZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBdHRyaWJ1dGUgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBBdHRyaWJ1dGUgdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZpc2l0ZWQgbm9kZSBhZGRlZCBub2RlLXNwZWNpZmljXG4gICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IEludGVyZmFjZXMgaW4gY2xvc3VyZSBkbyBub3QgaW5oZXJpdCBzdGF0aWNzLCBidXQgY2xhc3NlcyBkb1xuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgbGV0IHBhcnRzID0gdGhpcy5fcGFyc2VCaW5kaW5ncyh2YWx1ZSwgdGVtcGxhdGVJbmZvKTtcbiAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICAvLyBBdHRyaWJ1dGUgb3IgcHJvcGVydHlcbiAgICAgICAgbGV0IG9yaWdOYW1lID0gbmFtZTtcbiAgICAgICAgbGV0IGtpbmQgPSAncHJvcGVydHknO1xuICAgICAgICAvLyBUaGUgb25seSB3YXkgd2Ugc2VlIGEgY2FwaXRhbCBsZXR0ZXIgaGVyZSBpcyBpZiB0aGUgYXR0ciBoYXNcbiAgICAgICAgLy8gYSBjYXBpdGFsIGxldHRlciBpbiBpdCBwZXIgc3BlYy4gSW4gdGhpcyBjYXNlLCB0byBtYWtlIHN1cmVcbiAgICAgICAgLy8gdGhpcyBiaW5kaW5nIHdvcmtzLCB3ZSBnbyBhaGVhZCBhbmQgbWFrZSB0aGUgYmluZGluZyB0byB0aGUgYXR0cmlidXRlLlxuICAgICAgICBpZiAoY2FwaXRhbEF0dHJpYnV0ZVJlZ2V4LnRlc3QobmFtZSkpIHtcbiAgICAgICAgICBraW5kID0gJ2F0dHJpYnV0ZSc7XG4gICAgICAgIH0gZWxzZSBpZiAobmFtZVtuYW1lLmxlbmd0aC0xXSA9PSAnJCcpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgwLCAtMSk7XG4gICAgICAgICAga2luZCA9ICdhdHRyaWJ1dGUnO1xuICAgICAgICB9XG4gICAgICAgIC8vIEluaXRpYWxpemUgYXR0cmlidXRlIGJpbmRpbmdzIHdpdGggYW55IGxpdGVyYWwgcGFydHNcbiAgICAgICAgbGV0IGxpdGVyYWwgPSBsaXRlcmFsRnJvbVBhcnRzKHBhcnRzKTtcbiAgICAgICAgaWYgKGxpdGVyYWwgJiYga2luZCA9PSAnYXR0cmlidXRlJykge1xuICAgICAgICAgIC8vIEVuc3VyZSBhIFNoYWR5Q1NTIHRlbXBsYXRlIHNjb3BlZCBzdHlsZSBpcyBub3QgcmVtb3ZlZFxuICAgICAgICAgIC8vIHdoZW4gYSBjbGFzcyQgYmluZGluZydzIGluaXRpYWwgbGl0ZXJhbCB2YWx1ZSBpcyBzZXQuXG4gICAgICAgICAgaWYgKG5hbWUgPT0gJ2NsYXNzJyAmJiBub2RlLmhhc0F0dHJpYnV0ZSgnY2xhc3MnKSkge1xuICAgICAgICAgICAgbGl0ZXJhbCArPSAnICcgKyBub2RlLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgbGl0ZXJhbCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3VwcG9ydCBkaXNhYmxlLXVwZ3JhZGVcbiAgICAgICAgaWYgKGtpbmQgPT0gJ2F0dHJpYnV0ZScgJiYgb3JpZ05hbWUgPT0gJ2Rpc2FibGUtdXBncmFkZSQnKSB7XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgJycpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENsZWFyIGF0dHJpYnV0ZSBiZWZvcmUgcmVtb3ZpbmcsIHNpbmNlIElFIHdvbid0IGFsbG93IHJlbW92aW5nXG4gICAgICAgIC8vIGB2YWx1ZWAgYXR0cmlidXRlIGlmIGl0IHByZXZpb3VzbHkgaGFkIGEgdmFsdWUgKGNhbid0XG4gICAgICAgIC8vIHVuY29uZGl0aW9uYWxseSBzZXQgJycgYmVmb3JlIHJlbW92aW5nIHNpbmNlIGF0dHJpYnV0ZXMgd2l0aCBgJGBcbiAgICAgICAgLy8gY2FuJ3QgYmUgc2V0IHVzaW5nIHNldEF0dHJpYnV0ZSlcbiAgICAgICAgaWYgKG5vZGUubG9jYWxOYW1lID09PSAnaW5wdXQnICYmIG9yaWdOYW1lID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUob3JpZ05hbWUsICcnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZW1vdmUgYW5ub3RhdGlvblxuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShvcmlnTmFtZSk7XG4gICAgICAgIC8vIENhc2UgaGFja2VyeTogYXR0cmlidXRlcyBhcmUgbG93ZXItY2FzZSwgYnV0IGJpbmQgdGFyZ2V0c1xuICAgICAgICAvLyAocHJvcGVydGllcykgYXJlIGNhc2Ugc2Vuc2l0aXZlLiBHYW1iaXQgaXMgdG8gbWFwIGRhc2gtY2FzZSB0b1xuICAgICAgICAvLyBjYW1lbC1jYXNlOiBgZm9vLWJhcmAgYmVjb21lcyBgZm9vQmFyYC5cbiAgICAgICAgLy8gQXR0cmlidXRlIGJpbmRpbmdzIGFyZSBleGNlcHRlZC5cbiAgICAgICAgaWYgKGtpbmQgPT09ICdwcm9wZXJ0eScpIHtcbiAgICAgICAgICBuYW1lID0gZGFzaFRvQ2FtZWxDYXNlKG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGFkZEJpbmRpbmcodGhpcywgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywga2luZCwgbmFtZSwgcGFydHMsIGxpdGVyYWwpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE8oaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWNvbXBpbGVyL2lzc3Vlcy8zMjQwKTpcbiAgICAgICAgLy8gICAgIENoYW5nZSBiYWNrIHRvIGp1c3Qgc3VwZXIubWV0aG9kQ2FsbCgpXG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUVmZmVjdHNCYXNlLl9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZS5jYWxsKFxuICAgICAgICAgIHRoaXMsIG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8sIG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgZGVmYXVsdCBgVGVtcGxhdGVTdGFtcGAgaW1wbGVtZW50YXRpb24gdG8gYWRkIHN1cHBvcnQgZm9yXG4gICAgICogYmluZGluZyB0aGUgcHJvcGVydGllcyB0aGF0IGEgbmVzdGVkIHRlbXBsYXRlIGRlcGVuZHMgb24gdG8gdGhlIHRlbXBsYXRlXG4gICAgICogYXMgYF9ob3N0Xzxwcm9wZXJ0eT5gLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIE5vZGUgdG8gcGFyc2VcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHtOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZSBub2RlXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAqICAgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJbnRlcmZhY2VzIGluIGNsb3N1cmUgZG8gbm90IGluaGVyaXQgc3RhdGljcywgYnV0IGNsYXNzZXMgZG9cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZU5lc3RlZFRlbXBsYXRlKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgIC8vIFRPRE8oaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWNvbXBpbGVyL2lzc3Vlcy8zMjQwKTpcbiAgICAgIC8vICAgICBDaGFuZ2UgYmFjayB0byBqdXN0IHN1cGVyLm1ldGhvZENhbGwoKVxuICAgICAgbGV0IG5vdGVkID0gcHJvcGVydHlFZmZlY3RzQmFzZS5fcGFyc2VUZW1wbGF0ZU5lc3RlZFRlbXBsYXRlLmNhbGwoXG4gICAgICAgIHRoaXMsIG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pO1xuICAgICAgY29uc3QgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgY29uc3QgbmVzdGVkVGVtcGxhdGVJbmZvID0gbm9kZUluZm8udGVtcGxhdGVJbmZvO1xuICAgICAgY29uc3QgaXNEb21JZiA9IHBhcmVudC5sb2NhbE5hbWUgPT09ICdkb20taWYnO1xuICAgICAgY29uc3QgaXNEb21SZXBlYXQgPSBwYXJlbnQubG9jYWxOYW1lID09PSAnZG9tLXJlcGVhdCc7XG4gICAgICAvLyBSZW1vdmUgbmVzdGVkIHRlbXBsYXRlIGFuZCByZWRpcmVjdCBpdHMgaG9zdCBiaW5kaW5ncyAmIHRlbXBsYXRlSW5mb1xuICAgICAgLy8gb250byB0aGUgcGFyZW50IChkb20taWYvcmVwZWF0IGVsZW1lbnQpJ3Mgbm9kZUluZm9cbiAgICAgIGlmIChyZW1vdmVOZXN0ZWRUZW1wbGF0ZXMgJiYgKGlzRG9tSWYgfHwgaXNEb21SZXBlYXQpKSB7XG4gICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgICAgLy8gVXNlIHRoZSBwYXJlbnQncyBub2RlSW5mbyAoZm9yIHRoZSBkb20taWYvcmVwZWF0KSB0byByZWNvcmQgdGhlXG4gICAgICAgIC8vIHRlbXBsYXRlSW5mbywgYW5kIHVzZSB0aGF0IGZvciBhbnkgaG9zdCBwcm9wZXJ0eSBiaW5kaW5ncyBiZWxvd1xuICAgICAgICBub2RlSW5mbyA9IG5vZGVJbmZvLnBhcmVudEluZm87XG4gICAgICAgIG5vZGVJbmZvLnRlbXBsYXRlSW5mbyA9IG5lc3RlZFRlbXBsYXRlSW5mbztcbiAgICAgICAgLy8gRW5zdXJlIHRoZSBwYXJlbnQgZG9tLWlmL3JlcGVhdCBpcyBub3RlZCBzaW5jZSBpdCBub3cgbWF5IGhhdmUgaG9zdFxuICAgICAgICAvLyBiaW5kaW5nczsgaXQgbWF5IG5vdCBoYXZlIGJlZW4gaWYgaXQgZGlkIG5vdCBoYXZlIGl0cyBvd24gYmluZGluZ3NcbiAgICAgICAgbm9kZUluZm8ubm90ZWQgPSB0cnVlO1xuICAgICAgICBub3RlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gTWVyZ2UgaG9zdCBwcm9wcyBpbnRvIG91dGVyIHRlbXBsYXRlIGFuZCBhZGQgYmluZGluZ3NcbiAgICAgIGxldCBob3N0UHJvcHMgPSBuZXN0ZWRUZW1wbGF0ZUluZm8uaG9zdFByb3BzO1xuICAgICAgaWYgKGZhc3REb21JZiAmJiBpc0RvbUlmKSB7XG4gICAgICAgIC8vIGBmYXN0RG9tSWZgIG1vZGUgdXNlcyBydW50aW1lLXRlbXBsYXRlIHN0YW1waW5nIHRvIGFkZCBhY2Nlc3NvcnMvXG4gICAgICAgIC8vIGVmZmVjdHMgdG8gcHJvcGVydGllcyB1c2VkIGluIGl0cyB0ZW1wbGF0ZTsgYXMgc3VjaCB3ZSBkb24ndCBuZWVkIHRvXG4gICAgICAgIC8vIHRheCB0aGUgaG9zdCBlbGVtZW50IHdpdGggYF9ob3N0X2AgYmluZGluZ3MgZm9yIHRoZSBgZG9tLWlmYC5cbiAgICAgICAgLy8gSG93ZXZlciwgaW4gdGhlIGV2ZW50IGl0IGlzIG5lc3RlZCBpbiBhIGBkb20tcmVwZWF0YCwgaXQgaXMgc3RpbGxcbiAgICAgICAgLy8gaW1wb3J0YW50IHRoYXQgaXRzIGhvc3QgcHJvcGVydGllcyBhcmUgYWRkZWQgdG8gdGhlXG4gICAgICAgIC8vIFRlbXBsYXRlSW5zdGFuY2UncyBgaG9zdFByb3BzYCBzbyB0aGF0IHRoZXkgYXJlIGZvcndhcmRlZCB0byB0aGVcbiAgICAgICAgLy8gVGVtcGxhdGVJbnN0YW5jZS5cbiAgICAgICAgaWYgKGhvc3RQcm9wcykge1xuICAgICAgICAgIHRlbXBsYXRlSW5mby5ob3N0UHJvcHMgPVxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0ZW1wbGF0ZUluZm8uaG9zdFByb3BzIHx8IHt9LCBob3N0UHJvcHMpO1xuICAgICAgICAgIC8vIEVuc3VyZSB0aGUgZG9tLWlmIGlzIG5vdGVkIHNvIHRoYXQgaXQgaGFzIGEgX19kYXRhSG9zdCwgc2luY2VcbiAgICAgICAgICAvLyBgZmFzdERvbUlmYCB1c2VzIHRoZSBob3N0IGZvciBydW50aW1lIHRlbXBsYXRlIHN0YW1waW5nOyBub3RlIHRoaXNcbiAgICAgICAgICAvLyB3YXMgYWxyZWFkeSBlbnN1cmVkIGFib3ZlIGluIHRoZSBgcmVtb3ZlTmVzdGVkVGVtcGxhdGVzYCBjYXNlXG4gICAgICAgICAgaWYgKCFyZW1vdmVOZXN0ZWRUZW1wbGF0ZXMpIHtcbiAgICAgICAgICAgIG5vZGVJbmZvLnBhcmVudEluZm8ubm90ZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IG1vZGUgPSAneyc7XG4gICAgICAgIGZvciAobGV0IHNvdXJjZSBpbiBob3N0UHJvcHMpIHtcbiAgICAgICAgICBsZXQgcGFydHMgPSBbeyBtb2RlLCBzb3VyY2UsIGRlcGVuZGVuY2llczogW3NvdXJjZV0sIGhvc3RQcm9wOiB0cnVlIH1dO1xuICAgICAgICAgIGFkZEJpbmRpbmcodGhpcywgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywgJ3Byb3BlcnR5JywgJ19ob3N0XycgKyBzb3VyY2UsIHBhcnRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5vdGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB0byBwYXJzZSB0ZXh0IGluIGEgdGVtcGxhdGUgKGVpdGhlciBhdHRyaWJ1dGUgdmFsdWVzIG9yXG4gICAgICogdGV4dENvbnRlbnQpIGludG8gYmluZGluZyBtZXRhZGF0YS5cbiAgICAgKlxuICAgICAqIEFueSBvdmVycmlkZXMgb2YgdGhpcyBtZXRob2Qgc2hvdWxkIHJldHVybiBhbiBhcnJheSBvZiBiaW5kaW5nIHBhcnRcbiAgICAgKiBtZXRhZGF0YSAgcmVwcmVzZW50aW5nIG9uZSBvciBtb3JlIGJpbmRpbmdzIGZvdW5kIGluIHRoZSBwcm92aWRlZCB0ZXh0XG4gICAgICogYW5kIGFueSBcImxpdGVyYWxcIiB0ZXh0IGluIGJldHdlZW4uICBBbnkgbm9uLWxpdGVyYWwgcGFydHMgd2lsbCBiZSBwYXNzZWRcbiAgICAgKiB0byBgX2V2YWx1YXRlQmluZGluZ2Agd2hlbiBhbnkgZGVwZW5kZW5jaWVzIGNoYW5nZS4gIFRoZSBvbmx5IHJlcXVpcmVkXG4gICAgICogZmllbGRzIG9mIGVhY2ggXCJwYXJ0XCIgaW4gdGhlIHJldHVybmVkIGFycmF5IGFyZSBhcyBmb2xsb3dzOlxuICAgICAqXG4gICAgICogLSBgZGVwZW5kZW5jaWVzYCAtIEFycmF5IGNvbnRhaW5pbmcgdHJpZ2dlciBtZXRhZGF0YSBmb3IgZWFjaCBwcm9wZXJ0eVxuICAgICAqICAgdGhhdCBzaG91bGQgdHJpZ2dlciB0aGUgYmluZGluZyB0byB1cGRhdGVcbiAgICAgKiAtIGBsaXRlcmFsYCAtIFN0cmluZyBjb250YWluaW5nIHRleHQgaWYgdGhlIHBhcnQgcmVwcmVzZW50cyBhIGxpdGVyYWw7XG4gICAgICogICBpbiB0aGlzIGNhc2Ugbm8gYGRlcGVuZGVuY2llc2AgYXJlIG5lZWRlZFxuICAgICAqXG4gICAgICogQWRkaXRpb25hbCBtZXRhZGF0YSBmb3IgdXNlIGJ5IGBfZXZhbHVhdGVCaW5kaW5nYCBtYXkgYmUgcHJvdmlkZWQgaW5cbiAgICAgKiBlYWNoIHBhcnQgb2JqZWN0IGFzIG5lZWRlZC5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGhhbmRsZXMgdGhlIGZvbGxvd2luZyB0eXBlcyBvZiBiaW5kaW5nc1xuICAgICAqIChvbmUgb3IgbW9yZSBtYXkgYmUgaW50ZXJtaXhlZCB3aXRoIGxpdGVyYWwgc3RyaW5ncyk6XG4gICAgICogLSBQcm9wZXJ0eSBiaW5kaW5nOiBgW1twcm9wXV1gXG4gICAgICogLSBQYXRoIGJpbmRpbmc6IGBbW29iamVjdC5wcm9wXV1gXG4gICAgICogLSBOZWdhdGVkIHByb3BlcnR5IG9yIHBhdGggYmluZGluZ3M6IGBbWyFwcm9wXV1gIG9yIGBbWyFvYmplY3QucHJvcF1dYFxuICAgICAqIC0gVHdvLXdheSBwcm9wZXJ0eSBvciBwYXRoIGJpbmRpbmdzIChzdXBwb3J0cyBuZWdhdGlvbik6XG4gICAgICogICBge3twcm9wfX1gLCBge3tvYmplY3QucHJvcH19YCwgYHt7IXByb3B9fWAgb3IgYHt7IW9iamVjdC5wcm9wfX1gXG4gICAgICogLSBJbmxpbmUgY29tcHV0ZWQgbWV0aG9kIChzdXBwb3J0cyBuZWdhdGlvbik6XG4gICAgICogICBgW1tjb21wdXRlKGEsICdsaXRlcmFsJywgYildXWAsIGBbWyFjb21wdXRlKGEsICdsaXRlcmFsJywgYildXWBcbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHVzZXMgYSByZWd1bGFyIGV4cHJlc3Npb24gZm9yIGJlc3RcbiAgICAgKiBwZXJmb3JtYW5jZS4gSG93ZXZlciwgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VzIGEgd2hpdGUtbGlzdCBvZlxuICAgICAqIGFsbG93ZWQgY2hhcmFjdGVycyBpbiBhIGRhdGEtYmluZGluZywgd2hpY2ggY2F1c2VzIHByb2JsZW1zIGZvclxuICAgICAqIGRhdGEtYmluZGluZ3MgdGhhdCBkbyB1c2UgY2hhcmFjdGVycyBub3QgaW4gdGhpcyB3aGl0ZS1saXN0LlxuICAgICAqXG4gICAgICogSW5zdGVhZCBvZiB1cGRhdGluZyB0aGUgd2hpdGUtbGlzdCB3aXRoIGFsbCBhbGxvd2VkIGNoYXJhY3RlcnMsXG4gICAgICogdGhlcmUgaXMgYSBTdHJpY3RCaW5kaW5nUGFyc2VyIChzZWUgbGliL21peGlucy9zdHJpY3QtYmluZGluZy1wYXJzZXIpXG4gICAgICogdGhhdCB1c2VzIGEgc3RhdGUgbWFjaGluZSBpbnN0ZWFkLiBUaGlzIHN0YXRlIG1hY2hpbmUgaXMgYWJsZSB0byBoYW5kbGVcbiAgICAgKiBhbGwgY2hhcmFjdGVycy4gSG93ZXZlciwgaXQgaXMgc2xpZ2h0bHkgbGVzcyBwZXJmb3JtYW50LCB0aGVyZWZvcmUgd2VcbiAgICAgKiBleHRyYWN0ZWQgaXQgaW50byBhIHNlcGFyYXRlIG9wdGlvbmFsIG1peGluLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGV4dCB0byBwYXJzZSBmcm9tIGF0dHJpYnV0ZSBvciB0ZXh0Q29udGVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0ZW1wbGF0ZUluZm8gQ3VycmVudCB0ZW1wbGF0ZSBtZXRhZGF0YVxuICAgICAqIEByZXR1cm4ge0FycmF5PCFCaW5kaW5nUGFydD59IEFycmF5IG9mIGJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VCaW5kaW5ncyh0ZXh0LCB0ZW1wbGF0ZUluZm8pIHtcbiAgICAgIGxldCBwYXJ0cyA9IFtdO1xuICAgICAgbGV0IGxhc3RJbmRleCA9IDA7XG4gICAgICBsZXQgbTtcbiAgICAgIC8vIEV4YW1wbGU6IFwibGl0ZXJhbDF7e3Byb3B9fWxpdGVyYWwyW1shY29tcHV0ZShmb28sYmFyKV1dZmluYWxcIlxuICAgICAgLy8gUmVnZXggbWF0Y2hlczpcbiAgICAgIC8vICAgICAgICBJdGVyYXRpb24gMTogIEl0ZXJhdGlvbiAyOlxuICAgICAgLy8gbVsxXTogJ3t7JyAgICAgICAgICAnW1snXG4gICAgICAvLyBtWzJdOiAnJyAgICAgICAgICAgICchJ1xuICAgICAgLy8gbVszXTogJ3Byb3AnICAgICAgICAnY29tcHV0ZShmb28sYmFyKSdcbiAgICAgIHdoaWxlICgobSA9IGJpbmRpbmdSZWdleC5leGVjKHRleHQpKSAhPT0gbnVsbCkge1xuICAgICAgICAvLyBBZGQgbGl0ZXJhbCBwYXJ0XG4gICAgICAgIGlmIChtLmluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICAgICAgcGFydHMucHVzaCh7bGl0ZXJhbDogdGV4dC5zbGljZShsYXN0SW5kZXgsIG0uaW5kZXgpfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIGJpbmRpbmcgcGFydFxuICAgICAgICBsZXQgbW9kZSA9IG1bMV1bMF07XG4gICAgICAgIGxldCBuZWdhdGUgPSBCb29sZWFuKG1bMl0pO1xuICAgICAgICBsZXQgc291cmNlID0gbVszXS50cmltKCk7XG4gICAgICAgIGxldCBjdXN0b21FdmVudCA9IGZhbHNlLCBub3RpZnlFdmVudCA9ICcnLCBjb2xvbiA9IC0xO1xuICAgICAgICBpZiAobW9kZSA9PSAneycgJiYgKGNvbG9uID0gc291cmNlLmluZGV4T2YoJzo6JykpID4gMCkge1xuICAgICAgICAgIG5vdGlmeUV2ZW50ID0gc291cmNlLnN1YnN0cmluZyhjb2xvbiArIDIpO1xuICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZS5zdWJzdHJpbmcoMCwgY29sb24pO1xuICAgICAgICAgIGN1c3RvbUV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2lnbmF0dXJlID0gcGFyc2VNZXRob2Qoc291cmNlKTtcbiAgICAgICAgbGV0IGRlcGVuZGVuY2llcyA9IFtdO1xuICAgICAgICBpZiAoc2lnbmF0dXJlKSB7XG4gICAgICAgICAgLy8gSW5saW5lIGNvbXB1dGVkIGZ1bmN0aW9uXG4gICAgICAgICAgbGV0IHthcmdzLCBtZXRob2ROYW1lfSA9IHNpZ25hdHVyZTtcbiAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8YXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGFyZyA9IGFyZ3NbaV07XG4gICAgICAgICAgICBpZiAoIWFyZy5saXRlcmFsKSB7XG4gICAgICAgICAgICAgIGRlcGVuZGVuY2llcy5wdXNoKGFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBkeW5hbWljRm5zID0gdGVtcGxhdGVJbmZvLmR5bmFtaWNGbnM7XG4gICAgICAgICAgaWYgKGR5bmFtaWNGbnMgJiYgZHluYW1pY0Zuc1ttZXRob2ROYW1lXSB8fCBzaWduYXR1cmUuc3RhdGljKSB7XG4gICAgICAgICAgICBkZXBlbmRlbmNpZXMucHVzaChtZXRob2ROYW1lKTtcbiAgICAgICAgICAgIHNpZ25hdHVyZS5keW5hbWljRm4gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBQcm9wZXJ0eSBvciBwYXRoXG4gICAgICAgICAgZGVwZW5kZW5jaWVzLnB1c2goc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICBzb3VyY2UsIG1vZGUsIG5lZ2F0ZSwgY3VzdG9tRXZlbnQsIHNpZ25hdHVyZSwgZGVwZW5kZW5jaWVzLFxuICAgICAgICAgIGV2ZW50OiBub3RpZnlFdmVudFxuICAgICAgICB9KTtcbiAgICAgICAgbGFzdEluZGV4ID0gYmluZGluZ1JlZ2V4Lmxhc3RJbmRleDtcbiAgICAgIH1cbiAgICAgIC8vIEFkZCBhIGZpbmFsIGxpdGVyYWwgcGFydFxuICAgICAgaWYgKGxhc3RJbmRleCAmJiBsYXN0SW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xuICAgICAgICBsZXQgbGl0ZXJhbCA9IHRleHQuc3Vic3RyaW5nKGxhc3RJbmRleCk7XG4gICAgICAgIGlmIChsaXRlcmFsKSB7XG4gICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICBsaXRlcmFsOiBsaXRlcmFsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHRvIGV2YWx1YXRlIGEgcHJldmlvdXNseSBwYXJzZWQgYmluZGluZyBwYXJ0IGJhc2VkIG9uIGEgc2V0IG9mXG4gICAgICogb25lIG9yIG1vcmUgY2hhbmdlZCBkZXBlbmRlbmNpZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBFbGVtZW50IHRoYXQgc2hvdWxkIGJlIHVzZWQgYXNcbiAgICAgKiAgICAgc2NvcGUgZm9yIGJpbmRpbmcgZGVwZW5kZW5jaWVzXG4gICAgICogQHBhcmFtIHtCaW5kaW5nUGFydH0gcGFydCBCaW5kaW5nIHBhcnQgbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQcm9wZXJ0eS9wYXRoIHRoYXQgdHJpZ2dlcmVkIHRoaXMgZWZmZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIHtib29sZWFufSBoYXNQYXRocyBUcnVlIHdpdGggYHByb3BzYCBjb250YWlucyBvbmUgb3IgbW9yZSBwYXRoc1xuICAgICAqIEByZXR1cm4geyp9IFZhbHVlIHRoZSBiaW5kaW5nIHBhcnQgZXZhbHVhdGVkIHRvXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9ldmFsdWF0ZUJpbmRpbmcoaW5zdCwgcGFydCwgcGF0aCwgcHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocykge1xuICAgICAgbGV0IHZhbHVlO1xuICAgICAgaWYgKHBhcnQuc2lnbmF0dXJlKSB7XG4gICAgICAgIHZhbHVlID0gcnVuTWV0aG9kRWZmZWN0KGluc3QsIHBhdGgsIHByb3BzLCBvbGRQcm9wcywgcGFydC5zaWduYXR1cmUpO1xuICAgICAgfSBlbHNlIGlmIChwYXRoICE9IHBhcnQuc291cmNlKSB7XG4gICAgICAgIHZhbHVlID0gZ2V0KGluc3QsIHBhcnQuc291cmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChoYXNQYXRocyAmJiBpc1BhdGgocGF0aCkpIHtcbiAgICAgICAgICB2YWx1ZSA9IGdldChpbnN0LCBwYXRoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGluc3QuX19kYXRhW3BhdGhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFydC5uZWdhdGUpIHtcbiAgICAgICAgdmFsdWUgPSAhdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gUHJvcGVydHlFZmZlY3RzO1xufSk7XG5cbi8qKlxuICogU3RhY2sgZm9yIGVucXVldWluZyBjbGllbnQgZG9tIGNyZWF0ZWQgYnkgYSBob3N0IGVsZW1lbnQuXG4gKlxuICogQnkgZGVmYXVsdCBlbGVtZW50cyBhcmUgZmx1c2hlZCB2aWEgYF9mbHVzaFByb3BlcnRpZXNgIHdoZW5cbiAqIGBjb25uZWN0ZWRDYWxsYmFja2AgaXMgY2FsbGVkLiBFbGVtZW50cyBhdHRhY2ggdGhlaXIgY2xpZW50IGRvbSB0b1xuICogdGhlbXNlbHZlcyBhdCBgcmVhZHlgIHRpbWUgd2hpY2ggcmVzdWx0cyBmcm9tIHRoaXMgZmlyc3QgZmx1c2guXG4gKiBUaGlzIHByb3ZpZGVzIGFuIG9yZGVyaW5nIGd1YXJhbnRlZSB0aGF0IHRoZSBjbGllbnQgZG9tIGFuIGVsZW1lbnRcbiAqIGNyZWF0ZXMgaXMgZmx1c2hlZCBiZWZvcmUgdGhlIGVsZW1lbnQgaXRzZWxmIChpLmUuIGNsaWVudCBgcmVhZHlgXG4gKiBmaXJlcyBiZWZvcmUgaG9zdCBgcmVhZHlgKS5cbiAqXG4gKiBIb3dldmVyLCBpZiBgX2ZsdXNoUHJvcGVydGllc2AgaXMgY2FsbGVkICpiZWZvcmUqIGFuIGVsZW1lbnQgaXMgY29ubmVjdGVkLFxuICogYXMgZm9yIGV4YW1wbGUgYFRlbXBsYXRpemVgIGRvZXMsIHRoaXMgb3JkZXJpbmcgZ3VhcmFudGVlIGNhbm5vdCBiZVxuICogc2F0aXNmaWVkIGJlY2F1c2Ugbm8gZWxlbWVudHMgYXJlIGNvbm5lY3RlZC4gKE5vdGU6IEJvdW5kIGVsZW1lbnRzIHRoYXRcbiAqIHJlY2VpdmUgZGF0YSBkbyBiZWNvbWUgZW5xdWV1ZWQgY2xpZW50cyBhbmQgYXJlIHByb3Blcmx5IG9yZGVyZWQgYnV0XG4gKiB1bmJvdW5kIGVsZW1lbnRzIGFyZSBub3QuKVxuICpcbiAqIFRvIG1haW50YWluIHRoZSBkZXNpcmVkIFwiY2xpZW50IGJlZm9yZSBob3N0XCIgb3JkZXJpbmcgZ3VhcmFudGVlIGZvciB0aGlzXG4gKiBjYXNlIHdlIHJlbHkgb24gdGhlIFwiaG9zdCBzdGFjay4gQ2xpZW50IG5vZGVzIHJlZ2lzdGVycyB0aGVtc2VsdmVzIHdpdGhcbiAqIHRoZSBjcmVhdGluZyBob3N0IGVsZW1lbnQgd2hlbiBjcmVhdGVkLiBUaGlzIGVuc3VyZXMgdGhhdCBhbGwgY2xpZW50IGRvbVxuICogaXMgcmVhZGllZCBpbiB0aGUgcHJvcGVyIG9yZGVyLCBtYWludGFpbmluZyB0aGUgZGVzaXJlZCBndWFyYW50ZWUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgaG9zdFN0YWNrID0gW107XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4vKipcbiAqIFRvdGFsIG51bWJlciBvZiBQb2x5bWVyIGVsZW1lbnQgaW5zdGFuY2VzIGNyZWF0ZWQuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5leHBvcnQgbGV0IGluc3RhbmNlQ291bnQgPSAwO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5jcmVtZW50SW5zdGFuY2VDb3VudCgpIHtcbiAgaW5zdGFuY2VDb3VudCsrO1xufVxuXG4vKipcbiAqIEFycmF5IG9mIFBvbHltZXIgZWxlbWVudCBjbGFzc2VzIHRoYXQgaGF2ZSBiZWVuIGZpbmFsaXplZC5cbiAqIEB0eXBlIHshQXJyYXk8IVBvbHltZXJFbGVtZW50Q29uc3RydWN0b3I+fVxuICovXG5leHBvcnQgY29uc3QgcmVnaXN0cmF0aW9ucyA9IFtdO1xuXG4vKipcbiAqIEBwYXJhbSB7IVBvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9IHByb3RvdHlwZSBFbGVtZW50IHByb3RvdHlwZSB0byBsb2dcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9yZWdMb2cocHJvdG90eXBlKSB7XG4gIGNvbnNvbGUubG9nKCdbJyArIC8qKiBAdHlwZSB7P30gKi8ocHJvdG90eXBlKS5pcyArICddOiByZWdpc3RlcmVkJyk7XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgY2xhc3MgcHJvdG90eXBlIGZvciB0ZWxlbWV0cnkgcHVycG9zZXMuXG4gKiBAcGFyYW0geyFQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSBwcm90b3R5cGUgRWxlbWVudCBwcm90b3R5cGUgdG8gcmVnaXN0ZXJcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyKHByb3RvdHlwZSkge1xuICByZWdpc3RyYXRpb25zLnB1c2gocHJvdG90eXBlKTtcbn1cblxuLyoqXG4gKiBMb2dzIGFsbCBlbGVtZW50cyByZWdpc3RlcmVkIHdpdGggYW4gYGlzYCB0byB0aGUgY29uc29sZS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGR1bXBSZWdpc3RyYXRpb25zKCkge1xuICByZWdpc3RyYXRpb25zLmZvckVhY2goX3JlZ0xvZyk7XG59IiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi4vdXRpbHMvYm9vdC5qcyc7XG5cbmltcG9ydCB7IGRlZHVwaW5nTWl4aW4gfSBmcm9tICcuLi91dGlscy9taXhpbi5qcyc7XG5pbXBvcnQgeyByZWdpc3RlciwgaW5jcmVtZW50SW5zdGFuY2VDb3VudCB9IGZyb20gJy4uL3V0aWxzL3RlbGVtZXRyeS5qcyc7XG5pbXBvcnQgeyBQcm9wZXJ0aWVzQ2hhbmdlZCB9IGZyb20gJy4vcHJvcGVydGllcy1jaGFuZ2VkLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY29weSBvZiBgcHJvcHNgIHdpdGggZWFjaCBwcm9wZXJ0eSBub3JtYWxpemVkIHN1Y2ggdGhhdFxuICogdXBncmFkZWQgaXQgaXMgYW4gb2JqZWN0IHdpdGggYXQgbGVhc3QgYSB0eXBlIHByb3BlcnR5IHsgdHlwZTogVHlwZX0uXG4gKlxuICogQHBhcmFtIHshT2JqZWN0fSBwcm9wcyBQcm9wZXJ0aWVzIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybiB7IU9iamVjdH0gQ29weSBvZiBpbnB1dCBgcHJvcHNgIHdpdGggbm9ybWFsaXplZCBwcm9wZXJ0aWVzIHRoYXRcbiAqIGFyZSBpbiB0aGUgZm9ybSB7dHlwZTogVHlwZX1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BlcnRpZXMocHJvcHMpIHtcbiAgY29uc3Qgb3V0cHV0ID0ge307XG4gIGZvciAobGV0IHAgaW4gcHJvcHMpIHtcbiAgICBjb25zdCBvID0gcHJvcHNbcF07XG4gICAgb3V0cHV0W3BdID0gKHR5cGVvZiBvID09PSAnZnVuY3Rpb24nKSA/IHt0eXBlOiBvfSA6IG87XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuLyoqXG4gKiBNaXhpbiB0aGF0IHByb3ZpZGVzIGEgbWluaW1hbCBzdGFydGluZyBwb2ludCB0byB1c2luZyB0aGUgUHJvcGVydGllc0NoYW5nZWRcbiAqIG1peGluIGJ5IHByb3ZpZGluZyBhIG1lY2hhbmlzbSB0byBkZWNsYXJlIHByb3BlcnRpZXMgaW4gYSBzdGF0aWNcbiAqIGdldHRlciAoZS5nLiBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7IHJldHVybiB7IGZvbzogU3RyaW5nIH0gfSkuIENoYW5nZXNcbiAqIGFyZSByZXBvcnRlZCB2aWEgdGhlIGBfcHJvcGVydGllc0NoYW5nZWRgIG1ldGhvZC5cbiAqXG4gKiBUaGlzIG1peGluIHByb3ZpZGVzIG5vIHNwZWNpZmljIHN1cHBvcnQgZm9yIHJlbmRlcmluZy4gVXNlcnMgYXJlIGV4cGVjdGVkXG4gKiB0byBjcmVhdGUgYSBTaGFkb3dSb290IGFuZCBwdXQgY29udGVudCBpbnRvIGl0IGFuZCB1cGRhdGUgaXQgaW4gd2hhdGV2ZXJcbiAqIHdheSBtYWtlcyBzZW5zZS4gVGhpcyBjYW4gYmUgZG9uZSBpbiByZWFjdGlvbiB0byBwcm9wZXJ0aWVzIGNoYW5naW5nIGJ5XG4gKiBpbXBsZW1lbnRpbmcgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAuXG4gKlxuICogQG1peGluRnVuY3Rpb25cbiAqIEBwb2x5bWVyXG4gKiBAYXBwbGllc01peGluIFByb3BlcnRpZXNDaGFuZ2VkXG4gKiBAc3VtbWFyeSBNaXhpbiB0aGF0IHByb3ZpZGVzIGEgbWluaW1hbCBzdGFydGluZyBwb2ludCBmb3IgdXNpbmdcbiAqIHRoZSBQcm9wZXJ0aWVzQ2hhbmdlZCBtaXhpbiBieSBwcm92aWRpbmcgYSBkZWNsYXJhdGl2ZSBgcHJvcGVydGllc2Agb2JqZWN0LlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3OlQpfSBzdXBlckNsYXNzIENsYXNzIHRvIGFwcGx5IG1peGluIHRvLlxuICogQHJldHVybiB7ZnVuY3Rpb24obmV3OlQpfSBzdXBlckNsYXNzIHdpdGggbWl4aW4gYXBwbGllZC5cbiAqL1xuZXhwb3J0IGNvbnN0IFByb3BlcnRpZXNNaXhpbiA9IGRlZHVwaW5nTWl4aW4oc3VwZXJDbGFzcyA9PiB7XG5cbiAvKipcbiAgKiBAY29uc3RydWN0b3JcbiAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0aWVzQ2hhbmdlZH1cbiAgKiBAcHJpdmF0ZVxuICAqL1xuIGNvbnN0IGJhc2UgPSBQcm9wZXJ0aWVzQ2hhbmdlZChzdXBlckNsYXNzKTtcblxuIC8qKlxuICAqIFJldHVybnMgdGhlIHN1cGVyIGNsYXNzIGNvbnN0cnVjdG9yIGZvciB0aGUgZ2l2ZW4gY2xhc3MsIGlmIGl0IGlzIGFuXG4gICogaW5zdGFuY2Ugb2YgdGhlIFByb3BlcnRpZXNNaXhpbi5cbiAgKlxuICAqIEBwYXJhbSB7IVByb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSBjb25zdHJ1Y3RvciBQcm9wZXJ0aWVzTWl4aW4gY29uc3RydWN0b3JcbiAgKiBAcmV0dXJuIHs/UHJvcGVydGllc01peGluQ29uc3RydWN0b3J9IFN1cGVyIGNsYXNzIGNvbnN0cnVjdG9yXG4gICovXG4gZnVuY3Rpb24gc3VwZXJQcm9wZXJ0aWVzQ2xhc3MoY29uc3RydWN0b3IpIHtcbiAgIGNvbnN0IHN1cGVyQ3RvciA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihjb25zdHJ1Y3Rvcik7XG5cbiAgIC8vIE5vdGUsIHRoZSBgUHJvcGVydGllc01peGluYCBjbGFzcyBiZWxvdyBvbmx5IHJlZmVycyB0byB0aGUgY2xhc3NcbiAgIC8vIGdlbmVyYXRlZCBieSB0aGlzIGNhbGwgdG8gdGhlIG1peGluOyB0aGUgaW5zdGFuY2VvZiB0ZXN0IG9ubHkgd29ya3NcbiAgIC8vIGJlY2F1c2UgdGhlIG1peGluIGlzIGRlZHVwZWQgYW5kIGd1YXJhbnRlZWQgb25seSB0byBhcHBseSBvbmNlLCBoZW5jZVxuICAgLy8gYWxsIGNvbnN0cnVjdG9ycyBpbiBhIHByb3RvIGNoYWluIHdpbGwgc2VlIHRoZSBzYW1lIGBQcm9wZXJ0aWVzTWl4aW5gXG4gICByZXR1cm4gKHN1cGVyQ3Rvci5wcm90b3R5cGUgaW5zdGFuY2VvZiBQcm9wZXJ0aWVzTWl4aW4pID9cbiAgICAgLyoqIEB0eXBlIHshUHJvcGVydGllc01peGluQ29uc3RydWN0b3J9ICovIChzdXBlckN0b3IpIDogbnVsbDtcbiB9XG5cbiAvKipcbiAgKiBSZXR1cm5zIGEgbWVtb2l6ZWQgdmVyc2lvbiBvZiB0aGUgYHByb3BlcnRpZXNgIG9iamVjdCBmb3IgdGhlXG4gICogZ2l2ZW4gY2xhc3MuIFByb3BlcnRpZXMgbm90IGluIG9iamVjdCBmb3JtYXQgYXJlIGNvbnZlcnRlZCB0byBhdFxuICAqIGxlYXN0IHt0eXBlfS5cbiAgKlxuICAqIEBwYXJhbSB7UHJvcGVydGllc01peGluQ29uc3RydWN0b3J9IGNvbnN0cnVjdG9yIFByb3BlcnRpZXNNaXhpbiBjb25zdHJ1Y3RvclxuICAqIEByZXR1cm4ge09iamVjdH0gTWVtb2l6ZWQgcHJvcGVydGllcyBvYmplY3RcbiAgKi9cbiBmdW5jdGlvbiBvd25Qcm9wZXJ0aWVzKGNvbnN0cnVjdG9yKSB7XG4gICBpZiAoIWNvbnN0cnVjdG9yLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19fb3duUHJvcGVydGllcycsIGNvbnN0cnVjdG9yKSkpIHtcbiAgICAgbGV0IHByb3BzID0gbnVsbDtcblxuICAgICBpZiAoY29uc3RydWN0b3IuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgncHJvcGVydGllcycsIGNvbnN0cnVjdG9yKSkpIHtcbiAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gY29uc3RydWN0b3IucHJvcGVydGllcztcblxuICAgICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHByb3BzID0gbm9ybWFsaXplUHJvcGVydGllcyhwcm9wZXJ0aWVzKTtcbiAgICAgICB9XG4gICAgIH1cblxuICAgICBjb25zdHJ1Y3Rvci5fX293blByb3BlcnRpZXMgPSBwcm9wcztcbiAgIH1cbiAgIHJldHVybiBjb25zdHJ1Y3Rvci5fX293blByb3BlcnRpZXM7XG4gfVxuXG4gLyoqXG4gICogQHBvbHltZXJcbiAgKiBAbWl4aW5DbGFzc1xuICAqIEBleHRlbmRzIHtiYXNlfVxuICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnRpZXNNaXhpbn1cbiAgKiBAdW5yZXN0cmljdGVkXG4gICovXG4gY2xhc3MgUHJvcGVydGllc01peGluIGV4dGVuZHMgYmFzZSB7XG5cbiAgIC8qKlxuICAgICogSW1wbGVtZW50cyBzdGFuZGFyZCBjdXN0b20gZWxlbWVudHMgZ2V0dGVyIHRvIG9ic2VydmVzIHRoZSBhdHRyaWJ1dGVzXG4gICAgKiBsaXN0ZWQgaW4gYHByb3BlcnRpZXNgLlxuICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgKiBAbm9jb2xsYXBzZVxuICAgICovXG4gICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19fb2JzZXJ2ZWRBdHRyaWJ1dGVzJywgdGhpcykpKSB7XG4gICAgICAgcmVnaXN0ZXIodGhpcy5wcm90b3R5cGUpO1xuICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5fcHJvcGVydGllcztcbiAgICAgICB0aGlzLl9fb2JzZXJ2ZWRBdHRyaWJ1dGVzID0gcHJvcHMgPyBPYmplY3Qua2V5cyhwcm9wcykubWFwKHAgPT4gdGhpcy5wcm90b3R5cGUuX2FkZFByb3BlcnR5VG9BdHRyaWJ1dGVNYXAocCkpIDogW107XG4gICAgIH1cbiAgICAgcmV0dXJuIHRoaXMuX19vYnNlcnZlZEF0dHJpYnV0ZXM7XG4gICB9XG5cbiAgIC8qKlxuICAgICogRmluYWxpemVzIGFuIGVsZW1lbnQgZGVmaW5pdGlvbiwgaW5jbHVkaW5nIGVuc3VyaW5nIGFueSBzdXBlciBjbGFzc2VzXG4gICAgKiBhcmUgYWxzbyBmaW5hbGl6ZWQuIFRoaXMgaW5jbHVkZXMgZW5zdXJpbmcgcHJvcGVydHlcbiAgICAqIGFjY2Vzc29ycyBleGlzdCBvbiB0aGUgZWxlbWVudCBwcm90b3R5cGUuIFRoaXMgbWV0aG9kIGNhbGxzXG4gICAgKiBgX2ZpbmFsaXplQ2xhc3NgIHRvIGZpbmFsaXplIGVhY2ggY29uc3RydWN0b3IgaW4gdGhlIHByb3RvdHlwZSBjaGFpbi5cbiAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgKiBAbm9jb2xsYXBzZVxuICAgICovXG4gICBzdGF0aWMgZmluYWxpemUoKSB7XG4gICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX2ZpbmFsaXplZCcsIHRoaXMpKSkge1xuICAgICAgIGNvbnN0IHN1cGVyQ3RvciA9IHN1cGVyUHJvcGVydGllc0NsYXNzKC8qKiBAdHlwZSB7IVByb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSAqLyh0aGlzKSk7XG4gICAgICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgICAgc3VwZXJDdG9yLmZpbmFsaXplKCk7XG4gICAgICAgfVxuICAgICAgIHRoaXMuX19maW5hbGl6ZWQgPSB0cnVlO1xuICAgICAgIHRoaXMuX2ZpbmFsaXplQ2xhc3MoKTtcbiAgICAgfVxuICAgfVxuXG4gICAvKipcbiAgICAqIEZpbmFsaXplIGFuIGVsZW1lbnQgY2xhc3MuIFRoaXMgaW5jbHVkZXMgZW5zdXJpbmcgcHJvcGVydHlcbiAgICAqIGFjY2Vzc29ycyBleGlzdCBvbiB0aGUgZWxlbWVudCBwcm90b3R5cGUuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieVxuICAgICogYGZpbmFsaXplYCBhbmQgZmluYWxpemVzIHRoZSBjbGFzcyBjb25zdHJ1Y3Rvci5cbiAgICAqXG4gICAgKiBAcHJvdGVjdGVkXG4gICAgKiBAbm9jb2xsYXBzZVxuICAgICovXG4gICBzdGF0aWMgX2ZpbmFsaXplQ2xhc3MoKSB7XG4gICAgIGNvbnN0IHByb3BzID0gb3duUHJvcGVydGllcygvKiogQHR5cGUgeyFQcm9wZXJ0aWVzTWl4aW5Db25zdHJ1Y3Rvcn0gKi8odGhpcykpO1xuICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAvKiogQHR5cGUgez99ICovICh0aGlzKS5jcmVhdGVQcm9wZXJ0aWVzKHByb3BzKTtcbiAgICAgfVxuICAgfVxuXG4gICAvKipcbiAgICAqIFJldHVybnMgYSBtZW1vaXplZCB2ZXJzaW9uIG9mIGFsbCBwcm9wZXJ0aWVzLCBpbmNsdWRpbmcgdGhvc2UgaW5oZXJpdGVkXG4gICAgKiBmcm9tIHN1cGVyIGNsYXNzZXMuIFByb3BlcnRpZXMgbm90IGluIG9iamVjdCBmb3JtYXQgYXJlIGNvbnZlcnRlZCB0b1xuICAgICogYXQgbGVhc3Qge3R5cGV9LlxuICAgICpcbiAgICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyBmb3IgdGhpcyBjbGFzc1xuICAgICogQHByb3RlY3RlZFxuICAgICogQG5vY29sbGFwc2VcbiAgICAqL1xuICAgc3RhdGljIGdldCBfcHJvcGVydGllcygpIHtcbiAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KFxuICAgICAgIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19fcHJvcGVydGllcycsIHRoaXMpKSkge1xuICAgICAgIGNvbnN0IHN1cGVyQ3RvciA9IHN1cGVyUHJvcGVydGllc0NsYXNzKC8qKiBAdHlwZSB7IVByb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSAqLyh0aGlzKSk7XG4gICAgICAgdGhpcy5fX3Byb3BlcnRpZXMgPSBPYmplY3QuYXNzaWduKHt9LFxuICAgICAgICAgc3VwZXJDdG9yICYmIHN1cGVyQ3Rvci5fcHJvcGVydGllcyxcbiAgICAgICAgIG93blByb3BlcnRpZXMoLyoqIEB0eXBlIHtQcm9wZXJ0aWVzTWl4aW5Db25zdHJ1Y3Rvcn0gKi8odGhpcykpKTtcbiAgICAgfVxuICAgICByZXR1cm4gdGhpcy5fX3Byb3BlcnRpZXM7XG4gICB9XG5cbiAgIC8qKlxuICAgICogT3ZlcnJpZGVzIGBQcm9wZXJ0aWVzQ2hhbmdlZGAgbWV0aG9kIHRvIHJldHVybiB0eXBlIHNwZWNpZmllZCBpbiB0aGVcbiAgICAqIHN0YXRpYyBgcHJvcGVydGllc2Agb2JqZWN0IGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHByb3BlcnR5XG4gICAgKiBAcmV0dXJuIHsqfSBUeXBlIHRvIHdoaWNoIHRvIGRlc2VyaWFsaXplIGF0dHJpYnV0ZVxuICAgICpcbiAgICAqIEBwcm90ZWN0ZWRcbiAgICAqIEBub2NvbGxhcHNlXG4gICAgKi9cbiAgIHN0YXRpYyB0eXBlRm9yUHJvcGVydHkobmFtZSkge1xuICAgICBjb25zdCBpbmZvID0gdGhpcy5fcHJvcGVydGllc1tuYW1lXTtcbiAgICAgcmV0dXJuIGluZm8gJiYgaW5mby50eXBlO1xuICAgfVxuXG4gICAvKipcbiAgICAqIE92ZXJyaWRlcyBgUHJvcGVydGllc0NoYW5nZWRgIG1ldGhvZCBhbmQgYWRkcyBhIGNhbGwgdG9cbiAgICAqIGBmaW5hbGl6ZWAgd2hpY2ggbGF6aWx5IGNvbmZpZ3VyZXMgdGhlIGVsZW1lbnQncyBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gICAgKiBAb3ZlcnJpZGVcbiAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgKi9cbiAgIF9pbml0aWFsaXplUHJvcGVydGllcygpIHtcbiAgICAgaW5jcmVtZW50SW5zdGFuY2VDb3VudCgpO1xuICAgICB0aGlzLmNvbnN0cnVjdG9yLmZpbmFsaXplKCk7XG4gICAgIHN1cGVyLl9pbml0aWFsaXplUHJvcGVydGllcygpO1xuICAgfVxuXG4gICAvKipcbiAgICAqIENhbGxlZCB3aGVuIHRoZSBlbGVtZW50IGlzIGFkZGVkIHRvIGEgZG9jdW1lbnQuXG4gICAgKiBDYWxscyBgX2VuYWJsZVByb3BlcnRpZXNgIHRvIHR1cm4gb24gcHJvcGVydHkgc3lzdGVtIGZyb21cbiAgICAqIGBQcm9wZXJ0aWVzQ2hhbmdlZGAuXG4gICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBTdXBlciBtYXkgb3IgbWF5IG5vdCBpbXBsZW1lbnQgdGhlIGNhbGxiYWNrXG4gICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICogQG92ZXJyaWRlXG4gICAgKi9cbiAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICBpZiAoc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2spIHtcbiAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICB9XG4gICAgIHRoaXMuX2VuYWJsZVByb3BlcnRpZXMoKTtcbiAgIH1cblxuICAgLyoqXG4gICAgKiBDYWxsZWQgd2hlbiB0aGUgZWxlbWVudCBpcyByZW1vdmVkIGZyb20gYSBkb2N1bWVudFxuICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gU3VwZXIgbWF5IG9yIG1heSBub3QgaW1wbGVtZW50IHRoZSBjYWxsYmFja1xuICAgICogQHJldHVybiB7dm9pZH1cbiAgICAqIEBvdmVycmlkZVxuICAgICovXG4gICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgaWYgKHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKSB7XG4gICAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgfVxuICAgfVxuXG4gfVxuXG4gcmV0dXJuIFByb3BlcnRpZXNNaXhpbjtcblxufSk7XG4iLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBzdXBwcmVzcyB7Y2hlY2tQcm90b3R5cGFsVHlwZXN9XG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZFxuICogYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heVxuICogYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHQgQ29kZSBkaXN0cmlidXRlZCBieVxuICogR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUFxuICogcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5pbXBvcnQgJy4uL3V0aWxzL2Jvb3QuanMnO1xuXG5pbXBvcnQgeyByb290UGF0aCwgc3RyaWN0VGVtcGxhdGVQb2xpY3ksIGFsbG93VGVtcGxhdGVGcm9tRG9tTW9kdWxlLCBsZWdhY3lPcHRpbWl6YXRpb25zLCBsZWdhY3lXYXJuaW5ncywgc3luY0luaXRpYWxSZW5kZXIsIHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cywgdXNlQWRvcHRlZFN0eWxlU2hlZXRzV2l0aEJ1aWx0Q1NTIH0gZnJvbSAnLi4vdXRpbHMvc2V0dGluZ3MuanMnO1xuaW1wb3J0IHsgZGVkdXBpbmdNaXhpbiB9IGZyb20gJy4uL3V0aWxzL21peGluLmpzJztcbmltcG9ydCB7IHN0eWxlc0Zyb21UZW1wbGF0ZSwgc3R5bGVzRnJvbU1vZHVsZUltcG9ydHMgfSBmcm9tICcuLi91dGlscy9zdHlsZS1nYXRoZXIuanMnO1xuaW1wb3J0IHsgcGF0aEZyb21VcmwsIHJlc29sdmVDc3MsIHJlc29sdmVVcmwgfSBmcm9tICcuLi91dGlscy9yZXNvbHZlLXVybC5qcyc7XG5pbXBvcnQgeyBEb21Nb2R1bGUgfSBmcm9tICcuLi9lbGVtZW50cy9kb20tbW9kdWxlLmpzJztcbmltcG9ydCB7IFByb3BlcnR5RWZmZWN0cyB9IGZyb20gJy4vcHJvcGVydHktZWZmZWN0cy5qcyc7XG5pbXBvcnQgeyBQcm9wZXJ0aWVzTWl4aW4gfSBmcm9tICcuL3Byb3BlcnRpZXMtbWl4aW4uanMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4uL3V0aWxzL3dyYXAuanMnO1xuXG4vKipcbiAqIEN1cnJlbnQgUG9seW1lciB2ZXJzaW9uIGluIFNlbXZlciBub3RhdGlvbi5cbiAqIEB0eXBlIHtzdHJpbmd9IFNlbXZlciBub3RhdGlvbiBvZiB0aGUgY3VycmVudCB2ZXJzaW9uIG9mIFBvbHltZXIuXG4gKi9cbmV4cG9ydCBjb25zdCB2ZXJzaW9uID0gJzMuNC4xJztcblxuZXhwb3J0IGNvbnN0IGJ1aWx0Q1NTID0gd2luZG93LlNoYWR5Q1NTICYmIHdpbmRvdy5TaGFkeUNTU1snY3NzQnVpbGQnXTtcblxuLyoqXG4gKiBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgdGhlIGNvcmUgQVBJIGZvciBQb2x5bWVyJ3MgbWV0YS1wcm9ncmFtbWluZ1xuICogZmVhdHVyZXMgaW5jbHVkaW5nIHRlbXBsYXRlIHN0YW1waW5nLCBkYXRhLWJpbmRpbmcsIGF0dHJpYnV0ZSBkZXNlcmlhbGl6YXRpb24sXG4gKiBhbmQgcHJvcGVydHkgY2hhbmdlIG9ic2VydmF0aW9uLlxuICpcbiAqIFN1YmNsYXNzZXJzIG1heSBwcm92aWRlIHRoZSBmb2xsb3dpbmcgc3RhdGljIGdldHRlcnMgdG8gcmV0dXJuIG1ldGFkYXRhXG4gKiB1c2VkIHRvIGNvbmZpZ3VyZSBQb2x5bWVyJ3MgZmVhdHVyZXMgZm9yIHRoZSBjbGFzczpcbiAqXG4gKiAtIGBzdGF0aWMgZ2V0IGlzKClgOiBXaGVuIHRoZSB0ZW1wbGF0ZSBpcyBwcm92aWRlZCB2aWEgYSBgZG9tLW1vZHVsZWAsXG4gKiAgIHVzZXJzIHNob3VsZCByZXR1cm4gdGhlIGBkb20tbW9kdWxlYCBpZCBmcm9tIGEgc3RhdGljIGBpc2AgZ2V0dGVyLiAgSWZcbiAqICAgbm8gdGVtcGxhdGUgaXMgbmVlZGVkIG9yIHRoZSB0ZW1wbGF0ZSBpcyBwcm92aWRlZCBkaXJlY3RseSB2aWEgdGhlXG4gKiAgIGB0ZW1wbGF0ZWAgZ2V0dGVyLCB0aGVyZSBpcyBubyBuZWVkIHRvIGRlZmluZSBgaXNgIGZvciB0aGUgZWxlbWVudC5cbiAqXG4gKiAtIGBzdGF0aWMgZ2V0IHRlbXBsYXRlKClgOiBVc2VycyBtYXkgcHJvdmlkZSB0aGUgdGVtcGxhdGUgZGlyZWN0bHkgKGFzXG4gKiAgIG9wcG9zZWQgdG8gdmlhIGBkb20tbW9kdWxlYCkgYnkgaW1wbGVtZW50aW5nIGEgc3RhdGljIGB0ZW1wbGF0ZWAgZ2V0dGVyLlxuICogICBUaGUgZ2V0dGVyIG11c3QgcmV0dXJuIGFuIGBIVE1MVGVtcGxhdGVFbGVtZW50YC5cbiAqXG4gKiAtIGBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKWA6IFNob3VsZCByZXR1cm4gYW4gb2JqZWN0IGRlc2NyaWJpbmdcbiAqICAgcHJvcGVydHktcmVsYXRlZCBtZXRhZGF0YSB1c2VkIGJ5IFBvbHltZXIgZmVhdHVyZXMgKGtleTogcHJvcGVydHkgbmFtZVxuICogICB2YWx1ZTogb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydHkgbWV0YWRhdGEpLiBWYWxpZCBrZXlzIGluIHBlci1wcm9wZXJ0eVxuICogICBtZXRhZGF0YSBpbmNsdWRlOlxuICogICAtIGB0eXBlYCAoU3RyaW5nfE51bWJlcnxPYmplY3R8QXJyYXl8Li4uKTogVXNlZCBieVxuICogICAgIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgIHRvIGRldGVybWluZSBob3cgc3RyaW5nLWJhc2VkIGF0dHJpYnV0ZXNcbiAqICAgICBhcmUgZGVzZXJpYWxpemVkIHRvIEphdmFTY3JpcHQgcHJvcGVydHkgdmFsdWVzLlxuICogICAtIGBub3RpZnlgIChib29sZWFuKTogQ2F1c2VzIGEgY2hhbmdlIGluIHRoZSBwcm9wZXJ0eSB0byBmaXJlIGFcbiAqICAgICBub24tYnViYmxpbmcgZXZlbnQgY2FsbGVkIGA8cHJvcGVydHk+LWNoYW5nZWRgLiBFbGVtZW50cyB0aGF0IGhhdmVcbiAqICAgICBlbmFibGVkIHR3by13YXkgYmluZGluZyB0byB0aGUgcHJvcGVydHkgdXNlIHRoaXMgZXZlbnQgdG8gb2JzZXJ2ZSBjaGFuZ2VzLlxuICogICAtIGByZWFkT25seWAgKGJvb2xlYW4pOiBDcmVhdGVzIGEgZ2V0dGVyIGZvciB0aGUgcHJvcGVydHksIGJ1dCBubyBzZXR0ZXIuXG4gKiAgICAgVG8gc2V0IGEgcmVhZC1vbmx5IHByb3BlcnR5LCB1c2UgdGhlIHByaXZhdGUgc2V0dGVyIG1ldGhvZFxuICogICAgIGBfc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKWAuXG4gKiAgIC0gYG9ic2VydmVyYCAoc3RyaW5nKTogT2JzZXJ2ZXIgbWV0aG9kIG5hbWUgdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gKiAgICAgdGhlIHByb3BlcnR5IGNoYW5nZXMuIFRoZSBhcmd1bWVudHMgb2YgdGhlIG1ldGhvZCBhcmVcbiAqICAgICBgKHZhbHVlLCBwcmV2aW91c1ZhbHVlKWAuXG4gKiAgIC0gYGNvbXB1dGVkYCAoc3RyaW5nKTogU3RyaW5nIGRlc2NyaWJpbmcgbWV0aG9kIGFuZCBkZXBlbmRlbnQgcHJvcGVydGllc1xuICogICAgIGZvciBjb21wdXRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgcHJvcGVydHkgKGUuZy4gYCdjb21wdXRlRm9vKGJhciwgem90KSdgKS5cbiAqICAgICBDb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSByZWFkLW9ubHkgYnkgZGVmYXVsdCBhbmQgY2FuIG9ubHkgYmUgY2hhbmdlZFxuICogICAgIHZpYSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBjb21wdXRpbmcgbWV0aG9kLlxuICpcbiAqIC0gYHN0YXRpYyBnZXQgb2JzZXJ2ZXJzKClgOiBBcnJheSBvZiBzdHJpbmdzIGRlc2NyaWJpbmcgbXVsdGktcHJvcGVydHlcbiAqICAgb2JzZXJ2ZXIgbWV0aG9kcyBhbmQgdGhlaXIgZGVwZW5kZW50IHByb3BlcnRpZXMgKGUuZy5cbiAqICAgYCdvYnNlcnZlQUJDKGEsIGIsIGMpJ2ApLlxuICpcbiAqIFRoZSBiYXNlIGNsYXNzIHByb3ZpZGVzIGRlZmF1bHQgaW1wbGVtZW50YXRpb25zIGZvciB0aGUgZm9sbG93aW5nIHN0YW5kYXJkXG4gKiBjdXN0b20gZWxlbWVudCBsaWZlY3ljbGUgY2FsbGJhY2tzOyB1c2VycyBtYXkgb3ZlcnJpZGUgdGhlc2UsIGJ1dCBzaG91bGRcbiAqIGNhbGwgdGhlIHN1cGVyIG1ldGhvZCB0byBlbnN1cmVcbiAqIC0gYGNvbnN0cnVjdG9yYDogUnVuIHdoZW4gdGhlIGVsZW1lbnQgaXMgY3JlYXRlZCBvciB1cGdyYWRlZFxuICogLSBgY29ubmVjdGVkQ2FsbGJhY2tgOiBSdW4gZWFjaCB0aW1lIHRoZSBlbGVtZW50IGlzIGNvbm5lY3RlZCB0byB0aGVcbiAqICAgZG9jdW1lbnRcbiAqIC0gYGRpc2Nvbm5lY3RlZENhbGxiYWNrYDogUnVuIGVhY2ggdGltZSB0aGUgZWxlbWVudCBpcyBkaXNjb25uZWN0ZWQgZnJvbVxuICogICB0aGUgZG9jdW1lbnRcbiAqIC0gYGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja2A6IFJ1biBlYWNoIHRpbWUgYW4gYXR0cmlidXRlIGluXG4gKiAgIGBvYnNlcnZlZEF0dHJpYnV0ZXNgIGlzIHNldCBvciByZW1vdmVkIChub3RlOiB0aGlzIGVsZW1lbnQncyBkZWZhdWx0XG4gKiAgIGBvYnNlcnZlZEF0dHJpYnV0ZXNgIGltcGxlbWVudGF0aW9uIHdpbGwgYXV0b21hdGljYWxseSByZXR1cm4gYW4gYXJyYXlcbiAqICAgb2YgZGFzaC1jYXNlZCBhdHRyaWJ1dGVzIGJhc2VkIG9uIGBwcm9wZXJ0aWVzYClcbiAqXG4gKiBAbWl4aW5GdW5jdGlvblxuICogQHBvbHltZXJcbiAqIEBhcHBsaWVzTWl4aW4gUHJvcGVydHlFZmZlY3RzXG4gKiBAYXBwbGllc01peGluIFByb3BlcnRpZXNNaXhpblxuICogQHByb3BlcnR5IHJvb3RQYXRoIHtzdHJpbmd9IFNldCB0byB0aGUgdmFsdWUgb2YgYHJvb3RQYXRoYCxcbiAqICAgd2hpY2ggZGVmYXVsdHMgdG8gdGhlIG1haW4gZG9jdW1lbnQgcGF0aFxuICogQHByb3BlcnR5IGltcG9ydFBhdGgge3N0cmluZ30gU2V0IHRvIHRoZSB2YWx1ZSBvZiB0aGUgY2xhc3MncyBzdGF0aWNcbiAqICAgYGltcG9ydFBhdGhgIHByb3BlcnR5LCB3aGljaCBkZWZhdWx0cyB0byB0aGUgcGF0aCBvZiB0aGlzIGVsZW1lbnQnc1xuICogICBgZG9tLW1vZHVsZWAgKHdoZW4gYGlzYCBpcyB1c2VkKSwgYnV0IGNhbiBiZSBvdmVycmlkZGVuIGZvciBvdGhlclxuICogICBpbXBvcnQgc3RyYXRlZ2llcy5cbiAqIEBzdW1tYXJ5IEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyB0aGUgY29yZSBBUEkgZm9yIFBvbHltZXInc1xuICogbWV0YS1wcm9ncmFtbWluZyBmZWF0dXJlcy5cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyBDbGFzcyB0byBhcHBseSBtaXhpbiB0by5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyB3aXRoIG1peGluIGFwcGxpZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBFbGVtZW50TWl4aW4gPSBkZWR1cGluZ01peGluKGJhc2UgPT4ge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c31cbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydGllc01peGlufVxuICAgKiBAZXh0ZW5kcyB7SFRNTEVsZW1lbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdCBwb2x5bWVyRWxlbWVudEJhc2UgPSBQcm9wZXJ0aWVzTWl4aW4oUHJvcGVydHlFZmZlY3RzKGJhc2UpKTtcblxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgcHJvcGVydGllcyB3aXRoIGRlZmF1bHQgdmFsdWVzLlxuICAgKiBUaGlzIGxpc3QgaXMgY3JlYXRlZCBhcyBhbiBvcHRpbWl6YXRpb24gc2luY2UgaXQgaXMgYSBzdWJzZXQgb2ZcbiAgICogdGhlIGxpc3QgcmV0dXJuZWQgZnJvbSBgX3Byb3BlcnRpZXNgLlxuICAgKiBUaGlzIGxpc3QgaXMgdXNlZCBpbiBgX2luaXRpYWxpemVQcm9wZXJ0aWVzYCB0byBzZXQgcHJvcGVydHkgZGVmYXVsdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7UG9seW1lckVsZW1lbnRDb25zdHJ1Y3Rvcn0gY29uc3RydWN0b3IgRWxlbWVudCBjbGFzc1xuICAgKiBAcmV0dXJuIHtQb2x5bWVyRWxlbWVudFByb3BlcnRpZXN9IEZsYXR0ZW5lZCBwcm9wZXJ0aWVzIGZvciB0aGlzIGNsYXNzXG4gICAqICAgdGhhdCBoYXZlIGRlZmF1bHQgdmFsdWVzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBwcm9wZXJ0eURlZmF1bHRzKGNvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCFjb25zdHJ1Y3Rvci5oYXNPd25Qcm9wZXJ0eShcbiAgICAgIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19fcHJvcGVydHlEZWZhdWx0cycsIGNvbnN0cnVjdG9yKSkpIHtcbiAgICAgIGNvbnN0cnVjdG9yLl9fcHJvcGVydHlEZWZhdWx0cyA9IG51bGw7XG4gICAgICBsZXQgcHJvcHMgPSBjb25zdHJ1Y3Rvci5fcHJvcGVydGllcztcbiAgICAgIGZvciAobGV0IHAgaW4gcHJvcHMpIHtcbiAgICAgICAgbGV0IGluZm8gPSBwcm9wc1twXTtcbiAgICAgICAgaWYgKCd2YWx1ZScgaW4gaW5mbykge1xuICAgICAgICAgIGNvbnN0cnVjdG9yLl9fcHJvcGVydHlEZWZhdWx0cyA9IGNvbnN0cnVjdG9yLl9fcHJvcGVydHlEZWZhdWx0cyB8fCB7fTtcbiAgICAgICAgICBjb25zdHJ1Y3Rvci5fX3Byb3BlcnR5RGVmYXVsdHNbcF0gPSBpbmZvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb25zdHJ1Y3Rvci5fX3Byb3BlcnR5RGVmYXVsdHM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIG1lbW9pemVkIHZlcnNpb24gb2YgdGhlIGBvYnNlcnZlcnNgIGFycmF5LlxuICAgKiBAcGFyYW0ge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9IGNvbnN0cnVjdG9yIEVsZW1lbnQgY2xhc3NcbiAgICogQHJldHVybiB7QXJyYXl9IEFycmF5IGNvbnRhaW5pbmcgb3duIG9ic2VydmVycyBmb3IgdGhlIGdpdmVuIGNsYXNzXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGZ1bmN0aW9uIG93bk9ic2VydmVycyhjb25zdHJ1Y3Rvcikge1xuICAgIGlmICghY29uc3RydWN0b3IuaGFzT3duUHJvcGVydHkoXG4gICAgICBKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX293bk9ic2VydmVycycsIGNvbnN0cnVjdG9yKSkpIHtcbiAgICAgIGNvbnN0cnVjdG9yLl9fb3duT2JzZXJ2ZXJzID1cbiAgICAgICAgICBjb25zdHJ1Y3Rvci5oYXNPd25Qcm9wZXJ0eShcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnb2JzZXJ2ZXJzJywgY29uc3RydWN0b3IpKSA/XG4gICAgICAgICAgLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSAqLyAoY29uc3RydWN0b3IpLm9ic2VydmVycyA6XG4gICAgICAgICAgbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnN0cnVjdG9yLl9fb3duT2JzZXJ2ZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgZWZmZWN0cyBmb3IgYSBwcm9wZXJ0eS5cbiAgICpcbiAgICogTm90ZSwgb25jZSBhIHByb3BlcnR5IGhhcyBiZWVuIHNldCB0b1xuICAgKiBgcmVhZE9ubHlgLCBgY29tcHV0ZWRgLCBgcmVmbGVjdFRvQXR0cmlidXRlYCwgb3IgYG5vdGlmeWBcbiAgICogdGhlc2UgdmFsdWVzIG1heSBub3QgYmUgY2hhbmdlZC4gRm9yIGV4YW1wbGUsIGEgc3ViY2xhc3MgY2Fubm90XG4gICAqIGFsdGVyIHRoZXNlIHNldHRpbmdzLiBIb3dldmVyLCBhZGRpdGlvbmFsIGBvYnNlcnZlcnNgIG1heSBiZSBhZGRlZFxuICAgKiBieSBzdWJjbGFzc2VzLlxuICAgKlxuICAgKiBUaGUgaW5mbyBvYmplY3Qgc2hvdWxkIGNvbnRhaW4gcHJvcGVydHkgbWV0YWRhdGEgYXMgZm9sbG93czpcbiAgICpcbiAgICogKiBgdHlwZWA6IHtmdW5jdGlvbn0gdHlwZSB0byB3aGljaCBhbiBhdHRyaWJ1dGUgbWF0Y2hpbmcgdGhlIHByb3BlcnR5XG4gICAqIGlzIGRlc2VyaWFsaXplZC4gTm90ZSB0aGUgcHJvcGVydHkgaXMgY2FtZWwtY2FzZWQgZnJvbSBhIGRhc2gtY2FzZWRcbiAgICogYXR0cmlidXRlLiBGb3IgZXhhbXBsZSwgJ2Zvby1iYXInIGF0dHJpYnV0ZSBpcyBkZXNlcmlhbGl6ZWQgdG8gYVxuICAgKiBwcm9wZXJ0eSBuYW1lZCAnZm9vQmFyJy5cbiAgICpcbiAgICogKiBgcmVhZE9ubHlgOiB7Ym9vbGVhbn0gY3JlYXRlcyBhIHJlYWRPbmx5IHByb3BlcnR5IGFuZFxuICAgKiBtYWtlcyBhIHByaXZhdGUgc2V0dGVyIGZvciB0aGUgcHJpdmF0ZSBvZiB0aGUgZm9ybSAnX3NldEZvbycgZm9yIGFcbiAgICogcHJvcGVydHkgJ2ZvbycsXG4gICAqXG4gICAqICogYGNvbXB1dGVkYDoge3N0cmluZ30gY3JlYXRlcyBhIGNvbXB1dGVkIHByb3BlcnR5LiBBIGNvbXB1dGVkIHByb3BlcnR5XG4gICAqIGlzIGFsc28gYXV0b21hdGljYWxseSBzZXQgdG8gYHJlYWRPbmx5OiB0cnVlYC4gVGhlIHZhbHVlIGlzIGNhbGN1bGF0ZWRcbiAgICogYnkgcnVubmluZyBhIG1ldGhvZCBhbmQgYXJndW1lbnRzIHBhcnNlZCBmcm9tIHRoZSBnaXZlbiBzdHJpbmcuIEZvclxuICAgKiBleGFtcGxlICdjb21wdXRlKGZvbyknIHdpbGwgY29tcHV0ZSBhIGdpdmVuIHByb3BlcnR5IHdoZW4gdGhlXG4gICAqICdmb28nIHByb3BlcnR5IGNoYW5nZXMgYnkgZXhlY3V0aW5nIHRoZSAnY29tcHV0ZScgbWV0aG9kLiBUaGlzIG1ldGhvZFxuICAgKiBtdXN0IHJldHVybiB0aGUgY29tcHV0ZWQgdmFsdWUuXG4gICAqXG4gICAqICogYHJlZmxlY3RUb0F0dHJpYnV0ZWA6IHtib29sZWFufSBJZiB0cnVlLCB0aGUgcHJvcGVydHkgdmFsdWUgaXMgcmVmbGVjdGVkXG4gICAqIHRvIGFuIGF0dHJpYnV0ZSBvZiB0aGUgc2FtZSBuYW1lLiBOb3RlLCB0aGUgYXR0cmlidXRlIGlzIGRhc2gtY2FzZWRcbiAgICogc28gYSBwcm9wZXJ0eSBuYW1lZCAnZm9vQmFyJyBpcyByZWZsZWN0ZWQgYXMgJ2Zvby1iYXInLlxuICAgKlxuICAgKiAqIGBub3RpZnlgOiB7Ym9vbGVhbn0gc2VuZHMgYSBub24tYnViYmxpbmcgbm90aWZpY2F0aW9uIGV2ZW50IHdoZW5cbiAgICogdGhlIHByb3BlcnR5IGNoYW5nZXMuIEZvciBleGFtcGxlLCBhIHByb3BlcnR5IG5hbWVkICdmb28nIHNlbmRzIGFuXG4gICAqIGV2ZW50IG5hbWVkICdmb28tY2hhbmdlZCcgd2l0aCBgZXZlbnQuZGV0YWlsYCBzZXQgdG8gdGhlIHZhbHVlIG9mXG4gICAqIHRoZSBwcm9wZXJ0eS5cbiAgICpcbiAgICogKiBvYnNlcnZlcjoge3N0cmluZ30gbmFtZSBvZiBhIG1ldGhvZCB0aGF0IHJ1bnMgd2hlbiB0aGUgcHJvcGVydHlcbiAgICogY2hhbmdlcy4gVGhlIGFyZ3VtZW50cyBvZiB0aGUgbWV0aG9kIGFyZSAodmFsdWUsIHByZXZpb3VzVmFsdWUpLlxuICAgKlxuICAgKiBOb3RlOiBVc2VycyBtYXkgd2FudCBjb250cm9sIG92ZXIgbW9kaWZ5aW5nIHByb3BlcnR5XG4gICAqIGVmZmVjdHMgdmlhIHN1YmNsYXNzaW5nLiBGb3IgZXhhbXBsZSwgYSB1c2VyIG1pZ2h0IHdhbnQgdG8gbWFrZSBhXG4gICAqIHJlZmxlY3RUb0F0dHJpYnV0ZSBwcm9wZXJ0eSBub3QgZG8gc28gaW4gYSBzdWJjbGFzcy4gV2UndmUgY2hvc2VuIHRvXG4gICAqIGRpc2FibGUgdGhpcyBiZWNhdXNlIGl0IGxlYWRzIHRvIGFkZGl0aW9uYWwgY29tcGxpY2F0aW9uLlxuICAgKiBGb3IgZXhhbXBsZSwgYSByZWFkT25seSBlZmZlY3QgZ2VuZXJhdGVzIGEgc3BlY2lhbCBzZXR0ZXIuIElmIGEgc3ViY2xhc3NcbiAgICogZGlzYWJsZXMgdGhlIGVmZmVjdCwgdGhlIHNldHRlciB3b3VsZCBmYWlsIHVuZXhwZWN0ZWRseS5cbiAgICogQmFzZWQgb24gZmVlZGJhY2ssIHdlIG1heSB3YW50IHRvIHRyeSB0byBtYWtlIGVmZmVjdHMgbW9yZSBtYWxsZWFibGVcbiAgICogYW5kL29yIHByb3ZpZGUgYW4gYWR2YW5jZWQgYXBpIGZvciBtYW5pcHVsYXRpbmcgdGhlbS5cbiAgICpcbiAgICogQHBhcmFtIHshUG9seW1lckVsZW1lbnR9IHByb3RvIEVsZW1lbnQgY2xhc3MgcHJvdG90eXBlIHRvIGFkZCBhY2Nlc3NvcnNcbiAgICogICBhbmQgZWZmZWN0cyB0b1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBwcm9wZXJ0eS5cbiAgICogQHBhcmFtIHtPYmplY3R9IGluZm8gSW5mbyBvYmplY3QgZnJvbSB3aGljaCB0byBjcmVhdGUgcHJvcGVydHkgZWZmZWN0cy5cbiAgICogU3VwcG9ydGVkIGtleXM6XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhbGxQcm9wcyBGbGF0dGVuZWQgbWFwIG9mIGFsbCBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhpc1xuICAgKiAgIGVsZW1lbnQgKGluY2x1ZGluZyBpbmhlcml0ZWQgcHJvcGVydGllcylcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZVByb3BlcnR5RnJvbUNvbmZpZyhwcm90bywgbmFtZSwgaW5mbywgYWxsUHJvcHMpIHtcbiAgICAvLyBjb21wdXRlZCBmb3JjZXMgcmVhZE9ubHkuLi5cbiAgICBpZiAoaW5mby5jb21wdXRlZCkge1xuICAgICAgaW5mby5yZWFkT25seSA9IHRydWU7XG4gICAgfVxuICAgIC8vIE5vdGUsIHNpbmNlIGFsbCBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSByZWFkT25seSwgdGhpcyBwcmV2ZW50c1xuICAgIC8vIGFkZGluZyBhZGRpdGlvbmFsIGNvbXB1dGVkIHByb3BlcnR5IGVmZmVjdHMgKHdoaWNoIGxlYWRzIHRvIGEgY29uZnVzaW5nXG4gICAgLy8gc2V0dXAgd2hlcmUgbXVsdGlwbGUgdHJpZ2dlcnMgZm9yIHNldHRpbmcgYSBwcm9wZXJ0eSlcbiAgICAvLyBXaGlsZSB3ZSBkbyBoYXZlIGBoYXNDb21wdXRlZEVmZmVjdGAgdGhpcyBpcyBzZXQgb24gdGhlIHByb3BlcnR5J3NcbiAgICAvLyBkZXBlbmRlbmNpZXMgcmF0aGVyIHRoYW4gaXRzZWxmLlxuICAgIGlmIChpbmZvLmNvbXB1dGVkKSB7XG4gICAgICBpZiAocHJvdG8uX2hhc1JlYWRPbmx5RWZmZWN0KG5hbWUpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgQ2Fubm90IHJlZGVmaW5lIGNvbXB1dGVkIHByb3BlcnR5ICcke25hbWV9Jy5gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3RvLl9jcmVhdGVDb21wdXRlZFByb3BlcnR5KG5hbWUsIGluZm8uY29tcHV0ZWQsIGFsbFByb3BzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGluZm8ucmVhZE9ubHkgJiYgIXByb3RvLl9oYXNSZWFkT25seUVmZmVjdChuYW1lKSkge1xuICAgICAgcHJvdG8uX2NyZWF0ZVJlYWRPbmx5UHJvcGVydHkobmFtZSwgIWluZm8uY29tcHV0ZWQpO1xuICAgIH0gZWxzZSBpZiAoaW5mby5yZWFkT25seSA9PT0gZmFsc2UgJiYgcHJvdG8uX2hhc1JlYWRPbmx5RWZmZWN0KG5hbWUpKSB7XG4gICAgICBjb25zb2xlLndhcm4oYENhbm5vdCBtYWtlIHJlYWRPbmx5IHByb3BlcnR5ICcke25hbWV9JyBub24tcmVhZE9ubHkuYCk7XG4gICAgfVxuICAgIGlmIChpbmZvLnJlZmxlY3RUb0F0dHJpYnV0ZSAmJiAhcHJvdG8uX2hhc1JlZmxlY3RFZmZlY3QobmFtZSkpIHtcbiAgICAgIHByb3RvLl9jcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eShuYW1lKTtcbiAgICB9IGVsc2UgaWYgKGluZm8ucmVmbGVjdFRvQXR0cmlidXRlID09PSBmYWxzZSAmJiBwcm90by5faGFzUmVmbGVjdEVmZmVjdChuYW1lKSkge1xuICAgICAgY29uc29sZS53YXJuKGBDYW5ub3QgbWFrZSByZWZsZWN0ZWQgcHJvcGVydHkgJyR7bmFtZX0nIG5vbi1yZWZsZWN0ZWQuYCk7XG4gICAgfVxuICAgIGlmIChpbmZvLm5vdGlmeSAmJiAhcHJvdG8uX2hhc05vdGlmeUVmZmVjdChuYW1lKSkge1xuICAgICAgcHJvdG8uX2NyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5KG5hbWUpO1xuICAgIH0gZWxzZSBpZiAoaW5mby5ub3RpZnkgPT09IGZhbHNlICYmIHByb3RvLl9oYXNOb3RpZnlFZmZlY3QobmFtZSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihgQ2Fubm90IG1ha2Ugbm90aWZ5IHByb3BlcnR5ICcke25hbWV9JyBub24tbm90aWZ5LmApO1xuICAgIH1cbiAgICAvLyBhbHdheXMgYWRkIG9ic2VydmVyXG4gICAgaWYgKGluZm8ub2JzZXJ2ZXIpIHtcbiAgICAgIHByb3RvLl9jcmVhdGVQcm9wZXJ0eU9ic2VydmVyKG5hbWUsIGluZm8ub2JzZXJ2ZXIsIGFsbFByb3BzW2luZm8ub2JzZXJ2ZXJdKTtcbiAgICB9XG4gICAgLy8gYWx3YXlzIGNyZWF0ZSB0aGUgbWFwcGluZyBmcm9tIGF0dHJpYnV0ZSBiYWNrIHRvIHByb3BlcnR5IGZvciBkZXNlcmlhbGl6YXRpb24uXG4gICAgcHJvdG8uX2FkZFByb3BlcnR5VG9BdHRyaWJ1dGVNYXAobmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBhbGwgc3R5bGUgZWxlbWVudHMgaW4gdGhlIGVsZW1lbnQgdGVtcGxhdGUuIFN0eWxlcyB3aXRoIHRoZVxuICAgKiBgaW5jbHVkZWAgYXR0cmlidXRlIGFyZSBwcm9jZXNzZWQgc3VjaCB0aGF0IGFueSBzdHlsZXMgaW5cbiAgICogdGhlIGFzc29jaWF0ZWQgXCJzdHlsZSBtb2R1bGVzXCIgYXJlIGluY2x1ZGVkIGluIHRoZSBlbGVtZW50IHRlbXBsYXRlLlxuICAgKiBAcGFyYW0ge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9IGtsYXNzIEVsZW1lbnQgY2xhc3NcbiAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgdG8gcHJvY2Vzc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gaXMgTmFtZSBvZiBlbGVtZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJJIEJhc2UgVVJJIGZvciBlbGVtZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBwcm9jZXNzRWxlbWVudFN0eWxlcyhrbGFzcywgdGVtcGxhdGUsIGlzLCBiYXNlVVJJKSB7XG4gICAgaWYgKCFidWlsdENTUykge1xuICAgICAgY29uc3QgdGVtcGxhdGVTdHlsZXMgPSB0ZW1wbGF0ZS5jb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlJyk7XG4gICAgICBjb25zdCBzdHlsZXNXaXRoSW1wb3J0cyA9IHN0eWxlc0Zyb21UZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAvLyBpbnNlcnQgc3R5bGVzIGZyb20gPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPiBhdCB0aGUgdG9wIG9mIHRoZSB0ZW1wbGF0ZVxuICAgICAgY29uc3QgbGlua2VkU3R5bGVzID0gc3R5bGVzRnJvbU1vZHVsZUltcG9ydHMoaXMpO1xuICAgICAgY29uc3QgZmlyc3RUZW1wbGF0ZUNoaWxkID0gdGVtcGxhdGUuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGxpbmtlZFN0eWxlcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGxldCBzID0gbGlua2VkU3R5bGVzW2lkeF07XG4gICAgICAgIHMudGV4dENvbnRlbnQgPSBrbGFzcy5fcHJvY2Vzc1N0eWxlVGV4dChzLnRleHRDb250ZW50LCBiYXNlVVJJKTtcbiAgICAgICAgdGVtcGxhdGUuY29udGVudC5pbnNlcnRCZWZvcmUocywgZmlyc3RUZW1wbGF0ZUNoaWxkKTtcbiAgICAgIH1cbiAgICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhlIGxhc3QgXCJjb25jcmV0ZVwiIHN0eWxlIGluIHRoZSB0ZW1wbGF0ZSB3ZSBoYXZlIGVuY291bnRlcmVkXG4gICAgICBsZXQgdGVtcGxhdGVTdHlsZUluZGV4ID0gMDtcbiAgICAgIC8vIGVuc3VyZSBhbGwgZ2F0aGVyZWQgc3R5bGVzIGFyZSBhY3R1YWxseSBpbiB0aGlzIHRlbXBsYXRlLlxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZXNXaXRoSW1wb3J0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcyA9IHN0eWxlc1dpdGhJbXBvcnRzW2ldO1xuICAgICAgICBsZXQgdGVtcGxhdGVTdHlsZSA9IHRlbXBsYXRlU3R5bGVzW3RlbXBsYXRlU3R5bGVJbmRleF07XG4gICAgICAgIC8vIGlmIHRoZSBzdHlsZSBpcyBub3QgaW4gdGhpcyB0ZW1wbGF0ZSwgaXQncyBiZWVuIFwiaW5jbHVkZWRcIiBhbmRcbiAgICAgICAgLy8gd2UgcHV0IGEgY2xvbmUgb2YgaXQgaW4gdGhlIHRlbXBsYXRlIGJlZm9yZSB0aGUgc3R5bGUgdGhhdCBpbmNsdWRlZCBpdFxuICAgICAgICBpZiAodGVtcGxhdGVTdHlsZSAhPT0gcykge1xuICAgICAgICAgIHMgPSBzLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICB0ZW1wbGF0ZVN0eWxlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHMsIHRlbXBsYXRlU3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRlbXBsYXRlU3R5bGVJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHMudGV4dENvbnRlbnQgPSBrbGFzcy5fcHJvY2Vzc1N0eWxlVGV4dChzLnRleHRDb250ZW50LCBiYXNlVVJJKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHdpbmRvdy5TaGFkeUNTUykge1xuICAgICAgd2luZG93LlNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZSh0ZW1wbGF0ZSwgaXMpO1xuICAgIH1cbiAgICAvLyBTdXBwb3J0IGZvciBgYWRvcHRlZFN0eWxlc2hlZXRzYCByZWxpZXMgb24gdXNpbmcgbmF0aXZlIFNoYWRvdyBET01cbiAgICAvLyBhbmQgYnVpbHQgQ1NTLiBCdWlsdCBDU1MgaXMgcmVxdWlyZWQgYmVjYXVzZSBydW50aW1lIHRyYW5zZm9ybWF0aW9uIG9mXG4gICAgLy8gYEBhcHBseWAgaXMgbm90IHN1cHBvcnRlZC4gVGhpcyBpcyBiZWNhdXNlIFNoYWR5Q1NTIHJlbGllcyBvbiBiZWluZyBhYmxlXG4gICAgLy8gdG8gdXBkYXRlIGEgYHN0eWxlYCBlbGVtZW50IGluIHRoZSBlbGVtZW50IHRlbXBsYXRlIGFuZCB0aGlzIGlzXG4gICAgLy8gcmVtb3ZlZCB3aGVuIHVzaW5nIGBhZG9wdGVkU3R5bGVTaGVldHNgLlxuICAgIC8vIE5vdGUsIGl0IHdvdWxkIGJlIG1vcmUgZWZmaWNpZW50IHRvIGFsbG93IHN0eWxlIGluY2x1ZGVzIHRvIGJlY29tZVxuICAgIC8vIHNlcGFyYXRlIHN0eWxlc2hlZXRzOyBob3dldmVyLCBiZWNhdXNlIG9mIGBAYXBwbHlgIHRoZXNlIGFyZVxuICAgIC8vIHBvdGVudGlhbGx5IG5vdCBzaGFyZWFibGUgYW5kIHNoYXJpbmcgdGhlIG9uZXMgdGhhdCBjb3VsZCBiZSBzaGFyZWRcbiAgICAvLyB3b3VsZCByZXF1aXJlIHNvbWUgY29vcmRpbmF0aW9uLiBUbyBrZWVwIGl0IHNpbXBsZSwgYWxsIHRoZSBpbmNsdWRlc1xuICAgIC8vIGFuZCBzdHlsZXMgYXJlIGNvbGxhcHNlZCBpbnRvIGEgc2luZ2xlIHNoYXJlYWJsZSBzdHlsZXNoZWV0LlxuICAgIGlmICh1c2VBZG9wdGVkU3R5bGVTaGVldHNXaXRoQnVpbHRDU1MgJiYgYnVpbHRDU1MgJiZcbiAgICAgICAgc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzKSB7XG4gICAgICAvLyBSZW1vdmUgc3R5bGVzIGluIHRlbXBsYXRlIGFuZCBtYWtlIGEgc2hhcmVhYmxlIHN0eWxlc2hlZXRcbiAgICAgIGNvbnN0IHN0eWxlcyA9IHRlbXBsYXRlLmNvbnRlbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKTtcbiAgICAgIGlmIChzdHlsZXMpIHtcbiAgICAgICAgbGV0IGNzcyA9ICcnO1xuICAgICAgICBBcnJheS5mcm9tKHN0eWxlcykuZm9yRWFjaChzID0+IHtcbiAgICAgICAgICBjc3MgKz0gcy50ZXh0Q29udGVudDtcbiAgICAgICAgICBzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocyk7XG4gICAgICAgIH0pO1xuICAgICAgICBrbGFzcy5fc3R5bGVTaGVldCA9IG5ldyBDU1NTdHlsZVNoZWV0KCk7XG4gICAgICAgIGtsYXNzLl9zdHlsZVNoZWV0LnJlcGxhY2VTeW5jKGNzcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExvb2sgdXAgdGVtcGxhdGUgZnJvbSBkb20tbW9kdWxlIGZvciBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpcyBFbGVtZW50IG5hbWUgdG8gbG9vayB1cFxuICAgKiBAcmV0dXJuIHs/SFRNTFRlbXBsYXRlRWxlbWVudHx1bmRlZmluZWR9IFRlbXBsYXRlIGZvdW5kIGluIGRvbSBtb2R1bGUsIG9yXG4gICAqICAgdW5kZWZpbmVkIGlmIG5vdCBmb3VuZFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBmdW5jdGlvbiBnZXRUZW1wbGF0ZUZyb21Eb21Nb2R1bGUoaXMpIHtcbiAgICBsZXQgdGVtcGxhdGUgPSBudWxsO1xuICAgIC8vIFVuZGVyIHN0cmljdFRlbXBsYXRlUG9saWN5IGluIDMueCssIGRvbS1tb2R1bGUgbG9va3VwIGlzIG9ubHkgYWxsb3dlZFxuICAgIC8vIHdoZW4gb3B0ZWQtaW4gdmlhIGFsbG93VGVtcGxhdGVGcm9tRG9tTW9kdWxlXG4gICAgaWYgKGlzICYmICghc3RyaWN0VGVtcGxhdGVQb2xpY3kgfHwgYWxsb3dUZW1wbGF0ZUZyb21Eb21Nb2R1bGUpKSB7XG4gICAgICB0ZW1wbGF0ZSA9IC8qKiBAdHlwZSB7P0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovIChcbiAgICAgICAgICBEb21Nb2R1bGUuaW1wb3J0KGlzLCAndGVtcGxhdGUnKSk7XG4gICAgICAvLyBVbmRlciBzdHJpY3RUZW1wbGF0ZVBvbGljeSwgcmVxdWlyZSBhbnkgZWxlbWVudCB3aXRoIGFuIGBpc2BcbiAgICAgIC8vIHNwZWNpZmllZCB0byBoYXZlIGEgZG9tLW1vZHVsZVxuICAgICAgaWYgKHN0cmljdFRlbXBsYXRlUG9saWN5ICYmICF0ZW1wbGF0ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHN0cmljdFRlbXBsYXRlUG9saWN5OiBleHBlY3RpbmcgZG9tLW1vZHVsZSBvciBudWxsIHRlbXBsYXRlIGZvciAke2lzfWApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cblxuICAvKipcbiAgICogQHBvbHltZXJcbiAgICogQG1peGluQ2xhc3NcbiAgICogQHVucmVzdHJpY3RlZFxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9FbGVtZW50TWl4aW59XG4gICAqIEBleHRlbmRzIHtwb2x5bWVyRWxlbWVudEJhc2V9XG4gICAqL1xuICBjbGFzcyBQb2x5bWVyRWxlbWVudCBleHRlbmRzIHBvbHltZXJFbGVtZW50QmFzZSB7XG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IFBvbHltZXIgdmVyc2lvbiBpbiBTZW12ZXIgbm90YXRpb24uXG4gICAgICogQHR5cGUge3N0cmluZ30gU2VtdmVyIG5vdGF0aW9uIG9mIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgUG9seW1lci5cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgcG9seW1lckVsZW1lbnRWZXJzaW9uKCkge1xuICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgb2YgUHJvcGVydGllc01peGluIF9maW5hbGl6ZUNsYXNzIHRvIGNyZWF0ZSBvYnNlcnZlcnMgYW5kXG4gICAgICogZmluZCB0aGUgdGVtcGxhdGUuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX2ZpbmFsaXplQ2xhc3MoKSB7XG4gICAgICAvLyBUT0RPKGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci9pc3N1ZXMvMzI0MCk6XG4gICAgICAvLyAgICAgQ2hhbmdlIGJhY2sgdG8ganVzdCBzdXBlci5tZXRob2RDYWxsKClcbiAgICAgIHBvbHltZXJFbGVtZW50QmFzZS5fZmluYWxpemVDbGFzcy5jYWxsKHRoaXMpO1xuICAgICAgY29uc3Qgb2JzZXJ2ZXJzID0gb3duT2JzZXJ2ZXJzKHRoaXMpO1xuICAgICAgaWYgKG9ic2VydmVycykge1xuICAgICAgICB0aGlzLmNyZWF0ZU9ic2VydmVycyhvYnNlcnZlcnMsIHRoaXMuX3Byb3BlcnRpZXMpO1xuICAgICAgfVxuICAgICAgdGhpcy5fcHJlcGFyZVRlbXBsYXRlKCk7XG4gICAgfVxuXG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgc3RhdGljIF9wcmVwYXJlVGVtcGxhdGUoKSB7XG4gICAgICAvLyBub3RlOiBjcmVhdGUgXCJ3b3JraW5nXCIgdGVtcGxhdGUgdGhhdCBpcyBmaW5hbGl6ZWQgYXQgaW5zdGFuY2UgdGltZVxuICAgICAgbGV0IHRlbXBsYXRlID0gLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSAqLyAodGhpcykudGVtcGxhdGU7XG4gICAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCd0ZW1wbGF0ZSBnZXR0ZXIgbXVzdCByZXR1cm4gSFRNTFRlbXBsYXRlRWxlbWVudCcpO1xuICAgICAgICAgIHRlbXBsYXRlID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmICghbGVnYWN5T3B0aW1pemF0aW9ucykge1xuICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICAgIHRoaXMucHJvdG90eXBlLl90ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIG9mIFByb3BlcnRpZXNDaGFuZ2VkIGNyZWF0ZVByb3BlcnRpZXMgdG8gY3JlYXRlIGFjY2Vzc29yc1xuICAgICAqIGFuZCBwcm9wZXJ0eSBlZmZlY3RzIGZvciBhbGwgb2YgdGhlIHByb3BlcnRpZXMuXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBwcm9wcyAuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlUHJvcGVydGllcyhwcm9wcykge1xuICAgICAgZm9yIChsZXQgcCBpbiBwcm9wcykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eUZyb21Db25maWcoXG4gICAgICAgICAgICAvKiogQHR5cGUgez99ICovICh0aGlzLnByb3RvdHlwZSksIHAsIHByb3BzW3BdLCBwcm9wcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBvYnNlcnZlcnMgZm9yIHRoZSBnaXZlbiBgb2JzZXJ2ZXJzYCBhcnJheS5cbiAgICAgKiBMZXZlcmFnZXMgYFByb3BlcnR5RWZmZWN0c2AgdG8gY3JlYXRlIG9ic2VydmVycy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXJzIEFycmF5IG9mIG9ic2VydmVyIGRlc2NyaXB0b3JzIGZvclxuICAgICAqICAgdGhpcyBjbGFzc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkeW5hbWljRm5zIE9iamVjdCBjb250YWluaW5nIGtleXMgZm9yIGFueSBwcm9wZXJ0aWVzXG4gICAgICogICB0aGF0IGFyZSBmdW5jdGlvbnMgYW5kIHNob3VsZCB0cmlnZ2VyIHRoZSBlZmZlY3Qgd2hlbiB0aGUgZnVuY3Rpb25cbiAgICAgKiAgIHJlZmVyZW5jZSBpcyBjaGFuZ2VkXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlT2JzZXJ2ZXJzKG9ic2VydmVycywgZHluYW1pY0Zucykge1xuICAgICAgY29uc3QgcHJvdG8gPSB0aGlzLnByb3RvdHlwZTtcbiAgICAgIGZvciAobGV0IGk9MDsgaSA8IG9ic2VydmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwcm90by5fY3JlYXRlTWV0aG9kT2JzZXJ2ZXIob2JzZXJ2ZXJzW2ldLCBkeW5hbWljRm5zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0ZW1wbGF0ZSB0aGF0IHdpbGwgYmUgc3RhbXBlZCBpbnRvIHRoaXMgZWxlbWVudCdzIHNoYWRvdyByb290LlxuICAgICAqXG4gICAgICogSWYgYSBgc3RhdGljIGdldCBpcygpYCBnZXR0ZXIgaXMgZGVmaW5lZCwgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gd2lsbFxuICAgICAqIHJldHVybiB0aGUgZmlyc3QgYDx0ZW1wbGF0ZT5gIGluIGEgYGRvbS1tb2R1bGVgIHdob3NlIGBpZGAgbWF0Y2hlcyB0aGlzXG4gICAgICogZWxlbWVudCdzIGBpc2AgKG5vdGUgdGhhdCBhIGBfdGVtcGxhdGVgIHByb3BlcnR5IG9uIHRoZSBjbGFzcyBwcm90b3R5cGVcbiAgICAgKiB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhlIGBkb20tbW9kdWxlYCB0ZW1wbGF0ZSwgdG8gbWFpbnRhaW4gbGVnYWN5XG4gICAgICogZWxlbWVudCBzZW1hbnRpY3M7IGEgc3ViY2xhc3Mgd2lsbCBzdWJzZXF1ZW50bHkgZmFsbCBiYWNrIHRvIGl0cyBzdXBlclxuICAgICAqIGNsYXNzIHRlbXBsYXRlIGlmIG5laXRoZXIgYSBgcHJvdG90eXBlLl90ZW1wbGF0ZWAgb3IgYSBgZG9tLW1vZHVsZWAgZm9yXG4gICAgICogdGhlIGNsYXNzJ3MgYGlzYCB3YXMgZm91bmQpLlxuICAgICAqXG4gICAgICogVXNlcnMgbWF5IG92ZXJyaWRlIHRoaXMgZ2V0dGVyIHRvIHJldHVybiBhbiBhcmJpdHJhcnkgdGVtcGxhdGVcbiAgICAgKiAoaW4gd2hpY2ggY2FzZSB0aGUgYGlzYCBnZXR0ZXIgaXMgdW5uZWNlc3NhcnkpLiBUaGUgdGVtcGxhdGUgcmV0dXJuZWRcbiAgICAgKiBtdXN0IGJlIGFuIGBIVE1MVGVtcGxhdGVFbGVtZW50YC5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB3aGVuIHN1YmNsYXNzaW5nLCBpZiB0aGUgc3VwZXIgY2xhc3Mgb3ZlcnJvZGUgdGhlIGRlZmF1bHRcbiAgICAgKiBpbXBsZW1lbnRhdGlvbiBhbmQgdGhlIHN1YmNsYXNzIHdvdWxkIGxpa2UgdG8gcHJvdmlkZSBhbiBhbHRlcm5hdGVcbiAgICAgKiB0ZW1wbGF0ZSB2aWEgYSBgZG9tLW1vZHVsZWAsIGl0IHNob3VsZCBvdmVycmlkZSB0aGlzIGdldHRlciBhbmRcbiAgICAgKiByZXR1cm4gYERvbU1vZHVsZS5pbXBvcnQodGhpcy5pcywgJ3RlbXBsYXRlJylgLlxuICAgICAqXG4gICAgICogSWYgYSBzdWJjbGFzcyB3b3VsZCBsaWtlIHRvIG1vZGlmeSB0aGUgc3VwZXIgY2xhc3MgdGVtcGxhdGUsIGl0IHNob3VsZFxuICAgICAqIGNsb25lIGl0IHJhdGhlciB0aGFuIG1vZGlmeSBpdCBpbiBwbGFjZS4gIElmIHRoZSBnZXR0ZXIgZG9lcyBleHBlbnNpdmVcbiAgICAgKiB3b3JrIHN1Y2ggYXMgY2xvbmluZy9tb2RpZnlpbmcgYSB0ZW1wbGF0ZSwgaXQgc2hvdWxkIG1lbW9pemUgdGhlXG4gICAgICogdGVtcGxhdGUgZm9yIG1heGltdW0gcGVyZm9ybWFuY2U6XG4gICAgICpcbiAgICAgKiAgIGxldCBtZW1vaXplZFRlbXBsYXRlO1xuICAgICAqICAgY2xhc3MgTXlTdWJDbGFzcyBleHRlbmRzIE15U3VwZXJDbGFzcyB7XG4gICAgICogICAgIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7XG4gICAgICogICAgICAgaWYgKCFtZW1vaXplZFRlbXBsYXRlKSB7XG4gICAgICogICAgICAgICBtZW1vaXplZFRlbXBsYXRlID0gc3VwZXIudGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAqICAgICAgICAgbGV0IHN1YkNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgKiAgICAgICAgIHN1YkNvbnRlbnQudGV4dENvbnRlbnQgPSAnVGhpcyBjYW1lIGZyb20gTXlTdWJDbGFzcyc7XG4gICAgICogICAgICAgICBtZW1vaXplZFRlbXBsYXRlLmNvbnRlbnQuYXBwZW5kQ2hpbGQoc3ViQ29udGVudCk7XG4gICAgICogICAgICAgfVxuICAgICAqICAgICAgIHJldHVybiBtZW1vaXplZFRlbXBsYXRlO1xuICAgICAqICAgICB9XG4gICAgICogICB9XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHshSFRNTFRlbXBsYXRlRWxlbWVudHxzdHJpbmd9IFRlbXBsYXRlIHRvIGJlIHN0YW1wZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7XG4gICAgICAvLyBFeHBsYW5hdGlvbiBvZiB0ZW1wbGF0ZS1yZWxhdGVkIHByb3BlcnRpZXM6XG4gICAgICAvLyAtIGNvbnN0cnVjdG9yLnRlbXBsYXRlICh0aGlzIGdldHRlcik6IHRoZSB0ZW1wbGF0ZSBmb3IgdGhlIGNsYXNzLlxuICAgICAgLy8gICAgIFRoaXMgY2FuIGNvbWUgZnJvbSB0aGUgcHJvdG90eXBlIChmb3IgbGVnYWN5IGVsZW1lbnRzKSwgZnJvbSBhXG4gICAgICAvLyAgICAgZG9tLW1vZHVsZSwgb3IgZnJvbSB0aGUgc3VwZXIgY2xhc3MncyB0ZW1wbGF0ZSAob3IgY2FuIGJlIG92ZXJyaWRkZW5cbiAgICAgIC8vICAgICBhbHRvZ2V0aGVyIGJ5IHRoZSB1c2VyKVxuICAgICAgLy8gLSBjb25zdHJ1Y3Rvci5fdGVtcGxhdGU6IG1lbW9pemVkIHZlcnNpb24gb2YgY29uc3RydWN0b3IudGVtcGxhdGVcbiAgICAgIC8vIC0gcHJvdG90eXBlLl90ZW1wbGF0ZTogd29ya2luZyB0ZW1wbGF0ZSBmb3IgdGhlIGVsZW1lbnQsIHdoaWNoIHdpbGwgYmVcbiAgICAgIC8vICAgICBwYXJzZWQgYW5kIG1vZGlmaWVkIGluIHBsYWNlLiBJdCBpcyBhIGNsb25lZCB2ZXJzaW9uIG9mXG4gICAgICAvLyAgICAgY29uc3RydWN0b3IudGVtcGxhdGUsIHNhdmVkIGluIF9maW5hbGl6ZUNsYXNzKCkuIE5vdGUgdGhhdCBiZWZvcmVcbiAgICAgIC8vICAgICB0aGlzIGdldHRlciBpcyBjYWxsZWQsIGZvciBsZWdhY3kgZWxlbWVudHMgdGhpcyBjb3VsZCBiZSBmcm9tIGFcbiAgICAgIC8vICAgICBfdGVtcGxhdGUgZmllbGQgb24gdGhlIGluZm8gb2JqZWN0IHBhc3NlZCB0byBQb2x5bWVyKCksIGEgYmVoYXZpb3IsXG4gICAgICAvLyAgICAgb3Igc2V0IGluIHJlZ2lzdGVyZWQoKTsgb25jZSB0aGUgc3RhdGljIGdldHRlciBydW5zLCBhIGNsb25lIG9mIGl0XG4gICAgICAvLyAgICAgd2lsbCBvdmVyd3JpdGUgaXQgb24gdGhlIHByb3RvdHlwZSBhcyB0aGUgd29ya2luZyB0ZW1wbGF0ZS5cbiAgICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfdGVtcGxhdGUnLCB0aGlzKSkpIHtcbiAgICAgICAgY29uc3QgcHJvdG9UZW1wbGF0ZSA9IHRoaXMucHJvdG90eXBlLmhhc093blByb3BlcnR5KFxuICAgICAgICAgIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ190ZW1wbGF0ZScsIHRoaXMucHJvdG90eXBlKSkgP1xuICAgICAgICAgIHRoaXMucHJvdG90eXBlLl90ZW1wbGF0ZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdGVtcGxhdGUgPVxuICAgICAgICAgIC8vIElmIHVzZXIgaGFzIHB1dCB0ZW1wbGF0ZSBvbiBwcm90b3R5cGUgKGUuZy4gaW4gbGVnYWN5IHZpYSByZWdpc3RlcmVkXG4gICAgICAgICAgLy8gY2FsbGJhY2sgb3IgaW5mbyBvYmplY3QpLCBwcmVmZXIgdGhhdCBmaXJzdC4gTm90ZSB0aGF0IGBudWxsYCBpc1xuICAgICAgICAgIC8vIHVzZWQgYXMgYSBzZW50aW5lbCB0byBpbmRpY2F0ZSBcIm5vIHRlbXBsYXRlXCIgYW5kIGNhbiBiZSB1c2VkIHRvXG4gICAgICAgICAgLy8gb3ZlcnJpZGUgYSBzdXBlciB0ZW1wbGF0ZSwgd2hlcmVhcyBgdW5kZWZpbmVkYCBpcyB1c2VkIGFzIGFcbiAgICAgICAgICAvLyBzZW50aW5lbCB0byBtZWFuIFwiZmFsbC1iYWNrIHRvIGRlZmF1bHQgdGVtcGxhdGUgbG9va3VwXCIgdmlhXG4gICAgICAgICAgLy8gZG9tLW1vZHVsZSBhbmQvb3Igc3VwZXIudGVtcGxhdGUuXG4gICAgICAgICAgcHJvdG9UZW1wbGF0ZSAhPT0gdW5kZWZpbmVkID8gcHJvdG9UZW1wbGF0ZSA6XG4gICAgICAgICAgLy8gTG9vayBpbiBkb20tbW9kdWxlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGVsZW1lbnQncyBpc1xuICAgICAgICAgICgodGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdpcycsIHRoaXMpKSAmJlxuICAgICAgICAgIChnZXRUZW1wbGF0ZUZyb21Eb21Nb2R1bGUoLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSovICh0aGlzKS5pcykpKSB8fFxuICAgICAgICAgIC8vIE5leHQgbG9vayBmb3Igc3VwZXJjbGFzcyB0ZW1wbGF0ZSAoY2FsbCB0aGUgc3VwZXIgaW1wbCB0aGlzXG4gICAgICAgICAgLy8gd2F5IHNvIHRoYXQgYHRoaXNgIHBvaW50cyB0byB0aGUgc3VwZXJjbGFzcylcbiAgICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSovICh0aGlzKS5wcm90b3R5cGUpLmNvbnN0cnVjdG9yLnRlbXBsYXRlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl90ZW1wbGF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudHxzdHJpbmd9IHZhbHVlIFRlbXBsYXRlIHRvIHNldC5cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBzZXQgdGVtcGxhdGUodmFsdWUpIHtcbiAgICAgIHRoaXMuX3RlbXBsYXRlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGF0aCBtYXRjaGluZyB0aGUgdXJsIGZyb20gd2hpY2ggdGhlIGVsZW1lbnQgd2FzIGltcG9ydGVkLlxuICAgICAqXG4gICAgICogVGhpcyBwYXRoIGlzIHVzZWQgdG8gcmVzb2x2ZSB1cmwncyBpbiB0ZW1wbGF0ZSBzdHlsZSBjc3NUZXh0LlxuICAgICAqIFRoZSBgaW1wb3J0UGF0aGAgcHJvcGVydHkgaXMgYWxzbyBzZXQgb24gZWxlbWVudCBpbnN0YW5jZXMgYW5kIGNhbiBiZVxuICAgICAqIHVzZWQgdG8gY3JlYXRlIGJpbmRpbmdzIHJlbGF0aXZlIHRvIHRoZSBpbXBvcnQgcGF0aC5cbiAgICAgKlxuICAgICAqIEZvciBlbGVtZW50cyBkZWZpbmVkIGluIEVTIG1vZHVsZXMsIHVzZXJzIHNob3VsZCBpbXBsZW1lbnRcbiAgICAgKiBgc3RhdGljIGdldCBpbXBvcnRNZXRhKCkgeyByZXR1cm4gaW1wb3J0Lm1ldGE7IH1gLCBhbmQgdGhlIGRlZmF1bHRcbiAgICAgKiBpbXBsZW1lbnRhdGlvbiBvZiBgaW1wb3J0UGF0aGAgd2lsbCAgcmV0dXJuIGBpbXBvcnQubWV0YS51cmxgJ3MgcGF0aC5cbiAgICAgKiBGb3IgZWxlbWVudHMgZGVmaW5lZCBpbiBIVE1MIGltcG9ydHMsIHRoaXMgZ2V0dGVyIHdpbGwgcmV0dXJuIHRoZSBwYXRoXG4gICAgICogdG8gdGhlIGRvY3VtZW50IGNvbnRhaW5pbmcgYSBgZG9tLW1vZHVsZWAgZWxlbWVudCBtYXRjaGluZyB0aGlzXG4gICAgICogZWxlbWVudCdzIHN0YXRpYyBgaXNgIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogTm90ZSwgdGhpcyBwYXRoIHNob3VsZCBjb250YWluIGEgdHJhaWxpbmcgYC9gLlxuICAgICAqXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgaW1wb3J0IHBhdGggZm9yIHRoaXMgZWxlbWVudCBjbGFzc1xuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9XG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IGltcG9ydFBhdGgoKSB7XG4gICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX2ltcG9ydFBhdGgnLCB0aGlzKSkpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuaW1wb3J0TWV0YTtcbiAgICAgICAgaWYgKG1ldGEpIHtcbiAgICAgICAgICB0aGlzLl9pbXBvcnRQYXRoID0gcGF0aEZyb21VcmwobWV0YS51cmwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IG1vZHVsZSA9IERvbU1vZHVsZS5pbXBvcnQoLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSAqLyAodGhpcykuaXMpO1xuICAgICAgICAgIHRoaXMuX2ltcG9ydFBhdGggPSAobW9kdWxlICYmIG1vZHVsZS5hc3NldHBhdGgpIHx8XG4gICAgICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSovICh0aGlzKS5wcm90b3R5cGUpLmNvbnN0cnVjdG9yLmltcG9ydFBhdGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9pbXBvcnRQYXRoO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIC8qKiBAdHlwZSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gKi9cbiAgICAgIHRoaXMuX3RlbXBsYXRlO1xuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICB0aGlzLl9pbXBvcnRQYXRoO1xuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICB0aGlzLnJvb3RQYXRoO1xuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICB0aGlzLmltcG9ydFBhdGg7XG4gICAgICAvKiogQHR5cGUge1N0YW1wZWRUZW1wbGF0ZSB8IEhUTUxFbGVtZW50IHwgU2hhZG93Um9vdH0gKi9cbiAgICAgIHRoaXMucm9vdDtcbiAgICAgIC8qKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsICFFbGVtZW50Pn0gKi9cbiAgICAgIHRoaXMuJDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgdGhlIGRlZmF1bHQgYFByb3BlcnR5QWNjZXNzb3JzYCB0byBlbnN1cmUgY2xhc3NcbiAgICAgKiBtZXRhcHJvZ3JhbW1pbmcgcmVsYXRlZCB0byBwcm9wZXJ0eSBhY2Nlc3NvcnMgYW5kIGVmZmVjdHMgaGFzXG4gICAgICogY29tcGxldGVkIChjYWxscyBgZmluYWxpemVgKS5cbiAgICAgKlxuICAgICAqIEl0IGFsc28gaW5pdGlhbGl6ZXMgYW55IHByb3BlcnR5IGRlZmF1bHRzIHByb3ZpZGVkIHZpYSBgdmFsdWVgIGluXG4gICAgICogYHByb3BlcnRpZXNgIG1ldGFkYXRhLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0cyxtaXNzaW5nUHJvcGVydGllc30gZ28vbWlzc2luZ2ZucHJvcHNcbiAgICAgKi9cbiAgICBfaW5pdGlhbGl6ZVByb3BlcnRpZXMoKSB7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLmZpbmFsaXplKCk7XG4gICAgICAvLyBub3RlOiBmaW5hbGl6ZSB0ZW1wbGF0ZSB3aGVuIHdlIGhhdmUgYWNjZXNzIHRvIGBsb2NhbE5hbWVgIHRvXG4gICAgICAvLyBhdm9pZCBkZXBlbmRlbmNlIG9uIGBpc2AgZm9yIHBvbHlmaWxsaW5nIHN0eWxpbmcuXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLl9maW5hbGl6ZVRlbXBsYXRlKC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyh0aGlzKS5sb2NhbE5hbWUpO1xuICAgICAgc3VwZXIuX2luaXRpYWxpemVQcm9wZXJ0aWVzKCk7XG4gICAgICAvLyBzZXQgcGF0aCBkZWZhdWx0c1xuICAgICAgdGhpcy5yb290UGF0aCA9IHJvb3RQYXRoO1xuICAgICAgdGhpcy5pbXBvcnRQYXRoID0gdGhpcy5jb25zdHJ1Y3Rvci5pbXBvcnRQYXRoO1xuICAgICAgLy8gYXBwbHkgcHJvcGVydHkgZGVmYXVsdHMuLi5cbiAgICAgIGxldCBwJCA9IHByb3BlcnR5RGVmYXVsdHModGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgICBpZiAoIXAkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IHAgaW4gcCQpIHtcbiAgICAgICAgbGV0IGluZm8gPSBwJFtwXTtcbiAgICAgICAgaWYgKHRoaXMuX2NhbkFwcGx5UHJvcGVydHlEZWZhdWx0KHApKSB7XG4gICAgICAgICAgbGV0IHZhbHVlID0gdHlwZW9mIGluZm8udmFsdWUgPT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgICBpbmZvLnZhbHVlLmNhbGwodGhpcykgOlxuICAgICAgICAgICAgaW5mby52YWx1ZTtcbiAgICAgICAgICAvLyBTZXQgdmlhIGBfc2V0UHJvcGVydHlgIGlmIHRoZXJlIGlzIGFuIGFjY2Vzc29yLCB0byBlbmFibGVcbiAgICAgICAgICAvLyBpbml0aWFsaXppbmcgcmVhZE9ubHkgcHJvcGVydHkgZGVmYXVsdHNcbiAgICAgICAgICBpZiAodGhpcy5faGFzQWNjZXNzb3IocCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eShwLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXNbcF0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIGEgcHJvcGVydHkgZGZlYXVsdCBjYW4gYmUgYXBwbGllZC4gRm9yIGV4YW1wbGUsIHRoaXNcbiAgICAgKiBwcmV2ZW50cyBhIGRlZmF1bHQgZnJvbSBiZWluZyBhcHBsaWVkIHdoZW4gYSBwcm9wZXJ0eSB0aGF0IGhhcyBub1xuICAgICAqIGFjY2Vzc29yIGlzIG92ZXJyaWRkZW4gYnkgaXRzIGhvc3QgYmVmb3JlIHVwZ3JhZGUgKGUuZy4gdmlhIGEgYmluZGluZykuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBwcm9wZXJ0eSBkZWZhdWx0IGNhbiBiZSBhcHBsaWVkLlxuICAgICAqL1xuICAgIF9jYW5BcHBseVByb3BlcnR5RGVmYXVsdChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuICF0aGlzLmhhc093blByb3BlcnR5KHByb3BlcnR5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHYXRoZXIgc3R5bGUgdGV4dCBmb3IgYSBzdHlsZSBlbGVtZW50IGluIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0IFRleHQgY29udGFpbmluZyBzdHlsaW5nIHRvIHByb2Nlc3NcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSSSBCYXNlIFVSSSB0byByZWJhc2UgQ1NTIHBhdGhzIGFnYWluc3RcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBwcm9jZXNzZWQgQ1NTIHRleHRcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX3Byb2Nlc3NTdHlsZVRleHQoY3NzVGV4dCwgYmFzZVVSSSkge1xuICAgICAgcmV0dXJuIHJlc29sdmVDc3MoY3NzVGV4dCwgYmFzZVVSSSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBDb25maWd1cmVzIGFuIGVsZW1lbnQgYHByb3RvYCB0byBmdW5jdGlvbiB3aXRoIGEgZ2l2ZW4gYHRlbXBsYXRlYC5cbiAgICAqIFRoZSBlbGVtZW50IG5hbWUgYGlzYCBhbmQgZXh0ZW5kcyBgZXh0YCBtdXN0IGJlIHNwZWNpZmllZCBmb3IgU2hhZHlDU1NcbiAgICAqIHN0eWxlIHNjb3BpbmcuXG4gICAgKlxuICAgICogQHBhcmFtIHtzdHJpbmd9IGlzIFRhZyBuYW1lIChvciB0eXBlIGV4dGVuc2lvbiBuYW1lKSBmb3IgdGhpcyBlbGVtZW50XG4gICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICogQHByb3RlY3RlZFxuICAgICogQG5vY29sbGFwc2VcbiAgICAqL1xuICAgIHN0YXRpYyBfZmluYWxpemVUZW1wbGF0ZShpcykge1xuICAgICAgLyoqIEBjb25zdCB7SFRNTFRlbXBsYXRlRWxlbWVudH0gKi9cbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy5wcm90b3R5cGUuX3RlbXBsYXRlO1xuICAgICAgaWYgKHRlbXBsYXRlICYmICF0ZW1wbGF0ZS5fX3BvbHltZXJGaW5hbGl6ZWQpIHtcbiAgICAgICAgdGVtcGxhdGUuX19wb2x5bWVyRmluYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgaW1wb3J0UGF0aCA9IHRoaXMuaW1wb3J0UGF0aDtcbiAgICAgICAgY29uc3QgYmFzZVVSSSA9IGltcG9ydFBhdGggPyByZXNvbHZlVXJsKGltcG9ydFBhdGgpIDogJyc7XG4gICAgICAgIC8vIGUuZy4gc3VwcG9ydCBgaW5jbHVkZT1cIm1vZHVsZS1uYW1lXCJgLCBhbmQgU2hhZHlDU1NcbiAgICAgICAgcHJvY2Vzc0VsZW1lbnRTdHlsZXModGhpcywgdGVtcGxhdGUsIGlzLCBiYXNlVVJJKTtcbiAgICAgICAgdGhpcy5wcm90b3R5cGUuX2JpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgYSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBzdGFuZGFyZCBDdXN0b20gRWxlbWVudHNcbiAgICAgKiBgY29ubmVjdGVkQ2FsbGJhY2tgLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZW5hYmxlcyB0aGUgcHJvcGVydHkgZWZmZWN0cyBzeXN0ZW0gYW5kXG4gICAgICogZmx1c2hlcyBhbnkgcGVuZGluZyBwcm9wZXJ0aWVzLCBhbmQgdXBkYXRlcyBzaGltbWVkIENTUyBwcm9wZXJ0aWVzXG4gICAgICogd2hlbiB1c2luZyB0aGUgU2hhZHlDU1Mgc2NvcGluZy9jdXN0b20gcHJvcGVydGllcyBwb2x5ZmlsbC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXMsIGludmFsaWRDYXN0c30gU3VwZXIgbWF5IG9yIG1heSBub3RcbiAgICAgKiAgICAgaW1wbGVtZW50IHRoZSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBpZiAod2luZG93LlNoYWR5Q1NTICYmIHRoaXMuX3RlbXBsYXRlKSB7XG4gICAgICAgIHdpbmRvdy5TaGFkeUNTUy5zdHlsZUVsZW1lbnQoLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKHRoaXMpKTtcbiAgICAgIH1cbiAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhbXBzIHRoZSBlbGVtZW50IHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICByZWFkeSgpIHtcbiAgICAgIGlmICh0aGlzLl90ZW1wbGF0ZSkge1xuICAgICAgICB0aGlzLnJvb3QgPSB0aGlzLl9zdGFtcFRlbXBsYXRlKHRoaXMuX3RlbXBsYXRlKTtcbiAgICAgICAgdGhpcy4kID0gdGhpcy5yb290LiQ7XG4gICAgICB9XG4gICAgICBzdXBlci5yZWFkeSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEltcGxlbWVudHMgYFByb3BlcnR5RWZmZWN0c2AncyBgX3JlYWR5Q2xpZW50c2AgY2FsbC4gQXR0YWNoZXNcbiAgICAgKiBlbGVtZW50IGRvbSBieSBjYWxsaW5nIGBfYXR0YWNoRG9tYCB3aXRoIHRoZSBkb20gc3RhbXBlZCBmcm9tIHRoZVxuICAgICAqIGVsZW1lbnQncyB0ZW1wbGF0ZSB2aWEgYF9zdGFtcFRlbXBsYXRlYC4gTm90ZSB0aGF0IHRoaXMgYWxsb3dzXG4gICAgICogY2xpZW50IGRvbSB0byBiZSBhdHRhY2hlZCB0byB0aGUgZWxlbWVudCBwcmlvciB0byBhbnkgb2JzZXJ2ZXJzXG4gICAgICogcnVubmluZy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3JlYWR5Q2xpZW50cygpIHtcbiAgICAgIGlmICh0aGlzLl90ZW1wbGF0ZSkge1xuICAgICAgICB0aGlzLnJvb3QgPSB0aGlzLl9hdHRhY2hEb20oLyoqIEB0eXBlIHtTdGFtcGVkVGVtcGxhdGV9ICovKHRoaXMucm9vdCkpO1xuICAgICAgfVxuICAgICAgLy8gVGhlIHN1cGVyLl9yZWFkeUNsaWVudHMgaGVyZSBzZXRzIHRoZSBjbGllbnRzIGluaXRpYWxpemVkIGZsYWcuXG4gICAgICAvLyBXZSBtdXN0IHdhaXQgdG8gZG8gdGhpcyB1bnRpbCBhZnRlciBjbGllbnQgZG9tIGlzIGNyZWF0ZWQvYXR0YWNoZWRcbiAgICAgIC8vIHNvIHRoYXQgdGhpcyBmbGFnIGNhbiBiZSBjaGVja2VkIHRvIHByZXZlbnQgbm90aWZpY2F0aW9ucyBmaXJlZFxuICAgICAgLy8gZHVyaW5nIHRoaXMgcHJvY2VzcyBmcm9tIGJlaW5nIGhhbmRsZWQgYmVmb3JlIGNsaWVudHMgYXJlIHJlYWR5LlxuICAgICAgc3VwZXIuX3JlYWR5Q2xpZW50cygpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYW4gZWxlbWVudCdzIHN0YW1wZWQgZG9tIHRvIGl0c2VsZi4gQnkgZGVmYXVsdCxcbiAgICAgKiB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgYHNoYWRvd1Jvb3RgIGFuZCBhZGRzIHRoZSBkb20gdG8gaXQuXG4gICAgICogSG93ZXZlciwgdGhpcyBtZXRob2QgbWF5IGJlIG92ZXJyaWRkZW4gdG8gYWxsb3cgYW4gZWxlbWVudFxuICAgICAqIHRvIHB1dCBpdHMgZG9tIGluIGFub3RoZXIgbG9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn1cbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdSZXR1cm59XG4gICAgICogQHBhcmFtIHtTdGFtcGVkVGVtcGxhdGV9IGRvbSB0byBhdHRhY2ggdG8gdGhlIGVsZW1lbnQuXG4gICAgICogQHJldHVybiB7U2hhZG93Um9vdH0gbm9kZSB0byB3aGljaCB0aGUgZG9tIGhhcyBiZWVuIGF0dGFjaGVkLlxuICAgICAqL1xuICAgIF9hdHRhY2hEb20oZG9tKSB7XG4gICAgICBjb25zdCBuID0gd3JhcCh0aGlzKTtcbiAgICAgIGlmIChuLmF0dGFjaFNoYWRvdykge1xuICAgICAgICBpZiAoZG9tKSB7XG4gICAgICAgICAgaWYgKCFuLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgIG4uYXR0YWNoU2hhZG93KHttb2RlOiAnb3BlbicsIHNoYWR5VXBncmFkZUZyYWdtZW50OiBkb219KTtcbiAgICAgICAgICAgIG4uc2hhZG93Um9vdC5hcHBlbmRDaGlsZChkb20pO1xuICAgICAgICAgICAgLy8gV2hlbiBgYWRvcHRlZFN0eWxlU2hlZXRzYCBpcyBzdXBwb3J0ZWQgYSBzdHlsZXNoZWV0IGlzIG1hZGVcbiAgICAgICAgICAgIC8vIGF2YWlsYWJsZSBvbiB0aGUgZWxlbWVudCBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLl9zdHlsZVNoZWV0KSB7XG4gICAgICAgICAgICAgIG4uc2hhZG93Um9vdC5hZG9wdGVkU3R5bGVTaGVldHMgPSBbdGhpcy5jb25zdHJ1Y3Rvci5fc3R5bGVTaGVldF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzeW5jSW5pdGlhbFJlbmRlciAmJiB3aW5kb3cuU2hhZHlET00pIHtcbiAgICAgICAgICAgIHdpbmRvdy5TaGFkeURPTS5mbHVzaEluaXRpYWwobi5zaGFkb3dSb290KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG4uc2hhZG93Um9vdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2hhZG93RE9NIG5vdCBhdmFpbGFibGUuICcgK1xuICAgICAgICAgIC8vIFRPRE8oc29ydmVsbCk6IG1vdmUgdG8gY29tcGlsZS10aW1lIGNvbmRpdGlvbmFsIHdoZW4gc3VwcG9ydGVkXG4gICAgICAgICdQb2x5bWVyRWxlbWVudCBjYW4gY3JlYXRlIGRvbSBhcyBjaGlsZHJlbiBpbnN0ZWFkIG9mIGluICcgK1xuICAgICAgICAnU2hhZG93RE9NIGJ5IHNldHRpbmcgYHRoaXMucm9vdCA9IHRoaXM7XFxgIGJlZm9yZSBcXGByZWFkeVxcYC4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHVzaW5nIHRoZSBTaGFkeUNTUyBzY29waW5nIGFuZCBjdXN0b20gcHJvcGVydHkgc2hpbSwgY2F1c2VzIGFsbFxuICAgICAqIHNoaW1tZWQgc3R5bGVzIGluIHRoaXMgZWxlbWVudCAoYW5kIGl0cyBzdWJ0cmVlKSB0byBiZSB1cGRhdGVkXG4gICAgICogYmFzZWQgb24gY3VycmVudCBjdXN0b20gcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogVGhlIG9wdGlvbmFsIHBhcmFtZXRlciBvdmVycmlkZXMgaW5saW5lIGN1c3RvbSBwcm9wZXJ0eSBzdHlsZXMgd2l0aCBhblxuICAgICAqIG9iamVjdCBvZiBwcm9wZXJ0aWVzIHdoZXJlIHRoZSBrZXlzIGFyZSBDU1MgcHJvcGVydGllcywgYW5kIHRoZSB2YWx1ZXNcbiAgICAgKiBhcmUgc3RyaW5ncy5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6IGB0aGlzLnVwZGF0ZVN0eWxlcyh7Jy0tY29sb3InOiAnYmx1ZSd9KWBcbiAgICAgKlxuICAgICAqIFRoZXNlIHByb3BlcnRpZXMgYXJlIHJldGFpbmVkIHVubGVzcyBhIHZhbHVlIG9mIGBudWxsYCBpcyBzZXQuXG4gICAgICpcbiAgICAgKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IHN1cHBvcnQgdXBkYXRpbmcgQ1NTIG1peGlucy5cbiAgICAgKiBZb3UgY2FuIG5vdCBkeW5hbWljYWxseSBjaGFuZ2UgdGhlIHZhbHVlIG9mIGFuIGBAYXBwbHlgLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzIEJhZyBvZiBjdXN0b20gcHJvcGVydHkga2V5L3ZhbHVlcyB0b1xuICAgICAqICAgYXBwbHkgdG8gdGhpcyBlbGVtZW50LlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9XG4gICAgICovXG4gICAgdXBkYXRlU3R5bGVzKHByb3BlcnRpZXMpIHtcbiAgICAgIGlmICh3aW5kb3cuU2hhZHlDU1MpIHtcbiAgICAgICAgd2luZG93LlNoYWR5Q1NTLnN0eWxlU3VidHJlZSgvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8odGhpcyksIHByb3BlcnRpZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJld3JpdGVzIGEgZ2l2ZW4gVVJMIHJlbGF0aXZlIHRvIGEgYmFzZSBVUkwuIFRoZSBiYXNlIFVSTCBkZWZhdWx0cyB0b1xuICAgICAqIHRoZSBvcmlnaW5hbCBsb2NhdGlvbiBvZiB0aGUgZG9jdW1lbnQgY29udGFpbmluZyB0aGUgYGRvbS1tb2R1bGVgIGZvclxuICAgICAqIHRoaXMgZWxlbWVudC4gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gdGhlIHNhbWUgVVJMIGJlZm9yZSBhbmQgYWZ0ZXJcbiAgICAgKiBidW5kbGluZy5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIHBlcmZvcm1zIG5vIHJlc29sdXRpb24gZm9yIFVSTHMgdGhhdCBzdGFydFxuICAgICAqIHdpdGggYC9gIChhYnNvbHV0ZSBVUkxzKSBvciBgI2AgKGhhc2ggaWRlbnRpZmllcnMpLiAgRm9yIGdlbmVyYWwgcHVycG9zZVxuICAgICAqIFVSTCByZXNvbHV0aW9uLCB1c2UgYHdpbmRvdy5VUkxgLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBVUkwgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGJhc2UgT3B0aW9uYWwgYmFzZSBVUkwgdG8gcmVzb2x2ZSBhZ2FpbnN0LCBkZWZhdWx0c1xuICAgICAqIHRvIHRoZSBlbGVtZW50J3MgYGltcG9ydFBhdGhgXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBSZXdyaXR0ZW4gVVJMIHJlbGF0aXZlIHRvIGJhc2VcbiAgICAgKi9cbiAgICByZXNvbHZlVXJsKHVybCwgYmFzZSkge1xuICAgICAgaWYgKCFiYXNlICYmIHRoaXMuaW1wb3J0UGF0aCkge1xuICAgICAgICBiYXNlID0gcmVzb2x2ZVVybCh0aGlzLmltcG9ydFBhdGgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc29sdmVVcmwodXJsLCBiYXNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgYFByb3BlcnR5RWZmZWN0c2AgdG8gYWRkIG1hcCBvZiBkeW5hbWljIGZ1bmN0aW9ucyBvblxuICAgICAqIHRlbXBsYXRlIGluZm8sIGZvciBjb25zdW1wdGlvbiBieSBgUHJvcGVydHlFZmZlY3RzYCB0ZW1wbGF0ZSBiaW5kaW5nXG4gICAgICogY29kZS4gVGhpcyBtYXAgZGV0ZXJtaW5lcyB3aGljaCBtZXRob2QgdGVtcGxhdGVzIHNob3VsZCBoYXZlIGFjY2Vzc29yc1xuICAgICAqIGNyZWF0ZWQgZm9yIHRoZW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7IVRlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHshTm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gLlxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IEludGVyZmFjZXMgaW4gY2xvc3VyZSBkbyBub3QgaW5oZXJpdCBzdGF0aWNzLCBidXQgY2xhc3NlcyBkb1xuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlQ29udGVudCh0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykge1xuICAgICAgdGVtcGxhdGVJbmZvLmR5bmFtaWNGbnMgPSB0ZW1wbGF0ZUluZm8uZHluYW1pY0ZucyB8fCB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgICAgLy8gVE9ETyhodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMyNDApOlxuICAgICAgLy8gICAgIENoYW5nZSBiYWNrIHRvIGp1c3Qgc3VwZXIubWV0aG9kQ2FsbCgpXG4gICAgICByZXR1cm4gcG9seW1lckVsZW1lbnRCYXNlLl9wYXJzZVRlbXBsYXRlQ29udGVudC5jYWxsKFxuICAgICAgICB0aGlzLCB0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIGBQcm9wZXJ0eUVmZmVjdHNgIHRvIHdhcm4gb24gdXNlIG9mIHVuZGVjbGFyZWQgcHJvcGVydGllcyBpblxuICAgICAqIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSB0byBhZGQgZWZmZWN0IHRvXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgdGhhdCBzaG91bGQgdHJpZ2dlciB0aGUgZWZmZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBlZmZlY3QgRWZmZWN0IG1ldGFkYXRhIG9iamVjdFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IEludGVyZmFjZXMgaW4gY2xvc3VyZSBkbyBub3QgaW5oZXJpdCBzdGF0aWNzLCBidXQgY2xhc3NlcyBkb1xuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9hZGRUZW1wbGF0ZVByb3BlcnR5RWZmZWN0KHRlbXBsYXRlSW5mbywgcHJvcCwgZWZmZWN0KSB7XG4gICAgICAvLyBXYXJuIGlmIHByb3BlcnRpZXMgYXJlIHVzZWQgaW4gdGVtcGxhdGUgd2l0aG91dCBiZWluZyBkZWNsYXJlZC5cbiAgICAgIC8vIFByb3BlcnRpZXMgbXVzdCBiZSBsaXN0ZWQgaW4gYHByb3BlcnRpZXNgIHRvIGJlIGluY2x1ZGVkIGluXG4gICAgICAvLyBgb2JzZXJ2ZWRBdHRyaWJ1dGVzYCBzaW5jZSBDRSBWMSByZWFkcyB0aGF0IGF0IHJlZ2lzdHJhdGlvbiB0aW1lLCBhbmRcbiAgICAgIC8vIHNpbmNlIHdlIHdhbnQgdG8ga2VlcCB0ZW1wbGF0ZSBwYXJzaW5nIGxhenksIHdlIGNhbid0IGF1dG9tYXRpY2FsbHlcbiAgICAgIC8vIGFkZCB1bmRlY2xhcmVkIHByb3BlcnRpZXMgdXNlZCBpbiB0ZW1wbGF0ZXMgdG8gYG9ic2VydmVkQXR0cmlidXRlc2AuXG4gICAgICAvLyBUaGUgd2FybmluZyBpcyBvbmx5IGVuYWJsZWQgaW4gYGxlZ2FjeU9wdGltaXphdGlvbnNgIG1vZGUsIHNpbmNlXG4gICAgICAvLyB3ZSBkb24ndCB3YW50IHRvIHNwYW0gZXhpc3RpbmcgdXNlcnMgd2hvIG1pZ2h0IGhhdmUgYWRvcHRlZCB0aGVcbiAgICAgIC8vIHNob3J0aGFuZCB3aGVuIGF0dHJpYnV0ZSBkZXNlcmlhbGl6YXRpb24gaXMgbm90IGltcG9ydGFudC5cbiAgICAgIGlmIChsZWdhY3lXYXJuaW5ncyAmJiAhKHByb3AgaW4gdGhpcy5fcHJvcGVydGllcykgJiZcbiAgICAgICAgICAvLyBNZXRob2RzIHVzZWQgaW4gdGVtcGxhdGVzIHdpdGggbm8gZGVwZW5kZW5jaWVzIChvciBvbmx5IGxpdGVyYWxcbiAgICAgICAgICAvLyBkZXBlbmRlbmNpZXMpIGJlY29tZSBhY2Nlc3NvcnMgd2l0aCB0ZW1wbGF0ZSBlZmZlY3RzOyBpZ25vcmUgdGhlc2VcbiAgICAgICAgICAhKGVmZmVjdC5pbmZvLnBhcnQuc2lnbmF0dXJlICYmIGVmZmVjdC5pbmZvLnBhcnQuc2lnbmF0dXJlLnN0YXRpYykgJiZcbiAgICAgICAgICAvLyBXYXJuaW5ncyBmb3IgYmluZGluZ3MgYWRkZWQgdG8gbmVzdGVkIHRlbXBsYXRlcyBhcmUgaGFuZGxlZCBieVxuICAgICAgICAgIC8vIHRlbXBsYXRpemVyIHNvIGlnbm9yZSBib3RoIHRoZSBob3N0LXRvLXRlbXBsYXRlIGJpbmRpbmdzXG4gICAgICAgICAgLy8gKGBob3N0UHJvcGApIGFuZCBUZW1wbGF0ZUluc3RhbmNlLXRvLWNoaWxkIGJpbmRpbmdzXG4gICAgICAgICAgLy8gKGBuZXN0ZWRUZW1wbGF0ZWApXG4gICAgICAgICAgIWVmZmVjdC5pbmZvLnBhcnQuaG9zdFByb3AgJiYgIXRlbXBsYXRlSW5mby5uZXN0ZWRUZW1wbGF0ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYFByb3BlcnR5ICcke3Byb3B9JyB1c2VkIGluIHRlbXBsYXRlIGJ1dCBub3QgZGVjbGFyZWQgaW4gJ3Byb3BlcnRpZXMnOyBgICtcbiAgICAgICAgICBgYXR0cmlidXRlIHdpbGwgbm90IGJlIG9ic2VydmVkLmApO1xuICAgICAgfVxuICAgICAgLy8gVE9ETyhodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMyNDApOlxuICAgICAgLy8gICAgIENoYW5nZSBiYWNrIHRvIGp1c3Qgc3VwZXIubWV0aG9kQ2FsbCgpXG4gICAgICByZXR1cm4gcG9seW1lckVsZW1lbnRCYXNlLl9hZGRUZW1wbGF0ZVByb3BlcnR5RWZmZWN0LmNhbGwoXG4gICAgICAgIHRoaXMsIHRlbXBsYXRlSW5mbywgcHJvcCwgZWZmZWN0KTtcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiBQb2x5bWVyRWxlbWVudDtcbn0pO1xuXG4vKipcbiAqIFdoZW4gdXNpbmcgdGhlIFNoYWR5Q1NTIHNjb3BpbmcgYW5kIGN1c3RvbSBwcm9wZXJ0eSBzaGltLCBjYXVzZXMgYWxsXG4gKiBzaGltbWVkIGBzdHlsZXNgICh2aWEgYGN1c3RvbS1zdHlsZWApIGluIHRoZSBkb2N1bWVudCAoYW5kIGl0cyBzdWJ0cmVlKVxuICogdG8gYmUgdXBkYXRlZCBiYXNlZCBvbiBjdXJyZW50IGN1c3RvbSBwcm9wZXJ0eSB2YWx1ZXMuXG4gKlxuICogVGhlIG9wdGlvbmFsIHBhcmFtZXRlciBvdmVycmlkZXMgaW5saW5lIGN1c3RvbSBwcm9wZXJ0eSBzdHlsZXMgd2l0aCBhblxuICogb2JqZWN0IG9mIHByb3BlcnRpZXMgd2hlcmUgdGhlIGtleXMgYXJlIENTUyBwcm9wZXJ0aWVzLCBhbmQgdGhlIHZhbHVlc1xuICogYXJlIHN0cmluZ3MuXG4gKlxuICogRXhhbXBsZTogYHVwZGF0ZVN0eWxlcyh7Jy0tY29sb3InOiAnYmx1ZSd9KWBcbiAqXG4gKiBUaGVzZSBwcm9wZXJ0aWVzIGFyZSByZXRhaW5lZCB1bmxlc3MgYSB2YWx1ZSBvZiBgbnVsbGAgaXMgc2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PX0gcHJvcHMgQmFnIG9mIGN1c3RvbSBwcm9wZXJ0eSBrZXkvdmFsdWVzIHRvXG4gKiAgIGFwcGx5IHRvIHRoZSBkb2N1bWVudC5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCB1cGRhdGVTdHlsZXMgPSBmdW5jdGlvbihwcm9wcykge1xuICBpZiAod2luZG93LlNoYWR5Q1NTKSB7XG4gICAgd2luZG93LlNoYWR5Q1NTLnN0eWxlRG9jdW1lbnQocHJvcHMpO1xuICB9XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi9ib290LmpzJztcblxuaW1wb3J0ICcuL21peGluLmpzJztcbmltcG9ydCAnLi9hc3luYy5qcyc7XG5cbi8qKlxuICogQHN1bW1hcnkgQ29sbGFwc2UgbXVsdGlwbGUgY2FsbGJhY2tzIGludG8gb25lIGludm9jYXRpb24gYWZ0ZXIgYSB0aW1lci5cbiAqL1xuZXhwb3J0IGNsYXNzIERlYm91bmNlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2FzeW5jTW9kdWxlID0gbnVsbDtcbiAgICB0aGlzLl9jYWxsYmFjayA9IG51bGw7XG4gICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzY2hlZHVsZXI7IHRoYXQgaXMsIGEgbW9kdWxlIHdpdGggdGhlIEFzeW5jIGludGVyZmFjZSxcbiAgICogYSBjYWxsYmFjayBhbmQgb3B0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byB0aGUgcnVuIGZ1bmN0aW9uXG4gICAqIGZyb20gdGhlIGFzeW5jIG1vZHVsZS5cbiAgICpcbiAgICogQHBhcmFtIHshQXN5bmNJbnRlcmZhY2V9IGFzeW5jTW9kdWxlIE9iamVjdCB3aXRoIEFzeW5jIGludGVyZmFjZS5cbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBjYWxsYmFjayBDYWxsYmFjayB0byBydW4uXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBzZXRDb25maWcoYXN5bmNNb2R1bGUsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fYXN5bmNNb2R1bGUgPSBhc3luY01vZHVsZTtcbiAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3RpbWVyID0gdGhpcy5fYXN5bmNNb2R1bGUucnVuKCgpID0+IHtcbiAgICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcbiAgICAgIGRlYm91bmNlclF1ZXVlLmRlbGV0ZSh0aGlzKTtcbiAgICAgIHRoaXMuX2NhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENhbmNlbHMgYW4gYWN0aXZlIGRlYm91bmNlciBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0byBpdHNlbGYuXG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBjYW5jZWwoKSB7XG4gICAgaWYgKHRoaXMuaXNBY3RpdmUoKSkge1xuICAgICAgdGhpcy5fY2FuY2VsQXN5bmMoKTtcbiAgICAgIC8vIENhbmNlbGluZyBhIGRlYm91bmNlciByZW1vdmVzIGl0cyBzcG90IGZyb20gdGhlIGZsdXNoIHF1ZXVlLFxuICAgICAgLy8gc28gaWYgYSBkZWJvdW5jZXIgaXMgbWFudWFsbHkgY2FuY2VsZWQgYW5kIHJlLWRlYm91bmNlZCwgaXRcbiAgICAgIC8vIHdpbGwgcmVzZXQgaXRzIGZsdXNoIG9yZGVyICh0aGlzIGlzIGEgdmVyeSBtaW5vciBkaWZmZXJlbmNlIGZyb20gMS54KVxuICAgICAgLy8gUmUtZGVib3VuY2luZyB2aWEgdGhlIGBkZWJvdW5jZWAgQVBJIHJldGFpbnMgdGhlIDEueCBGSUZPIGZsdXNoIG9yZGVyXG4gICAgICBkZWJvdW5jZXJRdWV1ZS5kZWxldGUodGhpcyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYW5jZWxzIGEgZGVib3VuY2VyJ3MgYXN5bmMgY2FsbGJhY2suXG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBfY2FuY2VsQXN5bmMoKSB7XG4gICAgaWYgKHRoaXMuaXNBY3RpdmUoKSkge1xuICAgICAgdGhpcy5fYXN5bmNNb2R1bGUuY2FuY2VsKC8qKiBAdHlwZSB7bnVtYmVyfSAqLyh0aGlzLl90aW1lcikpO1xuICAgICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRmx1c2hlcyBhbiBhY3RpdmUgZGVib3VuY2VyIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIGl0c2VsZi5cbiAgICpcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGZsdXNoKCkge1xuICAgIGlmICh0aGlzLmlzQWN0aXZlKCkpIHtcbiAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICB0aGlzLl9jYWxsYmFjaygpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBkZWJvdW5jZXIgaXMgYWN0aXZlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFjdGl2ZS5cbiAgICovXG4gIGlzQWN0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lciAhPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZGVib3VuY2VyIGlmIG5vIGRlYm91bmNlciBpcyBwYXNzZWQgYXMgYSBwYXJhbWV0ZXJcbiAgICogb3IgaXQgY2FuY2VscyBhbiBhY3RpdmUgZGVib3VuY2VyIG90aGVyd2lzZS4gVGhlIGZvbGxvd2luZ1xuICAgKiBleGFtcGxlIHNob3dzIGhvdyBhIGRlYm91bmNlciBjYW4gYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdpdGhpbiBhXG4gICAqIG1pY3JvdGFzayBhbmQgXCJkZWJvdW5jZWRcIiBzdWNoIHRoYXQgdGhlIHByb3ZpZGVkIGNhbGxiYWNrIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCBvbmNlLiBBZGQgdGhpcyBtZXRob2QgdG8gYSBjdXN0b20gZWxlbWVudDpcbiAgICpcbiAgICogYGBganNcbiAgICogaW1wb3J0IHttaWNyb1Rhc2t9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2FzeW5jLmpzJztcbiAgICogaW1wb3J0IHtEZWJvdW5jZXJ9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2RlYm91bmNlLmpzJztcbiAgICogLy8gLi4uXG4gICAqXG4gICAqIF9kZWJvdW5jZVdvcmsoKSB7XG4gICAqICAgdGhpcy5fZGVib3VuY2VKb2IgPSBEZWJvdW5jZXIuZGVib3VuY2UodGhpcy5fZGVib3VuY2VKb2IsXG4gICAqICAgICAgIG1pY3JvVGFzaywgKCkgPT4gdGhpcy5fZG9Xb3JrKCkpO1xuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBJZiB0aGUgYF9kZWJvdW5jZVdvcmtgIG1ldGhvZCBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMgd2l0aGluIHRoZSBzYW1lXG4gICAqIG1pY3JvdGFzaywgdGhlIGBfZG9Xb3JrYCBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBvbmx5IG9uY2UgYXQgdGhlIG5leHRcbiAgICogbWljcm90YXNrIGNoZWNrcG9pbnQuXG4gICAqXG4gICAqIE5vdGU6IEluIHRlc3RpbmcgaXQgaXMgb2Z0ZW4gY29udmVuaWVudCB0byBhdm9pZCBhc3luY2hyb255LiBUbyBhY2NvbXBsaXNoXG4gICAqIHRoaXMgd2l0aCBhIGRlYm91bmNlciwgeW91IGNhbiB1c2UgYGVucXVldWVEZWJvdW5jZXJgIGFuZFxuICAgKiBgZmx1c2hgLiBGb3IgZXhhbXBsZSwgZXh0ZW5kIHRoZSBhYm92ZSBleGFtcGxlIGJ5IGFkZGluZ1xuICAgKiBgZW5xdWV1ZURlYm91bmNlcih0aGlzLl9kZWJvdW5jZUpvYilgIGF0IHRoZSBlbmQgb2YgdGhlXG4gICAqIGBfZGVib3VuY2VXb3JrYCBtZXRob2QuIFRoZW4gaW4gYSB0ZXN0LCBjYWxsIGBmbHVzaGAgdG8gZW5zdXJlXG4gICAqIHRoZSBkZWJvdW5jZXIgaGFzIGNvbXBsZXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtEZWJvdW5jZXI/fSBkZWJvdW5jZXIgRGVib3VuY2VyIG9iamVjdC5cbiAgICogQHBhcmFtIHshQXN5bmNJbnRlcmZhY2V9IGFzeW5jTW9kdWxlIE9iamVjdCB3aXRoIEFzeW5jIGludGVyZmFjZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrIENhbGxiYWNrIHRvIHJ1bi5cbiAgICogQHJldHVybiB7IURlYm91bmNlcn0gUmV0dXJucyBhIGRlYm91bmNlciBvYmplY3QuXG4gICAqL1xuICBzdGF0aWMgZGVib3VuY2UoZGVib3VuY2VyLCBhc3luY01vZHVsZSwgY2FsbGJhY2spIHtcbiAgICBpZiAoZGVib3VuY2VyIGluc3RhbmNlb2YgRGVib3VuY2VyKSB7XG4gICAgICAvLyBDYW5jZWwgdGhlIGFzeW5jIGNhbGxiYWNrLCBidXQgbGVhdmUgaW4gZGVib3VuY2VyUXVldWUgaWYgaXQgd2FzXG4gICAgICAvLyBlbnF1ZXVlZCwgdG8gbWFpbnRhaW4gMS54IGZsdXNoIG9yZGVyXG4gICAgICBkZWJvdW5jZXIuX2NhbmNlbEFzeW5jKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYm91bmNlciA9IG5ldyBEZWJvdW5jZXIoKTtcbiAgICB9XG4gICAgZGVib3VuY2VyLnNldENvbmZpZyhhc3luY01vZHVsZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBkZWJvdW5jZXI7XG4gIH1cbn1cblxubGV0IGRlYm91bmNlclF1ZXVlID0gbmV3IFNldCgpO1xuXG4vKipcbiAqIEFkZHMgYSBgRGVib3VuY2VyYCB0byBhIGxpc3Qgb2YgZ2xvYmFsbHkgZmx1c2hhYmxlIHRhc2tzLlxuICpcbiAqIEBwYXJhbSB7IURlYm91bmNlcn0gZGVib3VuY2VyIERlYm91bmNlciB0byBlbnF1ZXVlXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3QgZW5xdWV1ZURlYm91bmNlciA9IGZ1bmN0aW9uKGRlYm91bmNlcikge1xuICBkZWJvdW5jZXJRdWV1ZS5hZGQoZGVib3VuY2VyKTtcbn07XG5cbi8qKlxuICogRmx1c2hlcyBhbnkgZW5xdWV1ZWQgZGVib3VuY2Vyc1xuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgd2hldGhlciBhbnkgZGVib3VuY2VycyB3ZXJlIGZsdXNoZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGZsdXNoRGVib3VuY2VycyA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBkaWRGbHVzaCA9IEJvb2xlYW4oZGVib3VuY2VyUXVldWUuc2l6ZSk7XG4gIC8vIElmIG5ldyBkZWJvdW5jZXJzIGFyZSBhZGRlZCB3aGlsZSBmbHVzaGluZywgU2V0LmZvckVhY2ggd2lsbCBlbnN1cmVcbiAgLy8gbmV3bHkgYWRkZWQgb25lcyBhcmUgYWxzbyBmbHVzaGVkXG4gIGRlYm91bmNlclF1ZXVlLmZvckVhY2goZGVib3VuY2VyID0+IHtcbiAgICB0cnkge1xuICAgICAgZGVib3VuY2VyLmZsdXNoKCk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkaWRGbHVzaDtcbn07IiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKlxuICogTW9kdWxlIGZvciBhZGRpbmcgbGlzdGVuZXJzIHRvIGEgbm9kZSBmb3IgdGhlIGZvbGxvd2luZyBub3JtYWxpemVkXG4gKiBjcm9zcy1wbGF0Zm9ybSBcImdlc3R1cmVcIiBldmVudHM6XG4gKiAtIGBkb3duYCAtIG1vdXNlIG9yIHRvdWNoIHdlbnQgZG93blxuICogLSBgdXBgIC0gbW91c2Ugb3IgdG91Y2ggd2VudCB1cFxuICogLSBgdGFwYCAtIG1vdXNlIGNsaWNrIG9yIGZpbmdlciB0YXBcbiAqIC0gYHRyYWNrYCAtIG1vdXNlIGRyYWcgb3IgdG91Y2ggbW92ZVxuICpcbiAqIEBzdW1tYXJ5IE1vZHVsZSBmb3IgYWRkaW5nIGNyb3NzLXBsYXRmb3JtIGdlc3R1cmUgZXZlbnQgbGlzdGVuZXJzLlxuICovXG5cbmltcG9ydCAnLi9ib290LmpzJztcblxuaW1wb3J0IHsgdGltZU91dCwgbWljcm9UYXNrIH0gZnJvbSAnLi9hc3luYy5qcyc7XG5pbXBvcnQgeyBEZWJvdW5jZXIgfSBmcm9tICcuL2RlYm91bmNlLmpzJztcbmltcG9ydCB7IHBhc3NpdmVUb3VjaEdlc3R1cmVzLCBjYW5jZWxTeW50aGV0aWNDbGlja0V2ZW50cyB9IGZyb20gJy4vc2V0dGluZ3MuanMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4vd3JhcC5qcyc7XG5cbi8vIGRldGVjdCBuYXRpdmUgdG91Y2ggYWN0aW9uIHN1cHBvcnRcbmxldCBIQVNfTkFUSVZFX1RBID0gdHlwZW9mIGRvY3VtZW50LmhlYWQuc3R5bGUudG91Y2hBY3Rpb24gPT09ICdzdHJpbmcnO1xubGV0IEdFU1RVUkVfS0VZID0gJ19fcG9seW1lckdlc3R1cmVzJztcbmxldCBIQU5ETEVEX09CSiA9ICdfX3BvbHltZXJHZXN0dXJlc0hhbmRsZWQnO1xubGV0IFRPVUNIX0FDVElPTiA9ICdfX3BvbHltZXJHZXN0dXJlc1RvdWNoQWN0aW9uJztcbi8vIHJhZGl1cyBmb3IgdGFwIGFuZCB0cmFja1xubGV0IFRBUF9ESVNUQU5DRSA9IDI1O1xubGV0IFRSQUNLX0RJU1RBTkNFID0gNTtcbi8vIG51bWJlciBvZiBsYXN0IE4gdHJhY2sgcG9zaXRpb25zIHRvIGtlZXBcbmxldCBUUkFDS19MRU5HVEggPSAyO1xuXG4vLyBEaXNhYmxpbmcgXCJtb3VzZVwiIGhhbmRsZXJzIGZvciAyNTAwbXMgaXMgZW5vdWdoXG5sZXQgTU9VU0VfVElNRU9VVCA9IDI1MDA7XG5sZXQgTU9VU0VfRVZFTlRTID0gWydtb3VzZWRvd24nLCAnbW91c2Vtb3ZlJywgJ21vdXNldXAnLCAnY2xpY2snXTtcbi8vIGFuIGFycmF5IG9mIGJpdG1hc2sgdmFsdWVzIGZvciBtYXBwaW5nIE1vdXNlRXZlbnQud2hpY2ggdG8gTW91c2VFdmVudC5idXR0b25zXG5sZXQgTU9VU0VfV0hJQ0hfVE9fQlVUVE9OUyA9IFswLCAxLCA0LCAyXTtcbmxldCBNT1VTRV9IQVNfQlVUVE9OUyA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IE1vdXNlRXZlbnQoJ3Rlc3QnLCB7YnV0dG9uczogMX0pLmJ1dHRvbnMgPT09IDE7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgUG9zc2libGUgbW91c2UgZXZlbnQgbmFtZVxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBtb3VzZSBldmVudCwgZmFsc2UgaWYgbm90XG4gKi9cbmZ1bmN0aW9uIGlzTW91c2VFdmVudChuYW1lKSB7XG4gIHJldHVybiBNT1VTRV9FVkVOVFMuaW5kZXhPZihuYW1lKSA+IC0xO1xufVxuXG4vKiBlc2xpbnQgbm8tZW1wdHk6IFtcImVycm9yXCIsIHsgXCJhbGxvd0VtcHR5Q2F0Y2hcIjogdHJ1ZSB9XSAqL1xuLy8gY2hlY2sgZm9yIHBhc3NpdmUgZXZlbnQgbGlzdGVuZXJzXG5sZXQgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG4oZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgbGV0IG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge2dldCgpIHtzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO319KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdHMpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2goZSkge31cbn0pKCk7XG5cbi8qKlxuICogR2VuZXJhdGUgc2V0dGluZ3MgZm9yIGV2ZW50IGxpc3RlbmVycywgZGVwZW5kYW50IG9uIGBwYXNzaXZlVG91Y2hHZXN0dXJlc2BcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIEV2ZW50IG5hbWUgdG8gZGV0ZXJtaW5lIGlmIGB7cGFzc2l2ZX1gIG9wdGlvbiBpc1xuICogICBuZWVkZWRcbiAqIEByZXR1cm4ge3twYXNzaXZlOiBib29sZWFufSB8IHVuZGVmaW5lZH0gT3B0aW9ucyB0byB1c2UgZm9yIGFkZEV2ZW50TGlzdGVuZXJcbiAqICAgYW5kIHJlbW92ZUV2ZW50TGlzdGVuZXJcbiAqL1xuZnVuY3Rpb24gUEFTU0lWRV9UT1VDSChldmVudE5hbWUpIHtcbiAgaWYgKGlzTW91c2VFdmVudChldmVudE5hbWUpIHx8IGV2ZW50TmFtZSA9PT0gJ3RvdWNoZW5kJykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoSEFTX05BVElWRV9UQSAmJiBzdXBwb3J0c1Bhc3NpdmUgJiYgcGFzc2l2ZVRvdWNoR2VzdHVyZXMpIHtcbiAgICByZXR1cm4ge3Bhc3NpdmU6IHRydWV9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybjtcbiAgfVxufVxuXG4vLyBDaGVjayBmb3IgdG91Y2gtb25seSBkZXZpY2VzXG5sZXQgSVNfVE9VQ0hfT05MWSA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQKD86W29hXWR8aG9uZSl8QW5kcm9pZC8pO1xuXG4vLyBrZWVwIHRyYWNrIG9mIGFueSBsYWJlbHMgaGl0IGJ5IHRoZSBtb3VzZUNhbmNlbGxlclxuLyoqIEB0eXBlIHshQXJyYXk8IUhUTUxMYWJlbEVsZW1lbnQ+fSAqL1xuY29uc3QgY2xpY2tlZExhYmVscyA9IFtdO1xuXG4vKiogQHR5cGUgeyFPYmplY3Q8Ym9vbGVhbj59ICovXG5jb25zdCBsYWJlbGxhYmxlID0ge1xuICAnYnV0dG9uJzogdHJ1ZSxcbiAgJ2lucHV0JzogdHJ1ZSxcbiAgJ2tleWdlbic6IHRydWUsXG4gICdtZXRlcic6IHRydWUsXG4gICdvdXRwdXQnOiB0cnVlLFxuICAndGV4dGFyZWEnOiB0cnVlLFxuICAncHJvZ3Jlc3MnOiB0cnVlLFxuICAnc2VsZWN0JzogdHJ1ZVxufTtcblxuLy8gRGVmaW5lZCBhdCBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNlbmFibGluZy1hbmQtZGlzYWJsaW5nLWZvcm0tY29udHJvbHM6LXRoZS1kaXNhYmxlZC1hdHRyaWJ1dGVcbi8qKiBAdHlwZSB7IU9iamVjdDxib29sZWFuPn0gKi9cbmNvbnN0IGNhbkJlRGlzYWJsZWQgPSB7XG4gICdidXR0b24nOiB0cnVlLFxuICAnY29tbWFuZCc6IHRydWUsXG4gICdmaWVsZHNldCc6IHRydWUsXG4gICdpbnB1dCc6IHRydWUsXG4gICdrZXlnZW4nOiB0cnVlLFxuICAnb3B0Z3JvdXAnOiB0cnVlLFxuICAnb3B0aW9uJzogdHJ1ZSxcbiAgJ3NlbGVjdCc6IHRydWUsXG4gICd0ZXh0YXJlYSc6IHRydWVcbn07XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgRWxlbWVudCB0byBjaGVjayBsYWJlbGxpbmcgc3RhdHVzXG4gKiBAcmV0dXJuIHtib29sZWFufSBlbGVtZW50IGNhbiBoYXZlIGxhYmVsc1xuICovXG5mdW5jdGlvbiBjYW5CZUxhYmVsbGVkKGVsKSB7XG4gIHJldHVybiBsYWJlbGxhYmxlW2VsLmxvY2FsTmFtZV0gfHwgZmFsc2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgRWxlbWVudCB0aGF0IG1heSBiZSBsYWJlbGxlZC5cbiAqIEByZXR1cm4geyFBcnJheTwhSFRNTExhYmVsRWxlbWVudD59IFJlbGV2YW50IGxhYmVsIGZvciBgZWxgXG4gKi9cbmZ1bmN0aW9uIG1hdGNoaW5nTGFiZWxzKGVsKSB7XG4gIGxldCBsYWJlbHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCgvKiogQHR5cGUge0hUTUxJbnB1dEVsZW1lbnR9ICovKGVsKS5sYWJlbHMgfHwgW10pO1xuICAvLyBJRSBkb2Vzbid0IGhhdmUgYGxhYmVsc2AgYW5kIFNhZmFyaSBkb2Vzbid0IHBvcHVsYXRlIGBsYWJlbHNgXG4gIC8vIGlmIGVsZW1lbnQgaXMgaW4gYSBzaGFkb3dyb290LlxuICAvLyBJbiB0aGlzIGluc3RhbmNlLCBmaW5kaW5nIHRoZSBub24tYW5jZXN0b3IgbGFiZWxzIGlzIGVub3VnaCxcbiAgLy8gYXMgdGhlIG1vdXNlQ2FuY2VsbG9yIGNvZGUgd2lsbCBoYW5kbGUgYW5jc3RvciBsYWJlbHNcbiAgaWYgKCFsYWJlbHMubGVuZ3RoKSB7XG4gICAgbGFiZWxzID0gW107XG4gICAgbGV0IHJvb3QgPSBlbC5nZXRSb290Tm9kZSgpO1xuICAgIC8vIGlmIHRoZXJlIGlzIGFuIGlkIG9uIGBlbGAsIGNoZWNrIGZvciBhbGwgbGFiZWxzIHdpdGggYSBtYXRjaGluZyBgZm9yYCBhdHRyaWJ1dGVcbiAgICBpZiAoZWwuaWQpIHtcbiAgICAgIGxldCBtYXRjaGluZyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbChgbGFiZWxbZm9yID0gJHtlbC5pZH1dYCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxhYmVscy5wdXNoKC8qKiBAdHlwZSB7IUhUTUxMYWJlbEVsZW1lbnR9ICovKG1hdGNoaW5nW2ldKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBsYWJlbHM7XG59XG5cbi8vIHRvdWNoIHdpbGwgbWFrZSBzeW50aGV0aWMgbW91c2UgZXZlbnRzXG4vLyBgcHJldmVudERlZmF1bHRgIG9uIHRvdWNoZW5kIHdpbGwgY2FuY2VsIHRoZW0sXG4vLyBidXQgdGhpcyBicmVha3MgYDxpbnB1dD5gIGZvY3VzIGFuZCBsaW5rIGNsaWNrc1xuLy8gZGlzYWJsZSBtb3VzZSBoYW5kbGVycyBmb3IgTU9VU0VfVElNRU9VVCBtcyBhZnRlclxuLy8gYSB0b3VjaGVuZCB0byBpZ25vcmUgc3ludGhldGljIG1vdXNlIGV2ZW50c1xubGV0IG1vdXNlQ2FuY2VsbGVyID0gZnVuY3Rpb24obW91c2VFdmVudCkge1xuICAvLyBDaGVjayBmb3Igc291cmNlQ2FwYWJpbGl0aWVzLCB1c2VkIHRvIGRpc3Rpbmd1aXNoIHN5bnRoZXRpYyBldmVudHNcbiAgLy8gaWYgbW91c2VFdmVudCBkaWQgbm90IGNvbWUgZnJvbSBhIGRldmljZSB0aGF0IGZpcmVzIHRvdWNoIGV2ZW50cyxcbiAgLy8gaXQgd2FzIG1hZGUgYnkgYSByZWFsIG1vdXNlIGFuZCBzaG91bGQgYmUgY291bnRlZFxuICAvLyBodHRwOi8vd2ljZy5naXRodWIuaW8vSW5wdXREZXZpY2VDYXBhYmlsaXRpZXMvI2RvbS1pbnB1dGRldmljZWNhcGFiaWxpdGllcy1maXJlc3RvdWNoZXZlbnRzXG4gIGxldCBzYyA9IG1vdXNlRXZlbnQuc291cmNlQ2FwYWJpbGl0aWVzO1xuICBpZiAoc2MgJiYgIXNjLmZpcmVzVG91Y2hFdmVudHMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gc2tpcCBzeW50aGV0aWMgbW91c2UgZXZlbnRzXG4gIG1vdXNlRXZlbnRbSEFORExFRF9PQkpdID0ge3NraXA6IHRydWV9O1xuICAvLyBkaXNhYmxlIFwiZ2hvc3QgY2xpY2tzXCJcbiAgaWYgKG1vdXNlRXZlbnQudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgIGxldCBjbGlja0Zyb21MYWJlbCA9IGZhbHNlO1xuICAgIGxldCBwYXRoID0gZ2V0Q29tcG9zZWRQYXRoKG1vdXNlRXZlbnQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHBhdGhbaV0ubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIGlmIChwYXRoW2ldLmxvY2FsTmFtZSA9PT0gJ2xhYmVsJykge1xuICAgICAgICAgIGNsaWNrZWRMYWJlbHMucHVzaCgvKiogQHR5cGUgeyFIVE1MTGFiZWxFbGVtZW50fSAqLyAocGF0aFtpXSkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNhbkJlTGFiZWxsZWQoLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovIChwYXRoW2ldKSkpIHtcbiAgICAgICAgICBsZXQgb3duZXJMYWJlbHMgPVxuICAgICAgICAgICAgICBtYXRjaGluZ0xhYmVscygvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8gKHBhdGhbaV0pKTtcbiAgICAgICAgICAvLyBjaGVjayBpZiBvbmUgb2YgdGhlIGNsaWNrZWQgbGFiZWxzIGlzIGxhYmVsbGluZyB0aGlzIGVsZW1lbnRcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG93bmVyTGFiZWxzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjbGlja0Zyb21MYWJlbCA9IGNsaWNrRnJvbUxhYmVsIHx8IGNsaWNrZWRMYWJlbHMuaW5kZXhPZihvd25lckxhYmVsc1tqXSkgPiAtMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXRoW2ldID09PSBQT0lOVEVSU1RBVEUubW91c2UudGFyZ2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gaWYgb25lIG9mIHRoZSBjbGlja2VkIGxhYmVscyB3YXMgbGFiZWxsaW5nIHRoZSB0YXJnZXQgZWxlbWVudCxcbiAgICAvLyB0aGlzIGlzIG5vdCBhIGdob3N0IGNsaWNrXG4gICAgaWYgKGNsaWNrRnJvbUxhYmVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG1vdXNlRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBtb3VzZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHNldHVwIFRydWUgdG8gYWRkLCBmYWxzZSB0byByZW1vdmUuXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5mdW5jdGlvbiBzZXR1cFRlYXJkb3duTW91c2VDYW5jZWxsZXIoc2V0dXApIHtcbiAgbGV0IGV2ZW50cyA9IElTX1RPVUNIX09OTFkgPyBbJ2NsaWNrJ10gOiBNT1VTRV9FVkVOVFM7XG4gIGZvciAobGV0IGkgPSAwLCBlbjsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGVuID0gZXZlbnRzW2ldO1xuICAgIGlmIChzZXR1cCkge1xuICAgICAgLy8gcmVzZXQgY2xpY2tMYWJlbHMgYXJyYXlcbiAgICAgIGNsaWNrZWRMYWJlbHMubGVuZ3RoID0gMDtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZW4sIG1vdXNlQ2FuY2VsbGVyLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbiwgbW91c2VDYW5jZWxsZXIsIHRydWUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpZ25vcmVNb3VzZShlKSB7XG4gIGlmICghY2FuY2VsU3ludGhldGljQ2xpY2tFdmVudHMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFQT0lOVEVSU1RBVEUubW91c2UubW91c2VJZ25vcmVKb2IpIHtcbiAgICBzZXR1cFRlYXJkb3duTW91c2VDYW5jZWxsZXIodHJ1ZSk7XG4gIH1cbiAgbGV0IHVuc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgc2V0dXBUZWFyZG93bk1vdXNlQ2FuY2VsbGVyKCk7XG4gICAgUE9JTlRFUlNUQVRFLm1vdXNlLnRhcmdldCA9IG51bGw7XG4gICAgUE9JTlRFUlNUQVRFLm1vdXNlLm1vdXNlSWdub3JlSm9iID0gbnVsbDtcbiAgfTtcbiAgUE9JTlRFUlNUQVRFLm1vdXNlLnRhcmdldCA9IGdldENvbXBvc2VkUGF0aChlKVswXTtcbiAgUE9JTlRFUlNUQVRFLm1vdXNlLm1vdXNlSWdub3JlSm9iID0gRGVib3VuY2VyLmRlYm91bmNlKFxuICAgICAgICBQT0lOVEVSU1RBVEUubW91c2UubW91c2VJZ25vcmVKb2JcbiAgICAgICwgdGltZU91dC5hZnRlcihNT1VTRV9USU1FT1VUKVxuICAgICAgLCB1bnNldCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldiBldmVudCB0byB0ZXN0IGZvciBsZWZ0IG1vdXNlIGJ1dHRvbiBkb3duXG4gKiBAcmV0dXJuIHtib29sZWFufSBoYXMgbGVmdCBtb3VzZSBidXR0b24gZG93blxuICovXG5mdW5jdGlvbiBoYXNMZWZ0TW91c2VCdXR0b24oZXYpIHtcbiAgbGV0IHR5cGUgPSBldi50eXBlO1xuICAvLyBleGl0IGVhcmx5IGlmIHRoZSBldmVudCBpcyBub3QgYSBtb3VzZSBldmVudFxuICBpZiAoIWlzTW91c2VFdmVudCh0eXBlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBldi5idXR0b24gaXMgbm90IHJlbGlhYmxlIGZvciBtb3VzZW1vdmUgKDAgaXMgb3ZlcmxvYWRlZCBhcyBib3RoIGxlZnQgYnV0dG9uIGFuZCBubyBidXR0b25zKVxuICAvLyBpbnN0ZWFkIHdlIHVzZSBldi5idXR0b25zIChiaXRtYXNrIG9mIGJ1dHRvbnMpIG9yIGZhbGwgYmFjayB0byBldi53aGljaCAoZGVwcmVjYXRlZCwgMCBmb3Igbm8gYnV0dG9ucywgMSBmb3IgbGVmdCBidXR0b24pXG4gIGlmICh0eXBlID09PSAnbW91c2Vtb3ZlJykge1xuICAgIC8vIGFsbG93IHVuZGVmaW5lZCBmb3IgdGVzdGluZyBldmVudHNcbiAgICBsZXQgYnV0dG9ucyA9IGV2LmJ1dHRvbnMgPT09IHVuZGVmaW5lZCA/IDEgOiBldi5idXR0b25zO1xuICAgIGlmICgoZXYgaW5zdGFuY2VvZiB3aW5kb3cuTW91c2VFdmVudCkgJiYgIU1PVVNFX0hBU19CVVRUT05TKSB7XG4gICAgICBidXR0b25zID0gTU9VU0VfV0hJQ0hfVE9fQlVUVE9OU1tldi53aGljaF0gfHwgMDtcbiAgICB9XG4gICAgLy8gYnV0dG9ucyBpcyBhIGJpdG1hc2ssIGNoZWNrIHRoYXQgdGhlIGxlZnQgYnV0dG9uIGJpdCBpcyBzZXQgKDEpXG4gICAgcmV0dXJuIEJvb2xlYW4oYnV0dG9ucyAmIDEpO1xuICB9IGVsc2Uge1xuICAgIC8vIGFsbG93IHVuZGVmaW5lZCBmb3IgdGVzdGluZyBldmVudHNcbiAgICBsZXQgYnV0dG9uID0gZXYuYnV0dG9uID09PSB1bmRlZmluZWQgPyAwIDogZXYuYnV0dG9uO1xuICAgIC8vIGV2LmJ1dHRvbiBpcyAwIGluIG1vdXNlZG93bi9tb3VzZXVwL2NsaWNrIGZvciBsZWZ0IGJ1dHRvbiBhY3RpdmF0aW9uXG4gICAgcmV0dXJuIGJ1dHRvbiA9PT0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1N5bnRoZXRpY0NsaWNrKGV2KSB7XG4gIGlmIChldi50eXBlID09PSAnY2xpY2snKSB7XG4gICAgLy8gZXYuZGV0YWlsIGlzIDAgZm9yIEhUTUxFbGVtZW50LmNsaWNrIGluIG1vc3QgYnJvd3NlcnNcbiAgICBpZiAoZXYuZGV0YWlsID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gaW4gdGhlIHdvcnN0IGNhc2UsIGNoZWNrIHRoYXQgdGhlIHgveSBwb3NpdGlvbiBvZiB0aGUgY2xpY2sgaXMgd2l0aGluXG4gICAgLy8gdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgdGFyZ2V0IG9mIHRoZSBldmVudFxuICAgIC8vIFRoYW5rcyBJRSAxMCA+OihcbiAgICBsZXQgdCA9IF9maW5kT3JpZ2luYWxUYXJnZXQoZXYpO1xuICAgIC8vIG1ha2Ugc3VyZSB0aGUgdGFyZ2V0IG9mIHRoZSBldmVudCBpcyBhbiBlbGVtZW50IHNvIHdlIGNhbiB1c2UgZ2V0Qm91bmRpbmdDbGllbnRSZWN0LFxuICAgIC8vIGlmIG5vdCwganVzdCBhc3N1bWUgaXQgaXMgYSBzeW50aGV0aWMgY2xpY2tcbiAgICBpZiAoIXQubm9kZVR5cGUgfHwgLyoqIEB0eXBlIHtFbGVtZW50fSAqLyh0KS5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBsZXQgYmNyID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyh0KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAvLyB1c2UgcGFnZSB4L3kgdG8gYWNjb3VudCBmb3Igc2Nyb2xsaW5nXG4gICAgbGV0IHggPSBldi5wYWdlWCwgeSA9IGV2LnBhZ2VZO1xuICAgIC8vIGV2IGlzIGEgc3ludGhldGljIGNsaWNrIGlmIHRoZSBwb3NpdGlvbiBpcyBvdXRzaWRlIHRoZSBib3VuZGluZyBib3ggb2YgdGhlIHRhcmdldFxuICAgIHJldHVybiAhKCh4ID49IGJjci5sZWZ0ICYmIHggPD0gYmNyLnJpZ2h0KSAmJiAoeSA+PSBiY3IudG9wICYmIHkgPD0gYmNyLmJvdHRvbSkpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubGV0IFBPSU5URVJTVEFURSA9IHtcbiAgbW91c2U6IHtcbiAgICB0YXJnZXQ6IG51bGwsXG4gICAgbW91c2VJZ25vcmVKb2I6IG51bGxcbiAgfSxcbiAgdG91Y2g6IHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgaWQ6IC0xLFxuICAgIHNjcm9sbERlY2lkZWQ6IGZhbHNlXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZpcnN0VG91Y2hBY3Rpb24oZXYpIHtcbiAgbGV0IHRhID0gJ2F1dG8nO1xuICBsZXQgcGF0aCA9IGdldENvbXBvc2VkUGF0aChldik7XG4gIGZvciAobGV0IGkgPSAwLCBuOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIG4gPSBwYXRoW2ldO1xuICAgIGlmIChuW1RPVUNIX0FDVElPTl0pIHtcbiAgICAgIHRhID0gbltUT1VDSF9BQ1RJT05dO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YTtcbn1cblxuZnVuY3Rpb24gdHJhY2tEb2N1bWVudChzdGF0ZU9iaiwgbW92ZWZuLCB1cGZuKSB7XG4gIHN0YXRlT2JqLm1vdmVmbiA9IG1vdmVmbjtcbiAgc3RhdGVPYmoudXBmbiA9IHVwZm47XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdmVmbik7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB1cGZuKTtcbn1cblxuZnVuY3Rpb24gdW50cmFja0RvY3VtZW50KHN0YXRlT2JqKSB7XG4gIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHN0YXRlT2JqLm1vdmVmbik7XG4gIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzdGF0ZU9iai51cGZuKTtcbiAgc3RhdGVPYmoubW92ZWZuID0gbnVsbDtcbiAgc3RhdGVPYmoudXBmbiA9IG51bGw7XG59XG5cbmlmIChjYW5jZWxTeW50aGV0aWNDbGlja0V2ZW50cykge1xuICAvLyB1c2UgYSBkb2N1bWVudC13aWRlIHRvdWNoZW5kIGxpc3RlbmVyIHRvIHN0YXJ0IHRoZSBnaG9zdC1jbGljayBwcmV2ZW50aW9uIG1lY2hhbmlzbVxuICAvLyBVc2UgcGFzc2l2ZSBldmVudCBsaXN0ZW5lcnMsIGlmIHN1cHBvcnRlZCwgdG8gbm90IGFmZmVjdCBzY3JvbGxpbmcgcGVyZm9ybWFuY2VcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBpZ25vcmVNb3VzZSwgc3VwcG9ydHNQYXNzaXZlID8ge3Bhc3NpdmU6IHRydWV9IDogZmFsc2UpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvbXBvc2VkUGF0aCBmb3IgdGhlIGdpdmVuIGV2ZW50LlxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgdG8gcHJvY2Vzc1xuICogQHJldHVybiB7IUFycmF5PCFFdmVudFRhcmdldD59IFBhdGggb2YgdGhlIGV2ZW50XG4gKi9cbmNvbnN0IGdldENvbXBvc2VkUGF0aCA9IHdpbmRvdy5TaGFkeURPTSAmJiB3aW5kb3cuU2hhZHlET00ubm9QYXRjaCA/XG4gIHdpbmRvdy5TaGFkeURPTS5jb21wb3NlZFBhdGggOlxuICAoZXZlbnQpID0+IGV2ZW50LmNvbXBvc2VkUGF0aCAmJiBldmVudC5jb21wb3NlZFBhdGgoKSB8fCBbXTtcblxuLyoqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgIUdlc3R1cmVSZWNvZ25pemVyPn0gKi9cbmV4cG9ydCBjb25zdCBnZXN0dXJlcyA9IHt9O1xuXG4vKiogQHR5cGUgeyFBcnJheTwhR2VzdHVyZVJlY29nbml6ZXI+fSAqL1xuZXhwb3J0IGNvbnN0IHJlY29nbml6ZXJzID0gW107XG5cbi8qKlxuICogRmluZHMgdGhlIGVsZW1lbnQgcmVuZGVyZWQgb24gdGhlIHNjcmVlbiBhdCB0aGUgcHJvdmlkZWQgY29vcmRpbmF0ZXMuXG4gKlxuICogU2ltaWxhciB0byBgZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludGAsIGJ1dCBwaWVyY2VzIHRocm91Z2hcbiAqIHNoYWRvdyByb290cy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0geCBIb3Jpem9udGFsIHBpeGVsIGNvb3JkaW5hdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IFZlcnRpY2FsIHBpeGVsIGNvb3JkaW5hdGVcbiAqIEByZXR1cm4ge0VsZW1lbnR9IFJldHVybnMgdGhlIGRlZXBlc3Qgc2hhZG93Um9vdCBpbmNsdXNpdmUgZWxlbWVudFxuICogZm91bmQgYXQgdGhlIHNjcmVlbiBwb3NpdGlvbiBnaXZlbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBUYXJnZXRGaW5kKHgsIHkpIHtcbiAgbGV0IG5vZGUgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHgsIHkpO1xuICBsZXQgbmV4dCA9IG5vZGU7XG4gIC8vIHRoaXMgY29kZSBwYXRoIGlzIG9ubHkgdGFrZW4gd2hlbiBuYXRpdmUgU2hhZG93RE9NIGlzIHVzZWRcbiAgLy8gaWYgdGhlcmUgaXMgYSBzaGFkb3dyb290LCBpdCBtYXkgaGF2ZSBhIG5vZGUgYXQgeC95XG4gIC8vIGlmIHRoZXJlIGlzIG5vdCBhIHNoYWRvd3Jvb3QsIGV4aXQgdGhlIGxvb3BcbiAgd2hpbGUgKG5leHQgJiYgbmV4dC5zaGFkb3dSb290ICYmICF3aW5kb3cuU2hhZHlET00pIHtcbiAgICAvLyBpZiB0aGVyZSBpcyBhIG5vZGUgYXQgeC95IGluIHRoZSBzaGFkb3dyb290LCBsb29rIGRlZXBlclxuICAgIGxldCBvbGROZXh0ID0gbmV4dDtcbiAgICBuZXh0ID0gbmV4dC5zaGFkb3dSb290LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XG4gICAgLy8gb24gU2FmYXJpLCBlbGVtZW50RnJvbVBvaW50IG1heSByZXR1cm4gdGhlIHNoYWRvd1Jvb3QgaG9zdFxuICAgIGlmIChvbGROZXh0ID09PSBuZXh0KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKG5leHQpIHtcbiAgICAgIG5vZGUgPSBuZXh0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBhIGNoZWFwZXIgY2hlY2sgdGhhbiBldi5jb21wb3NlZFBhdGgoKVswXTtcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtFdmVudHxUb3VjaH0gZXYgRXZlbnQuXG4gKiBAcmV0dXJuIHtFdmVudFRhcmdldH0gUmV0dXJucyB0aGUgZXZlbnQgdGFyZ2V0LlxuICovXG5mdW5jdGlvbiBfZmluZE9yaWdpbmFsVGFyZ2V0KGV2KSB7XG4gIGNvbnN0IHBhdGggPSBnZXRDb21wb3NlZFBhdGgoLyoqIEB0eXBlIHs/RXZlbnR9ICovIChldikpO1xuICAvLyBJdCBzaG91bGRuJ3QgYmUsIGJ1dCBzb21ldGltZXMgcGF0aCBpcyBlbXB0eSAod2luZG93IG9uIFNhZmFyaSkuXG4gIHJldHVybiBwYXRoLmxlbmd0aCA+IDAgPyBwYXRoWzBdIDogZXYudGFyZ2V0O1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0V2ZW50fSBldiBFdmVudC5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIF9oYW5kbGVOYXRpdmUoZXYpIHtcbiAgbGV0IGhhbmRsZWQ7XG4gIGxldCB0eXBlID0gZXYudHlwZTtcbiAgbGV0IG5vZGUgPSBldi5jdXJyZW50VGFyZ2V0O1xuICBsZXQgZ29iaiA9IG5vZGVbR0VTVFVSRV9LRVldO1xuICBpZiAoIWdvYmopIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGdzID0gZ29ialt0eXBlXTtcbiAgaWYgKCFncykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWV2W0hBTkRMRURfT0JKXSkge1xuICAgIGV2W0hBTkRMRURfT0JKXSA9IHt9O1xuICAgIGlmICh0eXBlLnNsaWNlKDAsIDUpID09PSAndG91Y2gnKSB7XG4gICAgICBldiA9IC8qKiBAdHlwZSB7VG91Y2hFdmVudH0gKi8oZXYpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtYXNzaWduXG4gICAgICBsZXQgdCA9IGV2LmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgICAgaWYgKHR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICAvLyBvbmx5IGhhbmRsZSB0aGUgZmlyc3QgZmluZ2VyXG4gICAgICAgIGlmIChldi50b3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIFBPSU5URVJTVEFURS50b3VjaC5pZCA9IHQuaWRlbnRpZmllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKFBPSU5URVJTVEFURS50b3VjaC5pZCAhPT0gdC5pZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghSEFTX05BVElWRV9UQSkge1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IHR5cGUgPT09ICd0b3VjaG1vdmUnKSB7XG4gICAgICAgICAgX2hhbmRsZVRvdWNoQWN0aW9uKGV2KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBoYW5kbGVkID0gZXZbSEFORExFRF9PQkpdO1xuICAvLyB1c2VkIHRvIGlnbm9yZSBzeW50aGV0aWMgbW91c2UgZXZlbnRzXG4gIGlmIChoYW5kbGVkLnNraXApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gcmVzZXQgcmVjb2duaXplciBzdGF0ZVxuICBmb3IgKGxldCBpID0gMCwgcjsgaSA8IHJlY29nbml6ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgciA9IHJlY29nbml6ZXJzW2ldO1xuICAgIGlmIChnc1tyLm5hbWVdICYmICFoYW5kbGVkW3IubmFtZV0pIHtcbiAgICAgIGlmIChyLmZsb3cgJiYgci5mbG93LnN0YXJ0LmluZGV4T2YoZXYudHlwZSkgPiAtMSAmJiByLnJlc2V0KSB7XG4gICAgICAgIHIucmVzZXQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gZW5mb3JjZSBnZXN0dXJlIHJlY29nbml6ZXIgb3JkZXJcbiAgZm9yIChsZXQgaSA9IDAsIHI7IGkgPCByZWNvZ25pemVycy5sZW5ndGg7IGkrKykge1xuICAgIHIgPSByZWNvZ25pemVyc1tpXTtcbiAgICBpZiAoZ3Nbci5uYW1lXSAmJiAhaGFuZGxlZFtyLm5hbWVdKSB7XG4gICAgICBoYW5kbGVkW3IubmFtZV0gPSB0cnVlO1xuICAgICAgclt0eXBlXShldik7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7VG91Y2hFdmVudH0gZXYgRXZlbnQuXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5mdW5jdGlvbiBfaGFuZGxlVG91Y2hBY3Rpb24oZXYpIHtcbiAgbGV0IHQgPSBldi5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgbGV0IHR5cGUgPSBldi50eXBlO1xuICBpZiAodHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgUE9JTlRFUlNUQVRFLnRvdWNoLnggPSB0LmNsaWVudFg7XG4gICAgUE9JTlRFUlNUQVRFLnRvdWNoLnkgPSB0LmNsaWVudFk7XG4gICAgUE9JTlRFUlNUQVRFLnRvdWNoLnNjcm9sbERlY2lkZWQgPSBmYWxzZTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAndG91Y2htb3ZlJykge1xuICAgIGlmIChQT0lOVEVSU1RBVEUudG91Y2guc2Nyb2xsRGVjaWRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBQT0lOVEVSU1RBVEUudG91Y2guc2Nyb2xsRGVjaWRlZCA9IHRydWU7XG4gICAgbGV0IHRhID0gZmlyc3RUb3VjaEFjdGlvbihldik7XG4gICAgbGV0IHNob3VsZFByZXZlbnQgPSBmYWxzZTtcbiAgICBsZXQgZHggPSBNYXRoLmFicyhQT0lOVEVSU1RBVEUudG91Y2gueCAtIHQuY2xpZW50WCk7XG4gICAgbGV0IGR5ID0gTWF0aC5hYnMoUE9JTlRFUlNUQVRFLnRvdWNoLnkgLSB0LmNsaWVudFkpO1xuICAgIGlmICghZXYuY2FuY2VsYWJsZSkge1xuICAgICAgLy8gc2Nyb2xsaW5nIGlzIGhhcHBlbmluZ1xuICAgIH0gZWxzZSBpZiAodGEgPT09ICdub25lJykge1xuICAgICAgc2hvdWxkUHJldmVudCA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh0YSA9PT0gJ3Bhbi14Jykge1xuICAgICAgc2hvdWxkUHJldmVudCA9IGR5ID4gZHg7XG4gICAgfSBlbHNlIGlmICh0YSA9PT0gJ3Bhbi15Jykge1xuICAgICAgc2hvdWxkUHJldmVudCA9IGR4ID4gZHk7XG4gICAgfVxuICAgIGlmIChzaG91bGRQcmV2ZW50KSB7XG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmV2ZW50KCd0cmFjaycpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYSBub2RlIGZvciB0aGUgZ2l2ZW4gZ2VzdHVyZSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSBub2RlIE5vZGUgdG8gYWRkIGxpc3RlbmVyIG9uXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZUeXBlIEdlc3R1cmUgdHlwZTogYGRvd25gLCBgdXBgLCBgdHJhY2tgLCBvciBgdGFwYFxuICogQHBhcmFtIHshZnVuY3Rpb24oIUV2ZW50KTp2b2lkfSBoYW5kbGVyIEV2ZW50IGxpc3RlbmVyIGZ1bmN0aW9uIHRvIGNhbGxcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBhIGdlc3R1cmUgZXZlbnQgbGlzdGVuZXIgd2FzIGFkZGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkTGlzdGVuZXIobm9kZSwgZXZUeXBlLCBoYW5kbGVyKSB7XG4gIGlmIChnZXN0dXJlc1tldlR5cGVdKSB7XG4gICAgX2FkZChub2RlLCBldlR5cGUsIGhhbmRsZXIpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFuIGV2ZW50IGxpc3RlbmVyIGZyb20gYSBub2RlIGZvciB0aGUgZ2l2ZW4gZ2VzdHVyZSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSBub2RlIE5vZGUgdG8gcmVtb3ZlIGxpc3RlbmVyIGZyb21cbiAqIEBwYXJhbSB7c3RyaW5nfSBldlR5cGUgR2VzdHVyZSB0eXBlOiBgZG93bmAsIGB1cGAsIGB0cmFja2AsIG9yIGB0YXBgXG4gKiBAcGFyYW0geyFmdW5jdGlvbighRXZlbnQpOnZvaWR9IGhhbmRsZXIgRXZlbnQgbGlzdGVuZXIgZnVuY3Rpb24gcHJldmlvdXNseSBwYXNzZWQgdG9cbiAqICBgYWRkTGlzdGVuZXJgLlxuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGEgZ2VzdHVyZSBldmVudCBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKG5vZGUsIGV2VHlwZSwgaGFuZGxlcikge1xuICBpZiAoZ2VzdHVyZXNbZXZUeXBlXSkge1xuICAgIF9yZW1vdmUobm9kZSwgZXZUeXBlLCBoYW5kbGVyKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogYXV0b21hdGUgdGhlIGV2ZW50IGxpc3RlbmVycyBmb3IgdGhlIG5hdGl2ZSBldmVudHNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHshRXZlbnRUYXJnZXR9IG5vZGUgTm9kZSBvbiB3aGljaCB0byBhZGQgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGV2VHlwZSBFdmVudCB0eXBlIHRvIGFkZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oIUV2ZW50KX0gaGFuZGxlciBFdmVudCBoYW5kbGVyIGZ1bmN0aW9uLlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gX2FkZChub2RlLCBldlR5cGUsIGhhbmRsZXIpIHtcbiAgbGV0IHJlY29nbml6ZXIgPSBnZXN0dXJlc1tldlR5cGVdO1xuICBsZXQgZGVwcyA9IHJlY29nbml6ZXIuZGVwcztcbiAgbGV0IG5hbWUgPSByZWNvZ25pemVyLm5hbWU7XG4gIGxldCBnb2JqID0gbm9kZVtHRVNUVVJFX0tFWV07XG4gIGlmICghZ29iaikge1xuICAgIG5vZGVbR0VTVFVSRV9LRVldID0gZ29iaiA9IHt9O1xuICB9XG4gIGZvciAobGV0IGkgPSAwLCBkZXAsIGdkOyBpIDwgZGVwcy5sZW5ndGg7IGkrKykge1xuICAgIGRlcCA9IGRlcHNbaV07XG4gICAgLy8gZG9uJ3QgYWRkIG1vdXNlIGhhbmRsZXJzIG9uIGlPUyBiZWNhdXNlIHRoZXkgY2F1c2UgZ3JheSBzZWxlY3Rpb24gb3ZlcmxheXNcbiAgICBpZiAoSVNfVE9VQ0hfT05MWSAmJiBpc01vdXNlRXZlbnQoZGVwKSAmJiBkZXAgIT09ICdjbGljaycpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBnZCA9IGdvYmpbZGVwXTtcbiAgICBpZiAoIWdkKSB7XG4gICAgICBnb2JqW2RlcF0gPSBnZCA9IHtfY291bnQ6IDB9O1xuICAgIH1cbiAgICBpZiAoZ2QuX2NvdW50ID09PSAwKSB7XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZGVwLCBfaGFuZGxlTmF0aXZlLCBQQVNTSVZFX1RPVUNIKGRlcCkpO1xuICAgIH1cbiAgICBnZFtuYW1lXSA9IChnZFtuYW1lXSB8fCAwKSArIDE7XG4gICAgZ2QuX2NvdW50ID0gKGdkLl9jb3VudCB8fCAwKSArIDE7XG4gIH1cbiAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2VHlwZSwgaGFuZGxlcik7XG4gIGlmIChyZWNvZ25pemVyLnRvdWNoQWN0aW9uKSB7XG4gICAgc2V0VG91Y2hBY3Rpb24obm9kZSwgcmVjb2duaXplci50b3VjaEFjdGlvbik7XG4gIH1cbn1cblxuLyoqXG4gKiBhdXRvbWF0ZSBldmVudCBsaXN0ZW5lciByZW1vdmFsIGZvciBuYXRpdmUgZXZlbnRzXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSBub2RlIE5vZGUgb24gd2hpY2ggdG8gcmVtb3ZlIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldlR5cGUgRXZlbnQgdHlwZSB0byByZW1vdmUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFFdmVudCk6IHZvaWR9IGhhbmRsZXIgRXZlbnQgaGFuZGxlciBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIF9yZW1vdmUobm9kZSwgZXZUeXBlLCBoYW5kbGVyKSB7XG4gIGxldCByZWNvZ25pemVyID0gZ2VzdHVyZXNbZXZUeXBlXTtcbiAgbGV0IGRlcHMgPSByZWNvZ25pemVyLmRlcHM7XG4gIGxldCBuYW1lID0gcmVjb2duaXplci5uYW1lO1xuICBsZXQgZ29iaiA9IG5vZGVbR0VTVFVSRV9LRVldO1xuICBpZiAoZ29iaikge1xuICAgIGZvciAobGV0IGkgPSAwLCBkZXAsIGdkOyBpIDwgZGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVwID0gZGVwc1tpXTtcbiAgICAgIGdkID0gZ29ialtkZXBdO1xuICAgICAgaWYgKGdkICYmIGdkW25hbWVdKSB7XG4gICAgICAgIGdkW25hbWVdID0gKGdkW25hbWVdIHx8IDEpIC0gMTtcbiAgICAgICAgZ2QuX2NvdW50ID0gKGdkLl9jb3VudCB8fCAxKSAtIDE7XG4gICAgICAgIGlmIChnZC5fY291bnQgPT09IDApIHtcbiAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZGVwLCBfaGFuZGxlTmF0aXZlLCBQQVNTSVZFX1RPVUNIKGRlcCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldlR5cGUsIGhhbmRsZXIpO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBhIG5ldyBnZXN0dXJlIGV2ZW50IHJlY29nbml6ZXIgZm9yIGFkZGluZyBuZXcgY3VzdG9tXG4gKiBnZXN0dXJlIGV2ZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7IUdlc3R1cmVSZWNvZ25pemVyfSByZWNvZyBHZXN0dXJlIHJlY29nbml6ZXIgZGVzY3JpcHRvclxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyKHJlY29nKSB7XG4gIHJlY29nbml6ZXJzLnB1c2gocmVjb2cpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJlY29nLmVtaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgZ2VzdHVyZXNbcmVjb2cuZW1pdHNbaV1dID0gcmVjb2c7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGV2TmFtZSBFdmVudCBuYW1lLlxuICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIHRoZSBnZXN0dXJlIGZvciB0aGUgZ2l2ZW4gZXZlbnQgbmFtZS5cbiAqL1xuZnVuY3Rpb24gX2ZpbmRSZWNvZ25pemVyQnlFdmVudChldk5hbWUpIHtcbiAgZm9yIChsZXQgaSA9IDAsIHI7IGkgPCByZWNvZ25pemVycy5sZW5ndGg7IGkrKykge1xuICAgIHIgPSByZWNvZ25pemVyc1tpXTtcbiAgICBmb3IgKGxldCBqID0gMCwgbjsgaiA8IHIuZW1pdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgIG4gPSByLmVtaXRzW2pdO1xuICAgICAgaWYgKG4gPT09IGV2TmFtZSkge1xuICAgICAgICByZXR1cm4gcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogU2V0cyBzY3JvbGxpbmcgZGlyZWN0aW9uIG9uIG5vZGUuXG4gKlxuICogVGhpcyB2YWx1ZSBpcyBjaGVja2VkIG9uIGZpcnN0IG1vdmUsIHRodXMgaXQgc2hvdWxkIGJlIGNhbGxlZCBwcmlvciB0b1xuICogYWRkaW5nIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0geyFFdmVudFRhcmdldH0gbm9kZSBOb2RlIHRvIHNldCB0b3VjaCBhY3Rpb24gc2V0dGluZyBvblxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRvdWNoIGFjdGlvbiB2YWx1ZVxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFRvdWNoQWN0aW9uKG5vZGUsIHZhbHVlKSB7XG4gIGlmIChIQVNfTkFUSVZFX1RBICYmIG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgIC8vIE5PVEU6IGFkZCB0b3VjaEFjdGlvbiBhc3luYyBzbyB0aGF0IGV2ZW50cyBjYW4gYmUgYWRkZWQgaW5cbiAgICAvLyBjdXN0b20gZWxlbWVudCBjb25zdHJ1Y3RvcnMuIE90aGVyd2lzZSB3ZSBydW4gYWZvdWwgb2YgY3VzdG9tXG4gICAgLy8gZWxlbWVudHMgcmVzdHJpY3Rpb24gYWdhaW5zdCBzZXR0aW5ncyBhdHRyaWJ1dGVzIChzdHlsZSkgaW4gdGhlXG4gICAgLy8gY29uc3RydWN0b3IuXG4gICAgbWljcm9UYXNrLnJ1bigoKSA9PiB7XG4gICAgICBub2RlLnN0eWxlLnRvdWNoQWN0aW9uID0gdmFsdWU7XG4gICAgfSk7XG4gIH1cbiAgbm9kZVtUT1VDSF9BQ1RJT05dID0gdmFsdWU7XG59XG5cbi8qKlxuICogRGlzcGF0Y2hlcyBhbiBldmVudCBvbiB0aGUgYHRhcmdldGAgZWxlbWVudCBvZiBgdHlwZWAgd2l0aCB0aGUgZ2l2ZW5cbiAqIGBkZXRhaWxgLlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSB0YXJnZXQgVGhlIGVsZW1lbnQgb24gd2hpY2ggdG8gZmlyZSBhbiBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIGV2ZW50IHRvIGZpcmUuXG4gKiBAcGFyYW0geyFPYmplY3Q9fSBkZXRhaWwgVGhlIGRldGFpbCBvYmplY3QgdG8gcG9wdWxhdGUgb24gdGhlIGV2ZW50LlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gX2ZpcmUodGFyZ2V0LCB0eXBlLCBkZXRhaWwpIHtcbiAgbGV0IGV2ID0gbmV3IEV2ZW50KHR5cGUsIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSwgY29tcG9zZWQ6IHRydWUgfSk7XG4gIGV2LmRldGFpbCA9IGRldGFpbDtcbiAgd3JhcCgvKiogQHR5cGUgeyFOb2RlfSAqLyh0YXJnZXQpKS5kaXNwYXRjaEV2ZW50KGV2KTtcbiAgLy8gZm9yd2FyZCBgcHJldmVudERlZmF1bHRgIGluIGEgY2xlYW4gd2F5XG4gIGlmIChldi5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgbGV0IHByZXZlbnRlciA9IGRldGFpbC5wcmV2ZW50ZXIgfHwgZGV0YWlsLnNvdXJjZUV2ZW50O1xuICAgIGlmIChwcmV2ZW50ZXIgJiYgcHJldmVudGVyLnByZXZlbnREZWZhdWx0KSB7XG4gICAgICBwcmV2ZW50ZXIucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBQcmV2ZW50cyB0aGUgZGlzcGF0Y2ggYW5kIGRlZmF1bHQgYWN0aW9uIG9mIHRoZSBnaXZlbiBldmVudCBuYW1lLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldk5hbWUgRXZlbnQgbmFtZS5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmV2ZW50KGV2TmFtZSkge1xuICBsZXQgcmVjb2duaXplciA9IF9maW5kUmVjb2duaXplckJ5RXZlbnQoZXZOYW1lKTtcbiAgaWYgKHJlY29nbml6ZXIuaW5mbykge1xuICAgIHJlY29nbml6ZXIuaW5mby5wcmV2ZW50ID0gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFJlc2V0IHRoZSAyNTAwbXMgdGltZW91dCBvbiBwcm9jZXNzaW5nIG1vdXNlIGlucHV0IGFmdGVyIGRldGVjdGluZyB0b3VjaCBpbnB1dC5cbiAqXG4gKiBUb3VjaCBpbnB1dHMgY3JlYXRlIHN5bnRoZXNpemVkIG1vdXNlIGlucHV0cyBhbnl3aGVyZSBmcm9tIDAgdG8gMjAwMG1zIGFmdGVyIHRoZSB0b3VjaC5cbiAqIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBkdXJpbmcgdGVzdGluZyB3aXRoIHNpbXVsYXRlZCB0b3VjaCBpbnB1dHMuXG4gKiBDYWxsaW5nIHRoaXMgbWV0aG9kIGluIHByb2R1Y3Rpb24gbWF5IGNhdXNlIGR1cGxpY2F0ZSB0YXBzIG9yIG90aGVyIEdlc3R1cmVzLlxuICpcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldE1vdXNlQ2FuY2VsbGVyKCkge1xuICBpZiAoUE9JTlRFUlNUQVRFLm1vdXNlLm1vdXNlSWdub3JlSm9iKSB7XG4gICAgUE9JTlRFUlNUQVRFLm1vdXNlLm1vdXNlSWdub3JlSm9iLmZsdXNoKCk7XG4gIH1cbn1cblxuLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MgKi9cblxucmVnaXN0ZXIoe1xuICBuYW1lOiAnZG93bnVwJyxcbiAgZGVwczogWydtb3VzZWRvd24nLCAndG91Y2hzdGFydCcsICd0b3VjaGVuZCddLFxuICBmbG93OiB7XG4gICAgc3RhcnQ6IFsnbW91c2Vkb3duJywgJ3RvdWNoc3RhcnQnXSxcbiAgICBlbmQ6IFsnbW91c2V1cCcsICd0b3VjaGVuZCddXG4gIH0sXG4gIGVtaXRzOiBbJ2Rvd24nLCAndXAnXSxcblxuICBpbmZvOiB7XG4gICAgbW92ZWZuOiBudWxsLFxuICAgIHVwZm46IG51bGxcbiAgfSxcblxuICAvKipcbiAgICogQHRoaXMge0dlc3R1cmVSZWNvZ25pemVyfVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHVudHJhY2tEb2N1bWVudCh0aGlzLmluZm8pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgbW91c2Vkb3duOiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKCFoYXNMZWZ0TW91c2VCdXR0b24oZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHQgPSBfZmluZE9yaWdpbmFsVGFyZ2V0KGUpO1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgbW92ZWZuID0gZnVuY3Rpb24gbW92ZWZuKGUpIHtcbiAgICAgIGlmICghaGFzTGVmdE1vdXNlQnV0dG9uKGUpKSB7XG4gICAgICAgIGRvd251cEZpcmUoJ3VwJywgdCwgZSk7XG4gICAgICAgIHVudHJhY2tEb2N1bWVudChzZWxmLmluZm8pO1xuICAgICAgfVxuICAgIH07XG4gICAgbGV0IHVwZm4gPSBmdW5jdGlvbiB1cGZuKGUpIHtcbiAgICAgIGlmIChoYXNMZWZ0TW91c2VCdXR0b24oZSkpIHtcbiAgICAgICAgZG93bnVwRmlyZSgndXAnLCB0LCBlKTtcbiAgICAgIH1cbiAgICAgIHVudHJhY2tEb2N1bWVudChzZWxmLmluZm8pO1xuICAgIH07XG4gICAgdHJhY2tEb2N1bWVudCh0aGlzLmluZm8sIG1vdmVmbiwgdXBmbik7XG4gICAgZG93bnVwRmlyZSgnZG93bicsIHQsIGUpO1xuICB9LFxuICAvKipcbiAgICogQHRoaXMge0dlc3R1cmVSZWNvZ25pemVyfVxuICAgKiBAcGFyYW0ge1RvdWNoRXZlbnR9IGVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHRvdWNoc3RhcnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICBkb3dudXBGaXJlKCdkb3duJywgX2ZpbmRPcmlnaW5hbFRhcmdldChlKSwgZS5jaGFuZ2VkVG91Y2hlc1swXSwgZSk7XG4gIH0sXG4gIC8qKlxuICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAqIEBwYXJhbSB7VG91Y2hFdmVudH0gZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgdG91Y2hlbmQ6IGZ1bmN0aW9uKGUpIHtcbiAgICBkb3dudXBGaXJlKCd1cCcsIF9maW5kT3JpZ2luYWxUYXJnZXQoZSksIGUuY2hhbmdlZFRvdWNoZXNbMF0sIGUpO1xuICB9XG59KTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XG4gKiBAcGFyYW0ge0V2ZW50fFRvdWNofSBldmVudFxuICogQHBhcmFtIHtFdmVudD19IHByZXZlbnRlclxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gZG93bnVwRmlyZSh0eXBlLCB0YXJnZXQsIGV2ZW50LCBwcmV2ZW50ZXIpIHtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgX2ZpcmUodGFyZ2V0LCB0eXBlLCB7XG4gICAgeDogZXZlbnQuY2xpZW50WCxcbiAgICB5OiBldmVudC5jbGllbnRZLFxuICAgIHNvdXJjZUV2ZW50OiBldmVudCxcbiAgICBwcmV2ZW50ZXI6IHByZXZlbnRlcixcbiAgICBwcmV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gcHJldmVudChlKTtcbiAgICB9XG4gIH0pO1xufVxuXG5yZWdpc3Rlcih7XG4gIG5hbWU6ICd0cmFjaycsXG4gIHRvdWNoQWN0aW9uOiAnbm9uZScsXG4gIGRlcHM6IFsnbW91c2Vkb3duJywgJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJ10sXG4gIGZsb3c6IHtcbiAgICBzdGFydDogWydtb3VzZWRvd24nLCAndG91Y2hzdGFydCddLFxuICAgIGVuZDogWydtb3VzZXVwJywgJ3RvdWNoZW5kJ11cbiAgfSxcbiAgZW1pdHM6IFsndHJhY2snXSxcblxuICBpbmZvOiB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHN0YXRlOiAnc3RhcnQnLFxuICAgIHN0YXJ0ZWQ6IGZhbHNlLFxuICAgIG1vdmVzOiBbXSxcbiAgICAvKiogQHRoaXMge0dlc3R1cmVJbmZvfSAqL1xuICAgIGFkZE1vdmU6IGZ1bmN0aW9uKG1vdmUpIHtcbiAgICAgIGlmICh0aGlzLm1vdmVzLmxlbmd0aCA+IFRSQUNLX0xFTkdUSCkge1xuICAgICAgICB0aGlzLm1vdmVzLnNoaWZ0KCk7XG4gICAgICB9XG4gICAgICB0aGlzLm1vdmVzLnB1c2gobW92ZSk7XG4gICAgfSxcbiAgICBtb3ZlZm46IG51bGwsXG4gICAgdXBmbjogbnVsbCxcbiAgICBwcmV2ZW50OiBmYWxzZVxuICB9LFxuXG4gIC8qKlxuICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbmZvLnN0YXRlID0gJ3N0YXJ0JztcbiAgICB0aGlzLmluZm8uc3RhcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuaW5mby5tb3ZlcyA9IFtdO1xuICAgIHRoaXMuaW5mby54ID0gMDtcbiAgICB0aGlzLmluZm8ueSA9IDA7XG4gICAgdGhpcy5pbmZvLnByZXZlbnQgPSBmYWxzZTtcbiAgICB1bnRyYWNrRG9jdW1lbnQodGhpcy5pbmZvKTtcbiAgfSxcblxuICAvKipcbiAgICogQHRoaXMge0dlc3R1cmVSZWNvZ25pemVyfVxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIG1vdXNlZG93bjogZnVuY3Rpb24oZSkge1xuICAgIGlmICghaGFzTGVmdE1vdXNlQnV0dG9uKGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB0ID0gX2ZpbmRPcmlnaW5hbFRhcmdldChlKTtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgbGV0IG1vdmVmbiA9IGZ1bmN0aW9uIG1vdmVmbihlKSB7XG4gICAgICBsZXQgeCA9IGUuY2xpZW50WCwgeSA9IGUuY2xpZW50WTtcbiAgICAgIGlmICh0cmFja0hhc01vdmVkRW5vdWdoKHNlbGYuaW5mbywgeCwgeSkpIHtcbiAgICAgICAgLy8gZmlyc3QgbW92ZSBpcyAnc3RhcnQnLCBzdWJzZXF1ZW50IG1vdmVzIGFyZSAnbW92ZScsIG1vdXNldXAgaXMgJ2VuZCdcbiAgICAgICAgc2VsZi5pbmZvLnN0YXRlID0gc2VsZi5pbmZvLnN0YXJ0ZWQgPyAoZS50eXBlID09PSAnbW91c2V1cCcgPyAnZW5kJyA6ICd0cmFjaycpIDogJ3N0YXJ0JztcbiAgICAgICAgaWYgKHNlbGYuaW5mby5zdGF0ZSA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICAgIC8vIGlmIGFuZCBvbmx5IGlmIHRyYWNraW5nLCBhbHdheXMgcHJldmVudCB0YXBcbiAgICAgICAgICBwcmV2ZW50KCd0YXAnKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmluZm8uYWRkTW92ZSh7eDogeCwgeTogeX0pO1xuICAgICAgICBpZiAoIWhhc0xlZnRNb3VzZUJ1dHRvbihlKSkge1xuICAgICAgICAgIC8vIGFsd2F5cyBmaXJlIFwiZW5kXCJcbiAgICAgICAgICBzZWxmLmluZm8uc3RhdGUgPSAnZW5kJztcbiAgICAgICAgICB1bnRyYWNrRG9jdW1lbnQoc2VsZi5pbmZvKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCkge1xuICAgICAgICAgIHRyYWNrRmlyZShzZWxmLmluZm8sIHQsIGUpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuaW5mby5zdGFydGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGxldCB1cGZuID0gZnVuY3Rpb24gdXBmbihlKSB7XG4gICAgICBpZiAoc2VsZi5pbmZvLnN0YXJ0ZWQpIHtcbiAgICAgICAgbW92ZWZuKGUpO1xuICAgICAgfVxuXG4gICAgICAvLyByZW1vdmUgdGhlIHRlbXBvcmFyeSBsaXN0ZW5lcnNcbiAgICAgIHVudHJhY2tEb2N1bWVudChzZWxmLmluZm8pO1xuICAgIH07XG4gICAgLy8gYWRkIHRlbXBvcmFyeSBkb2N1bWVudCBsaXN0ZW5lcnMgYXMgbW91c2UgcmV0YXJnZXRzXG4gICAgdHJhY2tEb2N1bWVudCh0aGlzLmluZm8sIG1vdmVmbiwgdXBmbik7XG4gICAgdGhpcy5pbmZvLnggPSBlLmNsaWVudFg7XG4gICAgdGhpcy5pbmZvLnkgPSBlLmNsaWVudFk7XG4gIH0sXG4gIC8qKlxuICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAqIEBwYXJhbSB7VG91Y2hFdmVudH0gZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgdG91Y2hzdGFydDogZnVuY3Rpb24oZSkge1xuICAgIGxldCBjdCA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgdGhpcy5pbmZvLnggPSBjdC5jbGllbnRYO1xuICAgIHRoaXMuaW5mby55ID0gY3QuY2xpZW50WTtcbiAgfSxcbiAgLyoqXG4gICAqIEB0aGlzIHtHZXN0dXJlUmVjb2duaXplcn1cbiAgICogQHBhcmFtIHtUb3VjaEV2ZW50fSBlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICB0b3VjaG1vdmU6IGZ1bmN0aW9uKGUpIHtcbiAgICBsZXQgdCA9IF9maW5kT3JpZ2luYWxUYXJnZXQoZSk7XG4gICAgbGV0IGN0ID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICBsZXQgeCA9IGN0LmNsaWVudFgsIHkgPSBjdC5jbGllbnRZO1xuICAgIGlmICh0cmFja0hhc01vdmVkRW5vdWdoKHRoaXMuaW5mbywgeCwgeSkpIHtcbiAgICAgIGlmICh0aGlzLmluZm8uc3RhdGUgPT09ICdzdGFydCcpIHtcbiAgICAgICAgLy8gaWYgYW5kIG9ubHkgaWYgdHJhY2tpbmcsIGFsd2F5cyBwcmV2ZW50IHRhcFxuICAgICAgICBwcmV2ZW50KCd0YXAnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5mby5hZGRNb3ZlKHt4OiB4LCB5OiB5fSk7XG4gICAgICB0cmFja0ZpcmUodGhpcy5pbmZvLCB0LCBjdCk7XG4gICAgICB0aGlzLmluZm8uc3RhdGUgPSAndHJhY2snO1xuICAgICAgdGhpcy5pbmZvLnN0YXJ0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSxcbiAgLyoqXG4gICAqIEB0aGlzIHtHZXN0dXJlUmVjb2duaXplcn1cbiAgICogQHBhcmFtIHtUb3VjaEV2ZW50fSBlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICB0b3VjaGVuZDogZnVuY3Rpb24oZSkge1xuICAgIGxldCB0ID0gX2ZpbmRPcmlnaW5hbFRhcmdldChlKTtcbiAgICBsZXQgY3QgPSBlLmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgIC8vIG9ubHkgdHJhY2tlbmQgaWYgdHJhY2sgd2FzIHN0YXJ0ZWQgYW5kIG5vdCBhYm9ydGVkXG4gICAgaWYgKHRoaXMuaW5mby5zdGFydGVkKSB7XG4gICAgICAvLyByZXNldCBzdGFydGVkIHN0YXRlIG9uIHVwXG4gICAgICB0aGlzLmluZm8uc3RhdGUgPSAnZW5kJztcbiAgICAgIHRoaXMuaW5mby5hZGRNb3ZlKHt4OiBjdC5jbGllbnRYLCB5OiBjdC5jbGllbnRZfSk7XG4gICAgICB0cmFja0ZpcmUodGhpcy5pbmZvLCB0LCBjdCk7XG4gICAgfVxuICB9XG59KTtcblxuLyoqXG4gKiBAcGFyYW0geyFHZXN0dXJlSW5mb30gaW5mb1xuICogQHBhcmFtIHtudW1iZXJ9IHhcbiAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiB0cmFja0hhc01vdmVkRW5vdWdoKGluZm8sIHgsIHkpIHtcbiAgaWYgKGluZm8ucHJldmVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoaW5mby5zdGFydGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgbGV0IGR4ID0gTWF0aC5hYnMoaW5mby54IC0geCk7XG4gIGxldCBkeSA9IE1hdGguYWJzKGluZm8ueSAtIHkpO1xuICByZXR1cm4gKGR4ID49IFRSQUNLX0RJU1RBTkNFIHx8IGR5ID49IFRSQUNLX0RJU1RBTkNFKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFHZXN0dXJlSW5mb30gaW5mb1xuICogQHBhcmFtIHs/RXZlbnRUYXJnZXR9IHRhcmdldFxuICogQHBhcmFtIHtUb3VjaH0gdG91Y2hcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHRyYWNrRmlyZShpbmZvLCB0YXJnZXQsIHRvdWNoKSB7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBzZWNvbmRsYXN0ID0gaW5mby5tb3Zlc1tpbmZvLm1vdmVzLmxlbmd0aCAtIDJdO1xuICBsZXQgbGFzdG1vdmUgPSBpbmZvLm1vdmVzW2luZm8ubW92ZXMubGVuZ3RoIC0gMV07XG4gIGxldCBkeCA9IGxhc3Rtb3ZlLnggLSBpbmZvLng7XG4gIGxldCBkeSA9IGxhc3Rtb3ZlLnkgLSBpbmZvLnk7XG4gIGxldCBkZHgsIGRkeSA9IDA7XG4gIGlmIChzZWNvbmRsYXN0KSB7XG4gICAgZGR4ID0gbGFzdG1vdmUueCAtIHNlY29uZGxhc3QueDtcbiAgICBkZHkgPSBsYXN0bW92ZS55IC0gc2Vjb25kbGFzdC55O1xuICB9XG4gIF9maXJlKHRhcmdldCwgJ3RyYWNrJywge1xuICAgIHN0YXRlOiBpbmZvLnN0YXRlLFxuICAgIHg6IHRvdWNoLmNsaWVudFgsXG4gICAgeTogdG91Y2guY2xpZW50WSxcbiAgICBkeDogZHgsXG4gICAgZHk6IGR5LFxuICAgIGRkeDogZGR4LFxuICAgIGRkeTogZGR5LFxuICAgIHNvdXJjZUV2ZW50OiB0b3VjaCxcbiAgICBob3ZlcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGVlcFRhcmdldEZpbmQodG91Y2guY2xpZW50WCwgdG91Y2guY2xpZW50WSk7XG4gICAgfVxuICB9KTtcbn1cblxucmVnaXN0ZXIoe1xuICBuYW1lOiAndGFwJyxcbiAgZGVwczogWydtb3VzZWRvd24nLCAnY2xpY2snLCAndG91Y2hzdGFydCcsICd0b3VjaGVuZCddLFxuICBmbG93OiB7XG4gICAgc3RhcnQ6IFsnbW91c2Vkb3duJywgJ3RvdWNoc3RhcnQnXSxcbiAgICBlbmQ6IFsnY2xpY2snLCAndG91Y2hlbmQnXVxuICB9LFxuICBlbWl0czogWyd0YXAnXSxcbiAgaW5mbzoge1xuICAgIHg6IE5hTixcbiAgICB5OiBOYU4sXG4gICAgcHJldmVudDogZmFsc2VcbiAgfSxcbiAgLyoqXG4gICAqIEB0aGlzIHtHZXN0dXJlUmVjb2duaXplcn1cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmluZm8ueCA9IE5hTjtcbiAgICB0aGlzLmluZm8ueSA9IE5hTjtcbiAgICB0aGlzLmluZm8ucHJldmVudCA9IGZhbHNlO1xuICB9LFxuICAvKipcbiAgICogQHRoaXMge0dlc3R1cmVSZWNvZ25pemVyfVxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIG1vdXNlZG93bjogZnVuY3Rpb24oZSkge1xuICAgIGlmIChoYXNMZWZ0TW91c2VCdXR0b24oZSkpIHtcbiAgICAgIHRoaXMuaW5mby54ID0gZS5jbGllbnRYO1xuICAgICAgdGhpcy5pbmZvLnkgPSBlLmNsaWVudFk7XG4gICAgfVxuICB9LFxuICAvKipcbiAgICogQHRoaXMge0dlc3R1cmVSZWNvZ25pemVyfVxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGNsaWNrOiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGhhc0xlZnRNb3VzZUJ1dHRvbihlKSkge1xuICAgICAgdHJhY2tGb3J3YXJkKHRoaXMuaW5mbywgZSk7XG4gICAgfVxuICB9LFxuICAvKipcbiAgICogQHRoaXMge0dlc3R1cmVSZWNvZ25pemVyfVxuICAgKiBAcGFyYW0ge1RvdWNoRXZlbnR9IGVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHRvdWNoc3RhcnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICBjb25zdCB0b3VjaCA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgdGhpcy5pbmZvLnggPSB0b3VjaC5jbGllbnRYO1xuICAgIHRoaXMuaW5mby55ID0gdG91Y2guY2xpZW50WTtcbiAgfSxcbiAgLyoqXG4gICAqIEB0aGlzIHtHZXN0dXJlUmVjb2duaXplcn1cbiAgICogQHBhcmFtIHtUb3VjaEV2ZW50fSBlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICB0b3VjaGVuZDogZnVuY3Rpb24oZSkge1xuICAgIHRyYWNrRm9yd2FyZCh0aGlzLmluZm8sIGUuY2hhbmdlZFRvdWNoZXNbMF0sIGUpO1xuICB9XG59KTtcblxuLyoqXG4gKiBAcGFyYW0geyFHZXN0dXJlSW5mb30gaW5mb1xuICogQHBhcmFtIHtFdmVudCB8IFRvdWNofSBlXG4gKiBAcGFyYW0ge0V2ZW50PX0gcHJldmVudGVyXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5mdW5jdGlvbiB0cmFja0ZvcndhcmQoaW5mbywgZSwgcHJldmVudGVyKSB7XG4gIGxldCBkeCA9IE1hdGguYWJzKGUuY2xpZW50WCAtIGluZm8ueCk7XG4gIGxldCBkeSA9IE1hdGguYWJzKGUuY2xpZW50WSAtIGluZm8ueSk7XG4gIC8vIGZpbmQgb3JpZ2luYWwgdGFyZ2V0IGZyb20gYHByZXZlbnRlcmAgZm9yIFRvdWNoRXZlbnRzLCBvciBgZWAgZm9yIE1vdXNlRXZlbnRzXG4gIGxldCB0ID0gX2ZpbmRPcmlnaW5hbFRhcmdldCgocHJldmVudGVyIHx8IGUpKTtcbiAgaWYgKCF0IHx8IChjYW5CZURpc2FibGVkWy8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyh0KS5sb2NhbE5hbWVdICYmIHQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBkeCxkeSBjYW4gYmUgTmFOIGlmIGBjbGlja2AgaGFzIGJlZW4gc2ltdWxhdGVkIGFuZCB0aGVyZSB3YXMgbm8gYGRvd25gIGZvciBgc3RhcnRgXG4gIGlmIChpc05hTihkeCkgfHwgaXNOYU4oZHkpIHx8IChkeCA8PSBUQVBfRElTVEFOQ0UgJiYgZHkgPD0gVEFQX0RJU1RBTkNFKSB8fCBpc1N5bnRoZXRpY0NsaWNrKGUpKSB7XG4gICAgLy8gcHJldmVudCB0YXBzIGZyb20gYmVpbmcgZ2VuZXJhdGVkIGlmIGFuIGV2ZW50IGhhcyBjYW5jZWxlZCB0aGVtXG4gICAgaWYgKCFpbmZvLnByZXZlbnQpIHtcbiAgICAgIF9maXJlKHQsICd0YXAnLCB7XG4gICAgICAgIHg6IGUuY2xpZW50WCxcbiAgICAgICAgeTogZS5jbGllbnRZLFxuICAgICAgICBzb3VyY2VFdmVudDogZSxcbiAgICAgICAgcHJldmVudGVyOiBwcmV2ZW50ZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG4vKiBlc2xpbnQtZW5hYmxlIHZhbGlkLWpzZG9jICovXG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGNvbnN0IGZpbmRPcmlnaW5hbFRhcmdldCA9IF9maW5kT3JpZ2luYWxUYXJnZXQ7XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGNvbnN0IGFkZCA9IGFkZExpc3RlbmVyO1xuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBjb25zdCByZW1vdmUgPSByZW1vdmVMaXN0ZW5lcjtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4uL3V0aWxzL2Jvb3QuanMnO1xuXG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuaW1wb3J0IHsgYWRkTGlzdGVuZXIsIHJlbW92ZUxpc3RlbmVyIH0gZnJvbSAnLi4vdXRpbHMvZ2VzdHVyZXMuanMnO1xuXG4vKipcbiAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBBUEkgZm9yIGFkZGluZyBQb2x5bWVyJ3MgY3Jvc3MtcGxhdGZvcm1cbiAqIGdlc3R1cmUgZXZlbnRzIHRvIG5vZGVzLlxuICpcbiAqIFRoZSBBUEkgaXMgZGVzaWduZWQgdG8gYmUgY29tcGF0aWJsZSB3aXRoIG92ZXJyaWRlIHBvaW50cyBpbXBsZW1lbnRlZFxuICogaW4gYFRlbXBsYXRlU3RhbXBgIHN1Y2ggdGhhdCBkZWNsYXJhdGl2ZSBldmVudCBsaXN0ZW5lcnMgaW5cbiAqIHRlbXBsYXRlcyB3aWxsIHN1cHBvcnQgZ2VzdHVyZSBldmVudHMgd2hlbiB0aGlzIG1peGluIGlzIGFwcGxpZWQgYWxvbmcgd2l0aFxuICogYFRlbXBsYXRlU3RhbXBgLlxuICpcbiAqIEBtaXhpbkZ1bmN0aW9uXG4gKiBAcG9seW1lclxuICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIEFQSSBmb3IgYWRkaW5nIFBvbHltZXInc1xuICogICBjcm9zcy1wbGF0Zm9ybSBnZXN0dXJlIGV2ZW50cyB0byBub2Rlc1xuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3OlQpfSBzdXBlckNsYXNzIENsYXNzIHRvIGFwcGx5IG1peGluIHRvLlxuICogQHJldHVybiB7ZnVuY3Rpb24obmV3OlQpfSBzdXBlckNsYXNzIHdpdGggbWl4aW4gYXBwbGllZC5cbiAqL1xuZXhwb3J0IGNvbnN0IEdlc3R1cmVFdmVudExpc3RlbmVycyA9IGRlZHVwaW5nTWl4aW4oKHN1cGVyQ2xhc3MpID0+IHtcbiAgLyoqXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtaXhpbkNsYXNzXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0dlc3R1cmVFdmVudExpc3RlbmVyc31cbiAgICovXG4gIGNsYXNzIEdlc3R1cmVFdmVudExpc3RlbmVycyBleHRlbmRzIHN1cGVyQ2xhc3Mge1xuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIG5vZGUgaWYgaXQgaXMgYSBnZXN0dXJlcyBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSBub2RlIE5vZGUgdG8gYWRkIGV2ZW50IGxpc3RlbmVyIHRvXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIGV2ZW50XG4gICAgICogQHBhcmFtIHtmdW5jdGlvbighRXZlbnQpOnZvaWR9IGhhbmRsZXIgTGlzdGVuZXIgZnVuY3Rpb24gdG8gYWRkXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfYWRkRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIGlmICghYWRkTGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSkge1xuICAgICAgICBzdXBlci5fYWRkRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIG5vZGUgaWYgaXQgaXMgYSBnZXN0dXJlcyBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSBub2RlIE5vZGUgdG8gcmVtb3ZlIGV2ZW50IGxpc3RlbmVyIGZyb21cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIE5hbWUgb2YgZXZlbnRcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFFdmVudCk6dm9pZH0gaGFuZGxlciBMaXN0ZW5lciBmdW5jdGlvbiB0byByZW1vdmVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9yZW1vdmVFdmVudExpc3RlbmVyRnJvbU5vZGUobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICBpZiAoIXJlbW92ZUxpc3RlbmVyKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikpIHtcbiAgICAgICAgc3VwZXIuX3JlbW92ZUV2ZW50TGlzdGVuZXJGcm9tTm9kZShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBHZXN0dXJlRXZlbnRMaXN0ZW5lcnM7XG59KTtcbiIsIi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQHN1cHByZXNzIHtjaGVja1Byb3RvdHlwYWxUeXBlc31cbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IFByb3BlcnR5QWNjZXNzb3JzIH0gZnJvbSAnLi9wcm9wZXJ0eS1hY2Nlc3NvcnMuanMnO1xuXG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuXG5jb25zdCBIT1NUX0RJUiA9IC86aG9zdFxcKDpkaXJcXCgobHRyfHJ0bClcXClcXCkvZztcbmNvbnN0IEhPU1RfRElSX1JFUExBQ01FTlQgPSAnOmhvc3QoW2Rpcj1cIiQxXCJdKSc7XG5cbmNvbnN0IEVMX0RJUiA9IC8oW1xcc1xcdy0jXFwuXFxbXFxdXFwqXSopOmRpclxcKChsdHJ8cnRsKVxcKS9nO1xuY29uc3QgRUxfRElSX1JFUExBQ01FTlQgPSAnOmhvc3QoW2Rpcj1cIiQyXCJdKSAkMSc7XG5cbmNvbnN0IERJUl9DSEVDSyA9IC86ZGlyXFwoKD86bHRyfHJ0bClcXCkvO1xuXG5jb25zdCBTSElNX1NIQURPVyA9IEJvb2xlYW4od2luZG93WydTaGFkeURPTSddICYmIHdpbmRvd1snU2hhZHlET00nXVsnaW5Vc2UnXSk7XG5cbi8qKlxuICogQHR5cGUgeyFBcnJheTwhUG9seW1lcl9EaXJNaXhpbj59XG4gKi9cbmNvbnN0IERJUl9JTlNUQU5DRVMgPSBbXTtcblxuLyoqIEB0eXBlIHs/TXV0YXRpb25PYnNlcnZlcn0gKi9cbmxldCBvYnNlcnZlciA9IG51bGw7XG5cbmxldCBkb2N1bWVudERpciA9ICcnO1xuXG5mdW5jdGlvbiBnZXRSVEwoKSB7XG4gIGRvY3VtZW50RGlyID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlyJyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHshUG9seW1lcl9EaXJNaXhpbn0gaW5zdGFuY2UgSW5zdGFuY2UgdG8gc2V0IFJUTCBzdGF0dXMgb25cbiAqL1xuZnVuY3Rpb24gc2V0UlRMKGluc3RhbmNlKSB7XG4gIGlmICghaW5zdGFuY2UuX19hdXRvRGlyT3B0T3V0KSB7XG4gICAgY29uc3QgZWwgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8oaW5zdGFuY2UpO1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnZGlyJywgZG9jdW1lbnREaXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGlvbigpIHtcbiAgZ2V0UlRMKCk7XG4gIGRvY3VtZW50RGlyID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlyJyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgRElSX0lOU1RBTkNFUy5sZW5ndGg7IGkrKykge1xuICAgIHNldFJUTChESVJfSU5TVEFOQ0VTW2ldKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0YWtlUmVjb3JkcygpIHtcbiAgaWYgKG9ic2VydmVyICYmIG9ic2VydmVyLnRha2VSZWNvcmRzKCkubGVuZ3RoKSB7XG4gICAgdXBkYXRlRGlyZWN0aW9uKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgYWxsb3dzIGVsZW1lbnRzIHRvIHVzZSB0aGUgYDpkaXJgIENTUyBTZWxlY3RvciB0b1xuICogaGF2ZSB0ZXh0IGRpcmVjdGlvbiBzcGVjaWZpYyBzdHlsaW5nLlxuICpcbiAqIFdpdGggdGhpcyBtaXhpbiwgYW55IHN0eWxlc2hlZXQgcHJvdmlkZWQgaW4gdGhlIHRlbXBsYXRlIHdpbGwgdHJhbnNmb3JtXG4gKiBgOmRpcmAgaW50byBgOmhvc3QoW2Rpcl0pYCBhbmQgc3luYyBkaXJlY3Rpb24gd2l0aCB0aGUgcGFnZSB2aWEgdGhlXG4gKiBlbGVtZW50J3MgYGRpcmAgYXR0cmlidXRlLlxuICpcbiAqIEVsZW1lbnRzIGNhbiBvcHQgb3V0IG9mIHRoZSBnbG9iYWwgcGFnZSB0ZXh0IGRpcmVjdGlvbiBieSBzZXR0aW5nIHRoZSBgZGlyYFxuICogYXR0cmlidXRlIGRpcmVjdGx5IGluIGByZWFkeSgpYCBvciBpbiBIVE1MLlxuICpcbiAqIENhdmVhdHM6XG4gKiAtIEFwcGxpY2F0aW9ucyBtdXN0IHNldCBgPGh0bWwgZGlyPVwibHRyXCI+YCBvciBgPGh0bWwgZGlyPVwicnRsXCI+YCB0byBzeW5jXG4gKiAgIGRpcmVjdGlvblxuICogLSBBdXRvbWF0aWMgbGVmdC10by1yaWdodCBvciByaWdodC10by1sZWZ0IHN0eWxpbmcgaXMgc3luYydkIHdpdGggdGhlXG4gKiAgIGA8aHRtbD5gIGVsZW1lbnQgb25seS5cbiAqIC0gQ2hhbmdpbmcgYGRpcmAgYXQgcnVudGltZSBpcyBzdXBwb3J0ZWQuXG4gKiAtIE9wdGluZyBvdXQgb2YgdGhlIGdsb2JhbCBkaXJlY3Rpb24gc3R5bGluZyBpcyBwZXJtYW5lbnRcbiAqXG4gKiBAbWl4aW5GdW5jdGlvblxuICogQHBvbHltZXJcbiAqIEBhcHBsaWVzTWl4aW4gUHJvcGVydHlBY2Nlc3NvcnNcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyBDbGFzcyB0byBhcHBseSBtaXhpbiB0by5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyB3aXRoIG1peGluIGFwcGxpZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBEaXJNaXhpbiA9IGRlZHVwaW5nTWl4aW4oKGJhc2UpID0+IHtcblxuICBpZiAoIVNISU1fU0hBRE9XKSB7XG4gICAgaWYgKCFvYnNlcnZlcikge1xuICAgICAgZ2V0UlRMKCk7XG4gICAgICBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHVwZGF0ZURpcmVjdGlvbik7XG4gICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwge2F0dHJpYnV0ZXM6IHRydWUsIGF0dHJpYnV0ZUZpbHRlcjogWydkaXInXX0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlBY2Nlc3NvcnN9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdCBlbGVtZW50QmFzZSA9IFByb3BlcnR5QWNjZXNzb3JzKGJhc2UpO1xuXG4gIC8qKlxuICAgKiBAcG9seW1lclxuICAgKiBAbWl4aW5DbGFzc1xuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9EaXJNaXhpbn1cbiAgICovXG4gIGNsYXNzIERpciBleHRlbmRzIGVsZW1lbnRCYXNlIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0IC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSSSAuXG4gICAgICogQHJldHVybiB7c3RyaW5nfSAuXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX3Byb2Nlc3NTdHlsZVRleHQoY3NzVGV4dCwgYmFzZVVSSSkge1xuICAgICAgLy8gVE9ETyhodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMyNDApOlxuICAgICAgLy8gICAgIENoYW5nZSBiYWNrIHRvIGp1c3Qgc3VwZXIubWV0aG9kQ2FsbCgpXG4gICAgICBjc3NUZXh0ID0gZWxlbWVudEJhc2UuX3Byb2Nlc3NTdHlsZVRleHQuY2FsbCh0aGlzLCBjc3NUZXh0LCBiYXNlVVJJKTtcbiAgICAgIGlmICghU0hJTV9TSEFET1cgJiYgRElSX0NIRUNLLnRlc3QoY3NzVGV4dCkpIHtcbiAgICAgICAgY3NzVGV4dCA9IHRoaXMuX3JlcGxhY2VEaXJJbkNzc1RleHQoY3NzVGV4dCk7XG4gICAgICAgIHRoaXMuX19hY3RpdmF0ZURpciA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3NzVGV4dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlIGA6ZGlyYCBpbiB0aGUgZ2l2ZW4gQ1NTIHRleHRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IENTUyB0ZXh0IHRvIHJlcGxhY2UgRElSXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBNb2RpZmllZCBDU1NcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcmVwbGFjZURpckluQ3NzVGV4dCh0ZXh0KSB7XG4gICAgICBsZXQgcmVwbGFjZWRUZXh0ID0gdGV4dDtcbiAgICAgIHJlcGxhY2VkVGV4dCA9IHJlcGxhY2VkVGV4dC5yZXBsYWNlKEhPU1RfRElSLCBIT1NUX0RJUl9SRVBMQUNNRU5UKTtcbiAgICAgIHJlcGxhY2VkVGV4dCA9IHJlcGxhY2VkVGV4dC5yZXBsYWNlKEVMX0RJUiwgRUxfRElSX1JFUExBQ01FTlQpO1xuICAgICAgcmV0dXJuIHJlcGxhY2VkVGV4dDtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICB0aGlzLl9fYXV0b0Rpck9wdE91dCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfSBDbG9zdXJlIGRvZXNuJ3QgdW5kZXJzdGFuZCB0aGF0IGB0aGlzYCBpcyBhblxuICAgICAqICAgICBIVE1MRWxlbWVudFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgcmVhZHkoKSB7XG4gICAgICBzdXBlci5yZWFkeSgpO1xuICAgICAgdGhpcy5fX2F1dG9EaXJPcHRPdXQgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8odGhpcykuaGFzQXR0cmlidXRlKCdkaXInKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJZiBpdCBleGlzdHMgb24gZWxlbWVudEJhc2UsIGl0IGNhbiBiZVxuICAgICAqICAgc3VwZXInZFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBpZiAoZWxlbWVudEJhc2UucHJvdG90eXBlLmNvbm5lY3RlZENhbGxiYWNrKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5fX2FjdGl2YXRlRGlyKSB7XG4gICAgICAgIHRha2VSZWNvcmRzKCk7XG4gICAgICAgIERJUl9JTlNUQU5DRVMucHVzaCh0aGlzKTtcbiAgICAgICAgc2V0UlRMKHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IElmIGl0IGV4aXN0cyBvbiBlbGVtZW50QmFzZSwgaXQgY2FuIGJlXG4gICAgICogICBzdXBlcidkXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIGlmIChlbGVtZW50QmFzZS5wcm90b3R5cGUuZGlzY29ubmVjdGVkQ2FsbGJhY2spIHtcbiAgICAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLl9fYWN0aXZhdGVEaXIpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gRElSX0lOU1RBTkNFUy5pbmRleE9mKHRoaXMpO1xuICAgICAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgICAgICBESVJfSU5TVEFOQ0VTLnNwbGljZShpZHgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgRGlyLl9fYWN0aXZhdGVEaXIgPSBmYWxzZTtcblxuICByZXR1cm4gRGlyO1xufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5mdW5jdGlvbiByZXNvbHZlKCkge1xuICBkb2N1bWVudC5ib2R5LnJlbW92ZUF0dHJpYnV0ZSgndW5yZXNvbHZlZCcpO1xufVxuXG5pZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2ludGVyYWN0aXZlJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gIHJlc29sdmUoKTtcbn0gZWxzZSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgcmVzb2x2ZSk7XG59XG5cbmV4cG9ydCB7fTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbmZ1bmN0aW9uIG5ld1NwbGljZShpbmRleCwgcmVtb3ZlZCwgYWRkZWRDb3VudCkge1xuICByZXR1cm4ge1xuICAgIGluZGV4OiBpbmRleCxcbiAgICByZW1vdmVkOiByZW1vdmVkLFxuICAgIGFkZGVkQ291bnQ6IGFkZGVkQ291bnRcbiAgfTtcbn1cblxuY29uc3QgRURJVF9MRUFWRSA9IDA7XG5jb25zdCBFRElUX1VQREFURSA9IDE7XG5jb25zdCBFRElUX0FERCA9IDI7XG5jb25zdCBFRElUX0RFTEVURSA9IDM7XG5cbi8vIE5vdGU6IFRoaXMgZnVuY3Rpb24gaXMgKmJhc2VkKiBvbiB0aGUgY29tcHV0YXRpb24gb2YgdGhlIExldmVuc2h0ZWluXG4vLyBcImVkaXRcIiBkaXN0YW5jZS4gVGhlIG9uZSBjaGFuZ2UgaXMgdGhhdCBcInVwZGF0ZXNcIiBhcmUgdHJlYXRlZCBhcyB0d29cbi8vIGVkaXRzIC0gbm90IG9uZS4gV2l0aCBBcnJheSBzcGxpY2VzLCBhbiB1cGRhdGUgaXMgcmVhbGx5IGEgZGVsZXRlXG4vLyBmb2xsb3dlZCBieSBhbiBhZGQuIEJ5IHJldGFpbmluZyB0aGlzLCB3ZSBvcHRpbWl6ZSBmb3IgXCJrZWVwaW5nXCIgdGhlXG4vLyBtYXhpbXVtIGFycmF5IGl0ZW1zIGluIHRoZSBvcmlnaW5hbCBhcnJheS4gRm9yIGV4YW1wbGU6XG4vL1xuLy8gICAneHh4eDEyMycgLT4gJzEyM3l5eXknXG4vL1xuLy8gV2l0aCAxLWVkaXQgdXBkYXRlcywgdGhlIHNob3J0ZXN0IHBhdGggd291bGQgYmUganVzdCB0byB1cGRhdGUgYWxsIHNldmVuXG4vLyBjaGFyYWN0ZXJzLiBXaXRoIDItZWRpdCB1cGRhdGVzLCB3ZSBkZWxldGUgNCwgbGVhdmUgMywgYW5kIGFkZCA0LiBUaGlzXG4vLyBsZWF2ZXMgdGhlIHN1YnN0cmluZyAnMTIzJyBpbnRhY3QuXG5mdW5jdGlvbiBjYWxjRWRpdERpc3RhbmNlcyhjdXJyZW50LCBjdXJyZW50U3RhcnQsIGN1cnJlbnRFbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkLCBvbGRTdGFydCwgb2xkRW5kKSB7XG4gIC8vIFwiRGVsZXRpb25cIiBjb2x1bW5zXG4gIGxldCByb3dDb3VudCA9IG9sZEVuZCAtIG9sZFN0YXJ0ICsgMTtcbiAgbGV0IGNvbHVtbkNvdW50ID0gY3VycmVudEVuZCAtIGN1cnJlbnRTdGFydCArIDE7XG4gIGxldCBkaXN0YW5jZXMgPSBuZXcgQXJyYXkocm93Q291bnQpO1xuXG4gIC8vIFwiQWRkaXRpb25cIiByb3dzLiBJbml0aWFsaXplIG51bGwgY29sdW1uLlxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd0NvdW50OyBpKyspIHtcbiAgICBkaXN0YW5jZXNbaV0gPSBuZXcgQXJyYXkoY29sdW1uQ291bnQpO1xuICAgIGRpc3RhbmNlc1tpXVswXSA9IGk7XG4gIH1cblxuICAvLyBJbml0aWFsaXplIG51bGwgcm93XG4gIGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uQ291bnQ7IGorKylcbiAgICBkaXN0YW5jZXNbMF1bal0gPSBqO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgcm93Q291bnQ7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAxOyBqIDwgY29sdW1uQ291bnQ7IGorKykge1xuICAgICAgaWYgKGVxdWFscyhjdXJyZW50W2N1cnJlbnRTdGFydCArIGogLSAxXSwgb2xkW29sZFN0YXJ0ICsgaSAtIDFdKSlcbiAgICAgICAgZGlzdGFuY2VzW2ldW2pdID0gZGlzdGFuY2VzW2kgLSAxXVtqIC0gMV07XG4gICAgICBlbHNlIHtcbiAgICAgICAgbGV0IG5vcnRoID0gZGlzdGFuY2VzW2kgLSAxXVtqXSArIDE7XG4gICAgICAgIGxldCB3ZXN0ID0gZGlzdGFuY2VzW2ldW2ogLSAxXSArIDE7XG4gICAgICAgIGRpc3RhbmNlc1tpXVtqXSA9IG5vcnRoIDwgd2VzdCA/IG5vcnRoIDogd2VzdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGlzdGFuY2VzO1xufVxuXG4vLyBUaGlzIHN0YXJ0cyBhdCB0aGUgZmluYWwgd2VpZ2h0LCBhbmQgd2Fsa3MgXCJiYWNrd2FyZFwiIGJ5IGZpbmRpbmdcbi8vIHRoZSBtaW5pbXVtIHByZXZpb3VzIHdlaWdodCByZWN1cnNpdmVseSB1bnRpbCB0aGUgb3JpZ2luIG9mIHRoZSB3ZWlnaHRcbi8vIG1hdHJpeC5cbmZ1bmN0aW9uIHNwbGljZU9wZXJhdGlvbnNGcm9tRWRpdERpc3RhbmNlcyhkaXN0YW5jZXMpIHtcbiAgbGV0IGkgPSBkaXN0YW5jZXMubGVuZ3RoIC0gMTtcbiAgbGV0IGogPSBkaXN0YW5jZXNbMF0ubGVuZ3RoIC0gMTtcbiAgbGV0IGN1cnJlbnQgPSBkaXN0YW5jZXNbaV1bal07XG4gIGxldCBlZGl0cyA9IFtdO1xuICB3aGlsZSAoaSA+IDAgfHwgaiA+IDApIHtcbiAgICBpZiAoaSA9PSAwKSB7XG4gICAgICBlZGl0cy5wdXNoKEVESVRfQUREKTtcbiAgICAgIGotLTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoaiA9PSAwKSB7XG4gICAgICBlZGl0cy5wdXNoKEVESVRfREVMRVRFKTtcbiAgICAgIGktLTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBsZXQgbm9ydGhXZXN0ID0gZGlzdGFuY2VzW2kgLSAxXVtqIC0gMV07XG4gICAgbGV0IHdlc3QgPSBkaXN0YW5jZXNbaSAtIDFdW2pdO1xuICAgIGxldCBub3J0aCA9IGRpc3RhbmNlc1tpXVtqIC0gMV07XG5cbiAgICBsZXQgbWluO1xuICAgIGlmICh3ZXN0IDwgbm9ydGgpXG4gICAgICBtaW4gPSB3ZXN0IDwgbm9ydGhXZXN0ID8gd2VzdCA6IG5vcnRoV2VzdDtcbiAgICBlbHNlXG4gICAgICBtaW4gPSBub3J0aCA8IG5vcnRoV2VzdCA/IG5vcnRoIDogbm9ydGhXZXN0O1xuXG4gICAgaWYgKG1pbiA9PSBub3J0aFdlc3QpIHtcbiAgICAgIGlmIChub3J0aFdlc3QgPT0gY3VycmVudCkge1xuICAgICAgICBlZGl0cy5wdXNoKEVESVRfTEVBVkUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWRpdHMucHVzaChFRElUX1VQREFURSk7XG4gICAgICAgIGN1cnJlbnQgPSBub3J0aFdlc3Q7XG4gICAgICB9XG4gICAgICBpLS07XG4gICAgICBqLS07XG4gICAgfSBlbHNlIGlmIChtaW4gPT0gd2VzdCkge1xuICAgICAgZWRpdHMucHVzaChFRElUX0RFTEVURSk7XG4gICAgICBpLS07XG4gICAgICBjdXJyZW50ID0gd2VzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgZWRpdHMucHVzaChFRElUX0FERCk7XG4gICAgICBqLS07XG4gICAgICBjdXJyZW50ID0gbm9ydGg7XG4gICAgfVxuICB9XG5cbiAgZWRpdHMucmV2ZXJzZSgpO1xuICByZXR1cm4gZWRpdHM7XG59XG5cbi8qKlxuICogU3BsaWNlIFByb2plY3Rpb24gZnVuY3Rpb25zOlxuICpcbiAqIEEgc3BsaWNlIG1hcCBpcyBhIHJlcHJlc2VudGF0aW9uIG9mIGhvdyBhIHByZXZpb3VzIGFycmF5IG9mIGl0ZW1zXG4gKiB3YXMgdHJhbnNmb3JtZWQgaW50byBhIG5ldyBhcnJheSBvZiBpdGVtcy4gQ29uY2VwdHVhbGx5IGl0IGlzIGEgbGlzdCBvZlxuICogdHVwbGVzIG9mXG4gKlxuICogICA8aW5kZXgsIHJlbW92ZWQsIGFkZGVkQ291bnQ+XG4gKlxuICogd2hpY2ggYXJlIGtlcHQgaW4gYXNjZW5kaW5nIGluZGV4IG9yZGVyIG9mLiBUaGUgdHVwbGUgcmVwcmVzZW50cyB0aGF0IGF0XG4gKiB0aGUgfGluZGV4fCwgfHJlbW92ZWR8IHNlcXVlbmNlIG9mIGl0ZW1zIHdlcmUgcmVtb3ZlZCwgYW5kIGNvdW50aW5nIGZvcndhcmRcbiAqIGZyb20gfGluZGV4fCwgfGFkZGVkQ291bnR8IGl0ZW1zIHdlcmUgYWRkZWQuXG4gKi9cblxuLyoqXG4gKiBMYWNraW5nIGluZGl2aWR1YWwgc3BsaWNlIG11dGF0aW9uIGluZm9ybWF0aW9uLCB0aGUgbWluaW1hbCBzZXQgb2ZcbiAqIHNwbGljZXMgY2FuIGJlIHN5bnRoZXNpemVkIGdpdmVuIHRoZSBwcmV2aW91cyBzdGF0ZSBhbmQgZmluYWwgc3RhdGUgb2YgYW5cbiAqIGFycmF5LiBUaGUgYmFzaWMgYXBwcm9hY2ggaXMgdG8gY2FsY3VsYXRlIHRoZSBlZGl0IGRpc3RhbmNlIG1hdHJpeCBhbmRcbiAqIGNob29zZSB0aGUgc2hvcnRlc3QgcGF0aCB0aHJvdWdoIGl0LlxuICpcbiAqIENvbXBsZXhpdHk6IE8obCAqIHApXG4gKiAgIGw6IFRoZSBsZW5ndGggb2YgdGhlIGN1cnJlbnQgYXJyYXlcbiAqICAgcDogVGhlIGxlbmd0aCBvZiB0aGUgb2xkIGFycmF5XG4gKlxuICogQHBhcmFtIHshQXJyYXl9IGN1cnJlbnQgVGhlIGN1cnJlbnQgXCJjaGFuZ2VkXCIgYXJyYXkgZm9yIHdoaWNoIHRvXG4gKiBjYWxjdWxhdGUgc3BsaWNlcy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50U3RhcnQgU3RhcnRpbmcgaW5kZXggaW4gdGhlIGBjdXJyZW50YCBhcnJheSBmb3JcbiAqIHdoaWNoIHNwbGljZXMgYXJlIGNhbGN1bGF0ZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY3VycmVudEVuZCBFbmRpbmcgaW5kZXggaW4gdGhlIGBjdXJyZW50YCBhcnJheSBmb3JcbiAqIHdoaWNoIHNwbGljZXMgYXJlIGNhbGN1bGF0ZWQuXG4gKiBAcGFyYW0geyFBcnJheX0gb2xkIFRoZSBvcmlnaW5hbCBcInVuY2hhbmdlZFwiIGFycmF5IHRvIGNvbXBhcmUgYGN1cnJlbnRgXG4gKiBhZ2FpbnN0IHRvIGRldGVybWluZSBzcGxpY2VzLlxuICogQHBhcmFtIHtudW1iZXJ9IG9sZFN0YXJ0IFN0YXJ0aW5nIGluZGV4IGluIHRoZSBgb2xkYCBhcnJheSBmb3JcbiAqIHdoaWNoIHNwbGljZXMgYXJlIGNhbGN1bGF0ZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gb2xkRW5kIEVuZGluZyBpbmRleCBpbiB0aGUgYG9sZGAgYXJyYXkgZm9yXG4gKiB3aGljaCBzcGxpY2VzIGFyZSBjYWxjdWxhdGVkLlxuICogQHJldHVybiB7IUFycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHNwbGljZSByZWNvcmQgb2JqZWN0cy4gRWFjaCBvZiB0aGVzZVxuICogY29udGFpbnM6IGBpbmRleGAgdGhlIGxvY2F0aW9uIHdoZXJlIHRoZSBzcGxpY2Ugb2NjdXJyZWQ7IGByZW1vdmVkYFxuICogdGhlIGFycmF5IG9mIHJlbW92ZWQgaXRlbXMgZnJvbSB0aGlzIGxvY2F0aW9uOyBgYWRkZWRDb3VudGAgdGhlIG51bWJlclxuICogb2YgaXRlbXMgYWRkZWQgYXQgdGhpcyBsb2NhdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FsY1NwbGljZXMoY3VycmVudCwgY3VycmVudFN0YXJ0LCBjdXJyZW50RW5kLFxuICAgICAgICAgICAgICAgICAgICAgIG9sZCwgb2xkU3RhcnQsIG9sZEVuZCkge1xuICBsZXQgcHJlZml4Q291bnQgPSAwO1xuICBsZXQgc3VmZml4Q291bnQgPSAwO1xuICBsZXQgc3BsaWNlO1xuXG4gIGxldCBtaW5MZW5ndGggPSBNYXRoLm1pbihjdXJyZW50RW5kIC0gY3VycmVudFN0YXJ0LCBvbGRFbmQgLSBvbGRTdGFydCk7XG4gIGlmIChjdXJyZW50U3RhcnQgPT0gMCAmJiBvbGRTdGFydCA9PSAwKVxuICAgIHByZWZpeENvdW50ID0gc2hhcmVkUHJlZml4KGN1cnJlbnQsIG9sZCwgbWluTGVuZ3RoKTtcblxuICBpZiAoY3VycmVudEVuZCA9PSBjdXJyZW50Lmxlbmd0aCAmJiBvbGRFbmQgPT0gb2xkLmxlbmd0aClcbiAgICBzdWZmaXhDb3VudCA9IHNoYXJlZFN1ZmZpeChjdXJyZW50LCBvbGQsIG1pbkxlbmd0aCAtIHByZWZpeENvdW50KTtcblxuICBjdXJyZW50U3RhcnQgKz0gcHJlZml4Q291bnQ7XG4gIG9sZFN0YXJ0ICs9IHByZWZpeENvdW50O1xuICBjdXJyZW50RW5kIC09IHN1ZmZpeENvdW50O1xuICBvbGRFbmQgLT0gc3VmZml4Q291bnQ7XG5cbiAgaWYgKGN1cnJlbnRFbmQgLSBjdXJyZW50U3RhcnQgPT0gMCAmJiBvbGRFbmQgLSBvbGRTdGFydCA9PSAwKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAoY3VycmVudFN0YXJ0ID09IGN1cnJlbnRFbmQpIHtcbiAgICBzcGxpY2UgPSBuZXdTcGxpY2UoY3VycmVudFN0YXJ0LCBbXSwgMCk7XG4gICAgd2hpbGUgKG9sZFN0YXJ0IDwgb2xkRW5kKVxuICAgICAgc3BsaWNlLnJlbW92ZWQucHVzaChvbGRbb2xkU3RhcnQrK10pO1xuXG4gICAgcmV0dXJuIFsgc3BsaWNlIF07XG4gIH0gZWxzZSBpZiAob2xkU3RhcnQgPT0gb2xkRW5kKVxuICAgIHJldHVybiBbIG5ld1NwbGljZShjdXJyZW50U3RhcnQsIFtdLCBjdXJyZW50RW5kIC0gY3VycmVudFN0YXJ0KSBdO1xuXG4gIGxldCBvcHMgPSBzcGxpY2VPcGVyYXRpb25zRnJvbUVkaXREaXN0YW5jZXMoXG4gICAgICBjYWxjRWRpdERpc3RhbmNlcyhjdXJyZW50LCBjdXJyZW50U3RhcnQsIGN1cnJlbnRFbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZCwgb2xkU3RhcnQsIG9sZEVuZCkpO1xuXG4gIHNwbGljZSA9IHVuZGVmaW5lZDtcbiAgbGV0IHNwbGljZXMgPSBbXTtcbiAgbGV0IGluZGV4ID0gY3VycmVudFN0YXJ0O1xuICBsZXQgb2xkSW5kZXggPSBvbGRTdGFydDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHMubGVuZ3RoOyBpKyspIHtcbiAgICBzd2l0Y2gob3BzW2ldKSB7XG4gICAgICBjYXNlIEVESVRfTEVBVkU6XG4gICAgICAgIGlmIChzcGxpY2UpIHtcbiAgICAgICAgICBzcGxpY2VzLnB1c2goc3BsaWNlKTtcbiAgICAgICAgICBzcGxpY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleCsrO1xuICAgICAgICBvbGRJbmRleCsrO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRURJVF9VUERBVEU6XG4gICAgICAgIGlmICghc3BsaWNlKVxuICAgICAgICAgIHNwbGljZSA9IG5ld1NwbGljZShpbmRleCwgW10sIDApO1xuXG4gICAgICAgIHNwbGljZS5hZGRlZENvdW50Kys7XG4gICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgc3BsaWNlLnJlbW92ZWQucHVzaChvbGRbb2xkSW5kZXhdKTtcbiAgICAgICAgb2xkSW5kZXgrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEVESVRfQUREOlxuICAgICAgICBpZiAoIXNwbGljZSlcbiAgICAgICAgICBzcGxpY2UgPSBuZXdTcGxpY2UoaW5kZXgsIFtdLCAwKTtcblxuICAgICAgICBzcGxpY2UuYWRkZWRDb3VudCsrO1xuICAgICAgICBpbmRleCsrO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRURJVF9ERUxFVEU6XG4gICAgICAgIGlmICghc3BsaWNlKVxuICAgICAgICAgIHNwbGljZSA9IG5ld1NwbGljZShpbmRleCwgW10sIDApO1xuXG4gICAgICAgIHNwbGljZS5yZW1vdmVkLnB1c2gob2xkW29sZEluZGV4XSk7XG4gICAgICAgIG9sZEluZGV4Kys7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzcGxpY2UpIHtcbiAgICBzcGxpY2VzLnB1c2goc3BsaWNlKTtcbiAgfVxuICByZXR1cm4gc3BsaWNlcztcbn1cblxuZnVuY3Rpb24gc2hhcmVkUHJlZml4KGN1cnJlbnQsIG9sZCwgc2VhcmNoTGVuZ3RoKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VhcmNoTGVuZ3RoOyBpKyspXG4gICAgaWYgKCFlcXVhbHMoY3VycmVudFtpXSwgb2xkW2ldKSlcbiAgICAgIHJldHVybiBpO1xuICByZXR1cm4gc2VhcmNoTGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBzaGFyZWRTdWZmaXgoY3VycmVudCwgb2xkLCBzZWFyY2hMZW5ndGgpIHtcbiAgbGV0IGluZGV4MSA9IGN1cnJlbnQubGVuZ3RoO1xuICBsZXQgaW5kZXgyID0gb2xkLmxlbmd0aDtcbiAgbGV0IGNvdW50ID0gMDtcbiAgd2hpbGUgKGNvdW50IDwgc2VhcmNoTGVuZ3RoICYmIGVxdWFscyhjdXJyZW50Wy0taW5kZXgxXSwgb2xkWy0taW5kZXgyXSkpXG4gICAgY291bnQrKztcblxuICByZXR1cm4gY291bnQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBzcGxpY2UgcmVjb3JkcyBpbmRpY2F0aW5nIHRoZSBtaW5pbXVtIGVkaXRzIHJlcXVpcmVkXG4gKiB0byB0cmFuc2Zvcm0gdGhlIGBwcmV2aW91c2AgYXJyYXkgaW50byB0aGUgYGN1cnJlbnRgIGFycmF5LlxuICpcbiAqIFNwbGljZSByZWNvcmRzIGFyZSBvcmRlcmVkIGJ5IGluZGV4IGFuZCBjb250YWluIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICogLSBgaW5kZXhgOiBpbmRleCB3aGVyZSBlZGl0IHN0YXJ0ZWRcbiAqIC0gYHJlbW92ZWRgOiBhcnJheSBvZiByZW1vdmVkIGl0ZW1zIGZyb20gdGhpcyBpbmRleFxuICogLSBgYWRkZWRDb3VudGA6IG51bWJlciBvZiBpdGVtcyBhZGRlZCBhdCB0aGlzIGluZGV4XG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBiYXNlZCBvbiB0aGUgTGV2ZW5zaHRlaW4gXCJtaW5pbXVtIGVkaXQgZGlzdGFuY2VcIlxuICogYWxnb3JpdGhtLiBOb3RlIHRoYXQgdXBkYXRlcyBhcmUgdHJlYXRlZCBhcyByZW1vdmFsIGZvbGxvd2VkIGJ5IGFkZGl0aW9uLlxuICpcbiAqIFRoZSB3b3JzdC1jYXNlIHRpbWUgY29tcGxleGl0eSBvZiB0aGlzIGFsZ29yaXRobSBpcyBgTyhsICogcClgXG4gKiAgIGw6IFRoZSBsZW5ndGggb2YgdGhlIGN1cnJlbnQgYXJyYXlcbiAqICAgcDogVGhlIGxlbmd0aCBvZiB0aGUgcHJldmlvdXMgYXJyYXlcbiAqXG4gKiBIb3dldmVyLCB0aGUgd29yc3QtY2FzZSBjb21wbGV4aXR5IGlzIHJlZHVjZWQgYnkgYW4gYE8obilgIG9wdGltaXphdGlvblxuICogdG8gZGV0ZWN0IGFueSBzaGFyZWQgcHJlZml4ICYgc3VmZml4IGJldHdlZW4gdGhlIHR3byBhcnJheXMgYW5kIG9ubHlcbiAqIHBlcmZvcm0gdGhlIG1vcmUgZXhwZW5zaXZlIG1pbmltdW0gZWRpdCBkaXN0YW5jZSBjYWxjdWxhdGlvbiBvdmVyIHRoZVxuICogbm9uLXNoYXJlZCBwb3J0aW9ucyBvZiB0aGUgYXJyYXlzLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshQXJyYXl9IGN1cnJlbnQgVGhlIFwiY2hhbmdlZFwiIGFycmF5IGZvciB3aGljaCBzcGxpY2VzIHdpbGwgYmVcbiAqIGNhbGN1bGF0ZWQuXG4gKiBAcGFyYW0geyFBcnJheX0gcHJldmlvdXMgVGhlIFwidW5jaGFuZ2VkXCIgb3JpZ2luYWwgYXJyYXkgdG8gY29tcGFyZVxuICogYGN1cnJlbnRgIGFnYWluc3QgdG8gZGV0ZXJtaW5lIHRoZSBzcGxpY2VzLlxuICogQHJldHVybiB7IUFycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHNwbGljZSByZWNvcmQgb2JqZWN0cy4gRWFjaCBvZiB0aGVzZVxuICogY29udGFpbnM6IGBpbmRleGAgdGhlIGxvY2F0aW9uIHdoZXJlIHRoZSBzcGxpY2Ugb2NjdXJyZWQ7IGByZW1vdmVkYFxuICogdGhlIGFycmF5IG9mIHJlbW92ZWQgaXRlbXMgZnJvbSB0aGlzIGxvY2F0aW9uOyBgYWRkZWRDb3VudGAgdGhlIG51bWJlclxuICogb2YgaXRlbXMgYWRkZWQgYXQgdGhpcyBsb2NhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVNwbGljZXMoY3VycmVudCwgcHJldmlvdXMpIHtcbiAgcmV0dXJuIGNhbGNTcGxpY2VzKGN1cnJlbnQsIDAsIGN1cnJlbnQubGVuZ3RoLCBwcmV2aW91cywgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gZXF1YWxzKGN1cnJlbnRWYWx1ZSwgcHJldmlvdXNWYWx1ZSkge1xuICByZXR1cm4gY3VycmVudFZhbHVlID09PSBwcmV2aW91c1ZhbHVlO1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi9ib290LmpzJztcblxuaW1wb3J0IHsgY2FsY3VsYXRlU3BsaWNlcyB9IGZyb20gJy4vYXJyYXktc3BsaWNlLmpzJztcbmltcG9ydCB7IG1pY3JvVGFzayB9IGZyb20gJy4vYXN5bmMuanMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4vd3JhcC5qcyc7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGBub2RlYCBpcyBhIHNsb3QgZWxlbWVudFxuICogQHBhcmFtIHshTm9kZX0gbm9kZSBOb2RlIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIGBub2RlYCBpcyBhIHNsb3RcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGlzU2xvdChub2RlKSB7XG4gIHJldHVybiAobm9kZS5sb2NhbE5hbWUgPT09ICdzbG90Jyk7XG59XG5cbi8qKlxuICogQ2xhc3MgdGhhdCBsaXN0ZW5zIGZvciBjaGFuZ2VzIChhZGRpdGlvbnMgb3IgcmVtb3ZhbHMpIHRvXG4gKiBcImZsYXR0ZW5lZCBub2Rlc1wiIG9uIGEgZ2l2ZW4gYG5vZGVgLiBUaGUgbGlzdCBvZiBmbGF0dGVuZWQgbm9kZXMgY29uc2lzdHNcbiAqIG9mIGEgbm9kZSdzIGNoaWxkcmVuIGFuZCwgZm9yIGFueSBjaGlsZHJlbiB0aGF0IGFyZSBgPHNsb3Q+YCBlbGVtZW50cyxcbiAqIHRoZSBleHBhbmRlZCBmbGF0dGVuZWQgbGlzdCBvZiBgYXNzaWduZWROb2Rlc2AuXG4gKiBGb3IgZXhhbXBsZSwgaWYgdGhlIG9ic2VydmVkIG5vZGUgaGFzIGNoaWxkcmVuIGA8YT48L2E+PHNsb3Q+PC9zbG90PjxiPjwvYj5gXG4gKiBhbmQgdGhlIGA8c2xvdD5gIGhhcyBvbmUgYDxkaXY+YCBhc3NpZ25lZCB0byBpdCwgdGhlbiB0aGUgZmxhdHRlbmVkXG4gKiBub2RlcyBsaXN0IGlzIGA8YT48L2E+PGRpdj48L2Rpdj48Yj48L2I+YC4gSWYgdGhlIGA8c2xvdD5gIGhhcyBvdGhlclxuICogYDxzbG90PmAgZWxlbWVudHMgYXNzaWduZWQgdG8gaXQsIHRoZXNlIGFyZSBmbGF0dGVuZWQgYXMgd2VsbC5cbiAqXG4gKiBUaGUgcHJvdmlkZWQgYGNhbGxiYWNrYCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55IGNoYW5nZSB0byB0aGlzIGxpc3RcbiAqIG9mIGZsYXR0ZW5lZCBub2RlcyBvY2N1cnMsIHdoZXJlIGFuIGFkZGl0aW9uIG9yIHJlbW92YWwgb2YgYSBub2RlIGlzXG4gKiBjb25zaWRlcmVkIGEgY2hhbmdlLiBUaGUgYGNhbGxiYWNrYCBpcyBjYWxsZWQgd2l0aCBvbmUgYXJndW1lbnQsIGFuIG9iamVjdFxuICogY29udGFpbmluZyBhbiBhcnJheSBvZiBhbnkgYGFkZGVkTm9kZXNgIGFuZCBgcmVtb3ZlZE5vZGVzYC5cbiAqXG4gKiBOb3RlOiB0aGUgY2FsbGJhY2sgaXMgY2FsbGVkIGFzeW5jaHJvbm91cyB0byBhbnkgY2hhbmdlc1xuICogYXQgYSBtaWNyb3Rhc2sgY2hlY2twb2ludC4gVGhpcyBpcyBiZWNhdXNlIG9ic2VydmF0aW9uIGlzIHBlcmZvcm1lZCB1c2luZ1xuICogYE11dGF0aW9uT2JzZXJ2ZXJgIGFuZCB0aGUgYDxzbG90PmAgZWxlbWVudCdzIGBzbG90Y2hhbmdlYCBldmVudCB3aGljaFxuICogYXJlIGFzeW5jaHJvbm91cy5cbiAqXG4gKiBBbiBleGFtcGxlOlxuICogYGBganNcbiAqIGNsYXNzIFRlc3RTZWxmT2JzZXJ2ZSBleHRlbmRzIFBvbHltZXJFbGVtZW50IHtcbiAqICAgc3RhdGljIGdldCBpcygpIHsgcmV0dXJuICd0ZXN0LXNlbGYtb2JzZXJ2ZSc7fVxuICogICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAqICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICogICAgIHRoaXMuX29ic2VydmVyID0gbmV3IEZsYXR0ZW5lZE5vZGVzT2JzZXJ2ZXIodGhpcywgKGluZm8pID0+IHtcbiAqICAgICAgIHRoaXMuaW5mbyA9IGluZm87XG4gKiAgICAgfSk7XG4gKiAgIH1cbiAqICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gKiAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAqICAgICB0aGlzLl9vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gKiAgIH1cbiAqIH1cbiAqIGN1c3RvbUVsZW1lbnRzLmRlZmluZShUZXN0U2VsZk9ic2VydmUuaXMsIFRlc3RTZWxmT2JzZXJ2ZSk7XG4gKiBgYGBcbiAqXG4gKiBAc3VtbWFyeSBDbGFzcyB0aGF0IGxpc3RlbnMgZm9yIGNoYW5nZXMgKGFkZGl0aW9ucyBvciByZW1vdmFscykgdG9cbiAqIFwiZmxhdHRlbmVkIG5vZGVzXCIgb24gYSBnaXZlbiBgbm9kZWAuXG4gKiBAaW1wbGVtZW50cyB7UG9seW1lckRvbUFwaS5PYnNlcnZlSGFuZGxlfVxuICovXG5leHBvcnQgbGV0IEZsYXR0ZW5lZE5vZGVzT2JzZXJ2ZXIgPSBjbGFzcyB7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgZmxhdHRlbmVkIG5vZGVzIGZvciB0aGUgZ2l2ZW4gYG5vZGVgLlxuICAgKiBUaGlzIGxpc3QgY29uc2lzdHMgb2YgYSBub2RlJ3MgY2hpbGRyZW4gYW5kLCBmb3IgYW55IGNoaWxkcmVuXG4gICAqIHRoYXQgYXJlIGA8c2xvdD5gIGVsZW1lbnRzLCB0aGUgZXhwYW5kZWQgZmxhdHRlbmVkIGxpc3Qgb2YgYGFzc2lnbmVkTm9kZXNgLlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIG9ic2VydmVkIG5vZGUgaGFzIGNoaWxkcmVuIGA8YT48L2E+PHNsb3Q+PC9zbG90PjxiPjwvYj5gXG4gICAqIGFuZCB0aGUgYDxzbG90PmAgaGFzIG9uZSBgPGRpdj5gIGFzc2lnbmVkIHRvIGl0LCB0aGVuIHRoZSBmbGF0dGVuZWRcbiAgICogbm9kZXMgbGlzdCBpcyBgPGE+PC9hPjxkaXY+PC9kaXY+PGI+PC9iPmAuIElmIHRoZSBgPHNsb3Q+YCBoYXMgb3RoZXJcbiAgICogYDxzbG90PmAgZWxlbWVudHMgYXNzaWduZWQgdG8gaXQsIHRoZXNlIGFyZSBmbGF0dGVuZWQgYXMgd2VsbC5cbiAgICpcbiAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR8IUhUTUxTbG90RWxlbWVudH0gbm9kZSBUaGUgbm9kZSBmb3Igd2hpY2ggdG9cbiAgICogICAgICByZXR1cm4gdGhlIGxpc3Qgb2YgZmxhdHRlbmVkIG5vZGVzLlxuICAgKiBAcmV0dXJuIHshQXJyYXk8IU5vZGU+fSBUaGUgbGlzdCBvZiBmbGF0dGVuZWQgbm9kZXMgZm9yIHRoZSBnaXZlbiBgbm9kZWAuXG4gICAqIEBub2NvbGxhcHNlIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzI3NjNcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBzdGF0aWMgZ2V0RmxhdHRlbmVkTm9kZXMobm9kZSkge1xuICAgIGNvbnN0IHdyYXBwZWQgPSB3cmFwKG5vZGUpO1xuICAgIGlmIChpc1Nsb3Qobm9kZSkpIHtcbiAgICAgIG5vZGUgPSAvKiogQHR5cGUgeyFIVE1MU2xvdEVsZW1lbnR9ICovKG5vZGUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtYXNzaWduXG4gICAgICByZXR1cm4gd3JhcHBlZC5hc3NpZ25lZE5vZGVzKHtmbGF0dGVuOiB0cnVlfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKHdyYXBwZWQuY2hpbGROb2RlcykubWFwKChub2RlKSA9PiB7XG4gICAgICAgIGlmIChpc1Nsb3Qobm9kZSkpIHtcbiAgICAgICAgICBub2RlID0gLyoqIEB0eXBlIHshSFRNTFNsb3RFbGVtZW50fSAqLyhub2RlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWFzc2lnblxuICAgICAgICAgIHJldHVybiB3cmFwKG5vZGUpLmFzc2lnbmVkTm9kZXMoe2ZsYXR0ZW46IHRydWV9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gW25vZGVdO1xuICAgICAgICB9XG4gICAgICB9KS5yZWR1Y2UoKGEsIGIpID0+IGEuY29uY2F0KGIpLCBbXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSB0YXJnZXQgTm9kZSBvbiB3aGljaCB0byBsaXN0ZW4gZm9yIGNoYW5nZXMuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6IEVsZW1lbnQsIHsgdGFyZ2V0OiAhSFRNTEVsZW1lbnQsIGFkZGVkTm9kZXM6ICFBcnJheTwhRWxlbWVudD4sIHJlbW92ZWROb2RlczogIUFycmF5PCFFbGVtZW50PiB9KTp2b2lkfSBjYWxsYmFjayBGdW5jdGlvbiBjYWxsZWQgd2hlbiB0aGVyZSBhcmUgYWRkaXRpb25zXG4gICAqIG9yIHJlbW92YWxzIGZyb20gdGhlIHRhcmdldCdzIGxpc3Qgb2YgZmxhdHRlbmVkIG5vZGVzLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGNvbnN0cnVjdG9yKHRhcmdldCwgY2FsbGJhY2spIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TXV0YXRpb25PYnNlcnZlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3NoYWR5Q2hpbGRyZW5PYnNlcnZlciA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQHR5cGUge011dGF0aW9uT2JzZXJ2ZXJ9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9uYXRpdmVDaGlsZHJlbk9ic2VydmVyID0gbnVsbDtcbiAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7IUhUTUxFbGVtZW50fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLl9lZmZlY3RpdmVOb2RlcyA9IFtdO1xuICAgIHRoaXMuX29ic2VydmVyID0gbnVsbDtcbiAgICB0aGlzLl9zY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb24oKX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2JvdW5kU2NoZWR1bGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9zY2hlZHVsZSgpO1xuICAgIH07XG4gICAgdGhpcy5jb25uZWN0KCk7XG4gICAgdGhpcy5fc2NoZWR1bGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBY3RpdmF0ZXMgYW4gb2JzZXJ2ZXIuIFRoaXMgbWV0aG9kIGlzIGF1dG9tYXRpY2FsbHkgY2FsbGVkIHdoZW5cbiAgICogYSBgRmxhdHRlbmVkTm9kZXNPYnNlcnZlcmAgaXMgY3JlYXRlZC4gSXQgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHRvXG4gICAqIHJlLWFjdGl2YXRlIGFuIG9ic2VydmVyIHRoYXQgaGFzIGJlZW4gZGVhY3RpdmF0ZWQgdmlhIHRoZSBgZGlzY29ubmVjdGAgbWV0aG9kLlxuICAgKlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgY29ubmVjdCgpIHtcbiAgICBpZiAoaXNTbG90KHRoaXMuX3RhcmdldCkpIHtcbiAgICAgIHRoaXMuX2xpc3RlblNsb3RzKFt0aGlzLl90YXJnZXRdKTtcbiAgICB9IGVsc2UgaWYgKHdyYXAodGhpcy5fdGFyZ2V0KS5jaGlsZHJlbikge1xuICAgICAgdGhpcy5fbGlzdGVuU2xvdHMoXG4gICAgICAgICAgLyoqIEB0eXBlIHshTm9kZUxpc3Q8IU5vZGU+fSAqLyAod3JhcCh0aGlzLl90YXJnZXQpLmNoaWxkcmVuKSk7XG4gICAgICBpZiAod2luZG93LlNoYWR5RE9NKSB7XG4gICAgICAgIHRoaXMuX3NoYWR5Q2hpbGRyZW5PYnNlcnZlciA9XG4gICAgICAgICAgd2luZG93LlNoYWR5RE9NLm9ic2VydmVDaGlsZHJlbih0aGlzLl90YXJnZXQsIChtdXRhdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NNdXRhdGlvbnMobXV0YXRpb25zKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX25hdGl2ZUNoaWxkcmVuT2JzZXJ2ZXIgPVxuICAgICAgICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NNdXRhdGlvbnMobXV0YXRpb25zKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbmF0aXZlQ2hpbGRyZW5PYnNlcnZlci5vYnNlcnZlKHRoaXMuX3RhcmdldCwge2NoaWxkTGlzdDogdHJ1ZX0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9jb25uZWN0ZWQgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlYWN0aXZhdGVzIHRoZSBmbGF0dGVuZWQgbm9kZXMgb2JzZXJ2ZXIuIEFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2RcbiAgICogdGhlIG9ic2VydmVyIGNhbGxiYWNrIHdpbGwgbm90IGJlIGNhbGxlZCB3aGVuIGNoYW5nZXMgdG8gZmxhdHRlbmVkIG5vZGVzXG4gICAqIG9jY3VyLiBUaGUgYGNvbm5lY3RgIG1ldGhvZCBtYXkgYmUgc3Vic2VxdWVudGx5IGNhbGxlZCB0byByZWFjdGl2YXRlXG4gICAqIHRoZSBvYnNlcnZlci5cbiAgICpcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBkaXNjb25uZWN0KCkge1xuICAgIGlmIChpc1Nsb3QodGhpcy5fdGFyZ2V0KSkge1xuICAgICAgdGhpcy5fdW5saXN0ZW5TbG90cyhbdGhpcy5fdGFyZ2V0XSk7XG4gICAgfSBlbHNlIGlmICh3cmFwKHRoaXMuX3RhcmdldCkuY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMuX3VubGlzdGVuU2xvdHMoXG4gICAgICAgICAgLyoqIEB0eXBlIHshTm9kZUxpc3Q8IU5vZGU+fSAqLyAod3JhcCh0aGlzLl90YXJnZXQpLmNoaWxkcmVuKSk7XG4gICAgICBpZiAod2luZG93LlNoYWR5RE9NICYmIHRoaXMuX3NoYWR5Q2hpbGRyZW5PYnNlcnZlcikge1xuICAgICAgICB3aW5kb3cuU2hhZHlET00udW5vYnNlcnZlQ2hpbGRyZW4odGhpcy5fc2hhZHlDaGlsZHJlbk9ic2VydmVyKTtcbiAgICAgICAgdGhpcy5fc2hhZHlDaGlsZHJlbk9ic2VydmVyID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fbmF0aXZlQ2hpbGRyZW5PYnNlcnZlcikge1xuICAgICAgICB0aGlzLl9uYXRpdmVDaGlsZHJlbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgdGhpcy5fbmF0aXZlQ2hpbGRyZW5PYnNlcnZlciA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2NoZWR1bGUoKSB7XG4gICAgaWYgKCF0aGlzLl9zY2hlZHVsZWQpIHtcbiAgICAgIHRoaXMuX3NjaGVkdWxlZCA9IHRydWU7XG4gICAgICBtaWNyb1Rhc2sucnVuKCgpID0+IHRoaXMuZmx1c2goKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXk8TXV0YXRpb25SZWNvcmQ+fSBtdXRhdGlvbnMgTXV0YXRpb25zIHNpZ25hbGVkIGJ5IHRoZSBtdXRhdGlvbiBvYnNlcnZlclxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Byb2Nlc3NNdXRhdGlvbnMobXV0YXRpb25zKSB7XG4gICAgdGhpcy5fcHJvY2Vzc1Nsb3RNdXRhdGlvbnMobXV0YXRpb25zKTtcbiAgICB0aGlzLmZsdXNoKCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxNdXRhdGlvblJlY29yZD59IG11dGF0aW9ucyBNdXRhdGlvbnMgc2lnbmFsZWQgYnkgdGhlIG11dGF0aW9uIG9ic2VydmVyXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJvY2Vzc1Nsb3RNdXRhdGlvbnMobXV0YXRpb25zKSB7XG4gICAgaWYgKG11dGF0aW9ucykge1xuICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbXV0YXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBtdXRhdGlvbiA9IG11dGF0aW9uc1tpXTtcbiAgICAgICAgaWYgKG11dGF0aW9uLmFkZGVkTm9kZXMpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5TbG90cyhtdXRhdGlvbi5hZGRlZE5vZGVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXV0YXRpb24ucmVtb3ZlZE5vZGVzKSB7XG4gICAgICAgICAgdGhpcy5fdW5saXN0ZW5TbG90cyhtdXRhdGlvbi5yZW1vdmVkTm9kZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZsdXNoZXMgdGhlIG9ic2VydmVyIGNhdXNpbmcgYW55IHBlbmRpbmcgY2hhbmdlcyB0byBiZSBpbW1lZGlhdGVseVxuICAgKiBkZWxpdmVyZWQgdGhlIG9ic2VydmVyIGNhbGxiYWNrLiBCeSBkZWZhdWx0IHRoZXNlIGNoYW5nZXMgYXJlIGRlbGl2ZXJlZFxuICAgKiBhc3luY2hyb25vdXNseSBhdCB0aGUgbmV4dCBtaWNyb3Rhc2sgY2hlY2twb2ludC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGFueSBwZW5kaW5nIGNoYW5nZXMgY2F1c2VkIHRoZSBvYnNlcnZlclxuICAgKiBjYWxsYmFjayB0byBydW4uXG4gICAqL1xuICBmbHVzaCgpIHtcbiAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAod2luZG93LlNoYWR5RE9NKSB7XG4gICAgICBTaGFkeURPTS5mbHVzaCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbmF0aXZlQ2hpbGRyZW5PYnNlcnZlcikge1xuICAgICAgdGhpcy5fcHJvY2Vzc1Nsb3RNdXRhdGlvbnModGhpcy5fbmF0aXZlQ2hpbGRyZW5PYnNlcnZlci50YWtlUmVjb3JkcygpKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3NoYWR5Q2hpbGRyZW5PYnNlcnZlcikge1xuICAgICAgdGhpcy5fcHJvY2Vzc1Nsb3RNdXRhdGlvbnModGhpcy5fc2hhZHlDaGlsZHJlbk9ic2VydmVyLnRha2VSZWNvcmRzKCkpO1xuICAgIH1cbiAgICB0aGlzLl9zY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBsZXQgaW5mbyA9IHtcbiAgICAgIHRhcmdldDogdGhpcy5fdGFyZ2V0LFxuICAgICAgYWRkZWROb2RlczogW10sXG4gICAgICByZW1vdmVkTm9kZXM6IFtdXG4gICAgfTtcbiAgICBsZXQgbmV3Tm9kZXMgPSB0aGlzLmNvbnN0cnVjdG9yLmdldEZsYXR0ZW5lZE5vZGVzKHRoaXMuX3RhcmdldCk7XG4gICAgbGV0IHNwbGljZXMgPSBjYWxjdWxhdGVTcGxpY2VzKG5ld05vZGVzLFxuICAgICAgdGhpcy5fZWZmZWN0aXZlTm9kZXMpO1xuICAgIC8vIHByb2Nlc3MgcmVtb3ZhbHNcbiAgICBmb3IgKGxldCBpPTAsIHM7IChpPHNwbGljZXMubGVuZ3RoKSAmJiAocz1zcGxpY2VzW2ldKTsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqPTAsIG47IChqIDwgcy5yZW1vdmVkLmxlbmd0aCkgJiYgKG49cy5yZW1vdmVkW2pdKTsgaisrKSB7XG4gICAgICAgIGluZm8ucmVtb3ZlZE5vZGVzLnB1c2gobik7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHByb2Nlc3MgYWRkc1xuICAgIGZvciAobGV0IGk9MCwgczsgKGk8c3BsaWNlcy5sZW5ndGgpICYmIChzPXNwbGljZXNbaV0pOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGo9cy5pbmRleDsgaiA8IHMuaW5kZXggKyBzLmFkZGVkQ291bnQ7IGorKykge1xuICAgICAgICBpbmZvLmFkZGVkTm9kZXMucHVzaChuZXdOb2Rlc1tqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVwZGF0ZSBjYWNoZVxuICAgIHRoaXMuX2VmZmVjdGl2ZU5vZGVzID0gbmV3Tm9kZXM7XG4gICAgbGV0IGRpZEZsdXNoID0gZmFsc2U7XG4gICAgaWYgKGluZm8uYWRkZWROb2Rlcy5sZW5ndGggfHwgaW5mby5yZW1vdmVkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBkaWRGbHVzaCA9IHRydWU7XG4gICAgICB0aGlzLmNhbGxiYWNrLmNhbGwodGhpcy5fdGFyZ2V0LCBpbmZvKTtcbiAgICB9XG4gICAgcmV0dXJuIGRpZEZsdXNoO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUFycmF5PCFOb2RlPnwhTm9kZUxpc3Q8IU5vZGU+fSBub2RlTGlzdCBOb2RlcyB0aGF0IGNvdWxkIGNoYW5nZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2xpc3RlblNsb3RzKG5vZGVMaXN0KSB7XG4gICAgZm9yIChsZXQgaT0wOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBuID0gbm9kZUxpc3RbaV07XG4gICAgICBpZiAoaXNTbG90KG4pKSB7XG4gICAgICAgIG4uYWRkRXZlbnRMaXN0ZW5lcignc2xvdGNoYW5nZScsIHRoaXMuX2JvdW5kU2NoZWR1bGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFBcnJheTwhTm9kZT58IU5vZGVMaXN0PCFOb2RlPn0gbm9kZUxpc3QgTm9kZXMgdGhhdCBjb3VsZCBjaGFuZ2VcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91bmxpc3RlblNsb3RzKG5vZGVMaXN0KSB7XG4gICAgZm9yIChsZXQgaT0wOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBuID0gbm9kZUxpc3RbaV07XG4gICAgICBpZiAoaXNTbG90KG4pKSB7XG4gICAgICAgIG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2xvdGNoYW5nZScsIHRoaXMuX2JvdW5kU2NoZWR1bGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59OyIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5pbXBvcnQge2VucXVldWVEZWJvdW5jZXIsIGZsdXNoRGVib3VuY2Vyc30gZnJvbSAnLi4vdXRpbHMvZGVib3VuY2UuanMnO1xuZXhwb3J0IHtlbnF1ZXVlRGVib3VuY2VyfTtcblxuLyoqXG4gKiBGb3JjZXMgc2V2ZXJhbCBjbGFzc2VzIG9mIGFzeW5jaHJvbm91c2x5IHF1ZXVlZCB0YXNrcyB0byBmbHVzaDpcbiAqIC0gRGVib3VuY2VycyBhZGRlZCB2aWEgYGVucXVldWVEZWJvdW5jZXJgXG4gKiAtIFNoYWR5RE9NIGRpc3RyaWJ1dGlvblxuICpcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBmbHVzaCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgc2hhZHlET00sIGRlYm91bmNlcnM7XG4gIGRvIHtcbiAgICBzaGFkeURPTSA9IHdpbmRvdy5TaGFkeURPTSAmJiBTaGFkeURPTS5mbHVzaCgpO1xuICAgIGlmICh3aW5kb3cuU2hhZHlDU1MgJiYgd2luZG93LlNoYWR5Q1NTLlNjb3BpbmdTaGltKSB7XG4gICAgICB3aW5kb3cuU2hhZHlDU1MuU2NvcGluZ1NoaW0uZmx1c2goKTtcbiAgICB9XG4gICAgZGVib3VuY2VycyA9IGZsdXNoRGVib3VuY2VycygpO1xuICB9IHdoaWxlIChzaGFkeURPTSB8fCBkZWJvdW5jZXJzKTtcbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcbmltcG9ydCB7IHdyYXAgfSBmcm9tICcuLi91dGlscy93cmFwLmpzJztcbmltcG9ydCAnLi4vdXRpbHMvc2V0dGluZ3MuanMnO1xuaW1wb3J0IHsgRmxhdHRlbmVkTm9kZXNPYnNlcnZlciB9IGZyb20gJy4uL3V0aWxzL2ZsYXR0ZW5lZC1ub2Rlcy1vYnNlcnZlci5qcyc7XG5leHBvcnQgeyBmbHVzaCwgZW5xdWV1ZURlYm91bmNlciBhcyBhZGREZWJvdW5jZXIgfSBmcm9tICcuLi91dGlscy9mbHVzaC5qcyc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHsgRGVib3VuY2VyIH0gZnJvbSAnLi4vdXRpbHMvZGVib3VuY2UuanMnOyAgLy8gdXNlZCBpbiB0eXBlIGFubm90YXRpb25zXG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbmNvbnN0IHAgPSBFbGVtZW50LnByb3RvdHlwZTtcbi8qKlxuICogQGNvbnN0IHtmdW5jdGlvbih0aGlzOk5vZGUsIHN0cmluZyk6IGJvb2xlYW59XG4gKi9cbmNvbnN0IG5vcm1hbGl6ZWRNYXRjaGVzU2VsZWN0b3IgPSBwLm1hdGNoZXMgfHwgcC5tYXRjaGVzU2VsZWN0b3IgfHxcbiAgcC5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgcC5tc01hdGNoZXNTZWxlY3RvciB8fFxuICBwLm9NYXRjaGVzU2VsZWN0b3IgfHwgcC53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gYGVsZW1lbnQubWF0Y2hlc2Agc2hpbS5cbiAqXG4gKiBAZnVuY3Rpb24gbWF0Y2hlc1NlbGVjdG9yXG4gKiBAcGFyYW0geyFOb2RlfSBub2RlIE5vZGUgdG8gY2hlY2sgc2VsZWN0b3IgYWdhaW5zdFxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIFNlbGVjdG9yIHRvIG1hdGNoXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG5vZGUgbWF0Y2hlZCBzZWxlY3RvclxuICovXG5leHBvcnQgY29uc3QgbWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24obm9kZSwgc2VsZWN0b3IpIHtcbiAgcmV0dXJuIG5vcm1hbGl6ZWRNYXRjaGVzU2VsZWN0b3IuY2FsbChub2RlLCBzZWxlY3Rvcik7XG59O1xuXG4vKipcbiAqIE5vZGUgQVBJIHdyYXBwZXIgY2xhc3MgcmV0dXJuZWQgZnJvbSBgUG9seW1lci5kb20uKHRhcmdldClgIHdoZW5cbiAqIGB0YXJnZXRgIGlzIGEgYE5vZGVgLlxuICogQGltcGxlbWVudHMge1BvbHltZXJEb21BcGl9XG4gKiBAdW5yZXN0cmljdGVkXG4gKi9cbmNsYXNzIERvbUFwaU5hdGl2ZSB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgTm9kZSBmb3Igd2hpY2ggdG8gY3JlYXRlIGEgUG9seW1lci5kb20gaGVscGVyIG9iamVjdC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG5vZGUpIHtcbiAgICBpZiAod2luZG93WydTaGFkeURPTSddICYmIHdpbmRvd1snU2hhZHlET00nXVsnaW5Vc2UnXSkge1xuICAgICAgd2luZG93WydTaGFkeURPTSddWydwYXRjaCddKG5vZGUpO1xuICAgIH1cbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gaW5zdGFuY2Ugb2YgYEZsYXR0ZW5lZE5vZGVzT2JzZXJ2ZXJgIHRoYXRcbiAgICogbGlzdGVucyBmb3Igbm9kZSBjaGFuZ2VzIG9uIHRoaXMgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOkhUTUxFbGVtZW50LCB7IHRhcmdldDogIUhUTUxFbGVtZW50LCBhZGRlZE5vZGVzOiAhQXJyYXk8IUVsZW1lbnQ+LCByZW1vdmVkTm9kZXM6ICFBcnJheTwhRWxlbWVudD4gfSk6dm9pZH0gY2FsbGJhY2sgQ2FsbGVkIHdoZW4gZGlyZWN0IG9yIGRpc3RyaWJ1dGVkIGNoaWxkcmVuXG4gICAqICAgb2YgdGhpcyBlbGVtZW50IGNoYW5nZXNcbiAgICogQHJldHVybiB7IVBvbHltZXJEb21BcGkuT2JzZXJ2ZUhhbmRsZX0gT2JzZXJ2ZXIgaW5zdGFuY2VcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBvYnNlcnZlTm9kZXMoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gbmV3IEZsYXR0ZW5lZE5vZGVzT2JzZXJ2ZXIoXG4gICAgICAgIC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyh0aGlzLm5vZGUpLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogRGlzY29ubmVjdHMgYW4gb2JzZXJ2ZXIgcHJldmlvdXNseSBjcmVhdGVkIHZpYSBgb2JzZXJ2ZU5vZGVzYFxuICAgKlxuICAgKiBAcGFyYW0geyFQb2x5bWVyRG9tQXBpLk9ic2VydmVIYW5kbGV9IG9ic2VydmVySGFuZGxlIE9ic2VydmVyIGluc3RhbmNlXG4gICAqICAgdG8gZGlzY29ubmVjdC5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB1bm9ic2VydmVOb2RlcyhvYnNlcnZlckhhbmRsZSkge1xuICAgIG9ic2VydmVySGFuZGxlLmRpc2Nvbm5lY3QoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm92aWRlZCBhcyBhIGJhY2t3YXJkcy1jb21wYXRpYmxlIEFQSSBvbmx5LiAgVGhpcyBtZXRob2QgZG9lcyBub3RoaW5nLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgbm90aWZ5T2JzZXJ2ZXIoKSB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGVkIG5vZGUgaXMgY29udGFpbmVkIHdpdGggdGhpcyBlbGVtZW50J3NcbiAgICogbGlnaHQtRE9NIGNoaWxkcmVuIG9yIHNoYWRvdyByb290LCBpbmNsdWRpbmcgYW55IG5lc3RlZCBzaGFkb3cgcm9vdHNcbiAgICogb2YgY2hpbGRyZW4gdGhlcmVpbi5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlIE5vZGUgdG8gdGVzdFxuICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIGBub2RlYCBpcyBjb250YWluZWQgd2l0aGluXG4gICAqICAgdGhpcyBlbGVtZW50J3MgbGlnaHQgb3Igc2hhZG93IERPTS5cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBkZWVwQ29udGFpbnMobm9kZSkge1xuICAgIGlmICh3cmFwKHRoaXMubm9kZSkuY29udGFpbnMobm9kZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBsZXQgbiA9IG5vZGU7XG4gICAgbGV0IGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICAvLyB3YWxrIGZyb20gbm9kZSB0byBgdGhpc2Agb3IgYGRvY3VtZW50YFxuICAgIHdoaWxlIChuICYmIG4gIT09IGRvYyAmJiBuICE9PSB0aGlzLm5vZGUpIHtcbiAgICAgIC8vIHVzZSBsb2dpY2FsIHBhcmVudG5vZGUsIG9yIG5hdGl2ZSBTaGFkb3dSb290IGhvc3RcbiAgICAgIG4gPSB3cmFwKG4pLnBhcmVudE5vZGUgfHwgd3JhcChuKS5ob3N0O1xuICAgIH1cbiAgICByZXR1cm4gbiA9PT0gdGhpcy5ub2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHJvb3Qgbm9kZSBvZiB0aGlzIG5vZGUuICBFcXVpdmFsZW50IHRvIGBnZXRSb290Tm9kZSgpYC5cbiAgICpcbiAgICogQHJldHVybiB7IU5vZGV9IFRvcCBtb3N0IGVsZW1lbnQgaW4gdGhlIGRvbSB0cmVlIGluIHdoaWNoIHRoZSBub2RlXG4gICAqIGV4aXN0cy4gSWYgdGhlIG5vZGUgaXMgY29ubmVjdGVkIHRvIGEgZG9jdW1lbnQgdGhpcyBpcyBlaXRoZXIgYVxuICAgKiBzaGFkb3dSb290IG9yIHRoZSBkb2N1bWVudDsgb3RoZXJ3aXNlLCBpdCBtYXkgYmUgdGhlIG5vZGVcbiAgICogaXRzZWxmIG9yIGEgbm9kZSBvciBkb2N1bWVudCBmcmFnbWVudCBjb250YWluaW5nIGl0LlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE93bmVyUm9vdCgpIHtcbiAgICByZXR1cm4gd3JhcCh0aGlzLm5vZGUpLmdldFJvb3ROb2RlKCk7XG4gIH1cblxuICAvKipcbiAgICogRm9yIHNsb3QgZWxlbWVudHMsIHJldHVybnMgdGhlIG5vZGVzIGFzc2lnbmVkIHRvIHRoZSBzbG90OyBvdGhlcndpc2VcbiAgICogYW4gZW1wdHkgYXJyYXkuIEl0IGlzIGVxdWl2YWxlbnQgdG8gYDxzbG90Pi5hZGRpZ25lZE5vZGVzKHtmbGF0dGVuOnRydWV9KWAuXG4gICAqXG4gICAqIEByZXR1cm4geyFBcnJheTwhTm9kZT59IEFycmF5IG9mIGFzc2lnbmVkIG5vZGVzXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0RGlzdHJpYnV0ZWROb2RlcygpIHtcbiAgICByZXR1cm4gKHRoaXMubm9kZS5sb2NhbE5hbWUgPT09ICdzbG90JykgP1xuICAgICAgd3JhcCh0aGlzLm5vZGUpLmFzc2lnbmVkTm9kZXMoe2ZsYXR0ZW46IHRydWV9KSA6XG4gICAgICBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGFsbCBzbG90cyB0aGlzIGVsZW1lbnQgd2FzIGRpc3RyaWJ1dGVkIHRvLlxuICAgKlxuICAgKiBAcmV0dXJuIHshQXJyYXk8IUhUTUxTbG90RWxlbWVudD59IERlc2NyaXB0aW9uXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0RGVzdGluYXRpb25JbnNlcnRpb25Qb2ludHMoKSB7XG4gICAgbGV0IGlwJCA9IFtdO1xuICAgIGxldCBuID0gd3JhcCh0aGlzLm5vZGUpLmFzc2lnbmVkU2xvdDtcbiAgICB3aGlsZSAobikge1xuICAgICAgaXAkLnB1c2gobik7XG4gICAgICBuID0gd3JhcChuKS5hc3NpZ25lZFNsb3Q7XG4gICAgfVxuICAgIHJldHVybiBpcCQ7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgYGltcG9ydE5vZGVgIG9uIHRoZSBgb3duZXJEb2N1bWVudGAgZm9yIHRoaXMgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHshTm9kZX0gbm9kZSBOb2RlIHRvIGltcG9ydFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRlZXAgVHJ1ZSBpZiB0aGUgbm9kZSBzaG91bGQgYmUgY2xvbmVkIGRlZXBseSBkdXJpbmdcbiAgICogICBpbXBvcnRcbiAgICogQHJldHVybiB7Tm9kZX0gQ2xvbmUgb2YgZ2l2ZW4gbm9kZSBpbXBvcnRlZCB0byB0aGlzIG93bmVyIGRvY3VtZW50XG4gICAqL1xuICBpbXBvcnROb2RlKG5vZGUsIGRlZXApIHtcbiAgICBsZXQgZG9jID0gdGhpcy5ub2RlIGluc3RhbmNlb2YgRG9jdW1lbnQgPyB0aGlzLm5vZGUgOlxuICAgICAgdGhpcy5ub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgcmV0dXJuIHdyYXAoZG9jKS5pbXBvcnROb2RlKG5vZGUsIGRlZXApO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFBcnJheTwhTm9kZT59IFJldHVybnMgYSBmbGF0dGVuZWQgbGlzdCBvZiBhbGwgY2hpbGQgbm9kZXMgYW5kXG4gICAqIG5vZGVzIGFzc2lnbmVkIHRvIGNoaWxkIHNsb3RzLlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldEVmZmVjdGl2ZUNoaWxkTm9kZXMoKSB7XG4gICAgcmV0dXJuIEZsYXR0ZW5lZE5vZGVzT2JzZXJ2ZXIuZ2V0RmxhdHRlbmVkTm9kZXMoXG4gICAgICAgIC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyAodGhpcy5ub2RlKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGZpbHRlcmVkIGxpc3Qgb2YgZmxhdHRlbmVkIGNoaWxkIGVsZW1lbnRzIGZvciB0aGlzIGVsZW1lbnQgYmFzZWRcbiAgICogb24gdGhlIGdpdmVuIHNlbGVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgU2VsZWN0b3IgdG8gZmlsdGVyIG5vZGVzIGFnYWluc3RcbiAgICogQHJldHVybiB7IUFycmF5PCFIVE1MRWxlbWVudD59IExpc3Qgb2YgZmxhdHRlbmVkIGNoaWxkIGVsZW1lbnRzXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcXVlcnlEaXN0cmlidXRlZEVsZW1lbnRzKHNlbGVjdG9yKSB7XG4gICAgbGV0IGMkID0gdGhpcy5nZXRFZmZlY3RpdmVDaGlsZE5vZGVzKCk7XG4gICAgbGV0IGxpc3QgPSBbXTtcbiAgICBmb3IgKGxldCBpPTAsIGw9YyQubGVuZ3RoLCBjOyAoaTxsKSAmJiAoYz1jJFtpXSk7IGkrKykge1xuICAgICAgaWYgKChjLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkgJiZcbiAgICAgICAgICBtYXRjaGVzU2VsZWN0b3IoYywgc2VsZWN0b3IpKSB7XG4gICAgICAgIGxpc3QucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cblxuICAvKipcbiAgICogRm9yIHNoYWRvdyByb290cywgcmV0dXJucyB0aGUgY3VycmVudGx5IGZvY3VzZWQgZWxlbWVudCB3aXRoaW4gdGhpc1xuICAgKiBzaGFkb3cgcm9vdC5cbiAgICpcbiAgICogcmV0dXJuIHtOb2RlfHVuZGVmaW5lZH0gQ3VycmVudGx5IGZvY3VzZWQgZWxlbWVudFxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldCBhY3RpdmVFbGVtZW50KCkge1xuICAgIGxldCBub2RlID0gdGhpcy5ub2RlO1xuICAgIHJldHVybiBub2RlLl9hY3RpdmVFbGVtZW50ICE9PSB1bmRlZmluZWQgPyBub2RlLl9hY3RpdmVFbGVtZW50IDogbm9kZS5hY3RpdmVFbGVtZW50O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcndhcmRNZXRob2RzKHByb3RvLCBtZXRob2RzKSB7XG4gIGZvciAobGV0IGk9MDsgaSA8IG1ldGhvZHMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgbWV0aG9kID0gbWV0aG9kc1tpXTtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYyAqL1xuICAgIHByb3RvW21ldGhvZF0gPSAvKiogQHRoaXMge0RvbUFwaU5hdGl2ZX0gKi8gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlW21ldGhvZF0uYXBwbHkodGhpcy5ub2RlLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcndhcmRSZWFkT25seVByb3BlcnRpZXMocHJvdG8sIHByb3BlcnRpZXMpIHtcbiAgZm9yIChsZXQgaT0wOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBuYW1lID0gcHJvcGVydGllc1tpXTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIG5hbWUsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGRvbUFwaSA9IC8qKiBAdHlwZSB7RG9tQXBpTmF0aXZlfSAqLyh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGRvbUFwaS5ub2RlW25hbWVdO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcndhcmRQcm9wZXJ0aWVzKHByb3RvLCBwcm9wZXJ0aWVzKSB7XG4gIGZvciAobGV0IGk9MDsgaSA8IHByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgbmFtZSA9IHByb3BlcnRpZXNbaV07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBuYW1lLCB7XG4gICAgICAvKipcbiAgICAgICAqIEB0aGlzIHtEb21BcGlOYXRpdmV9XG4gICAgICAgKiBAcmV0dXJuIHsqfSAuXG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVbbmFtZV07XG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiBAdGhpcyB7RG9tQXBpTmF0aXZlfVxuICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSAuXG4gICAgICAgKi9cbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5ub2RlW25hbWVdID0gdmFsdWU7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbn1cblxuXG4vKipcbiAqIEV2ZW50IEFQSSB3cmFwcGVyIGNsYXNzIHJldHVybmVkIGZyb20gYGRvbS4odGFyZ2V0KWAgd2hlblxuICogYHRhcmdldGAgaXMgYW4gYEV2ZW50YC5cbiAqL1xuZXhwb3J0IGNsYXNzIEV2ZW50QXBpIHtcbiAgY29uc3RydWN0b3IoZXZlbnQpIHtcbiAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3Qgbm9kZSBvbiB0aGUgYGNvbXBvc2VkUGF0aGAgb2YgdGhpcyBldmVudC5cbiAgICpcbiAgICogQHJldHVybiB7IUV2ZW50VGFyZ2V0fSBUaGUgbm9kZSB0aGlzIGV2ZW50IHdhcyBkaXNwYXRjaGVkIHRvXG4gICAqL1xuICBnZXQgcm9vdFRhcmdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXRoWzBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxvY2FsIChyZS10YXJnZXRlZCkgdGFyZ2V0IGZvciB0aGlzIGV2ZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHshRXZlbnRUYXJnZXR9IFRoZSBsb2NhbCAocmUtdGFyZ2V0ZWQpIHRhcmdldCBmb3IgdGhpcyBldmVudC5cbiAgICovXG4gIGdldCBsb2NhbFRhcmdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudC50YXJnZXQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYGNvbXBvc2VkUGF0aGAgZm9yIHRoaXMgZXZlbnQuXG4gICAqIEByZXR1cm4geyFBcnJheTwhRXZlbnRUYXJnZXQ+fSBUaGUgbm9kZXMgdGhpcyBldmVudCBwcm9wYWdhdGVkIHRocm91Z2hcbiAgICovXG4gIGdldCBwYXRoKCkge1xuICAgIHJldHVybiB0aGlzLmV2ZW50LmNvbXBvc2VkUGF0aCgpO1xuICB9XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBkZWVwXG4gKiBAcmV0dXJuIHshTm9kZX1cbiAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5jbG9uZU5vZGU7XG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshTm9kZX0gbm9kZVxuICogQHJldHVybiB7IU5vZGV9XG4gKi9cbkRvbUFwaU5hdGl2ZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQ7XG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshTm9kZX0gbmV3Q2hpbGRcbiAqIEBwYXJhbSB7Tm9kZX0gcmVmQ2hpbGRcbiAqIEByZXR1cm4geyFOb2RlfVxuICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLmluc2VydEJlZm9yZTtcbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gKiBAcmV0dXJuIHshTm9kZX1cbiAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5yZW1vdmVDaGlsZDtcbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFOb2RlfSBvbGRDaGlsZFxuICogQHBhcmFtIHshTm9kZX0gbmV3Q2hpbGRcbiAqIEByZXR1cm4geyFOb2RlfVxuICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLnJlcGxhY2VDaGlsZDtcbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLnNldEF0dHJpYnV0ZTtcbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGU7XG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHs/RWxlbWVudH1cbiAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yO1xuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7IU5vZGVMaXN0PCFFbGVtZW50Pn1cbiAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsO1xuXG4vKiogQHR5cGUgez9Ob2RlfSAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5wYXJlbnROb2RlO1xuLyoqIEB0eXBlIHs/Tm9kZX0gKi9cbkRvbUFwaU5hdGl2ZS5wcm90b3R5cGUuZmlyc3RDaGlsZDtcbi8qKiBAdHlwZSB7P05vZGV9ICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLmxhc3RDaGlsZDtcbi8qKiBAdHlwZSB7P05vZGV9ICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLm5leHRTaWJsaW5nO1xuLyoqIEB0eXBlIHs/Tm9kZX0gKi9cbkRvbUFwaU5hdGl2ZS5wcm90b3R5cGUucHJldmlvdXNTaWJsaW5nO1xuLyoqIEB0eXBlIHs/SFRNTEVsZW1lbnR9ICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLmZpcnN0RWxlbWVudENoaWxkO1xuLyoqIEB0eXBlIHs/SFRNTEVsZW1lbnR9ICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLmxhc3RFbGVtZW50Q2hpbGQ7XG4vKiogQHR5cGUgez9IVE1MRWxlbWVudH0gKi9cbkRvbUFwaU5hdGl2ZS5wcm90b3R5cGUubmV4dEVsZW1lbnRTaWJsaW5nO1xuLyoqIEB0eXBlIHs/SFRNTEVsZW1lbnR9ICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4vKiogQHR5cGUgeyFBcnJheTwhTm9kZT59ICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLmNoaWxkTm9kZXM7XG4vKiogQHR5cGUgeyFBcnJheTwhSFRNTEVsZW1lbnQ+fSAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5jaGlsZHJlbjtcbi8qKiBAdHlwZSB7P0RPTVRva2VuTGlzdH0gKi9cbkRvbUFwaU5hdGl2ZS5wcm90b3R5cGUuY2xhc3NMaXN0O1xuXG4vKiogQHR5cGUge3N0cmluZ30gKi9cbkRvbUFwaU5hdGl2ZS5wcm90b3R5cGUudGV4dENvbnRlbnQ7XG4vKiogQHR5cGUge3N0cmluZ30gKi9cbkRvbUFwaU5hdGl2ZS5wcm90b3R5cGUuaW5uZXJIVE1MO1xuXG5sZXQgRG9tQXBpSW1wbCA9IERvbUFwaU5hdGl2ZTtcblxuaWYgKHdpbmRvd1snU2hhZHlET00nXSAmJiB3aW5kb3dbJ1NoYWR5RE9NJ11bJ2luVXNlJ10gJiYgd2luZG93WydTaGFkeURPTSddWydub1BhdGNoJ10gJiYgd2luZG93WydTaGFkeURPTSddWydXcmFwcGVyJ10pIHtcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQGV4dGVuZHMge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgY2xhc3MgV3JhcHBlciBleHRlbmRzIHdpbmRvd1snU2hhZHlET00nXVsnV3JhcHBlciddIHt9XG5cbiAgLy8gY29weSBiZXNwb2tlIEFQSSBvbnRvIHdyYXBwZXJcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoRG9tQXBpTmF0aXZlLnByb3RvdHlwZSkuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgIGlmIChwcm9wICE9ICdhY3RpdmVFbGVtZW50Jykge1xuICAgICAgV3JhcHBlci5wcm90b3R5cGVbcHJvcF0gPSBEb21BcGlOYXRpdmUucHJvdG90eXBlW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gTm90ZSwgYGNsYXNzTGlzdGAgaXMgaGVyZSBvbmx5IGZvciBsZWdhY3kgY29tcGF0aWJpbGl0eSBzaW5jZSBpdCBkb2VzIG5vdFxuICAvLyB0cmlnZ2VyIGRpc3RyaWJ1dGlvbiBpbiB2MSBTaGFkb3cgRE9NLlxuICBmb3J3YXJkUmVhZE9ubHlQcm9wZXJ0aWVzKFdyYXBwZXIucHJvdG90eXBlLCBbXG4gICAgJ2NsYXNzTGlzdCdcbiAgXSk7XG5cbiAgRG9tQXBpSW1wbCA9IFdyYXBwZXI7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRXZlbnRBcGkucHJvdG90eXBlLCB7XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBcImxvd2VzdFwiIG5vZGUgaW4gdGhlIHNhbWUgcm9vdCBhcyB0aGUgZXZlbnQncyBjdXJyZW50VGFyZ2V0LlxuICAgIC8vIFdoZW4gaW4gYG5vUGF0Y2hgIG1vZGUsIHRoaXMgbXVzdCBiZSBjYWxjdWxhdGVkIGJ5IHdhbGtpbmcgdGhlIGV2ZW50J3NcbiAgICAvLyBwYXRoLlxuICAgIGxvY2FsVGFyZ2V0OiB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRSb290ID0gY3VycmVudCAmJiBkb20oY3VycmVudCkuZ2V0T3duZXJSb290KCk7XG4gICAgICAgIGNvbnN0IHAkID0gdGhpcy5wYXRoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHAkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgZSA9IHAkW2ldO1xuICAgICAgICAgIGlmIChkb20oZSkuZ2V0T3duZXJSb290KCkgPT09IGN1cnJlbnRSb290KSB7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9LFxuXG4gICAgcGF0aDoge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gd2luZG93WydTaGFkeURPTSddWydjb21wb3NlZFBhdGgnXSh0aGlzLmV2ZW50KTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuXG59IGVsc2Uge1xuXG4gIC8vIE1ldGhvZHMgdGhhdCBjYW4gcHJvdm9rZSBkaXN0cmlidXRpb24gb3IgbXVzdCByZXR1cm4gdGhlIGxvZ2ljYWwsIG5vdFxuICAvLyBjb21wb3NlZCB0cmVlLlxuICBmb3J3YXJkTWV0aG9kcyhEb21BcGlOYXRpdmUucHJvdG90eXBlLCBbXG4gICAgJ2Nsb25lTm9kZScsICdhcHBlbmRDaGlsZCcsICdpbnNlcnRCZWZvcmUnLCAncmVtb3ZlQ2hpbGQnLFxuICAgICdyZXBsYWNlQ2hpbGQnLCAnc2V0QXR0cmlidXRlJywgJ3JlbW92ZUF0dHJpYnV0ZScsXG4gICAgJ3F1ZXJ5U2VsZWN0b3InLCAncXVlcnlTZWxlY3RvckFsbCdcbiAgXSk7XG5cbiAgLy8gUHJvcGVydGllcyB0aGF0IHNob3VsZCByZXR1cm4gdGhlIGxvZ2ljYWwsIG5vdCBjb21wb3NlZCB0cmVlLiBOb3RlLCBgY2xhc3NMaXN0YFxuICAvLyBpcyBoZXJlIG9ubHkgZm9yIGxlZ2FjeSBjb21wYXRpYmlsaXR5IHNpbmNlIGl0IGRvZXMgbm90IHRyaWdnZXIgZGlzdHJpYnV0aW9uXG4gIC8vIGluIHYxIFNoYWRvdyBET00uXG4gIGZvcndhcmRSZWFkT25seVByb3BlcnRpZXMoRG9tQXBpTmF0aXZlLnByb3RvdHlwZSwgW1xuICAgICdwYXJlbnROb2RlJywgJ2ZpcnN0Q2hpbGQnLCAnbGFzdENoaWxkJyxcbiAgICAnbmV4dFNpYmxpbmcnLCAncHJldmlvdXNTaWJsaW5nJywgJ2ZpcnN0RWxlbWVudENoaWxkJyxcbiAgICAnbGFzdEVsZW1lbnRDaGlsZCcsICduZXh0RWxlbWVudFNpYmxpbmcnLCAncHJldmlvdXNFbGVtZW50U2libGluZycsXG4gICAgJ2NoaWxkTm9kZXMnLCAnY2hpbGRyZW4nLCAnY2xhc3NMaXN0J1xuICBdKTtcblxuICBmb3J3YXJkUHJvcGVydGllcyhEb21BcGlOYXRpdmUucHJvdG90eXBlLCBbXG4gICAgJ3RleHRDb250ZW50JywgJ2lubmVySFRNTCcsICdjbGFzc05hbWUnXG4gIF0pO1xufVxuXG5leHBvcnQgY29uc3QgRG9tQXBpID0gRG9tQXBpSW1wbDtcblxuLyoqXG4gKiBMZWdhY3kgRE9NIGFuZCBFdmVudCBtYW5pcHVsYXRpb24gQVBJIHdyYXBwZXIgZmFjdG9yeSB1c2VkIHRvIGFic3RyYWN0XG4gKiBkaWZmZXJlbmNlcyBiZXR3ZWVuIG5hdGl2ZSBTaGFkb3cgRE9NIGFuZCBcIlNoYWR5IERPTVwiIHdoZW4gcG9seWZpbGxpbmcgb25cbiAqIG9sZGVyIGJyb3dzZXJzLlxuICpcbiAqIE5vdGUgdGhhdCBpbiBQb2x5bWVyIDIueCB1c2Ugb2YgYFBvbHltZXIuZG9tYCBpcyBubyBsb25nZXIgcmVxdWlyZWQgYW5kXG4gKiBpbiB0aGUgbWFqb3JpdHkgb2YgY2FzZXMgc2ltcGx5IGZhY2FkZXMgZGlyZWN0bHkgdG8gdGhlIHN0YW5kYXJkIG5hdGl2ZVxuICogQVBJLlxuICpcbiAqIEBzdW1tYXJ5IExlZ2FjeSBET00gYW5kIEV2ZW50IG1hbmlwdWxhdGlvbiBBUEkgd3JhcHBlciBmYWN0b3J5IHVzZWQgdG9cbiAqIGFic3RyYWN0IGRpZmZlcmVuY2VzIGJldHdlZW4gbmF0aXZlIFNoYWRvdyBET00gYW5kIFwiU2hhZHkgRE9NLlwiXG4gKiBAcGFyYW0geyhOb2RlfEV2ZW50fERvbUFwaU5hdGl2ZXxFdmVudEFwaSk9fSBvYmogTm9kZSBvciBldmVudCB0byBvcGVyYXRlIG9uXG4gKiBAcmV0dXJuIHshRG9tQXBpTmF0aXZlfCFFdmVudEFwaX0gV3JhcHBlciBwcm92aWRpbmcgZWl0aGVyIG5vZGUgQVBJIG9yIGV2ZW50IEFQSVxuICovXG5leHBvcnQgY29uc3QgZG9tID0gZnVuY3Rpb24ob2JqKSB7XG4gIG9iaiA9IG9iaiB8fCBkb2N1bWVudDtcbiAgaWYgKG9iaiBpbnN0YW5jZW9mIERvbUFwaUltcGwpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshRG9tQXBpfSAqLyhvYmopO1xuICB9XG4gIGlmIChvYmogaW5zdGFuY2VvZiBFdmVudEFwaSkge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFFdmVudEFwaX0gKi8ob2JqKTtcbiAgfVxuICBsZXQgaGVscGVyID0gb2JqWydfX2RvbUFwaSddO1xuICBpZiAoIWhlbHBlcikge1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBFdmVudCkge1xuICAgICAgaGVscGVyID0gbmV3IEV2ZW50QXBpKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlbHBlciA9IG5ldyBEb21BcGlJbXBsKC8qKiBAdHlwZSB7Tm9kZX0gKi8ob2JqKSk7XG4gICAgfVxuICAgIG9ialsnX19kb21BcGknXSA9IGhlbHBlcjtcbiAgfVxuICByZXR1cm4gaGVscGVyO1xufTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxOSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbmltcG9ydCAnLi9ib290LmpzJztcbmltcG9ydCB7d3JhcH0gZnJvbSAnLi93cmFwLmpzJztcblxuY29uc3QgU2hhZHlET00gPSB3aW5kb3cuU2hhZHlET007XG5jb25zdCBTaGFkeUNTUyA9IHdpbmRvdy5TaGFkeUNTUztcblxuLyoqXG4gKiBSZXR1cm4gdHJ1ZSBpZiBub2RlIHNjb3BlIGlzIGNvcnJlY3QuXG4gKlxuICogQHBhcmFtIHshRWxlbWVudH0gbm9kZSBOb2RlIHRvIGNoZWNrIHNjb3BlXG4gKiBAcGFyYW0geyFOb2RlfSBzY29wZSBTY29wZSByZWZlcmVuY2VcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgbm9kZSBpcyBpbiBzY29wZVxuICovXG5mdW5jdGlvbiBzYW1lU2NvcGUobm9kZSwgc2NvcGUpIHtcbiAgcmV0dXJuIHdyYXAobm9kZSkuZ2V0Um9vdE5vZGUoKSA9PT0gc2NvcGU7XG59XG5cbi8qKlxuICogRW5zdXJlIHRoYXQgZWxlbWVudHMgaW4gYSBTaGFkb3dET00gY29udGFpbmVyIGFyZSBzY29wZWQgY29ycmVjdGx5LlxuICogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IG5lZWRlZCB3aGVuIFNoYWR5RE9NIGlzIHVzZWQgYW5kIHVucGF0Y2hlZCBET00gQVBJcyBhcmUgdXNlZCBpbiB0aGlyZCBwYXJ0eSBjb2RlLlxuICogVGhpcyBjYW4gaGFwcGVuIGluIG5vUGF0Y2ggbW9kZSBvciB3aGVuIHNwZWNpYWxpemVkIEFQSXMgbGlrZSByYW5nZXMgb3IgdGFibGVzIGFyZSB1c2VkIHRvIG11dGF0ZSBET00uXG4gKlxuICogQHBhcmFtICB7IUVsZW1lbnR9IGNvbnRhaW5lciBDb250YWluZXIgZWxlbWVudCB0byBzY29wZVxuICogQHBhcmFtICB7Ym9vbGVhbj19IHNob3VsZE9ic2VydmUgaWYgdHJ1ZSwgc3RhcnQgYSBtdXRhdGlvbiBvYnNlcnZlciBmb3IgYWRkZWQgbm9kZXMgdG8gdGhlIGNvbnRhaW5lclxuICogQHJldHVybiB7P011dGF0aW9uT2JzZXJ2ZXJ9IFJldHVybnMgYSBuZXcgTXV0YXRpb25PYnNlcnZlciBvbiBgY29udGFpbmVyYCBpZiBgc2hvdWxkT2JzZXJ2ZWAgaXMgdHJ1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjb3BlU3VidHJlZShjb250YWluZXIsIHNob3VsZE9ic2VydmUgPSBmYWxzZSkge1xuICAvLyBJZiB1c2luZyBuYXRpdmUgU2hhZG93RE9NLCBhYm9ydFxuICBpZiAoIVNoYWR5RE9NIHx8ICFTaGFkeUNTUykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8vIFNoYWR5Q1NTIGhhbmRsZXMgRE9NIG11dGF0aW9ucyB3aGVuIFNoYWR5RE9NIGRvZXMgbm90IGhhbmRsZSBzY29waW5nIGl0c2VsZlxuICBpZiAoIVNoYWR5RE9NWydoYW5kbGVzRHluYW1pY1Njb3BpbmcnXSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IFNjb3BpbmdTaGltID0gU2hhZHlDU1NbJ1Njb3BpbmdTaGltJ107XG4gIC8vIGlmIFNjb3BpbmdTaGltIGlzIG5vdCBhdmFpbGFibGUsIGFib3J0XG4gIGlmICghU2NvcGluZ1NoaW0pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBjYXB0dXJlIGNvcnJlY3Qgc2NvcGUgZm9yIGNvbnRhaW5lclxuICBjb25zdCBjb250YWluZXJTY29wZSA9IFNjb3BpbmdTaGltWydzY29wZUZvck5vZGUnXShjb250YWluZXIpO1xuICBjb25zdCByb290ID0gd3JhcChjb250YWluZXIpLmdldFJvb3ROb2RlKCk7XG5cbiAgY29uc3Qgc2NvcGlmeSA9IChub2RlKSA9PiB7XG4gICAgaWYgKCFzYW1lU2NvcGUobm9kZSwgcm9vdCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gTk9URTogbmF0aXZlIHFTQSBkb2VzIG5vdCBob25vciBzY29wZWQgRE9NLCBidXQgaXQgaXMgZmFzdGVyLCBhbmQgdGhlIHNhbWUgYmVoYXZpb3IgYXMgUG9seW1lciB2MVxuICAgIGNvbnN0IGVsZW1lbnRzID0gQXJyYXkuZnJvbShTaGFkeURPTVsnbmF0aXZlTWV0aG9kcyddWydxdWVyeVNlbGVjdG9yQWxsJ10uY2FsbChub2RlLCAnKicpKTtcbiAgICBlbGVtZW50cy5wdXNoKG5vZGUpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGVsID0gZWxlbWVudHNbaV07XG4gICAgICBpZiAoIXNhbWVTY29wZShlbCwgcm9vdCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBjdXJyZW50U2NvcGUgPSBTY29waW5nU2hpbVsnY3VycmVudFNjb3BlRm9yTm9kZSddKGVsKTtcbiAgICAgIGlmIChjdXJyZW50U2NvcGUgIT09IGNvbnRhaW5lclNjb3BlKSB7XG4gICAgICAgIGlmIChjdXJyZW50U2NvcGUgIT09ICcnKSB7XG4gICAgICAgICAgU2NvcGluZ1NoaW1bJ3Vuc2NvcGVOb2RlJ10oZWwsIGN1cnJlbnRTY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgU2NvcGluZ1NoaW1bJ3Njb3BlTm9kZSddKGVsLCBjb250YWluZXJTY29wZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIHNjb3BlIGV2ZXJ5dGhpbmcgaW4gY29udGFpbmVyXG4gIHNjb3BpZnkoY29udGFpbmVyKTtcblxuICBpZiAoc2hvdWxkT2JzZXJ2ZSkge1xuICAgIGNvbnN0IG1vID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG14bnMpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbXhucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBteG4gPSBteG5zW2ldO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG14bi5hZGRlZE5vZGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY29uc3QgYWRkZWROb2RlID0gbXhuLmFkZGVkTm9kZXNbal07XG4gICAgICAgICAgaWYgKGFkZGVkTm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgIHNjb3BpZnkoYWRkZWROb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBtby5vYnNlcnZlKGNvbnRhaW5lciwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZX0pO1xuICAgIHJldHVybiBtbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufSIsIi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQHN1cHByZXNzIHtjaGVja1Byb3RvdHlwYWxUeXBlc31cbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IEVsZW1lbnRNaXhpbiB9IGZyb20gJy4vZWxlbWVudC1taXhpbi5qcyc7XG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4uL3V0aWxzL3dyYXAuanMnO1xuXG5jb25zdCBESVNBQkxFRF9BVFRSID0gJ2Rpc2FibGUtdXBncmFkZSc7XG5cbmV4cG9ydCBjb25zdCBmaW5kT2JzZXJ2ZWRBdHRyaWJ1dGVzR2V0dGVyID0gKGN0b3IpID0+IHtcbiAgd2hpbGUgKGN0b3IpIHtcbiAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjdG9yLCAnb2JzZXJ2ZWRBdHRyaWJ1dGVzJyk7XG4gICAgaWYgKGRlc2MpIHtcbiAgICAgIHJldHVybiBkZXNjLmdldDtcbiAgICB9XG4gICAgY3RvciA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihjdG9yLnByb3RvdHlwZSkuY29uc3RydWN0b3I7XG4gIH1cbiAgcmV0dXJuICgpID0+IFtdO1xufTtcblxuLyoqXG4gKiBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgYWxsb3dzIHRoZSBlbGVtZW50IHRvIGJvb3QgdXAgaW4gYSBub24tZW5hYmxlZFxuICogc3RhdGUgd2hlbiB0aGUgYGRpc2FibGUtdXBncmFkZWAgYXR0cmlidXRlIGlzIHByZXNlbnQuIFRoaXMgbWl4aW4gaXNcbiAqIGRlc2lnbmVkIHRvIGJlIHVzZWQgd2l0aCBlbGVtZW50IGNsYXNzZXMgbGlrZSBQb2x5bWVyRWxlbWVudCB0aGF0IHBlcmZvcm1cbiAqIGluaXRpYWwgc3RhcnR1cCB3b3JrIHdoZW4gdGhleSBhcmUgZmlyc3QgY29ubmVjdGVkLiBXaGVuIHRoZVxuICogYGRpc2FibGUtdXBncmFkZWAgYXR0cmlidXRlIGlzIHJlbW92ZWQsIGlmIHRoZSBlbGVtZW50IGlzIGNvbm5lY3RlZCwgaXRcbiAqIGJvb3RzIHVwIGFuZCBcImVuYWJsZXNcIiBhcyBpdCBvdGhlcndpc2Ugd291bGQ7IGlmIGl0IGlzIG5vdCBjb25uZWN0ZWQsIHRoZVxuICogZWxlbWVudCBib290cyB1cCB3aGVuIGl0IGlzIG5leHQgY29ubmVjdGVkLlxuICpcbiAqIFVzaW5nIGBkaXNhYmxlLXVwZ3JhZGVgIHdpdGggUG9seW1lckVsZW1lbnQgcHJldmVudHMgYW55IGRhdGEgcHJvcGFnYXRpb25cbiAqIHRvIHRoZSBlbGVtZW50LCBhbnkgZWxlbWVudCBET00gZnJvbSBzdGFtcGluZywgb3IgYW55IHdvcmsgZG9uZSBpblxuICogY29ubmVjdGVkL2Rpc2Nvbm5jdGVkQ2FsbGJhY2sgZnJvbSBvY2N1cmluZywgYnV0IGl0IGRvZXMgbm90IHByZXZlbnQgd29ya1xuICogZG9uZSBpbiB0aGUgZWxlbWVudCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBOb3RlLCB0aGlzIG1peGluIG11c3QgYmUgYXBwbGllZCBvbiB0b3Agb2YgYW55IGVsZW1lbnQgY2xhc3MgdGhhdFxuICogaXRzZWxmIGltcGxlbWVudHMgYSBgY29ubmVjdGVkQ2FsbGJhY2tgIHNvIHRoYXQgaXQgY2FuIGNvbnRyb2wgdGhlIHdvcmtcbiAqIGRvbmUgaW4gYGNvbm5lY3RlZENhbGxiYWNrYC4gRm9yIGV4YW1wbGUsXG4gKlxuICogICAgIE15Q2xhc3MgPSBEaXNhYmxlVXBncmFkZU1peGluKGNsYXNzIGV4dGVuZHMgQmFzZUNsYXNzIHsuLi59KTtcbiAqXG4gKiBAbWl4aW5GdW5jdGlvblxuICogQHBvbHltZXJcbiAqIEBhcHBsaWVzTWl4aW4gRWxlbWVudE1peGluXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3MgQ2xhc3MgdG8gYXBwbHkgbWl4aW4gdG8uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3Mgd2l0aCBtaXhpbiBhcHBsaWVkLlxuICovXG5leHBvcnQgY29uc3QgRGlzYWJsZVVwZ3JhZGVNaXhpbiA9IGRlZHVwaW5nTWl4aW4oKGJhc2UpID0+IHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9FbGVtZW50TWl4aW59XG4gICAqIEBleHRlbmRzIHtIVE1MRWxlbWVudH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnN0IHN1cGVyQ2xhc3MgPSBFbGVtZW50TWl4aW4oYmFzZSk7XG5cbiAgLy8gV29yayBhcm91bmQgZm9yIGNsb3N1cmUgYnVnICMxMjY5MzQ0NTguIFVzaW5nIGBzdXBlcmAgaW4gYSBwcm9wZXJ0eVxuICAvLyBnZXR0ZXIgZG9lcyBub3Qgd29yayBzbyBpbnN0ZWFkIHdlIHNlYXJjaCB0aGUgQmFzZSBwcm90b3R5cGUgZm9yIGFuXG4gIC8vIGltcGxlbWVudGF0aW9uIG9mIG9ic2VydmVkQXR0cmlidXRlcyBzbyB0aGF0IHdlIGNhbiBvdmVycmlkZSBhbmQgY2FsbFxuICAvLyB0aGUgYHN1cGVyYCBnZXR0ZXIuIE5vdGUsIHRoaXMgaXMgZG9uZSBvbmUgdGltZSBldmVyIGJlY2F1c2Ugd2UgYXNzdW1lXG4gIC8vIHRoYXQgYEJhc2VgIGlzIGFsd2F5cyBjb21lcyBmcm9tIGBQb2x5bWVyLkxlZ2FjeUVsZW1lbnRNaXhuYC5cbiAgbGV0IG9ic2VydmVkQXR0cmlidXRlc0dldHRlciA9IGZpbmRPYnNlcnZlZEF0dHJpYnV0ZXNHZXR0ZXIoc3VwZXJDbGFzcyk7XG5cbiAgLyoqXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtaXhpbkNsYXNzXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0Rpc2FibGVVcGdyYWRlTWl4aW59XG4gICAqL1xuICBjbGFzcyBEaXNhYmxlVXBncmFkZUNsYXNzIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfSAqL1xuICAgICAgdGhpcy5fX2lzVXBncmFkZURpc2FibGVkO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgICAgcmV0dXJuIG9ic2VydmVkQXR0cmlidXRlc0dldHRlci5jYWxsKHRoaXMpLmNvbmNhdChESVNBQkxFRF9BVFRSKTtcbiAgICB9XG5cbiAgICAvLyBQcmV2ZW50IGVsZW1lbnQgZnJvbSBpbml0aWFsaXppbmcgcHJvcGVydGllcyB3aGVuIGl0J3MgdXBncmFkZSBkaXNhYmxlZC5cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgX2luaXRpYWxpemVQcm9wZXJ0aWVzKCkge1xuICAgICAgaWYgKHRoaXMuaGFzQXR0cmlidXRlKERJU0FCTEVEX0FUVFIpKSB7XG4gICAgICAgIHRoaXMuX19pc1VwZ3JhZGVEaXNhYmxlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdXBlci5faW5pdGlhbGl6ZVByb3BlcnRpZXMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQcmV2ZW50IGVsZW1lbnQgZnJvbSBlbmFibGluZyBwcm9wZXJ0aWVzIHdoZW4gaXQncyB1cGdyYWRlIGRpc2FibGVkLlxuICAgIC8vIE5vcm1hbGx5IG92ZXJyaWRpbmcgY29ubmVjdGVkQ2FsbGJhY2sgd291bGQgYmUgZW5vdWdoLCBidXQgZG9tLSogZWxlbWVudHNcbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgX2VuYWJsZVByb3BlcnRpZXMoKSB7XG4gICAgICBpZiAoIXRoaXMuX19pc1VwZ3JhZGVEaXNhYmxlZCkge1xuICAgICAgICBzdXBlci5fZW5hYmxlUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHRoZSBlbGVtZW50IHN0YXJ0cyB1cGdyYWRlLWRpc2FibGVkIGFuZCBhIHByb3BlcnR5IGlzIHNldCBmb3JcbiAgICAvLyB3aGljaCBhbiBhY2Nlc3NvciBleGlzdHMsIHRoZSBkZWZhdWx0IHNob3VsZCBub3QgYmUgYXBwbGllZC5cbiAgICAvLyBUaGlzIGFkZGl0aW9uYWwgY2hlY2sgaXMgbmVlZGVkIGJlY2F1c2UgZGVmYXVsdHMgYXJlIGFwcGxpZWQgdmlhXG4gICAgLy8gYF9pbml0aWFsaXplUHJvcGVydGllc2Agd2hpY2ggaXMgY2FsbGVkIGFmdGVyIGluaXRpYWwgcHJvcGVydGllc1xuICAgIC8vIGhhdmUgYmVlbiBzZXQgd2hlbiB0aGUgZWxlbWVudCBzdGFydHMgdXBncmFkZS1kaXNhYmxlZC5cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgX2NhbkFwcGx5UHJvcGVydHlEZWZhdWx0KHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gc3VwZXIuX2NhbkFwcGx5UHJvcGVydHlEZWZhdWx0KHByb3BlcnR5KSAmJlxuICAgICAgICAhKHRoaXMuX19pc1VwZ3JhZGVEaXNhYmxlZCAmJiB0aGlzLl9pc1Byb3BlcnR5UGVuZGluZyhwcm9wZXJ0eSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEF0dHJpYnV0ZSBuYW1lLlxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gb2xkIFRoZSBwcmV2aW91cyB2YWx1ZSBmb3IgdGhlIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IHZhbHVlIFRoZSBuZXcgdmFsdWUgZm9yIHRoZSBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSBuYW1lc3BhY2UgVGhlIFhNTCBuYW1lc3BhY2UgZm9yIHRoZSBhdHRyaWJ1dGUuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkLCB2YWx1ZSwgbmFtZXNwYWNlKSB7XG4gICAgICBpZiAobmFtZSA9PSBESVNBQkxFRF9BVFRSKSB7XG4gICAgICAgIC8vIFdoZW4gZGlzYWJsZS11cGdyYWRlIGlzIHJlbW92ZWQsIGludGlhbGl6ZSBwcm9wZXJ0aWVzIGFuZFxuICAgICAgICAvLyBwcm92b2tlIGNvbm5lY3RlZENhbGxiYWNrIGlmIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgY29ubmVjdGVkLlxuICAgICAgICBpZiAodGhpcy5fX2lzVXBncmFkZURpc2FibGVkICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICBzdXBlci5faW5pdGlhbGl6ZVByb3BlcnRpZXMoKTtcbiAgICAgICAgICB0aGlzLl9faXNVcGdyYWRlRGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICBpZiAod3JhcCh0aGlzKS5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1cGVyLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICAgICAgICAgIG5hbWUsIG9sZCwgdmFsdWUsIC8qKiBAdHlwZSB7bnVsbHxzdHJpbmd9ICovIChuYW1lc3BhY2UpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQcmV2ZW50IGVsZW1lbnQgZnJvbSBjb25uZWN0aW5nIHdoZW4gaXQncyB1cGdyYWRlIGRpc2FibGVkLlxuICAgIC8vIFRoaXMgcHJldmVudHMgdXNlciBjb2RlIGluIGBhdHRhY2hlZGAgZnJvbSBiZWluZyBjYWxsZWQuXG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgaWYgKCF0aGlzLl9faXNVcGdyYWRlRGlzYWJsZWQpIHtcbiAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQcmV2ZW50IGVsZW1lbnQgZnJvbSBkaXNjb25uZWN0aW5nIHdoZW4gaXQncyB1cGdyYWRlIGRpc2FibGVkLlxuICAgIC8vIFRoaXMgYXZvaWRzIGFsbG93aW5nIHVzZXIgY29kZSBgZGV0YWNoZWRgIGZyb20gYmVpbmcgY2FsbGVkIHdpdGhvdXQgYVxuICAgIC8vIHBhaXJlZCBjYWxsIHRvIGBhdHRhY2hlZGAuXG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgaWYgKCF0aGlzLl9faXNVcGdyYWRlRGlzYWJsZWQpIHtcbiAgICAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiBEaXNhYmxlVXBncmFkZUNsYXNzO1xufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICdAd2ViY29tcG9uZW50cy9zaGFkeWNzcy9lbnRyeXBvaW50cy9hcHBseS1zaGltLmpzJztcbmltcG9ydCB7IEVsZW1lbnRNaXhpbiwgYnVpbHRDU1MgfSBmcm9tICcuLi9taXhpbnMvZWxlbWVudC1taXhpbi5qcyc7XG5pbXBvcnQgeyBHZXN0dXJlRXZlbnRMaXN0ZW5lcnMgfSBmcm9tICcuLi9taXhpbnMvZ2VzdHVyZS1ldmVudC1saXN0ZW5lcnMuanMnO1xuaW1wb3J0IHsgRGlyTWl4aW4gfSBmcm9tICcuLi9taXhpbnMvZGlyLW1peGluLmpzJztcbmltcG9ydCB7IGRlZHVwaW5nTWl4aW4gfSBmcm9tICcuLi91dGlscy9taXhpbi5qcyc7XG5pbXBvcnQgJy4uL3V0aWxzL3JlbmRlci1zdGF0dXMuanMnO1xuaW1wb3J0ICcuLi91dGlscy91bnJlc29sdmVkLmpzJztcbmltcG9ydCB7IGRvbSwgbWF0Y2hlc1NlbGVjdG9yIH0gZnJvbSAnLi9wb2x5bWVyLmRvbS5qcyc7XG5pbXBvcnQgeyBzZXRUb3VjaEFjdGlvbiB9IGZyb20gJy4uL3V0aWxzL2dlc3R1cmVzLmpzJztcbmltcG9ydCB7IERlYm91bmNlciB9IGZyb20gJy4uL3V0aWxzL2RlYm91bmNlLmpzJztcbmltcG9ydCB7IHRpbWVPdXQsIG1pY3JvVGFzayB9IGZyb20gJy4uL3V0aWxzL2FzeW5jLmpzJztcbmltcG9ydCB7IGdldCB9IGZyb20gJy4uL3V0aWxzL3BhdGguanMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4uL3V0aWxzL3dyYXAuanMnO1xuaW1wb3J0IHsgc2NvcGVTdWJ0cmVlIH0gZnJvbSAnLi4vdXRpbHMvc2NvcGUtc3VidHJlZS5qcyc7XG5pbXBvcnQgeyBsZWdhY3lPcHRpbWl6YXRpb25zLCBsZWdhY3lOb09ic2VydmVkQXR0cmlidXRlcyB9IGZyb20gJy4uL3V0aWxzL3NldHRpbmdzLmpzJztcbmltcG9ydCB7IGZpbmRPYnNlcnZlZEF0dHJpYnV0ZXNHZXR0ZXIgfSBmcm9tICcuLi9taXhpbnMvZGlzYWJsZS11cGdyYWRlLW1peGluLmpzJztcbmltcG9ydCB7IHJlZ2lzdGVyIH0gZnJvbSAnLi4vdXRpbHMvdGVsZW1ldHJ5LmpzJztcblxuY29uc3QgRElTQUJMRURfQVRUUiA9ICdkaXNhYmxlLXVwZ3JhZGUnO1xuXG5sZXQgc3R5bGVJbnRlcmZhY2UgPSB3aW5kb3cuU2hhZHlDU1M7XG5cbi8qKlxuICogRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIFBvbHltZXIncyBcImxlZ2FjeVwiIEFQSSBpbnRlbmRlZCB0byBiZVxuICogYmFja3dhcmQtY29tcGF0aWJsZSB0byB0aGUgZ3JlYXRlc3QgZXh0ZW50IHBvc3NpYmxlIHdpdGggdGhlIEFQSVxuICogZm91bmQgb24gdGhlIFBvbHltZXIgMS54IGBQb2x5bWVyLkJhc2VgIHByb3RvdHlwZSBhcHBsaWVkIHRvIGFsbCBlbGVtZW50c1xuICogZGVmaW5lZCB1c2luZyB0aGUgYFBvbHltZXIoey4uLn0pYCBmdW5jdGlvbi5cbiAqXG4gKiBAbWl4aW5GdW5jdGlvblxuICogQHBvbHltZXJcbiAqIEBhcHBsaWVzTWl4aW4gRWxlbWVudE1peGluXG4gKiBAYXBwbGllc01peGluIEdlc3R1cmVFdmVudExpc3RlbmVyc1xuICogQGFwcGxpZXNNaXhpbiBEaXJNaXhpblxuICogQHByb3BlcnR5IGlzQXR0YWNoZWQge2Jvb2xlYW59IFNldCB0byBgdHJ1ZWAgaW4gdGhpcyBlbGVtZW50J3NcbiAqICAgYGNvbm5lY3RlZENhbGxiYWNrYCBhbmQgYGZhbHNlYCBpbiBgZGlzY29ubmVjdGVkQ2FsbGJhY2tgXG4gKiBAc3VtbWFyeSBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgUG9seW1lcidzIFwibGVnYWN5XCIgQVBJXG4gKi9cbmV4cG9ydCBjb25zdCBMZWdhY3lFbGVtZW50TWl4aW4gPSBkZWR1cGluZ01peGluKChiYXNlKSA9PiB7XG5cbiAgLy8gVE9ETyhrc2NoYWFmKTogTm90ZSwgdGhlIGBAaW1wbGVtZW50cyB7UG9seW1lcl9EaXJNaXhpbn1gIGlzIHJlcXVpcmVkIGhlcmVcbiAgLy8gKHJhdGhlciB0aGFuIG9uIGxlZ2FjeUVsZW1lbnRCYXNlKSBmb3IgdW5rbm93biByZWFzb25zLlxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0VsZW1lbnRNaXhpbn1cbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfR2VzdHVyZUV2ZW50TGlzdGVuZXJzfVxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9EaXJNaXhpbn1cbiAgICogQGV4dGVuZHMge0hUTUxFbGVtZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29uc3QgR2VzdHVyZXNFbGVtZW50ID0gR2VzdHVyZUV2ZW50TGlzdGVuZXJzKEVsZW1lbnRNaXhpbihiYXNlKSk7XG5cbiAgLy8gTm90ZSwgdGhlIERpck1peGluIGRvZXMgbm90aGluZyBpZiBjc3MgaXMgYnVpbHQgc28gYXZvaWQgaW5jbHVkaW5nIGl0XG4gIC8vIGluIHRoYXQgY2FzZS5cblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIHtHZXN0dXJlc0VsZW1lbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdCBsZWdhY3lFbGVtZW50QmFzZSA9IGJ1aWx0Q1NTID8gR2VzdHVyZXNFbGVtZW50IDpcbiAgICBEaXJNaXhpbihHZXN0dXJlc0VsZW1lbnQpO1xuXG4gIGNvbnN0IG9ic2VydmVkQXR0cmlidXRlc0dldHRlciA9IGZpbmRPYnNlcnZlZEF0dHJpYnV0ZXNHZXR0ZXIobGVnYWN5RWxlbWVudEJhc2UpO1xuXG4gIC8qKlxuICAgKiBNYXAgb2Ygc2ltcGxlIG5hbWVzIHRvIHRvdWNoIGFjdGlvbiBuYW1lc1xuICAgKiBAZGljdFxuICAgKi9cbiAgY29uc3QgRElSRUNUSU9OX01BUCA9IHtcbiAgICAneCc6ICdwYW4teCcsXG4gICAgJ3knOiAncGFuLXknLFxuICAgICdub25lJzogJ25vbmUnLFxuICAgICdhbGwnOiAnYXV0bydcbiAgfTtcblxuICAvKipcbiAgICogQHBvbHltZXJcbiAgICogQG1peGluQ2xhc3NcbiAgICogQGV4dGVuZHMge2xlZ2FjeUVsZW1lbnRCYXNlfVxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9MZWdhY3lFbGVtZW50TWl4aW59XG4gICAqIEB1bnJlc3RyaWN0ZWRcbiAgICovXG4gIGNsYXNzIExlZ2FjeUVsZW1lbnQgZXh0ZW5kcyBsZWdhY3lFbGVtZW50QmFzZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICB0aGlzLmlzQXR0YWNoZWQ7XG4gICAgICAvKiogQHR5cGUgez9XZWFrTWFwPCFFbGVtZW50LCAhT2JqZWN0PHN0cmluZywgIUZ1bmN0aW9uPj59ICovXG4gICAgICB0aGlzLl9fYm91bmRMaXN0ZW5lcnM7XG4gICAgICAvKiogQHR5cGUgez9PYmplY3Q8c3RyaW5nLCA/RnVuY3Rpb24+fSAqL1xuICAgICAgdGhpcy5fZGVib3VuY2VycztcbiAgICAgIC8vIE5PVEU6IElubGluZWQgZm9yIHBlcmYgZnJvbSB2ZXJzaW9uIG9mIERpc2FibGVVcGdyYWRlTWl4aW4uXG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfSAqL1xuICAgICAgdGhpcy5fX2lzVXBncmFkZURpc2FibGVkO1xuICAgICAgLyoqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH0gKi9cbiAgICAgIHRoaXMuX19uZWVkc0F0dHJpYnV0ZXNBdENvbm5lY3RlZDtcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9ICovXG4gICAgICB0aGlzLl9sZWdhY3lGb3JjZU9ic2VydmVkQXR0cmlidXRlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3J3YXJkcyBgaW1wb3J0TWV0YWAgZnJvbSB0aGUgcHJvdG90eXBlIChpLmUuIGZyb20gdGhlIGluZm8gb2JqZWN0XG4gICAgICogcGFzc2VkIHRvIGBQb2x5bWVyKHsuLi59KWApIHRvIHRoZSBzdGF0aWMgQVBJLlxuICAgICAqXG4gICAgICogQHJldHVybiB7IU9iamVjdH0gVGhlIGBpbXBvcnQubWV0YWAgb2JqZWN0IHNldCBvbiB0aGUgcHJvdG90eXBlXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gYHRoaXNgIGlzIGFsd2F5cyBpbiB0aGUgaW5zdGFuY2UgaW5cbiAgICAgKiAgY2xvc3VyZSBmb3Igc29tZSByZWFzb24gZXZlbiBpbiBhIHN0YXRpYyBtZXRob2QsIHJhdGhlciB0aGFuIHRoZSBjbGFzc1xuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGdldCBpbXBvcnRNZXRhKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvdG90eXBlLmltcG9ydE1ldGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGVnYWN5IGNhbGxiYWNrIGNhbGxlZCBkdXJpbmcgdGhlIGBjb25zdHJ1Y3RvcmAsIGZvciBvdmVycmlkaW5nXG4gICAgICogYnkgdGhlIHVzZXIuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBjcmVhdGVkKCkge31cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3NlcyBhbiBhdHRyaWJ1dGUgcmVhY3Rpb24gd2hlbiB0aGUgYGxlZ2FjeU5vT2JzZXJ2ZWRBdHRyaWJ1dGVzYFxuICAgICAqIHNldHRpbmcgaXMgaW4gdXNlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgYXR0cmlidXRlIHRoYXQgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gb2xkIE9sZCBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IHZhbHVlIE5ldyBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9fYXR0cmlidXRlUmVhY3Rpb24obmFtZSwgb2xkLCB2YWx1ZSkge1xuICAgICAgaWYgKCh0aGlzLl9fZGF0YUF0dHJpYnV0ZXMgJiYgdGhpcy5fX2RhdGFBdHRyaWJ1dGVzW25hbWVdKSB8fCBuYW1lID09PSBESVNBQkxFRF9BVFRSKSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZCwgdmFsdWUsIG51bGwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZS5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlIHRvIGNoYW5nZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8Ym9vbGVhbnwhVHJ1c3RlZEhUTUx8IVRydXN0ZWRTY3JpcHRVUkx8IVRydXN0ZWRVUkx9IHZhbHVlIFRoZSBuZXcgYXR0cmlidXRlIHZhbHVlLlxuICAgICAqL1xuICAgIHNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKGxlZ2FjeU5vT2JzZXJ2ZWRBdHRyaWJ1dGVzICYmICF0aGlzLl9sZWdhY3lGb3JjZU9ic2VydmVkQXR0cmlidXRlcykge1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgICBzdXBlci5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgICAgICAvLyB2YWx1ZSBjb2VyY2VkIHRvIFN0cmluZyBmb3IgY2xvc3VyZSdzIGJlbmVmaXRcbiAgICAgICAgdGhpcy5fX2F0dHJpYnV0ZVJlYWN0aW9uKG5hbWUsIG9sZFZhbHVlLCBTdHJpbmcodmFsdWUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1cGVyLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbiBhdHRyaWJ1dGUuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0byByZW1vdmUuXG4gICAgICovXG4gICAgcmVtb3ZlQXR0cmlidXRlKG5hbWUpIHtcbiAgICAgIGlmIChsZWdhY3lOb09ic2VydmVkQXR0cmlidXRlcyAmJiAhdGhpcy5fbGVnYWN5Rm9yY2VPYnNlcnZlZEF0dHJpYnV0ZXMpIHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgc3VwZXIucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICB0aGlzLl9fYXR0cmlidXRlUmVhY3Rpb24obmFtZSwgb2xkVmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3VwZXIucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE5PVEU6IElubGluZWQgZm9yIHBlcmYgZnJvbSB2ZXJzaW9uIG9mIERpc2FibGVVcGdyYWRlTWl4aW4uXG4gICAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgICBpZiAobGVnYWN5Tm9PYnNlcnZlZEF0dHJpYnV0ZXMgJiYgIXRoaXMucHJvdG90eXBlLl9sZWdhY3lGb3JjZU9ic2VydmVkQXR0cmlidXRlcykge1xuICAgICAgICAvLyBFbnN1cmUgdGhpcyBlbGVtZW50IGlzIHByb3BlcnR5IHJlZ2lzdGVyZWQgd2l0aCB0aGUgdGVsZW1ldHJ5IHN5c3RlbS5cbiAgICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19fb2JzZXJ2ZWRBdHRyaWJ1dGVzJywgdGhpcykpKSB7XG4gICAgICAgICAgdGhpcy5fX29ic2VydmVkQXR0cmlidXRlcyA9IFtdO1xuICAgICAgICAgIHJlZ2lzdGVyKHRoaXMucHJvdG90eXBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fX29ic2VydmVkQXR0cmlidXRlcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlZEF0dHJpYnV0ZXNHZXR0ZXIuY2FsbCh0aGlzKS5jb25jYXQoRElTQUJMRURfQVRUUik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTk9URTogSW5saW5lZCBmb3IgcGVyZiBmcm9tIHZlcnNpb24gb2YgRGlzYWJsZVVwZ3JhZGVNaXhpbi5cbiAgICAvLyBQcmV2ZW50IGVsZW1lbnQgZnJvbSBlbmFibGluZyBwcm9wZXJ0aWVzIHdoZW4gaXQncyB1cGdyYWRlIGRpc2FibGVkLlxuICAgIC8vIE5vcm1hbGx5IG92ZXJyaWRpbmcgY29ubmVjdGVkQ2FsbGJhY2sgd291bGQgYmUgZW5vdWdoLCBidXQgZG9tLSogZWxlbWVudHNcbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgX2VuYWJsZVByb3BlcnRpZXMoKSB7XG4gICAgICBpZiAoIXRoaXMuX19pc1VwZ3JhZGVEaXNhYmxlZCkge1xuICAgICAgICBzdXBlci5fZW5hYmxlUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE5PVEU6IElubGluZWQgZm9yIHBlcmYgZnJvbSB2ZXJzaW9uIG9mIERpc2FibGVVcGdyYWRlTWl4aW4uXG4gICAgLy8gSWYgdGhlIGVsZW1lbnQgc3RhcnRzIHVwZ3JhZGUtZGlzYWJsZWQgYW5kIGEgcHJvcGVydHkgaXMgc2V0IGZvclxuICAgIC8vIHdoaWNoIGFuIGFjY2Vzc29yIGV4aXN0cywgdGhlIGRlZmF1bHQgc2hvdWxkIG5vdCBiZSBhcHBsaWVkLlxuICAgIC8vIFRoaXMgYWRkaXRpb25hbCBjaGVjayBpcyBuZWVkZWQgYmVjYXVzZSBkZWZhdWx0cyBhcmUgYXBwbGllZCB2aWFcbiAgICAvLyBgX2luaXRpYWxpemVQcm9wZXJ0aWVzYCB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgaW5pdGlhbCBwcm9wZXJ0aWVzXG4gICAgLy8gaGF2ZSBiZWVuIHNldCB3aGVuIHRoZSBlbGVtZW50IHN0YXJ0cyB1cGdyYWRlLWRpc2FibGVkLlxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBfY2FuQXBwbHlQcm9wZXJ0eURlZmF1bHQocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiBzdXBlci5fY2FuQXBwbHlQcm9wZXJ0eURlZmF1bHQocHJvcGVydHkpICYmXG4gICAgICAgICEodGhpcy5fX2lzVXBncmFkZURpc2FibGVkICYmIHRoaXMuX2lzUHJvcGVydHlQZW5kaW5nKHByb3BlcnR5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYGNvbm5lY3RlZENhbGxiYWNrYFxuICAgICAqIHdoaWNoIGFkZHMgUG9seW1lciBsZWdhY3kgQVBJJ3MgYGF0dGFjaGVkYCBtZXRob2QuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIGlmICh0aGlzLl9fbmVlZHNBdHRyaWJ1dGVzQXRDb25uZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5fdGFrZUF0dHJpYnV0ZXMoKTtcbiAgICAgIH1cbiAgICAgIC8vIE5PVEU6IElubGluZWQgZm9yIHBlcmYgZnJvbSB2ZXJzaW9uIG9mIERpc2FibGVVcGdyYWRlTWl4aW4uXG4gICAgICBpZiAoIXRoaXMuX19pc1VwZ3JhZGVEaXNhYmxlZCkge1xuICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICB0aGlzLmlzQXR0YWNoZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmF0dGFjaGVkKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGVnYWN5IGNhbGxiYWNrIGNhbGxlZCBkdXJpbmcgYGNvbm5lY3RlZENhbGxiYWNrYCwgZm9yIG92ZXJyaWRpbmdcbiAgICAgKiBieSB0aGUgdXNlci5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIGF0dGFjaGVkKCkge31cblxuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGFuIGltcGxlbWVudGF0aW9uIG9mIGBkaXNjb25uZWN0ZWRDYWxsYmFja2BcbiAgICAgKiB3aGljaCBhZGRzIFBvbHltZXIgbGVnYWN5IEFQSSdzIGBkZXRhY2hlZGAgbWV0aG9kLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAvLyBOT1RFOiBJbmxpbmVkIGZvciBwZXJmIGZyb20gdmVyc2lvbiBvZiBEaXNhYmxlVXBncmFkZU1peGluLlxuICAgICAgaWYgKCF0aGlzLl9faXNVcGdyYWRlRGlzYWJsZWQpIHtcbiAgICAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgdGhpcy5pc0F0dGFjaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGV0YWNoZWQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMZWdhY3kgY2FsbGJhY2sgY2FsbGVkIGR1cmluZyBgZGlzY29ubmVjdGVkQ2FsbGJhY2tgLCBmb3Igb3ZlcnJpZGluZ1xuICAgICAqIGJ5IHRoZSB1c2VyLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgZGV0YWNoZWQoKSB7fVxuXG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgYW4gb3ZlcnJpZGUgaW1wbGVtZW50YXRpb24gb2YgYGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja2BcbiAgICAgKiB3aGljaCBhZGRzIHRoZSBQb2x5bWVyIGxlZ2FjeSBBUEkncyBgYXR0cmlidXRlQ2hhbmdlZGAgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gb2xkIE9sZCB2YWx1ZSBvZiBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBDdXJyZW50IHZhbHVlIG9mIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IG5hbWVzcGFjZSBBdHRyaWJ1dGUgbmFtZXNwYWNlLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZCwgdmFsdWUsIG5hbWVzcGFjZSkge1xuICAgICAgaWYgKG9sZCAhPT0gdmFsdWUpIHtcbiAgICAgICAgLy8gTk9URTogSW5saW5lZCBmb3IgcGVyZiBmcm9tIHZlcnNpb24gb2YgRGlzYWJsZVVwZ3JhZGVNaXhpbi5cbiAgICAgICAgaWYgKG5hbWUgPT0gRElTQUJMRURfQVRUUikge1xuICAgICAgICAgIC8vIFdoZW4gZGlzYWJsZS11cGdyYWRlIGlzIHJlbW92ZWQsIGludGlhbGl6ZSBwcm9wZXJ0aWVzIGFuZFxuICAgICAgICAgIC8vIHByb3Zva2UgY29ubmVjdGVkQ2FsbGJhY2sgaWYgdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBjb25uZWN0ZWQuXG4gICAgICAgICAgaWYgKHRoaXMuX19pc1VwZ3JhZGVEaXNhYmxlZCAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplUHJvcGVydGllcygpO1xuICAgICAgICAgICAgdGhpcy5fX2lzVXBncmFkZURpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAod3JhcCh0aGlzKS5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN1cGVyLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGQsIHZhbHVlLCBuYW1lc3BhY2UpO1xuICAgICAgICAgIHRoaXMuYXR0cmlidXRlQ2hhbmdlZChuYW1lLCBvbGQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExlZ2FjeSBjYWxsYmFjayBjYWxsZWQgZHVyaW5nIGBhdHRyaWJ1dGVDaGFuZ2VkQ2hhbGxiYWNrYCwgZm9yIG92ZXJyaWRpbmdcbiAgICAgKiBieSB0aGUgdXNlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IG9sZCBPbGQgdmFsdWUgb2YgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgQ3VycmVudCB2YWx1ZSBvZiBhdHRyaWJ1dGUuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBhdHRyaWJ1dGVDaGFuZ2VkKG5hbWUsIG9sZCwgdmFsdWUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyB0aGUgZGVmYXVsdCBgUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHNgIGltcGxlbWVudGF0aW9uIHRvXG4gICAgICogYWRkIHN1cHBvcnQgZm9yIGNsYXNzIGluaXRpYWxpemF0aW9uIHZpYSB0aGUgYF9yZWdpc3RlcmVkYCBjYWxsYmFjay5cbiAgICAgKiBUaGlzIGlzIGNhbGxlZCBvbmx5IHdoZW4gdGhlIGZpcnN0IGluc3RhbmNlIG9mIHRoZSBlbGVtZW50IGlzIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfVxuICAgICAqL1xuICAgIF9pbml0aWFsaXplUHJvcGVydGllcygpIHtcbiAgICAgIC8vIE5PVEU6IElubGluZWQgZm9yIHBlcmYgZnJvbSB2ZXJzaW9uIG9mIERpc2FibGVVcGdyYWRlTWl4aW4uXG4gICAgICAvLyBPbmx5IGF1dG8tdXNlIGRpc2FibGUtdXBncmFkZSBpZiBsZWdhY3lPcHRpbWl6YXRpb25zIGlzIHNldC5cbiAgICAgIGlmIChsZWdhY3lPcHRpbWl6YXRpb25zICYmIHRoaXMuaGFzQXR0cmlidXRlKERJU0FCTEVEX0FUVFIpKSB7XG4gICAgICAgIHRoaXMuX19pc1VwZ3JhZGVEaXNhYmxlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyk7XG4gICAgICAgIGlmICghcHJvdG8uaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19oYXNSZWdpc3RlckZpbmlzaGVkJywgcHJvdG8pKSkge1xuICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyZWQoKTtcbiAgICAgICAgICAvLyBiYWNrc3RvcCBpbiBjYXNlIHRoZSBgX3JlZ2lzdGVyZWRgIGltcGxlbWVudGF0aW9uIGRvZXMgbm90IHNldCB0aGlzXG4gICAgICAgICAgcHJvdG8uX19oYXNSZWdpc3RlckZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5faW5pdGlhbGl6ZVByb3BlcnRpZXMoKTtcbiAgICAgICAgdGhpcy5yb290ID0gLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi8odGhpcyk7XG4gICAgICAgIHRoaXMuY3JlYXRlZCgpO1xuICAgICAgICAvLyBQdWxsIGFsbCBhdHRyaWJ1dGUgdmFsdWVzIDF4IGlmIGBsZWdhY3lOb09ic2VydmVkQXR0cmlidXRlc2AgaXMgc2V0LlxuICAgICAgICBpZiAobGVnYWN5Tm9PYnNlcnZlZEF0dHJpYnV0ZXMgJiYgIXRoaXMuX2xlZ2FjeUZvcmNlT2JzZXJ2ZWRBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgICAgICB0aGlzLl90YWtlQXR0cmlidXRlcygpO1xuICAgICAgICAgIC8vIEVsZW1lbnQgY3JlYXRlZCBmcm9tIHNjcmF0Y2ggb3IgcGFyc2VyIGdlbmVyYXRlZFxuICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdGhpcy5fX25lZWRzQXR0cmlidXRlc0F0Q29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIGxpc3RlbmVycyBhcmUgYXBwbGllZCBpbW1lZGlhdGVseSBzbyB0aGF0IHRoZXkgYXJlXG4gICAgICAgIC8vIGFkZGVkIGJlZm9yZSBkZWNsYXJhdGl2ZSBldmVudCBsaXN0ZW5lcnMuIFRoaXMgYWxsb3dzIGFuIGVsZW1lbnQgdG9cbiAgICAgICAgLy8gZGVjb3JhdGUgaXRzZWxmIHZpYSBhbiBldmVudCBwcmlvciB0byBhbnkgZGVjbGFyYXRpdmUgbGlzdGVuZXJzXG4gICAgICAgIC8vIHNlZWluZyB0aGUgZXZlbnQuIE5vdGUsIHRoaXMgZW5zdXJlcyBjb21wYXRpYmlsaXR5IHdpdGggMS54IG9yZGVyaW5nLlxuICAgICAgICB0aGlzLl9hcHBseUxpc3RlbmVycygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90YWtlQXR0cmlidXRlcygpIHtcbiAgICAgIGNvbnN0IGEgPSB0aGlzLmF0dHJpYnV0ZXM7XG4gICAgICBmb3IgKGxldCBpPTAsIGw9YS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3QgYXR0ciA9IGFbaV07XG4gICAgICAgIHRoaXMuX19hdHRyaWJ1dGVSZWFjdGlvbihhdHRyLm5hbWUsIG51bGwsIGF0dHIudmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBhdXRvbWF0aWNhbGx5IHdoZW4gYW4gZWxlbWVudCBpcyBpbml0aWFsaXppbmcuXG4gICAgICogVXNlcnMgbWF5IG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIHBlcmZvcm0gY2xhc3MgcmVnaXN0cmF0aW9uIHRpbWVcbiAgICAgKiB3b3JrLiBUaGUgaW1wbGVtZW50YXRpb24gc2hvdWxkIGVuc3VyZSB0aGUgd29yayBpcyBwZXJmb3JtZWRcbiAgICAgKiBvbmx5IG9uY2UgZm9yIHRoZSBjbGFzcy5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfcmVnaXN0ZXJlZCgpIHt9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgdGhlIGRlZmF1bHQgYFBvbHltZXIuUHJvcGVydHlFZmZlY3RzYCBpbXBsZW1lbnRhdGlvbiB0b1xuICAgICAqIGFkZCBzdXBwb3J0IGZvciBpbnN0YWxsaW5nIGBob3N0QXR0cmlidXRlc2AgYW5kIGBsaXN0ZW5lcnNgLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICByZWFkeSgpIHtcbiAgICAgIHRoaXMuX2Vuc3VyZUF0dHJpYnV0ZXMoKTtcbiAgICAgIHN1cGVyLnJlYWR5KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5zdXJlcyBhbiBlbGVtZW50IGhhcyByZXF1aXJlZCBhdHRyaWJ1dGVzLiBDYWxsZWQgd2hlbiB0aGUgZWxlbWVudFxuICAgICAqIGlzIGJlaW5nIHJlYWRpZWQgdmlhIGByZWFkeWAuIFVzZXJzIHNob3VsZCBvdmVycmlkZSB0byBzZXQgdGhlXG4gICAgICogZWxlbWVudCdzIHJlcXVpcmVkIGF0dHJpYnV0ZXMuIFRoZSBpbXBsZW1lbnRhdGlvbiBzaG91bGQgYmUgc3VyZVxuICAgICAqIHRvIGNoZWNrIGFuZCBub3Qgb3ZlcnJpZGUgZXhpc3RpbmcgYXR0cmlidXRlcyBhZGRlZCBieVxuICAgICAqIHRoZSB1c2VyIG9mIHRoZSBlbGVtZW50LiBUeXBpY2FsbHksIHNldHRpbmcgYXR0cmlidXRlcyBzaG91bGQgYmUgbGVmdFxuICAgICAqIHRvIHRoZSBlbGVtZW50IHVzZXIgYW5kIG5vdCBkb25lIGhlcmU7IHJlYXNvbmFibGUgZXhjZXB0aW9ucyBpbmNsdWRlXG4gICAgICogc2V0dGluZyBhcmlhIHJvbGVzIGFuZCBmb2N1c2FiaWxpdHkuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2Vuc3VyZUF0dHJpYnV0ZXMoKSB7fVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBlbGVtZW50IGV2ZW50IGxpc3RlbmVycy4gQ2FsbGVkIHdoZW4gdGhlIGVsZW1lbnRcbiAgICAgKiBpcyBiZWluZyByZWFkaWVkIHZpYSBgcmVhZHlgLiBVc2VycyBzaG91bGQgb3ZlcnJpZGUgdG9cbiAgICAgKiBhZGQgYW55IHJlcXVpcmVkIGVsZW1lbnQgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAqIEluIHBlcmZvcm1hbmNlIGNyaXRpY2FsIGVsZW1lbnRzLCB0aGUgd29yayBkb25lIGhlcmUgc2hvdWxkIGJlIGtlcHRcbiAgICAgKiB0byBhIG1pbmltdW0gc2luY2UgaXQgaXMgZG9uZSBiZWZvcmUgdGhlIGVsZW1lbnQgaXMgcmVuZGVyZWQuIEluXG4gICAgICogdGhlc2UgZWxlbWVudHMsIGNvbnNpZGVyIGFkZGluZyBsaXN0ZW5lcnMgYXN5bmNocm9ub3VzbHkgc28gYXMgbm90IHRvXG4gICAgICogYmxvY2sgcmVuZGVyLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9hcHBseUxpc3RlbmVycygpIHt9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIHR5cGVkIEphdmFTY3JpcHQgdmFsdWUgdG8gYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoaXMgbWV0aG9kIGlzIHByb3ZpZGVkIGFzIGJhY2t3YXJkLWNvbXBhdGlibGUgbGVnYWN5IEFQSVxuICAgICAqIG9ubHkuICBJdCBpcyBub3QgZGlyZWN0bHkgY2FsbGVkIGJ5IGFueSBQb2x5bWVyIGZlYXR1cmVzLiBUbyBjdXN0b21pemVcbiAgICAgKiBob3cgcHJvcGVydGllcyBhcmUgc2VyaWFsaXplZCB0byBhdHRyaWJ1dGVzIGZvciBhdHRyaWJ1dGUgYmluZGluZ3MgYW5kXG4gICAgICogYHJlZmxlY3RUb0F0dHJpYnV0ZTogdHJ1ZWAgcHJvcGVydGllcyBhcyB3ZWxsIGFzIHRoaXMgbWV0aG9kLCBvdmVycmlkZVxuICAgICAqIHRoZSBgX3NlcmlhbGl6ZVZhbHVlYCBtZXRob2QgcHJvdmlkZWQgYnkgYFBvbHltZXIuUHJvcGVydHlBY2Nlc3NvcnNgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBkZXNlcmlhbGl6ZVxuICAgICAqIEByZXR1cm4ge3N0cmluZyB8IHVuZGVmaW5lZH0gU2VyaWFsaXplZCB2YWx1ZVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIHNlcmlhbGl6ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NlcmlhbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIHN0cmluZyB0byBhIHR5cGVkIEphdmFTY3JpcHQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoaXMgbWV0aG9kIGlzIHByb3ZpZGVkIGFzIGJhY2t3YXJkLWNvbXBhdGlibGUgbGVnYWN5IEFQSVxuICAgICAqIG9ubHkuICBJdCBpcyBub3QgZGlyZWN0bHkgY2FsbGVkIGJ5IGFueSBQb2x5bWVyIGZlYXR1cmVzLiAgVG8gY3VzdG9taXplXG4gICAgICogaG93IGF0dHJpYnV0ZXMgYXJlIGRlc2VyaWFsaXplZCB0byBwcm9wZXJ0aWVzIGZvciBpblxuICAgICAqIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgLCBvdmVycmlkZSBgX2Rlc2VyaWFsaXplVmFsdWVgIG1ldGhvZFxuICAgICAqIHByb3ZpZGVkIGJ5IGBQb2x5bWVyLlByb3BlcnR5QWNjZXNzb3JzYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBTdHJpbmcgdG8gZGVzZXJpYWxpemVcbiAgICAgKiBAcGFyYW0geyp9IHR5cGUgVHlwZSB0byBkZXNlcmlhbGl6ZSB0aGUgc3RyaW5nIHRvXG4gICAgICogQHJldHVybiB7Kn0gUmV0dXJucyB0aGUgZGVzZXJpYWxpemVkIHZhbHVlIGluIHRoZSBgdHlwZWAgZ2l2ZW4uXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgZGVzZXJpYWxpemUodmFsdWUsIHR5cGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9kZXNlcmlhbGl6ZVZhbHVlKHZhbHVlLCB0eXBlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemVzIGEgcHJvcGVydHkgdG8gaXRzIGFzc29jaWF0ZWQgYXR0cmlidXRlLlxuICAgICAqXG4gICAgICogTm90ZSB0aGlzIG1ldGhvZCBpcyBwcm92aWRlZCBhcyBiYWNrd2FyZC1jb21wYXRpYmxlIGxlZ2FjeSBBUElcbiAgICAgKiBvbmx5LiAgSXQgaXMgbm90IGRpcmVjdGx5IGNhbGxlZCBieSBhbnkgUG9seW1lciBmZWF0dXJlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lIHRvIHJlZmxlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBhdHRyaWJ1dGUgQXR0cmlidXRlIG5hbWUgdG8gcmVmbGVjdC5cbiAgICAgKiBAcGFyYW0geyo9fSB2YWx1ZSBQcm9wZXJ0eSB2YWx1ZSB0byByZWZsZWN0LlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgcmVmbGVjdFByb3BlcnR5VG9BdHRyaWJ1dGUocHJvcGVydHksIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICAgIHRoaXMuX3Byb3BlcnR5VG9BdHRyaWJ1dGUocHJvcGVydHksIGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSB0eXBlZCB2YWx1ZSB0byBhbiBIVE1MIGF0dHJpYnV0ZSBvbiBhIG5vZGUuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoaXMgbWV0aG9kIGlzIHByb3ZpZGVkIGFzIGJhY2t3YXJkLWNvbXBhdGlibGUgbGVnYWN5IEFQSVxuICAgICAqIG9ubHkuICBJdCBpcyBub3QgZGlyZWN0bHkgY2FsbGVkIGJ5IGFueSBQb2x5bWVyIGZlYXR1cmVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXJpYWxpemUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZSBBdHRyaWJ1dGUgbmFtZSB0byBzZXJpYWxpemUgdG8uXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBub2RlIEVsZW1lbnQgdG8gc2V0IGF0dHJpYnV0ZSB0by5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIHNlcmlhbGl6ZVZhbHVlVG9BdHRyaWJ1dGUodmFsdWUsIGF0dHJpYnV0ZSwgbm9kZSkge1xuICAgICAgdGhpcy5fdmFsdWVUb05vZGVBdHRyaWJ1dGUoLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAobm9kZSB8fCB0aGlzKSwgdmFsdWUsIGF0dHJpYnV0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBwcm9wZXJ0aWVzIChpbmNsdWRpbmcgYWNjZXNzb3IgZGVzY3JpcHRvcnMpIGZyb20gYSBzb3VyY2VcbiAgICAgKiBvYmplY3QgdG8gYSB0YXJnZXQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUYXJnZXQgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYXBpIFNvdXJjZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBwcm90b3R5cGUgb2JqZWN0IHRoYXQgd2FzIHBhc3NlZCBhcyBmaXJzdCBhcmd1bWVudC5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBleHRlbmQocHJvdG90eXBlLCBhcGkpIHtcbiAgICAgIGlmICghKHByb3RvdHlwZSAmJiBhcGkpKSB7XG4gICAgICAgIHJldHVybiBwcm90b3R5cGUgfHwgYXBpO1xuICAgICAgfVxuICAgICAgbGV0IG4kID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXBpKTtcbiAgICAgIGZvciAobGV0IGk9MCwgbjsgKGk8biQubGVuZ3RoKSAmJiAobj1uJFtpXSk7IGkrKykge1xuICAgICAgICBsZXQgcGQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFwaSwgbik7XG4gICAgICAgIGlmIChwZCkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsIG4sIHBkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3RvdHlwZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgcHJvcHMgZnJvbSBhIHNvdXJjZSBvYmplY3QgdG8gYSB0YXJnZXQgb2JqZWN0LlxuICAgICAqXG4gICAgICogTm90ZSwgdGhpcyBtZXRob2QgdXNlcyBhIHNpbXBsZSBgZm9yLi4uaW5gIHN0cmF0ZWd5IGZvciBlbnVtZXJhdGluZ1xuICAgICAqIHByb3BlcnRpZXMuICBUbyBlbnN1cmUgb25seSBgb3duUHJvcGVydGllc2AgYXJlIGNvcGllZCBmcm9tIHNvdXJjZVxuICAgICAqIHRvIHRhcmdldCBhbmQgdGhhdCBhY2Nlc3NvciBpbXBsZW1lbnRhdGlvbnMgYXJlIGNvcGllZCwgdXNlIGBleHRlbmRgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSB0YXJnZXQgVGFyZ2V0IG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBzb3VyY2UgU291cmNlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcmV0dXJuIHshT2JqZWN0fSBUYXJnZXQgb2JqZWN0IHRoYXQgd2FzIHBhc3NlZCBhcyBmaXJzdCBhcmd1bWVudC5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBtaXhpbih0YXJnZXQsIHNvdXJjZSkge1xuICAgICAgZm9yIChsZXQgaSBpbiBzb3VyY2UpIHtcbiAgICAgICAgdGFyZ2V0W2ldID0gc291cmNlW2ldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwcm90b3R5cGUgb2YgYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogTm90ZSB0aGlzIG1ldGhvZCBpcyBwcm92aWRlZCBhcyBiYWNrd2FyZC1jb21wYXRpYmxlIGxlZ2FjeSBBUElcbiAgICAgKiBvbmx5LiAgSXQgaXMgbm90IGRpcmVjdGx5IGNhbGxlZCBieSBhbnkgUG9seW1lciBmZWF0dXJlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3Qgb24gd2hpY2ggdG8gc2V0IHRoZSBwcm90b3R5cGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgcHJvdG90eXBlIHRoYXQgd2lsbCBiZSBzZXQgb24gdGhlIGdpdmVuXG4gICAgICogYG9iamVjdGAuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIHRoZSBnaXZlbiBgb2JqZWN0YCB3aXRoIGl0cyBwcm90b3R5cGUgc2V0XG4gICAgICogdG8gdGhlIGdpdmVuIGBwcm90b3R5cGVgIG9iamVjdC5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBjaGFpbk9iamVjdChvYmplY3QsIHByb3RvdHlwZSkge1xuICAgICAgaWYgKG9iamVjdCAmJiBwcm90b3R5cGUgJiYgb2JqZWN0ICE9PSBwcm90b3R5cGUpIHtcbiAgICAgICAgb2JqZWN0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyogKioqKiBCZWdpbiBUZW1wbGF0ZSAqKioqICovXG5cbiAgICAvKipcbiAgICAgKiBDYWxscyBgaW1wb3J0Tm9kZWAgb24gdGhlIGBjb250ZW50YCBvZiB0aGUgYHRlbXBsYXRlYCBzcGVjaWZpZWQgYW5kXG4gICAgICogcmV0dXJucyBhIGRvY3VtZW50IGZyYWdtZW50IGNvbnRhaW5pbmcgdGhlIGltcG9ydGVkIGNvbnRlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIEhUTUwgdGVtcGxhdGUgZWxlbWVudCB0byBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJuIHshRG9jdW1lbnRGcmFnbWVudH0gRG9jdW1lbnQgZnJhZ21lbnQgY29udGFpbmluZyB0aGUgaW1wb3J0ZWRcbiAgICAgKiAgIHRlbXBsYXRlIGNvbnRlbnQuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gZ28vbWlzc2luZ2ZucHJvcHNcbiAgICAgKi9cbiAgICBpbnN0YW5jZVRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgICBsZXQgY29udGVudCA9IHRoaXMuY29uc3RydWN0b3IuX2NvbnRlbnRGb3JUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICBsZXQgZG9tID0gLyoqIEB0eXBlIHshRG9jdW1lbnRGcmFnbWVudH0gKi9cbiAgICAgICAgKGRvY3VtZW50LmltcG9ydE5vZGUoY29udGVudCwgdHJ1ZSkpO1xuICAgICAgcmV0dXJuIGRvbTtcbiAgICB9XG5cbiAgICAvKiAqKioqIEJlZ2luIEV2ZW50cyAqKioqICovXG5cblxuXG4gICAgLyoqXG4gICAgICogRGlzcGF0Y2hlcyBhIGN1c3RvbSBldmVudCB3aXRoIGFuIG9wdGlvbmFsIGRldGFpbCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIE5hbWUgb2YgZXZlbnQgdHlwZS5cbiAgICAgKiBAcGFyYW0geyo9fSBkZXRhaWwgRGV0YWlsIHZhbHVlIGNvbnRhaW5pbmcgZXZlbnQtc3BlY2lmaWNcbiAgICAgKiAgIHBheWxvYWQuXG4gICAgICogQHBhcmFtIHt7IGJ1YmJsZXM6IChib29sZWFufHVuZGVmaW5lZCksIGNhbmNlbGFibGU6IChib29sZWFufHVuZGVmaW5lZCksXG4gICAgICogICAgIGNvbXBvc2VkOiAoYm9vbGVhbnx1bmRlZmluZWQpIH09fVxuICAgICAqICBvcHRpb25zIE9iamVjdCBzcGVjaWZ5aW5nIG9wdGlvbnMuICBUaGVzZSBtYXkgaW5jbHVkZTpcbiAgICAgKiAgYGJ1YmJsZXNgIChib29sZWFuLCBkZWZhdWx0cyB0byBgdHJ1ZWApLFxuICAgICAqICBgY2FuY2VsYWJsZWAgKGJvb2xlYW4sIGRlZmF1bHRzIHRvIGZhbHNlKSwgYW5kXG4gICAgICogIGBub2RlYCBvbiB3aGljaCB0byBmaXJlIHRoZSBldmVudCAoSFRNTEVsZW1lbnQsIGRlZmF1bHRzIHRvIGB0aGlzYCkuXG4gICAgICogQHJldHVybiB7IUV2ZW50fSBUaGUgbmV3IGV2ZW50IHRoYXQgd2FzIGZpcmVkLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGZpcmUodHlwZSwgZGV0YWlsLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIGRldGFpbCA9IChkZXRhaWwgPT09IG51bGwgfHwgZGV0YWlsID09PSB1bmRlZmluZWQpID8ge30gOiBkZXRhaWw7XG4gICAgICBsZXQgZXZlbnQgPSBuZXcgRXZlbnQodHlwZSwge1xuICAgICAgICBidWJibGVzOiBvcHRpb25zLmJ1YmJsZXMgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRpb25zLmJ1YmJsZXMsXG4gICAgICAgIGNhbmNlbGFibGU6IEJvb2xlYW4ob3B0aW9ucy5jYW5jZWxhYmxlKSxcbiAgICAgICAgY29tcG9zZWQ6IG9wdGlvbnMuY29tcG9zZWQgPT09IHVuZGVmaW5lZCA/IHRydWU6IG9wdGlvbnMuY29tcG9zZWRcbiAgICAgIH0pO1xuICAgICAgZXZlbnQuZGV0YWlsID0gZGV0YWlsO1xuICAgICAgbGV0IG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgdGhpcztcbiAgICAgIHdyYXAobm9kZSkuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRvIGFkZCBhbiBldmVudCBsaXN0ZW5lciBvbiBhIGdpdmVuIGVsZW1lbnQsXG4gICAgICogbGF0ZSBib3VuZCB0byBhIG5hbWVkIG1ldGhvZCBvbiB0aGlzIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9FdmVudFRhcmdldH0gbm9kZSBFbGVtZW50IHRvIGFkZCBldmVudCBsaXN0ZW5lciB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIE5hbWUgb2YgZXZlbnQgdG8gbGlzdGVuIGZvci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBOYW1lIG9mIGhhbmRsZXIgbWV0aG9kIG9uIGB0aGlzYCB0byBjYWxsLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgbGlzdGVuKG5vZGUsIGV2ZW50TmFtZSwgbWV0aG9kTmFtZSkge1xuICAgICAgbm9kZSA9IC8qKiBAdHlwZSB7IUV2ZW50VGFyZ2V0fSAqLyAobm9kZSB8fCB0aGlzKTtcbiAgICAgIGxldCBoYmwgPSB0aGlzLl9fYm91bmRMaXN0ZW5lcnMgfHxcbiAgICAgICAgKHRoaXMuX19ib3VuZExpc3RlbmVycyA9IG5ldyBXZWFrTWFwKCkpO1xuICAgICAgbGV0IGJsID0gaGJsLmdldChub2RlKTtcbiAgICAgIGlmICghYmwpIHtcbiAgICAgICAgYmwgPSB7fTtcbiAgICAgICAgaGJsLnNldChub2RlLCBibCk7XG4gICAgICB9XG4gICAgICBsZXQga2V5ID0gZXZlbnROYW1lICsgbWV0aG9kTmFtZTtcbiAgICAgIGlmICghYmxba2V5XSkge1xuICAgICAgICBibFtrZXldID0gdGhpcy5fYWRkTWV0aG9kRXZlbnRMaXN0ZW5lclRvTm9kZShcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7IU5vZGV9ICovIChub2RlKSwgZXZlbnROYW1lLCBtZXRob2ROYW1lLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgdG8gcmVtb3ZlIGFuIGV2ZW50IGxpc3RlbmVyIGZyb20gYSBnaXZlbiBlbGVtZW50LFxuICAgICAqIGxhdGUgYm91bmQgdG8gYSBuYW1lZCBtZXRob2Qgb24gdGhpcyBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/RXZlbnRUYXJnZXR9IG5vZGUgRWxlbWVudCB0byByZW1vdmUgZXZlbnQgbGlzdGVuZXIgZnJvbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIE5hbWUgb2YgZXZlbnQgdG8gc3RvcCBsaXN0ZW5pbmcgdG8uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgTmFtZSBvZiBoYW5kbGVyIG1ldGhvZCBvbiBgdGhpc2AgdG8gbm90IGNhbGxcbiAgICAgYW55bW9yZS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIHVubGlzdGVuKG5vZGUsIGV2ZW50TmFtZSwgbWV0aG9kTmFtZSkge1xuICAgICAgbm9kZSA9IC8qKiBAdHlwZSB7IUV2ZW50VGFyZ2V0fSAqLyAobm9kZSB8fCB0aGlzKTtcbiAgICAgIGxldCBibCA9IHRoaXMuX19ib3VuZExpc3RlbmVycyAmJlxuICAgICAgICAgIHRoaXMuX19ib3VuZExpc3RlbmVycy5nZXQoLyoqIEB0eXBlIHshRWxlbWVudH0gKi8gKG5vZGUpKTtcbiAgICAgIGxldCBrZXkgPSBldmVudE5hbWUgKyBtZXRob2ROYW1lO1xuICAgICAgbGV0IGhhbmRsZXIgPSBibCAmJiBibFtrZXldO1xuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlRXZlbnRMaXN0ZW5lckZyb21Ob2RlKFxuICAgICAgICAgICAgLyoqIEB0eXBlIHshTm9kZX0gKi8gKG5vZGUpLCBldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICBibFtrZXldID0gLyoqIEB0eXBlIHs/fSAqLyAobnVsbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgc2Nyb2xsaW5nIGJlaGF2aW9yIHRvIGFsbCBkaXJlY3Rpb24sIG9uZSBkaXJlY3Rpb24sIG9yIG5vbmUuXG4gICAgICpcbiAgICAgKiBWYWxpZCBzY3JvbGwgZGlyZWN0aW9uczpcbiAgICAgKiAgIC0gJ2FsbCc6IHNjcm9sbCBpbiBhbnkgZGlyZWN0aW9uXG4gICAgICogICAtICd4Jzogc2Nyb2xsIG9ubHkgaW4gdGhlICd4JyBkaXJlY3Rpb25cbiAgICAgKiAgIC0gJ3knOiBzY3JvbGwgb25seSBpbiB0aGUgJ3knIGRpcmVjdGlvblxuICAgICAqICAgLSAnbm9uZSc6IGRpc2FibGUgc2Nyb2xsaW5nIGZvciB0aGlzIG5vZGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gZGlyZWN0aW9uIERpcmVjdGlvbiB0byBhbGxvdyBzY3JvbGxpbmdcbiAgICAgKiBEZWZhdWx0cyB0byBgYWxsYC5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnQ9fSBub2RlIEVsZW1lbnQgdG8gYXBwbHkgc2Nyb2xsIGRpcmVjdGlvbiBzZXR0aW5nLlxuICAgICAqIERlZmF1bHRzIHRvIGB0aGlzYC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIHNldFNjcm9sbERpcmVjdGlvbihkaXJlY3Rpb24sIG5vZGUpIHtcbiAgICAgIHNldFRvdWNoQWN0aW9uKFxuICAgICAgICAgIC8qKiBAdHlwZSB7IUVsZW1lbnR9ICovIChub2RlIHx8IHRoaXMpLFxuICAgICAgICAgIERJUkVDVElPTl9NQVBbZGlyZWN0aW9uXSB8fCAnYXV0bycpO1xuICAgIH1cbiAgICAvKiAqKioqIEVuZCBFdmVudHMgKioqKiAqL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRvIHJ1biBgcXVlcnlTZWxlY3RvcmAgb24gdGhpcyBsb2NhbCBET00gc2NvcGUuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGNhbGxzIGBQb2x5bWVyLmRvbSh0aGlzLnJvb3QpLnF1ZXJ5U2VsZWN0b3Ioc2xjdHIpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzbGN0ciBTZWxlY3RvciB0byBydW4gb24gdGhpcyBsb2NhbCBET00gc2NvcGVcbiAgICAgKiBAcmV0dXJuIHtFbGVtZW50fSBFbGVtZW50IGZvdW5kIGJ5IHRoZSBzZWxlY3Rvciwgb3IgbnVsbCBpZiBub3QgZm91bmQuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgJCQoc2xjdHIpIHtcbiAgICAgIC8vIE5vdGUsIG5vIG5lZWQgdG8gYHdyYXBgIHRoaXMgYmVjYXVzZSByb290IGlzIGFsd2F5cyBwYXRjaGVkXG4gICAgICByZXR1cm4gdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3Ioc2xjdHIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgZWxlbWVudCB3aG9zZSBsb2NhbCBkb20gd2l0aGluIHdoaWNoIHRoaXMgZWxlbWVudFxuICAgICAqIGlzIGNvbnRhaW5lZC4gVGhpcyBpcyBhIHNob3J0aGFuZCBmb3JcbiAgICAgKiBgdGhpcy5nZXRSb290Tm9kZSgpLmhvc3RgLlxuICAgICAqIEB0aGlzIHtFbGVtZW50fVxuICAgICAqIEByZXR1cm4gez9Ob2RlfSBUaGUgZWxlbWVudCB3aG9zZSBsb2NhbCBkb20gd2l0aGluIHdoaWNoIHRoaXMgZWxlbWVudCBpc1xuICAgICAqIGNvbnRhaW5lZC5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBnZXQgZG9tSG9zdCgpIHtcbiAgICAgIGxldCByb290ID0gd3JhcCh0aGlzKS5nZXRSb290Tm9kZSgpO1xuICAgICAgcmV0dXJuIChyb290IGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkgPyAvKiogQHR5cGUge1NoYWRvd1Jvb3R9ICovIChyb290KS5ob3N0IDogcm9vdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3JjZSB0aGlzIGVsZW1lbnQgdG8gZGlzdHJpYnV0ZSBpdHMgY2hpbGRyZW4gdG8gaXRzIGxvY2FsIGRvbS5cbiAgICAgKiBUaGlzIHNob3VsZCBub3QgYmUgbmVjZXNzYXJ5IGFzIG9mIFBvbHltZXIgMi4wLjIgYW5kIGlzIHByb3ZpZGVkIG9ubHlcbiAgICAgKiBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBkaXN0cmlidXRlQ29udGVudCgpIHtcbiAgICAgIGNvbnN0IHRoaXNFbCA9IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKHRoaXMpO1xuICAgICAgY29uc3QgZG9tQXBpID0gLyoqIEB0eXBlIHtQb2x5bWVyRG9tQXBpfSAqLyhkb20odGhpc0VsKSk7XG4gICAgICBpZiAod2luZG93LlNoYWR5RE9NICYmIGRvbUFwaS5zaGFkb3dSb290KSB7XG4gICAgICAgIFNoYWR5RE9NLmZsdXNoKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2Ygbm9kZXMgdGhhdCBhcmUgdGhlIGVmZmVjdGl2ZSBjaGlsZE5vZGVzLiBUaGUgZWZmZWN0aXZlXG4gICAgICogY2hpbGROb2RlcyBsaXN0IGlzIHRoZSBzYW1lIGFzIHRoZSBlbGVtZW50J3MgY2hpbGROb2RlcyBleGNlcHQgdGhhdFxuICAgICAqIGFueSBgPGNvbnRlbnQ+YCBlbGVtZW50cyBhcmUgcmVwbGFjZWQgd2l0aCB0aGUgbGlzdCBvZiBub2RlcyBkaXN0cmlidXRlZFxuICAgICAqIHRvIHRoZSBgPGNvbnRlbnQ+YCwgdGhlIHJlc3VsdCBvZiBpdHMgYGdldERpc3RyaWJ1dGVkTm9kZXNgIG1ldGhvZC5cbiAgICAgKiBAcmV0dXJuIHshQXJyYXk8IU5vZGU+fSBMaXN0IG9mIGVmZmVjdGl2ZSBjaGlsZCBub2Rlcy5cbiAgICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c30gTGVnYWN5RWxlbWVudE1peGluIG11c3QgYmUgYXBwbGllZCB0byBhblxuICAgICAqICAgICBIVE1MRWxlbWVudFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGdldEVmZmVjdGl2ZUNoaWxkTm9kZXMoKSB7XG4gICAgICBjb25zdCB0aGlzRWwgPSAvKiogQHR5cGUge0VsZW1lbnR9ICovICh0aGlzKTtcbiAgICAgIGNvbnN0IGRvbUFwaSA9IC8qKiBAdHlwZSB7UG9seW1lckRvbUFwaX0gKi8gKGRvbSh0aGlzRWwpKTtcbiAgICAgIHJldHVybiBkb21BcGkuZ2V0RWZmZWN0aXZlQ2hpbGROb2RlcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIG5vZGVzIGRpc3RyaWJ1dGVkIHdpdGhpbiB0aGlzIGVsZW1lbnQgdGhhdCBtYXRjaFxuICAgICAqIGBzZWxlY3RvcmAuIFRoZXNlIGNhbiBiZSBkb20gY2hpbGRyZW4gb3IgZWxlbWVudHMgZGlzdHJpYnV0ZWQgdG9cbiAgICAgKiBjaGlsZHJlbiB0aGF0IGFyZSBpbnNlcnRpb24gcG9pbnRzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciBTZWxlY3RvciB0byBydW4uXG4gICAgICogQHJldHVybiB7IUFycmF5PCFOb2RlPn0gTGlzdCBvZiBkaXN0cmlidXRlZCBlbGVtZW50cyB0aGF0IG1hdGNoIHNlbGVjdG9yLlxuICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfSBMZWdhY3lFbGVtZW50TWl4aW4gbXVzdCBiZSBhcHBsaWVkIHRvIGFuXG4gICAgICogSFRNTEVsZW1lbnRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBxdWVyeURpc3RyaWJ1dGVkRWxlbWVudHMoc2VsZWN0b3IpIHtcbiAgICAgIGNvbnN0IHRoaXNFbCA9IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKHRoaXMpO1xuICAgICAgY29uc3QgZG9tQXBpID0gLyoqIEB0eXBlIHtQb2x5bWVyRG9tQXBpfSAqLyAoZG9tKHRoaXNFbCkpO1xuICAgICAgcmV0dXJuIGRvbUFwaS5xdWVyeURpc3RyaWJ1dGVkRWxlbWVudHMoc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHRoZSBlZmZlY3RpdmUgY2hpbGRyZW4uIFRoZSBlZmZlY3RpdmVcbiAgICAgKiBjaGlsZHJlbiBsaXN0IGlzIHRoZSBzYW1lIGFzIHRoZSBlbGVtZW50J3MgY2hpbGRyZW4gZXhjZXB0IHRoYXRcbiAgICAgKiBhbnkgYDxjb250ZW50PmAgZWxlbWVudHMgYXJlIHJlcGxhY2VkIHdpdGggdGhlIGxpc3Qgb2YgZWxlbWVudHNcbiAgICAgKiBkaXN0cmlidXRlZCB0byB0aGUgYDxjb250ZW50PmAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHshQXJyYXk8IU5vZGU+fSBMaXN0IG9mIGVmZmVjdGl2ZSBjaGlsZHJlbi5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBnZXRFZmZlY3RpdmVDaGlsZHJlbigpIHtcbiAgICAgIGxldCBsaXN0ID0gdGhpcy5nZXRFZmZlY3RpdmVDaGlsZE5vZGVzKCk7XG4gICAgICByZXR1cm4gbGlzdC5maWx0ZXIoZnVuY3Rpb24oLyoqIEB0eXBlIHshTm9kZX0gKi8gbikge1xuICAgICAgICByZXR1cm4gKG4ubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgb2YgdGV4dCBjb250ZW50IHRoYXQgaXMgdGhlIGNvbmNhdGVuYXRpb24gb2YgdGhlXG4gICAgICogdGV4dCBjb250ZW50J3Mgb2YgdGhlIGVsZW1lbnQncyBlZmZlY3RpdmUgY2hpbGROb2RlcyAodGhlIGVsZW1lbnRzXG4gICAgICogcmV0dXJuZWQgYnkgPGEgaHJlZj1cIiNnZXRFZmZlY3RpdmVDaGlsZE5vZGVzPmdldEVmZmVjdGl2ZUNoaWxkTm9kZXM8L2E+LlxuICAgICAqXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBMaXN0IG9mIGVmZmVjdGl2ZSBjaGlsZHJlbi5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBnZXRFZmZlY3RpdmVUZXh0Q29udGVudCgpIHtcbiAgICAgIGxldCBjbiA9IHRoaXMuZ2V0RWZmZWN0aXZlQ2hpbGROb2RlcygpO1xuICAgICAgbGV0IHRjID0gW107XG4gICAgICBmb3IgKGxldCBpPTAsIGM7IChjID0gY25baV0pOyBpKyspIHtcbiAgICAgICAgaWYgKGMubm9kZVR5cGUgIT09IE5vZGUuQ09NTUVOVF9OT0RFKSB7XG4gICAgICAgICAgdGMucHVzaChjLnRleHRDb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRjLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGZpcnN0IGVmZmVjdGl2ZSBjaGlsZE5vZGUgd2l0aGluIHRoaXMgZWxlbWVudCB0aGF0XG4gICAgICogbWF0Y2ggYHNlbGVjdG9yYC4gVGhlc2UgY2FuIGJlIGRvbSBjaGlsZCBub2RlcyBvciBlbGVtZW50cyBkaXN0cmlidXRlZFxuICAgICAqIHRvIGNoaWxkcmVuIHRoYXQgYXJlIGluc2VydGlvbiBwb2ludHMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIFNlbGVjdG9yIHRvIHJ1bi5cbiAgICAgKiBAcmV0dXJuIHtOb2RlfSBGaXJzdCBlZmZlY3RpdmUgY2hpbGQgbm9kZSB0aGF0IG1hdGNoZXMgc2VsZWN0b3IuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgcXVlcnlFZmZlY3RpdmVDaGlsZHJlbihzZWxlY3Rvcikge1xuICAgICAgbGV0IGUkID0gdGhpcy5xdWVyeURpc3RyaWJ1dGVkRWxlbWVudHMoc2VsZWN0b3IpO1xuICAgICAgcmV0dXJuIGUkICYmIGUkWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGVmZmVjdGl2ZSBjaGlsZE5vZGVzIHdpdGhpbiB0aGlzIGVsZW1lbnQgdGhhdFxuICAgICAqIG1hdGNoIGBzZWxlY3RvcmAuIFRoZXNlIGNhbiBiZSBkb20gY2hpbGQgbm9kZXMgb3IgZWxlbWVudHMgZGlzdHJpYnV0ZWRcbiAgICAgKiB0byBjaGlsZHJlbiB0aGF0IGFyZSBpbnNlcnRpb24gcG9pbnRzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciBTZWxlY3RvciB0byBydW4uXG4gICAgICogQHJldHVybiB7IUFycmF5PCFOb2RlPn0gTGlzdCBvZiBlZmZlY3RpdmUgY2hpbGQgbm9kZXMgdGhhdCBtYXRjaFxuICAgICAqICAgICBzZWxlY3Rvci5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBxdWVyeUFsbEVmZmVjdGl2ZUNoaWxkcmVuKHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWVyeURpc3RyaWJ1dGVkRWxlbWVudHMoc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIG5vZGVzIGRpc3RyaWJ1dGVkIHRvIHRoaXMgZWxlbWVudCdzIGA8c2xvdD5gLlxuICAgICAqXG4gICAgICogSWYgdGhpcyBlbGVtZW50IGNvbnRhaW5zIG1vcmUgdGhhbiBvbmUgYDxzbG90PmAgaW4gaXRzIGxvY2FsIERPTSxcbiAgICAgKiBhbiBvcHRpb25hbCBzZWxlY3RvciBtYXkgYmUgcGFzc2VkIHRvIGNob29zZSB0aGUgZGVzaXJlZCBjb250ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBzbGN0ciBDU1Mgc2VsZWN0b3IgdG8gY2hvb3NlIHRoZSBkZXNpcmVkXG4gICAgICogICBgPHNsb3Q+YC4gIERlZmF1bHRzIHRvIGBjb250ZW50YC5cbiAgICAgKiBAcmV0dXJuIHshQXJyYXk8IU5vZGU+fSBMaXN0IG9mIGRpc3RyaWJ1dGVkIG5vZGVzIGZvciB0aGUgYDxzbG90PmAuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgZ2V0Q29udGVudENoaWxkTm9kZXMoc2xjdHIpIHtcbiAgICAgIC8vIE5vdGUsIG5vIG5lZWQgdG8gYHdyYXBgIHRoaXMgYmVjYXVzZSByb290IGlzIGFsd2F5c1xuICAgICAgbGV0IGNvbnRlbnQgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihzbGN0ciB8fCAnc2xvdCcpO1xuICAgICAgcmV0dXJuIGNvbnRlbnQgP1xuICAgICAgICAgIC8qKiBAdHlwZSB7UG9seW1lckRvbUFwaX0gKi8gKGRvbShjb250ZW50KSkuZ2V0RGlzdHJpYnV0ZWROb2RlcygpIDpcbiAgICAgICAgICBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBlbGVtZW50IGNoaWxkcmVuIGRpc3RyaWJ1dGVkIHRvIHRoaXMgZWxlbWVudCdzXG4gICAgICogYDxzbG90PmAuXG4gICAgICpcbiAgICAgKiBJZiB0aGlzIGVsZW1lbnQgY29udGFpbnMgbW9yZSB0aGFuIG9uZSBgPHNsb3Q+YCBpbiBpdHNcbiAgICAgKiBsb2NhbCBET00sIGFuIG9wdGlvbmFsIHNlbGVjdG9yIG1heSBiZSBwYXNzZWQgdG8gY2hvb3NlIHRoZSBkZXNpcmVkXG4gICAgICogY29udGVudC4gIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSBgZ2V0Q29udGVudENoaWxkTm9kZXNgIGluIHRoYXQgb25seVxuICAgICAqIGVsZW1lbnRzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gc2xjdHIgQ1NTIHNlbGVjdG9yIHRvIGNob29zZSB0aGUgZGVzaXJlZFxuICAgICAqICAgYDxjb250ZW50PmAuICBEZWZhdWx0cyB0byBgY29udGVudGAuXG4gICAgICogQHJldHVybiB7IUFycmF5PCFIVE1MRWxlbWVudD59IExpc3Qgb2YgZGlzdHJpYnV0ZWQgbm9kZXMgZm9yIHRoZVxuICAgICAqICAgYDxzbG90PmAuXG4gICAgICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgZ2V0Q29udGVudENoaWxkcmVuKHNsY3RyKSB7XG4gICAgICBsZXQgY2hpbGRyZW4gPSAvKiogQHR5cGUgeyFBcnJheTwhSFRNTEVsZW1lbnQ+fSAqLyh0aGlzLmdldENvbnRlbnRDaGlsZE5vZGVzKHNsY3RyKS5maWx0ZXIoZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gKG4ubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKTtcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciBhbiBlbGVtZW50IGlzIGluIHRoaXMgZWxlbWVudCdzIGxpZ2h0IERPTSB0cmVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gbm9kZSBUaGUgZWxlbWVudCB0byBiZSBjaGVja2VkLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgbm9kZSBpcyBpbiB0aGlzIGVsZW1lbnQncyBsaWdodCBET00gdHJlZS5cbiAgICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c30gTGVnYWN5RWxlbWVudE1peGluIG11c3QgYmUgYXBwbGllZCB0byBhblxuICAgICAqIEhUTUxFbGVtZW50XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgaXNMaWdodERlc2NlbmRhbnQobm9kZSkge1xuICAgICAgY29uc3QgdGhpc05vZGUgPSAvKiogQHR5cGUge05vZGV9ICovICh0aGlzKTtcbiAgICAgIHJldHVybiB0aGlzTm9kZSAhPT0gbm9kZSAmJiB3cmFwKHRoaXNOb2RlKS5jb250YWlucyhub2RlKSAmJlxuICAgICAgICB3cmFwKHRoaXNOb2RlKS5nZXRSb290Tm9kZSgpID09PSB3cmFwKG5vZGUpLmdldFJvb3ROb2RlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgYW4gZWxlbWVudCBpcyBpbiB0aGlzIGVsZW1lbnQncyBsb2NhbCBET00gdHJlZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUVsZW1lbnR9IG5vZGUgVGhlIGVsZW1lbnQgdG8gYmUgY2hlY2tlZC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIG5vZGUgaXMgaW4gdGhpcyBlbGVtZW50J3MgbG9jYWwgRE9NIHRyZWUuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgaXNMb2NhbERlc2NlbmRhbnQobm9kZSkge1xuICAgICAgcmV0dXJuIHRoaXMucm9vdCA9PT0gd3JhcChub2RlKS5nZXRSb290Tm9kZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE5vLW9wIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gVGhpcyBzaG91bGQgbm93IGJlIGhhbmRsZWQgYnlcbiAgICAgKiBTaGFkeUNzcyBsaWJyYXJ5LlxuICAgICAqIEBwYXJhbSAgeyFFbGVtZW50fSBjb250YWluZXIgQ29udGFpbmVyIGVsZW1lbnQgdG8gc2NvcGVcbiAgICAgKiBAcGFyYW0gIHtib29sZWFuPX0gc2hvdWxkT2JzZXJ2ZSBpZiB0cnVlLCBzdGFydCBhIG11dGF0aW9uIG9ic2VydmVyIGZvciBhZGRlZCBub2RlcyB0byB0aGUgY29udGFpbmVyXG4gICAgICogQHJldHVybiB7P011dGF0aW9uT2JzZXJ2ZXJ9IFJldHVybnMgYSBuZXcgTXV0YXRpb25PYnNlcnZlciBvbiBgY29udGFpbmVyYCBpZiBgc2hvdWxkT2JzZXJ2ZWAgaXMgdHJ1ZS5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBzY29wZVN1YnRyZWUoY29udGFpbmVyLCBzaG91bGRPYnNlcnZlID0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBzY29wZVN1YnRyZWUoY29udGFpbmVyLCBzaG91bGRPYnNlcnZlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb21wdXRlZCBzdHlsZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBUaGUgY3NzIHByb3BlcnR5IG5hbWUuXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb21wdXRlZCBjc3MgcHJvcGVydHkgdmFsdWUgZm9yIHRoZSBnaXZlblxuICAgICAqIGBwcm9wZXJ0eWAuXG4gICAgICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9IExlZ2FjeUVsZW1lbnRNaXhpbiBtdXN0IGJlIGFwcGxpZWQgdG8gYW5cbiAgICAgKiAgICAgSFRNTEVsZW1lbnRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBnZXRDb21wdXRlZFN0eWxlVmFsdWUocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiBzdHlsZUludGVyZmFjZS5nZXRDb21wdXRlZFN0eWxlVmFsdWUoLyoqIEB0eXBlIHshRWxlbWVudH0gKi8odGhpcyksIHByb3BlcnR5KTtcbiAgICB9XG5cbiAgICAvLyBkZWJvdW5jZVxuXG4gICAgLyoqXG4gICAgICogQ2FsbCBgZGVib3VuY2VgIHRvIGNvbGxhcHNlIG11bHRpcGxlIHJlcXVlc3RzIGZvciBhIG5hbWVkIHRhc2sgaW50b1xuICAgICAqIG9uZSBpbnZvY2F0aW9uIHdoaWNoIGlzIG1hZGUgYWZ0ZXIgdGhlIHdhaXQgdGltZSBoYXMgZWxhcHNlZCB3aXRoXG4gICAgICogbm8gbmV3IHJlcXVlc3QuICBJZiBubyB3YWl0IHRpbWUgaXMgZ2l2ZW4sIHRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZFxuICAgICAqIGF0IG1pY3JvdGFzayB0aW1pbmcgKGd1YXJhbnRlZWQgYmVmb3JlIHBhaW50KS5cbiAgICAgKlxuICAgICAqICAgICBkZWJvdW5jZWRDbGlja0FjdGlvbihlKSB7XG4gICAgICogICAgICAgLy8gd2lsbCBub3QgY2FsbCBgcHJvY2Vzc0NsaWNrYCBtb3JlIHRoYW4gb25jZSBwZXIgMTAwbXNcbiAgICAgKiAgICAgICB0aGlzLmRlYm91bmNlKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgICAgICB0aGlzLnByb2Nlc3NDbGljaygpO1xuICAgICAqICAgICAgIH0gMTAwKTtcbiAgICAgKiAgICAgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGpvYk5hbWUgU3RyaW5nIHRvIGlkZW50aWZ5IHRoZSBkZWJvdW5jZSBqb2IuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigpOnZvaWR9IGNhbGxiYWNrIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkICh3aXRoIGB0aGlzYFxuICAgICAqICAgY29udGV4dCkgd2hlbiB0aGUgd2FpdCB0aW1lIGVsYXBzZXMuXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSB3YWl0IE9wdGlvbmFsIHdhaXQgdGltZSBpbiBtaWxsaXNlY29uZHMgKG1zKSBhZnRlciB0aGVcbiAgICAgKiAgIGxhc3Qgc2lnbmFsIHRoYXQgbXVzdCBlbGFwc2UgYmVmb3JlIGludm9raW5nIGBjYWxsYmFja2BcbiAgICAgKiBAcmV0dXJuIHshT2JqZWN0fSBSZXR1cm5zIGEgZGVib3VuY2VyIG9iamVjdCBvbiB3aGljaCBleGlzdHMgdGhlXG4gICAgICogZm9sbG93aW5nIG1ldGhvZHM6IGBpc0FjdGl2ZSgpYCByZXR1cm5zIHRydWUgaWYgdGhlIGRlYm91bmNlciBpc1xuICAgICAqIGFjdGl2ZTsgYGNhbmNlbCgpYCBjYW5jZWxzIHRoZSBkZWJvdW5jZXIgaWYgaXQgaXMgYWN0aXZlO1xuICAgICAqIGBmbHVzaCgpYCBpbW1lZGlhdGVseSBpbnZva2VzIHRoZSBkZWJvdW5jZWQgY2FsbGJhY2sgaWYgdGhlIGRlYm91bmNlclxuICAgICAqIGlzIGFjdGl2ZS5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBkZWJvdW5jZShqb2JOYW1lLCBjYWxsYmFjaywgd2FpdCkge1xuICAgICAgdGhpcy5fZGVib3VuY2VycyA9IHRoaXMuX2RlYm91bmNlcnMgfHwge307XG4gICAgICByZXR1cm4gdGhpcy5fZGVib3VuY2Vyc1tqb2JOYW1lXSA9IERlYm91bmNlci5kZWJvdW5jZShcbiAgICAgICAgICAgIHRoaXMuX2RlYm91bmNlcnNbam9iTmFtZV1cbiAgICAgICAgICAsIHdhaXQgPiAwID8gdGltZU91dC5hZnRlcih3YWl0KSA6IG1pY3JvVGFza1xuICAgICAgICAgICwgY2FsbGJhY2suYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIGEgbmFtZWQgZGVib3VuY2VyIGlzIGFjdGl2ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBqb2JOYW1lIFRoZSBuYW1lIG9mIHRoZSBkZWJvdW5jZXIgc3RhcnRlZCB3aXRoIGBkZWJvdW5jZWBcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBkZWJvdW5jZXIgaXMgYWN0aXZlIChoYXMgbm90IHlldCBmaXJlZCkuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgaXNEZWJvdW5jZXJBY3RpdmUoam9iTmFtZSkge1xuICAgICAgdGhpcy5fZGVib3VuY2VycyA9IHRoaXMuX2RlYm91bmNlcnMgfHwge307XG4gICAgICBsZXQgZGVib3VuY2VyID0gdGhpcy5fZGVib3VuY2Vyc1tqb2JOYW1lXTtcbiAgICAgIHJldHVybiAhIShkZWJvdW5jZXIgJiYgZGVib3VuY2VyLmlzQWN0aXZlKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEltbWVkaWF0ZWx5IGNhbGxzIHRoZSBkZWJvdW5jZXIgYGNhbGxiYWNrYCBhbmQgaW5hY3RpdmF0ZXMgaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gam9iTmFtZSBUaGUgbmFtZSBvZiB0aGUgZGVib3VuY2VyIHN0YXJ0ZWQgd2l0aCBgZGVib3VuY2VgXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBmbHVzaERlYm91bmNlcihqb2JOYW1lKSB7XG4gICAgICB0aGlzLl9kZWJvdW5jZXJzID0gdGhpcy5fZGVib3VuY2VycyB8fCB7fTtcbiAgICAgIGxldCBkZWJvdW5jZXIgPSB0aGlzLl9kZWJvdW5jZXJzW2pvYk5hbWVdO1xuICAgICAgaWYgKGRlYm91bmNlcikge1xuICAgICAgICBkZWJvdW5jZXIuZmx1c2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIGFuIGFjdGl2ZSBkZWJvdW5jZXIuICBUaGUgYGNhbGxiYWNrYCB3aWxsIG5vdCBiZSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gam9iTmFtZSBUaGUgbmFtZSBvZiB0aGUgZGVib3VuY2VyIHN0YXJ0ZWQgd2l0aCBgZGVib3VuY2VgXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBjYW5jZWxEZWJvdW5jZXIoam9iTmFtZSkge1xuICAgICAgdGhpcy5fZGVib3VuY2VycyA9IHRoaXMuX2RlYm91bmNlcnMgfHwge307XG4gICAgICBsZXQgZGVib3VuY2VyID0gdGhpcy5fZGVib3VuY2Vyc1tqb2JOYW1lXTtcbiAgICAgIGlmIChkZWJvdW5jZXIpIHtcbiAgICAgICAgZGVib3VuY2VyLmNhbmNlbCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJ1bnMgYSBjYWxsYmFjayBmdW5jdGlvbiBhc3luY2hyb25vdXNseS5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQgKGlmIG5vIHdhaXRUaW1lIGlzIHNwZWNpZmllZCksIGFzeW5jIGNhbGxiYWNrcyBhcmUgcnVuIGF0XG4gICAgICogbWljcm90YXNrIHRpbWluZywgd2hpY2ggd2lsbCBvY2N1ciBiZWZvcmUgcGFpbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIHJ1biwgYm91bmQgdG9cbiAgICAgKiAgICAgYHRoaXNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gd2FpdFRpbWUgVGltZSB0byB3YWl0IGJlZm9yZSBjYWxsaW5nIHRoZVxuICAgICAqICAgYGNhbGxiYWNrYC4gIElmIHVuc3BlY2lmaWVkIG9yIDAsIHRoZSBjYWxsYmFjayB3aWxsIGJlIHJ1biBhdCBtaWNyb3Rhc2tcbiAgICAgKiAgIHRpbWluZyAoYmVmb3JlIHBhaW50KS5cbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IEhhbmRsZSB0aGF0IG1heSBiZSB1c2VkIHRvIGNhbmNlbCB0aGUgYXN5bmMgam9iLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGFzeW5jKGNhbGxiYWNrLCB3YWl0VGltZSkge1xuICAgICAgcmV0dXJuIHdhaXRUaW1lID4gMCA/IHRpbWVPdXQucnVuKGNhbGxiYWNrLmJpbmQodGhpcyksIHdhaXRUaW1lKSA6XG4gICAgICAgICAgfm1pY3JvVGFzay5ydW4oY2FsbGJhY2suYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FuY2VscyBhbiBhc3luYyBvcGVyYXRpb24gc3RhcnRlZCB3aXRoIGBhc3luY2AuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGFuZGxlIEhhbmRsZSByZXR1cm5lZCBmcm9tIG9yaWdpbmFsIGBhc3luY2AgY2FsbCB0b1xuICAgICAqICAgY2FuY2VsLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgY2FuY2VsQXN5bmMoaGFuZGxlKSB7XG4gICAgICBoYW5kbGUgPCAwID8gbWljcm9UYXNrLmNhbmNlbCh+aGFuZGxlKSA6XG4gICAgICAgICAgdGltZU91dC5jYW5jZWwoaGFuZGxlKTtcbiAgICB9XG5cbiAgICAvLyBvdGhlclxuXG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBjcmVhdGluZyBhbiBlbGVtZW50IGFuZCBjb25maWd1cmluZyBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgSFRNTCBlbGVtZW50IHRhZyB0byBjcmVhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wcyBPYmplY3Qgb2YgcHJvcGVydGllcyB0byBjb25maWd1cmUgb24gdGhlXG4gICAgICogICAgaW5zdGFuY2UuXG4gICAgICogQHJldHVybiB7IUVsZW1lbnR9IE5ld2x5IGNyZWF0ZWQgYW5kIGNvbmZpZ3VyZWQgZWxlbWVudC5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBjcmVhdGUodGFnLCBwcm9wcykge1xuICAgICAgbGV0IGVsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgICAgIGlmIChwcm9wcykge1xuICAgICAgICBpZiAoZWx0LnNldFByb3BlcnRpZXMpIHtcbiAgICAgICAgICBlbHQuc2V0UHJvcGVydGllcyhwcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChsZXQgbiBpbiBwcm9wcykge1xuICAgICAgICAgICAgZWx0W25dID0gcHJvcHNbbl07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvbHlmaWxsIGZvciBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzLCB3aGljaCBpcyBzb21ldGltZXMgc3RpbGxcbiAgICAgKiBwcmVmaXhlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciBTZWxlY3RvciB0byB0ZXN0LlxuICAgICAqIEBwYXJhbSB7IUVsZW1lbnQ9fSBub2RlIEVsZW1lbnQgdG8gdGVzdCB0aGUgc2VsZWN0b3IgYWdhaW5zdC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBlbGVtZW50IG1hdGNoZXMgdGhlIHNlbGVjdG9yLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGVsZW1lbnRNYXRjaGVzKHNlbGVjdG9yLCBub2RlKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlc1NlbGVjdG9yKCAobm9kZSB8fCB0aGlzKSwgc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgYW4gSFRNTCBhdHRyaWJ1dGUgb24gb3Igb2ZmLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgSFRNTCBhdHRyaWJ1dGUgbmFtZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGJvb2wgQm9vbGVhbiB0byBmb3JjZSB0aGUgYXR0cmlidXRlIG9uIG9yIG9mZi5cbiAgICAgKiAgICBXaGVuIHVuc3BlY2lmaWVkLCB0aGUgc3RhdGUgb2YgdGhlIGF0dHJpYnV0ZSB3aWxsIGJlIHJldmVyc2VkLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIGF0dHJpYnV0ZSBub3cgZXhpc3RzXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgdG9nZ2xlQXR0cmlidXRlKG5hbWUsIGJvb2wpIHtcbiAgICAgIGxldCBub2RlID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyh0aGlzKTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICAgIG5vZGUgPSAvKiogQHR5cGUge0VsZW1lbnR9ICovKGFyZ3VtZW50c1syXSk7XG4gICAgICB9XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIGJvb2wgPSAhbm9kZS5oYXNBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAoYm9vbCkge1xuICAgICAgICB3cmFwKG5vZGUpLnNldEF0dHJpYnV0ZShuYW1lLCAnJyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcChub2RlKS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgYSBDU1MgY2xhc3Mgb24gb3Igb2ZmLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQ1NTIGNsYXNzIG5hbWVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBib29sIEJvb2xlYW4gdG8gZm9yY2UgdGhlIGNsYXNzIG9uIG9yIG9mZi5cbiAgICAgKiAgICBXaGVuIHVuc3BlY2lmaWVkLCB0aGUgc3RhdGUgb2YgdGhlIGNsYXNzIHdpbGwgYmUgcmV2ZXJzZWQuXG4gICAgICogQHBhcmFtIHtFbGVtZW50PX0gbm9kZSBOb2RlIHRvIHRhcmdldC4gIERlZmF1bHRzIHRvIGB0aGlzYC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIHRvZ2dsZUNsYXNzKG5hbWUsIGJvb2wsIG5vZGUpIHtcbiAgICAgIG5vZGUgPSAvKiogQHR5cGUge0VsZW1lbnR9ICovIChub2RlIHx8IHRoaXMpO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkge1xuICAgICAgICBib29sID0gIW5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpO1xuICAgICAgfVxuICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKG5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyb3NzLXBsYXRmb3JtIGhlbHBlciBmb3Igc2V0dGluZyBhbiBlbGVtZW50J3MgQ1NTIGB0cmFuc2Zvcm1gIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRyYW5zZm9ybVRleHQgVHJhbnNmb3JtIHNldHRpbmcuXG4gICAgICogQHBhcmFtIHtFbGVtZW50PX0gbm9kZSBFbGVtZW50IHRvIGFwcGx5IHRoZSB0cmFuc2Zvcm0gdG8uXG4gICAgICogRGVmYXVsdHMgdG8gYHRoaXNgXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICB0cmFuc2Zvcm0odHJhbnNmb3JtVGV4dCwgbm9kZSkge1xuICAgICAgbm9kZSA9IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKG5vZGUgfHwgdGhpcyk7XG4gICAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybVRleHQ7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVRleHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3Jvc3MtcGxhdGZvcm0gaGVscGVyIGZvciBzZXR0aW5nIGFuIGVsZW1lbnQncyBDU1MgYHRyYW5zbGF0ZTNkYFxuICAgICAqIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB4IFggb2Zmc2V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30geSBZIG9mZnNldC5cbiAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHogWiBvZmZzZXQuXG4gICAgICogQHBhcmFtIHtFbGVtZW50PX0gbm9kZSBFbGVtZW50IHRvIGFwcGx5IHRoZSB0cmFuc2Zvcm0gdG8uXG4gICAgICogRGVmYXVsdHMgdG8gYHRoaXNgLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgdHJhbnNsYXRlM2QoeCwgeSwgeiwgbm9kZSkge1xuICAgICAgbm9kZSA9IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKG5vZGUgfHwgdGhpcyk7XG4gICAgICB0aGlzLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoJyArIHggKyAnLCcgKyB5ICsgJywnICsgeiArICcpJywgbm9kZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbiBpdGVtIGZyb20gYW4gYXJyYXksIGlmIGl0IGV4aXN0cy5cbiAgICAgKlxuICAgICAqIElmIHRoZSBhcnJheSBpcyBzcGVjaWZpZWQgYnkgcGF0aCwgYSBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlzXG4gICAgICogZ2VuZXJhdGVkLCBzbyB0aGF0IG9ic2VydmVycywgZGF0YSBiaW5kaW5ncyBhbmQgY29tcHV0ZWRcbiAgICAgKiBwcm9wZXJ0aWVzIHdhdGNoaW5nIHRoYXQgcGF0aCBjYW4gdXBkYXRlLlxuICAgICAqXG4gICAgICogSWYgdGhlIGFycmF5IGlzIHBhc3NlZCBkaXJlY3RseSwgKipubyBjaGFuZ2VcbiAgICAgKiBub3RpZmljYXRpb24gaXMgZ2VuZXJhdGVkKiouXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxudW1iZXJ8c3RyaW5nPn0gYXJyYXlPclBhdGggUGF0aCB0byBhcnJheSBmcm9tXG4gICAgICogICAgIHdoaWNoIHRvIHJlbW92ZSB0aGUgaXRlbVxuICAgICAqICAgKG9yIHRoZSBhcnJheSBpdHNlbGYpLlxuICAgICAqIEBwYXJhbSB7Kn0gaXRlbSBJdGVtIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgY29udGFpbmluZyBpdGVtIHJlbW92ZWQuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgYXJyYXlEZWxldGUoYXJyYXlPclBhdGgsIGl0ZW0pIHtcbiAgICAgIGxldCBpbmRleDtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFycmF5T3JQYXRoKSkge1xuICAgICAgICBpbmRleCA9IGFycmF5T3JQYXRoLmluZGV4T2YoaXRlbSk7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGFycmF5T3JQYXRoLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBhcnIgPSBnZXQodGhpcywgYXJyYXlPclBhdGgpO1xuICAgICAgICBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnNwbGljZShhcnJheU9yUGF0aCwgaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBsb2dnaW5nXG5cbiAgICAvKipcbiAgICAgKiBGYWNhZGVzIGBjb25zb2xlLmxvZ2AvYHdhcm5gL2BlcnJvcmAgYXMgb3ZlcnJpZGUgcG9pbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWwgT25lIG9mICdsb2cnLCAnd2FybicsICdlcnJvcidcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIEFycmF5IG9mIHN0cmluZ3Mgb3Igb2JqZWN0cyB0byBsb2dcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9sb2dnZXIobGV2ZWwsIGFyZ3MpIHtcbiAgICAgIC8vIGFjY2VwdCBbJ2ZvbycsICdiYXInXSBhbmQgW1snZm9vJywgJ2JhciddXVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykgJiYgYXJncy5sZW5ndGggPT09IDEgJiYgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgICBhcmdzID0gYXJnc1swXTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaChsZXZlbCkge1xuICAgICAgICBjYXNlICdsb2cnOlxuICAgICAgICBjYXNlICd3YXJuJzpcbiAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgIGNvbnNvbGVbbGV2ZWxdKC4uLmFyZ3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZhY2FkZXMgYGNvbnNvbGUubG9nYCBhcyBhbiBvdmVycmlkZSBwb2ludC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyBBcnJheSBvZiBzdHJpbmdzIG9yIG9iamVjdHMgdG8gbG9nXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfbG9nKC4uLmFyZ3MpIHtcbiAgICAgIHRoaXMuX2xvZ2dlcignbG9nJywgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmFjYWRlcyBgY29uc29sZS53YXJuYCBhcyBhbiBvdmVycmlkZSBwb2ludC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyBBcnJheSBvZiBzdHJpbmdzIG9yIG9iamVjdHMgdG8gbG9nXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfd2FybiguLi5hcmdzKSB7XG4gICAgICB0aGlzLl9sb2dnZXIoJ3dhcm4nLCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGYWNhZGVzIGBjb25zb2xlLmVycm9yYCBhcyBhbiBvdmVycmlkZSBwb2ludC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyBBcnJheSBvZiBzdHJpbmdzIG9yIG9iamVjdHMgdG8gbG9nXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfZXJyb3IoLi4uYXJncykge1xuICAgICAgdGhpcy5fbG9nZ2VyKCdlcnJvcicsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvcm1hdHMgYSBtZXNzYWdlIHVzaW5nIHRoZSBlbGVtZW50IHR5cGUgYW4gYSBtZXRob2QgbmFtZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIE1ldGhvZCBuYW1lIHRvIGFzc29jaWF0ZSB3aXRoIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgQXJyYXkgb2Ygc3RyaW5ncyBvciBvYmplY3RzIHRvIGxvZ1xuICAgICAqIEByZXR1cm4geyFBcnJheX0gQXJyYXkgd2l0aCBmb3JtYXR0aW5nIGluZm9ybWF0aW9uIGZvciBgY29uc29sZWBcbiAgICAgKiAgIGxvZ2dpbmcuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2xvZ2YobWV0aG9kTmFtZSwgLi4uYXJncykge1xuICAgICAgcmV0dXJuIFsnWyVzOjolc10nLCB0aGlzLmlzLCBtZXRob2ROYW1lLCAuLi5hcmdzXTtcbiAgICB9XG5cbiAgfVxuXG4gIExlZ2FjeUVsZW1lbnQucHJvdG90eXBlLmlzID0gJyc7XG5cbiAgcmV0dXJuIExlZ2FjeUVsZW1lbnQ7XG59KTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbmltcG9ydCB7IExlZ2FjeUVsZW1lbnRNaXhpbiB9IGZyb20gJy4vbGVnYWN5LWVsZW1lbnQtbWl4aW4uanMnO1xuaW1wb3J0IHsgbGVnYWN5T3B0aW1pemF0aW9ucyB9IGZyb20gJy4uL3V0aWxzL3NldHRpbmdzLmpzJztcblxuY29uc3QgbGlmZWN5Y2xlUHJvcHMgPSB7XG4gIGF0dGFjaGVkOiB0cnVlLFxuICBkZXRhY2hlZDogdHJ1ZSxcbiAgcmVhZHk6IHRydWUsXG4gIGNyZWF0ZWQ6IHRydWUsXG4gIGJlZm9yZVJlZ2lzdGVyOiB0cnVlLFxuICByZWdpc3RlcmVkOiB0cnVlLFxuICBhdHRyaWJ1dGVDaGFuZ2VkOiB0cnVlLFxuICBsaXN0ZW5lcnM6IHRydWUsXG4gIGhvc3RBdHRyaWJ1dGVzOiB0cnVlXG59O1xuXG5jb25zdCBleGNsdWRlT25JbmZvID0ge1xuICBhdHRhY2hlZDogdHJ1ZSxcbiAgZGV0YWNoZWQ6IHRydWUsXG4gIHJlYWR5OiB0cnVlLFxuICBjcmVhdGVkOiB0cnVlLFxuICBiZWZvcmVSZWdpc3RlcjogdHJ1ZSxcbiAgcmVnaXN0ZXJlZDogdHJ1ZSxcbiAgYXR0cmlidXRlQ2hhbmdlZDogdHJ1ZSxcbiAgYmVoYXZpb3JzOiB0cnVlLFxuICBfbm9BY2Nlc3NvcnM6IHRydWVcbn07XG5cbmNvbnN0IGV4Y2x1ZGVPbkJlaGF2aW9ycyA9IE9iamVjdC5hc3NpZ24oe1xuICBsaXN0ZW5lcnM6IHRydWUsXG4gIGhvc3RBdHRyaWJ1dGVzOiB0cnVlLFxuICBwcm9wZXJ0aWVzOiB0cnVlLFxuICBvYnNlcnZlcnM6IHRydWUsXG59LCBleGNsdWRlT25JbmZvKTtcblxuZnVuY3Rpb24gY29weVByb3BlcnRpZXMoc291cmNlLCB0YXJnZXQsIGV4Y2x1ZGVQcm9wcykge1xuICBjb25zdCBub0FjY2Vzc29ycyA9IHNvdXJjZS5fbm9BY2Nlc3NvcnM7XG4gIGNvbnN0IHByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2UpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BlcnR5TmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgcCA9IHByb3BlcnR5TmFtZXNbaV07XG4gICAgaWYgKHAgaW4gZXhjbHVkZVByb3BzKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG5vQWNjZXNzb3JzKSB7XG4gICAgICB0YXJnZXRbcF0gPSBzb3VyY2VbcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBwKTtcbiAgICAgIGlmIChwZCkge1xuICAgICAgICAvLyBlbnN1cmUgcHJvcGVydHkgaXMgY29uZmlndXJhYmxlIHNvIHRoYXQgYSBsYXRlciBiZWhhdmlvciBjYW5cbiAgICAgICAgLy8gcmUtY29uZmlndXJlIGl0LlxuICAgICAgICBwZC5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwLCBwZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQXBwbGllcyBhIFwibGVnYWN5XCIgYmVoYXZpb3Igb3IgYXJyYXkgb2YgYmVoYXZpb3JzIHRvIHRoZSBwcm92aWRlZCBjbGFzcy5cbiAqXG4gKiBOb3RlOiB0aGlzIG1ldGhvZCB3aWxsIGF1dG9tYXRpY2FsbHkgYWxzbyBhcHBseSB0aGUgYExlZ2FjeUVsZW1lbnRNaXhpbmBcbiAqIHRvIGVuc3VyZSB0aGF0IGFueSBsZWdhY3kgYmVoYXZpb3JzIGNhbiByZWx5IG9uIGxlZ2FjeSBQb2x5bWVyIEFQSSBvblxuICogdGhlIHVuZGVybHlpbmcgZWxlbWVudC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0geyFPYmplY3R8IUFycmF5PCFPYmplY3Q+fSBiZWhhdmlvcnMgQmVoYXZpb3Igb2JqZWN0IG9yIGFycmF5IG9mIGJlaGF2aW9ycy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3OlQpfSBrbGFzcyBFbGVtZW50IGNsYXNzLlxuICogQHJldHVybiB7P30gUmV0dXJucyBhIG5ldyBFbGVtZW50IGNsYXNzIGV4dGVuZGVkIGJ5IHRoZVxuICogcGFzc2VkIGluIGBiZWhhdmlvcnNgIGFuZCBhbHNvIGJ5IGBMZWdhY3lFbGVtZW50TWl4aW5gLlxuICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHMsIGNoZWNrVHlwZXN9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtaXhpbkJlaGF2aW9ycyhiZWhhdmlvcnMsIGtsYXNzKSB7XG4gIHJldHVybiBHZW5lcmF0ZUNsYXNzRnJvbUluZm8oe30sIExlZ2FjeUVsZW1lbnRNaXhpbihrbGFzcyksIGJlaGF2aW9ycyk7XG59XG5cbi8vIE5PVEU6XG4vLyAxLnhcbi8vIEJlaGF2aW9ycyB3ZXJlIG1peGVkIGluICppbiByZXZlcnNlIG9yZGVyKiBhbmQgZGUtZHVwZWQgb24gdGhlIGZseS5cbi8vIFRoZSBydWxlIHdhcyB0aGF0IGJlaGF2aW9yIHByb3BlcnRpZXMgd2VyZSBjb3BpZWQgb250byB0aGUgZWxlbWVudFxuLy8gcHJvdG90eXBlIGlmIGFuZCBvbmx5IGlmIHRoZSBwcm9wZXJ0eSBkaWQgbm90IGFscmVhZHkgZXhpc3QuXG4vLyBHaXZlbjogUG9seW1lcnsgYmVoYXZpb3JzOiBbQSwgQiwgQywgQSwgQl19LCBwcm9wZXJ0eSBjb3B5IG9yZGVyIHdhczpcbi8vICgxKSwgQiwgKDIpLCBBLCAoMykgQy4gVGhpcyBtZWFucyBwcm90b3R5cGUgcHJvcGVydGllcyB3aW4gb3ZlclxuLy8gQiBwcm9wZXJ0aWVzIHdpbiBvdmVyIEEgd2luIG92ZXIgQy4gVGhpcyBtaXJyb3JzIHdoYXQgd291bGQgaGFwcGVuXG4vLyB3aXRoIGluaGVyaXRhbmNlIGlmIGVsZW1lbnQgZXh0ZW5kZWQgQiBleHRlbmRlZCBBIGV4dGVuZGVkIEMuXG4vL1xuLy8gQWdhaW4gZ2l2ZW4sIFBvbHltZXJ7IGJlaGF2aW9yczogW0EsIEIsIEMsIEEsIEJdfSwgdGhlIHJlc3VsdGluZ1xuLy8gYGJlaGF2aW9yc2AgYXJyYXkgd2FzIFtDLCBBLCBCXS5cbi8vIEJlaGF2aW9yIGxpZmVjeWNsZSBtZXRob2RzIHdlcmUgY2FsbGVkIGluIGJlaGF2aW9yIGFycmF5IG9yZGVyXG4vLyBmb2xsb3dlZCBieSB0aGUgZWxlbWVudCwgZS5nLiAoMSkgQy5jcmVhdGVkLCAoMikgQS5jcmVhdGVkLFxuLy8gKDMpIEIuY3JlYXRlZCwgKDQpIGVsZW1lbnQuY3JlYXRlZC4gVGhlcmUgd2FzIG5vIHN1cHBvcnQgZm9yXG4vLyBzdXBlciwgYW5kIFwic3VwZXItYmVoYXZpb3JcIiBtZXRob2RzIHdlcmUgY2FsbGFibGUgb25seSBieSBuYW1lKS5cbi8vXG4vLyAyLnhcbi8vIEJlaGF2aW9ycyBhcmUgbWFkZSBpbnRvIHByb3BlciBtaXhpbnMgd2hpY2ggbGl2ZSBpbiB0aGVcbi8vIGVsZW1lbnQncyBwcm90b3R5cGUgY2hhaW4uIEJlaGF2aW9ycyBhcmUgcGxhY2VkIGluIHRoZSBlbGVtZW50IHByb3RvdHlwZVxuLy8gZWxkZXN0IHRvIHlvdW5nZXN0IGFuZCBkZS1kdXBlZCB5b3VuZ2VzdCB0byBvbGRlc3Q6XG4vLyBTbywgZmlyc3QgW0EsIEIsIEMsIEEsIEJdIGJlY29tZXMgW0MsIEEsIEJdIHRoZW4sXG4vLyB0aGUgZWxlbWVudCBwcm90b3R5cGUgYmVjb21lcyAob2xkZXN0KSAoMSkgUG9seW1lckVsZW1lbnQsICgyKSBjbGFzcyhDKSxcbi8vICgzKSBjbGFzcyhBKSwgKDQpIGNsYXNzKEIpLCAoNSkgY2xhc3MoUG9seW1lcih7Li4ufSkpLlxuLy8gUmVzdWx0OlxuLy8gVGhpcyBtZWFucyBlbGVtZW50IHByb3BlcnRpZXMgd2luIG92ZXIgQiBwcm9wZXJ0aWVzIHdpbiBvdmVyIEEgd2luXG4vLyBvdmVyIEMuIChzYW1lIGFzIDEueClcbi8vIElmIGxpZmVjeWNsZSBpcyBjYWxsZWQgKHN1cGVyIHRoZW4gbWUpLCBvcmRlciBpc1xuLy8gKDEpIEMuY3JlYXRlZCwgKDIpIEEuY3JlYXRlZCwgKDMpIEIuY3JlYXRlZCwgKDQpIGVsZW1lbnQuY3JlYXRlZFxuLy8gKGFnYWluIHNhbWUgYXMgMS54KVxuZnVuY3Rpb24gYXBwbHlCZWhhdmlvcnMocHJvdG8sIGJlaGF2aW9ycywgbGlmZWN5Y2xlKSB7XG4gIGZvciAobGV0IGk9MDsgaTxiZWhhdmlvcnMubGVuZ3RoOyBpKyspIHtcbiAgICBhcHBseUluZm8ocHJvdG8sIGJlaGF2aW9yc1tpXSwgbGlmZWN5Y2xlLCBleGNsdWRlT25CZWhhdmlvcnMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5SW5mbyhwcm90bywgaW5mbywgbGlmZWN5Y2xlLCBleGNsdWRlUHJvcHMpIHtcbiAgY29weVByb3BlcnRpZXMoaW5mbywgcHJvdG8sIGV4Y2x1ZGVQcm9wcyk7XG4gIGZvciAobGV0IHAgaW4gbGlmZWN5Y2xlUHJvcHMpIHtcbiAgICBpZiAoaW5mb1twXSkge1xuICAgICAgbGlmZWN5Y2xlW3BdID0gbGlmZWN5Y2xlW3BdIHx8IFtdO1xuICAgICAgbGlmZWN5Y2xlW3BdLnB1c2goaW5mb1twXSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheX0gYmVoYXZpb3JzIExpc3Qgb2YgYmVoYXZpb3JzIHRvIGZsYXR0ZW4uXG4gKiBAcGFyYW0ge0FycmF5PX0gbGlzdCBUYXJnZXQgbGlzdCB0byBmbGF0dGVuIGJlaGF2aW9ycyBpbnRvLlxuICogQHBhcmFtIHtBcnJheT19IGV4Y2x1ZGUgTGlzdCBvZiBiZWhhdmlvcnMgdG8gZXhjbHVkZSBmcm9tIHRoZSBsaXN0LlxuICogQHJldHVybiB7IUFycmF5fSBSZXR1cm5zIHRoZSBsaXN0IG9mIGZsYXR0ZW5lZCBiZWhhdmlvcnMuXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5CZWhhdmlvcnMoYmVoYXZpb3JzLCBsaXN0LCBleGNsdWRlKSB7XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICBmb3IgKGxldCBpPWJlaGF2aW9ycy5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBsZXQgYiA9IGJlaGF2aW9yc1tpXTtcbiAgICBpZiAoYikge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYikpIHtcbiAgICAgICAgZmxhdHRlbkJlaGF2aW9ycyhiLCBsaXN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZHVwXG4gICAgICAgIGlmIChsaXN0LmluZGV4T2YoYikgPCAwICYmICghZXhjbHVkZSB8fCBleGNsdWRlLmluZGV4T2YoYikgPCAwKSkge1xuICAgICAgICAgIGxpc3QudW5zaGlmdChiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2JlaGF2aW9yIGlzIG51bGwsIGNoZWNrIGZvciBtaXNzaW5nIG9yIDQwNCBpbXBvcnQnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxpc3Q7XG59XG5cbi8qKlxuICogQ29waWVzIHByb3BlcnR5IGRlc2NyaXB0b3JzIGZyb20gc291cmNlIHRvIHRhcmdldCwgb3ZlcndyaXRpbmcgYWxsIGZpZWxkc1xuICogb2YgYW55IHByZXZpb3VzIGRlc2NyaXB0b3IgZm9yIGEgcHJvcGVydHkgKmV4Y2VwdCogZm9yIGB2YWx1ZWAsIHdoaWNoIGlzXG4gKiBtZXJnZWQgaW4gZnJvbSB0aGUgdGFyZ2V0IGlmIGl0IGRvZXMgbm90IGV4aXN0IG9uIHRoZSBzb3VyY2UuXG4gKlxuICogQHBhcmFtIHsqfSB0YXJnZXQgVGFyZ2V0IHByb3BlcnRpZXMgb2JqZWN0XG4gKiBAcGFyYW0geyp9IHNvdXJjZSBTb3VyY2UgcHJvcGVydGllcyBvYmplY3RcbiAqL1xuZnVuY3Rpb24gbWVyZ2VQcm9wZXJ0aWVzKHRhcmdldCwgc291cmNlKSB7XG4gIGZvciAoY29uc3QgcCBpbiBzb3VyY2UpIHtcbiAgICBjb25zdCB0YXJnZXRJbmZvID0gdGFyZ2V0W3BdO1xuICAgIGNvbnN0IHNvdXJjZUluZm8gPSBzb3VyY2VbcF07XG4gICAgaWYgKCEoJ3ZhbHVlJyBpbiBzb3VyY2VJbmZvKSAmJiB0YXJnZXRJbmZvICYmICgndmFsdWUnIGluIHRhcmdldEluZm8pKSB7XG4gICAgICB0YXJnZXRbcF0gPSBPYmplY3QuYXNzaWduKHt2YWx1ZTogdGFyZ2V0SW5mby52YWx1ZX0sIHNvdXJjZUluZm8pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRbcF0gPSBzb3VyY2VJbmZvO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBMZWdhY3lFbGVtZW50ID0gTGVnYWN5RWxlbWVudE1peGluKEhUTUxFbGVtZW50KTtcblxuLyogTm90ZSBhYm91dCBjb25zdHJ1Y3Rpb24gYW5kIGV4dGVuc2lvbiBvZiBsZWdhY3kgY2xhc3Nlcy5cbiAgW0NoYW5nZWQgaW4gUTQgMjAxOCB0byBvcHRpbWl6ZSBwZXJmb3JtYW5jZS5dXG5cbiAgV2hlbiBjYWxsaW5nIGBQb2x5bWVyYCBvciBgbWl4aW5CZWhhdmlvcnNgLCB0aGUgZ2VuZXJhdGVkIGNsYXNzIGJlbG93IGlzXG4gIG1hZGUuIFRoZSBsaXN0IG9mIGJlaGF2aW9ycyB3YXMgcHJldmlvdXNseSBtYWRlIGludG8gb25lIGdlbmVyYXRlZCBjbGFzcyBwZXJcbiAgYmVoYXZpb3IsIGJ1dCB0aGlzIGlzIG5vIGxvbmdlciB0aGUgY2FzZSBhcyBiZWhhdmlvcnMgYXJlIG5vdyBjYWxsZWRcbiAgbWFudWFsbHkuIE5vdGUsIHRoZXJlIG1heSAqc3RpbGwqIGJlIG11bHRpcGxlIGdlbmVyYXRlZCBjbGFzc2VzIGluIHRoZVxuICBlbGVtZW50J3MgcHJvdG90eXBlIGNoYWluIGlmIGV4dGVuc2lvbiBpcyB1c2VkIHdpdGggYG1peGluQmVoYXZpb3JzYC5cblxuICBUaGUgZ2VuZXJhdGVkIGNsYXNzIGlzIGRpcmVjdGx5IHRpZWQgdG8gdGhlIGluZm8gb2JqZWN0IGFuZCBiZWhhdmlvcnNcbiAgdXNlZCB0byBjcmVhdGUgaXQuIFRoYXQgbGlzdCBvZiBiZWhhdmlvcnMgaXMgZmlsdGVyZWQgc28gaXQncyBvbmx5IHRoZVxuICBiZWhhdmlvcnMgbm90IGFjdGl2ZSBvbiB0aGUgc3VwZXJjbGFzcy4gSW4gb3JkZXIgdG8gY2FsbCB0aHJvdWdoIHRvIHRoZVxuICBlbnRpcmUgbGlzdCBvZiBsaWZlY3ljbGUgbWV0aG9kcywgaXQncyBpbXBvcnRhbnQgdG8gY2FsbCBgc3VwZXJgLlxuXG4gIFRoZSBlbGVtZW50J3MgYHByb3BlcnRpZXNgIGFuZCBgb2JzZXJ2ZXJzYCBhcmUgY29udHJvbGxlZCB2aWEgdGhlIGZpbmFsaXphdGlvblxuICBtZWNoYW5pc20gcHJvdmlkZWQgYnkgYFByb3BlcnRpZXNNaXhpbmAuIGBQcm9wZXJ0aWVzYCBhbmQgYG9ic2VydmVyc2AgYXJlXG4gIGNvbGxlY3RlZCBieSBtYW51YWxseSB0cmF2ZXJzaW5nIHRoZSBwcm90b3R5cGUgY2hhaW4gYW5kIG1lcmdpbmcuXG5cbiAgVG8gbGltaXQgY2hhbmdlcywgdGhlIGBfcmVnaXN0ZXJlZGAgbWV0aG9kIGlzIGNhbGxlZCB2aWEgYF9pbml0aWFsaXplUHJvcGVydGllc2BcbiAgYW5kIG5vdCBgX2ZpbmFsaXplQ2xhc3NgLlxuXG4qL1xuLyoqXG4gKiBAcGFyYW0geyFQb2x5bWVySW5pdH0gaW5mbyBQb2x5bWVyIGluZm8gb2JqZWN0XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpIVE1MRWxlbWVudCl9IEJhc2UgYmFzZSBjbGFzcyB0byBleHRlbmQgd2l0aCBpbmZvIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3Q9fSBiZWhhdmlvcnMgYmVoYXZpb3JzIHRvIGNvcHkgaW50byB0aGUgZWxlbWVudFxuICogQHJldHVybiB7ZnVuY3Rpb24obmV3OkhUTUxFbGVtZW50KX0gR2VuZXJhdGVkIGNsYXNzXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBHZW5lcmF0ZUNsYXNzRnJvbUluZm8oaW5mbywgQmFzZSwgYmVoYXZpb3JzKSB7XG5cbiAgLy8gbWFuYWdlcyBiZWhhdmlvciBhbmQgbGlmZWN5Y2xlIHByb2Nlc3NpbmcgKGZpbGxlZCBpbiBhZnRlciBjbGFzcyBkZWZpbml0aW9uKVxuICBsZXQgYmVoYXZpb3JMaXN0O1xuICBjb25zdCBsaWZlY3ljbGUgPSB7fTtcblxuICAvKiogQHByaXZhdGUgKi9cbiAgY2xhc3MgUG9seW1lckdlbmVyYXRlZCBleHRlbmRzIEJhc2Uge1xuXG4gICAgLy8gZXhwbGljaXRseSBub3QgY2FsbGluZyBzdXBlci5fZmluYWxpemVDbGFzc1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHN0YXRpYyBfZmluYWxpemVDbGFzcygpIHtcbiAgICAgIC8vIGlmIGNhbGxpbmcgdmlhIGEgc3ViY2xhc3MgdGhhdCBoYXNuJ3QgYmVlbiBnZW5lcmF0ZWQsIHBhc3MgdGhyb3VnaCB0byBzdXBlclxuICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ2dlbmVyYXRlZEZyb20nLCB0aGlzKSkpIHtcbiAgICAgICAgLy8gVE9ETyhodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMyNDApOlxuICAgICAgICAvLyAgICAgQ2hhbmdlIGJhY2sgdG8ganVzdCBzdXBlci5tZXRob2RDYWxsKClcbiAgICAgICAgQmFzZS5fZmluYWxpemVDbGFzcy5jYWxsKHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaW50ZXJsZWF2ZSBwcm9wZXJ0aWVzIGFuZCBvYnNlcnZlcnMgcGVyIGJlaGF2aW9yIGFuZCBgaW5mb2BcbiAgICAgICAgaWYgKGJlaGF2aW9yTGlzdCkge1xuICAgICAgICAgIGZvciAobGV0IGk9MCwgYjsgaSA8IGJlaGF2aW9yTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYiA9IGJlaGF2aW9yTGlzdFtpXTtcbiAgICAgICAgICAgIGlmIChiLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgdGhpcy5jcmVhdGVQcm9wZXJ0aWVzKGIucHJvcGVydGllcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYi5vYnNlcnZlcnMpIHtcbiAgICAgICAgICAgICAgdGhpcy5jcmVhdGVPYnNlcnZlcnMoYi5vYnNlcnZlcnMsIGIucHJvcGVydGllcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbmZvLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICB0aGlzLmNyZWF0ZVByb3BlcnRpZXMoaW5mby5wcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5mby5vYnNlcnZlcnMpIHtcbiAgICAgICAgICB0aGlzLmNyZWF0ZU9ic2VydmVycyhpbmZvLm9ic2VydmVycywgaW5mby5wcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtYWtlIHN1cmUgdG8gcHJlcGFyZSB0aGUgZWxlbWVudCB0ZW1wbGF0ZVxuICAgICAgICB0aGlzLl9wcmVwYXJlVGVtcGxhdGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge307XG4gICAgICBpZiAoYmVoYXZpb3JMaXN0KSB7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaSA8IGJlaGF2aW9yTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG1lcmdlUHJvcGVydGllcyhwcm9wZXJ0aWVzLCBiZWhhdmlvckxpc3RbaV0ucHJvcGVydGllcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1lcmdlUHJvcGVydGllcyhwcm9wZXJ0aWVzLCBpbmZvLnByb3BlcnRpZXMpO1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgc3RhdGljIGdldCBvYnNlcnZlcnMoKSB7XG4gICAgICBsZXQgb2JzZXJ2ZXJzID0gW107XG4gICAgICBpZiAoYmVoYXZpb3JMaXN0KSB7XG4gICAgICAgIGZvciAobGV0IGk9MCwgYjsgaSA8IGJlaGF2aW9yTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGIgPSBiZWhhdmlvckxpc3RbaV07XG4gICAgICAgICAgaWYgKGIub2JzZXJ2ZXJzKSB7XG4gICAgICAgICAgICBvYnNlcnZlcnMgPSBvYnNlcnZlcnMuY29uY2F0KGIub2JzZXJ2ZXJzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpbmZvLm9ic2VydmVycykge1xuICAgICAgICBvYnNlcnZlcnMgPSBvYnNlcnZlcnMuY29uY2F0KGluZm8ub2JzZXJ2ZXJzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYnNlcnZlcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBjcmVhdGVkKCkge1xuICAgICAgc3VwZXIuY3JlYXRlZCgpO1xuICAgICAgY29uc3QgbGlzdCA9IGxpZmVjeWNsZS5jcmVhdGVkO1xuICAgICAgaWYgKGxpc3QpIHtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxpc3RbaV0uY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgX3JlZ2lzdGVyZWQoKSB7XG4gICAgICAvKiBOT1RFOiBgYmVmb3JlUmVnaXN0ZXJgIGlzIGNhbGxlZCBoZXJlIGZvciBiYywgYnV0IHRoZSBiZWhhdmlvclxuICAgICAgICBpcyBkaWZmZXJlbnQgdGhhbiBpbiAxLnguIEluIDEuMCwgdGhlIG1ldGhvZCB3YXMgY2FsbGVkICphZnRlcipcbiAgICAgICAgbWl4aW5nIHByb3RvdHlwZXMgdG9nZXRoZXIgYnV0ICpiZWZvcmUqIHByb2Nlc3Npbmcgb2YgbWV0YS1vYmplY3RzLlxuICAgICAgICBIb3dldmVyLCBkeW5hbWljIGVmZmVjdHMgY2FuIHN0aWxsIGJlIHNldCBoZXJlIGFuZCBjYW4gYmUgZG9uZSBlaXRoZXJcbiAgICAgICAgaW4gYGJlZm9yZVJlZ2lzdGVyYCBvciBgcmVnaXN0ZXJlZGAuIEl0IGlzIG5vIGxvbmdlciBwb3NzaWJsZSB0byBzZXRcbiAgICAgICAgYGlzYCBpbiBgYmVmb3JlUmVnaXN0ZXJgIGFzIHlvdSBjb3VsZCBpbiAxLnguXG4gICAgICAqL1xuICAgICAgLy8gb25seSBwcm9jZWVkIGlmIHRoZSBnZW5lcmF0ZWQgY2xhc3MnIHByb3RvdHlwZSBoYXMgbm90IGJlZW4gcmVnaXN0ZXJlZC5cbiAgICAgIGNvbnN0IGdlbmVyYXRlZFByb3RvID0gUG9seW1lckdlbmVyYXRlZC5wcm90b3R5cGU7XG4gICAgICBpZiAoIWdlbmVyYXRlZFByb3RvLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19faGFzUmVnaXN0ZXJGaW5pc2hlZCcsIGdlbmVyYXRlZFByb3RvKSkpIHtcbiAgICAgICAgZ2VuZXJhdGVkUHJvdG8uX19oYXNSZWdpc3RlckZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gZW5zdXJlIHN1cGVyY2xhc3MgaXMgcmVnaXN0ZXJlZCBmaXJzdC5cbiAgICAgICAgc3VwZXIuX3JlZ2lzdGVyZWQoKTtcbiAgICAgICAgLy8gY29weSBwcm9wZXJ0aWVzIG9udG8gdGhlIGdlbmVyYXRlZCBjbGFzcyBsYXppbHkgaWYgd2UncmUgb3B0aW1pemluZyxcbiAgICAgICAgaWYgKGxlZ2FjeU9wdGltaXphdGlvbnMpIHtcbiAgICAgICAgICBjb3B5UHJvcGVydGllc1RvUHJvdG8oZ2VuZXJhdGVkUHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIC8vIG1ha2Ugc3VyZSBsZWdhY3kgbGlmZWN5Y2xlIGlzIGNhbGxlZCBvbiB0aGUgKmVsZW1lbnQqJ3MgcHJvdG90eXBlXG4gICAgICAgIC8vIGFuZCBub3QgdGhlIGdlbmVyYXRlZCBjbGFzcyBwcm90b3R5cGU7IGlmIHRoZSBlbGVtZW50IGhhcyBiZWVuXG4gICAgICAgIC8vIGV4dGVuZGVkLCB0aGVzZSBhcmUgKm5vdCogdGhlIHNhbWUuXG4gICAgICAgIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO1xuICAgICAgICBsZXQgbGlzdCA9IGxpZmVjeWNsZS5iZWZvcmVSZWdpc3RlcjtcbiAgICAgICAgaWYgKGxpc3QpIHtcbiAgICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsaXN0W2ldLmNhbGwocHJvdG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsaXN0ID0gbGlmZWN5Y2xlLnJlZ2lzdGVyZWQ7XG4gICAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGlzdFtpXS5jYWxsKHByb3RvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9hcHBseUxpc3RlbmVycygpIHtcbiAgICAgIHN1cGVyLl9hcHBseUxpc3RlbmVycygpO1xuICAgICAgY29uc3QgbGlzdCA9IGxpZmVjeWNsZS5saXN0ZW5lcnM7XG4gICAgICBpZiAobGlzdCkge1xuICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gbGlzdFtpXTtcbiAgICAgICAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBsIGluIGxpc3RlbmVycykge1xuICAgICAgICAgICAgICB0aGlzLl9hZGRNZXRob2RFdmVudExpc3RlbmVyVG9Ob2RlKHRoaXMsIGwsIGxpc3RlbmVyc1tsXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbm90ZTogZXhjZXB0aW9uIHRvIFwic3VwZXIgdGhlbiBtZVwiIHJ1bGU7XG4gICAgLy8gZG8gd29yayBiZWZvcmUgY2FsbGluZyBzdXBlciBzbyB0aGF0IHN1cGVyIGF0dHJpYnV0ZXNcbiAgICAvLyBvbmx5IGFwcGx5IGlmIG5vdCBhbHJlYWR5IHNldC5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9lbnN1cmVBdHRyaWJ1dGVzKCkge1xuICAgICAgY29uc3QgbGlzdCA9IGxpZmVjeWNsZS5ob3N0QXR0cmlidXRlcztcbiAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgIGZvciAobGV0IGk9bGlzdC5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBjb25zdCBob3N0QXR0cmlidXRlcyA9IGxpc3RbaV07XG4gICAgICAgICAgZm9yIChsZXQgYSBpbiBob3N0QXR0cmlidXRlcykge1xuICAgICAgICAgICAgICB0aGlzLl9lbnN1cmVBdHRyaWJ1dGUoYSwgaG9zdEF0dHJpYnV0ZXNbYV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdXBlci5fZW5zdXJlQXR0cmlidXRlcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgcmVhZHkoKSB7XG4gICAgICBzdXBlci5yZWFkeSgpO1xuICAgICAgbGV0IGxpc3QgPSBsaWZlY3ljbGUucmVhZHk7XG4gICAgICBpZiAobGlzdCkge1xuICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGlzdFtpXS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBhdHRhY2hlZCgpIHtcbiAgICAgIHN1cGVyLmF0dGFjaGVkKCk7XG4gICAgICBsZXQgbGlzdCA9IGxpZmVjeWNsZS5hdHRhY2hlZDtcbiAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsaXN0W2ldLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIGRldGFjaGVkKCkge1xuICAgICAgc3VwZXIuZGV0YWNoZWQoKTtcbiAgICAgIGxldCBsaXN0ID0gbGlmZWN5Y2xlLmRldGFjaGVkO1xuICAgICAgaWYgKGxpc3QpIHtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxpc3RbaV0uY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEltcGxlbWVudHMgbmF0aXZlIEN1c3RvbSBFbGVtZW50cyBgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrYCB0b1xuICAgICAqIHNldCBhbiBhdHRyaWJ1dGUgdmFsdWUgdG8gYSBwcm9wZXJ0eSB2aWEgYF9hdHRyaWJ1dGVUb1Byb3BlcnR5YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgYXR0cmlidXRlIHRoYXQgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gb2xkIE9sZCBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IHZhbHVlIE5ldyBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIGF0dHJpYnV0ZUNoYW5nZWQobmFtZSwgb2xkLCB2YWx1ZSkge1xuICAgICAgc3VwZXIuYXR0cmlidXRlQ2hhbmdlZCgpO1xuICAgICAgbGV0IGxpc3QgPSBsaWZlY3ljbGUuYXR0cmlidXRlQ2hhbmdlZDtcbiAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsaXN0W2ldLmNhbGwodGhpcywgbmFtZSwgb2xkLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBhcHBseSBiZWhhdmlvcnMsIG5vdGUgYWN0dWFsIGNvcHlpbmcgaXMgZG9uZSBsYXppbHkgYXQgZmlyc3QgaW5zdGFuY2UgY3JlYXRpb25cbiAgaWYgKGJlaGF2aW9ycykge1xuICAgIC8vIE5PVEU6IGVuc3VyZSB0aGUgYmVoYXZpb3IgaXMgZXh0ZW5kaW5nIGEgY2xhc3Mgd2l0aFxuICAgIC8vIGxlZ2FjeSBlbGVtZW50IGFwaS4gVGhpcyBpcyBuZWNlc3Nhcnkgc2luY2UgYmVoYXZpb3JzIGV4cGVjdCB0byBiZSBhYmxlXG4gICAgLy8gdG8gYWNjZXNzIDEueCBsZWdhY3kgYXBpLlxuICAgIGlmICghQXJyYXkuaXNBcnJheShiZWhhdmlvcnMpKSB7XG4gICAgICBiZWhhdmlvcnMgPSBbYmVoYXZpb3JzXTtcbiAgICB9XG4gICAgbGV0IHN1cGVyQmVoYXZpb3JzID0gQmFzZS5wcm90b3R5cGUuYmVoYXZpb3JzO1xuICAgIC8vIGdldCBmbGF0dGVuZWQsIGRlZHVwZWQgbGlzdCBvZiBiZWhhdmlvcnMgKm5vdCogYWxyZWFkeSBvbiBzdXBlciBjbGFzc1xuICAgIGJlaGF2aW9yTGlzdCA9IGZsYXR0ZW5CZWhhdmlvcnMoYmVoYXZpb3JzLCBudWxsLCBzdXBlckJlaGF2aW9ycyk7XG4gICAgUG9seW1lckdlbmVyYXRlZC5wcm90b3R5cGUuYmVoYXZpb3JzID0gc3VwZXJCZWhhdmlvcnMgP1xuICAgICAgc3VwZXJCZWhhdmlvcnMuY29uY2F0KGJlaGF2aW9ycykgOiBiZWhhdmlvckxpc3Q7XG4gIH1cblxuICBjb25zdCBjb3B5UHJvcGVydGllc1RvUHJvdG8gPSAocHJvdG8pID0+IHtcbiAgICBpZiAoYmVoYXZpb3JMaXN0KSB7XG4gICAgICBhcHBseUJlaGF2aW9ycyhwcm90bywgYmVoYXZpb3JMaXN0LCBsaWZlY3ljbGUpO1xuICAgIH1cbiAgICBhcHBseUluZm8ocHJvdG8sIGluZm8sIGxpZmVjeWNsZSwgZXhjbHVkZU9uSW5mbyk7XG4gIH07XG5cbiAgLy8gY29weSBwcm9wZXJ0aWVzIGlmIHdlJ3JlIG5vdCBvcHRpbWl6aW5nXG4gIGlmICghbGVnYWN5T3B0aW1pemF0aW9ucykge1xuICAgIGNvcHlQcm9wZXJ0aWVzVG9Qcm90byhQb2x5bWVyR2VuZXJhdGVkLnByb3RvdHlwZSk7XG4gIH1cblxuICBQb2x5bWVyR2VuZXJhdGVkLmdlbmVyYXRlZEZyb20gPSBpbmZvO1xuXG4gIHJldHVybiBQb2x5bWVyR2VuZXJhdGVkO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIGNsYXNzIHRoYXQgZXh0ZW5kcyBgTGVnYWN5RWxlbWVudGAgYmFzZWQgb24gdGhlXG4gKiBwcm92aWRlZCBpbmZvIG9iamVjdC4gIE1ldGFkYXRhIG9iamVjdHMgb24gdGhlIGBpbmZvYCBvYmplY3RcbiAqIChgcHJvcGVydGllc2AsIGBvYnNlcnZlcnNgLCBgbGlzdGVuZXJzYCwgYGJlaGF2aW9yc2AsIGBpc2ApIGFyZSB1c2VkXG4gKiBmb3IgUG9seW1lcidzIG1ldGEtcHJvZ3JhbW1pbmcgc3lzdGVtcywgYW5kIGFueSBmdW5jdGlvbnMgYXJlIGNvcGllZFxuICogdG8gdGhlIGdlbmVyYXRlZCBjbGFzcy5cbiAqXG4gKiBWYWxpZCBcIm1ldGFkYXRhXCIgdmFsdWVzIGFyZSBhcyBmb2xsb3dzOlxuICpcbiAqIGBpc2A6IFN0cmluZyBwcm92aWRpbmcgdGhlIHRhZyBuYW1lIHRvIHJlZ2lzdGVyIHRoZSBlbGVtZW50IHVuZGVyLiBJblxuICogYWRkaXRpb24sIGlmIGEgYGRvbS1tb2R1bGVgIHdpdGggdGhlIHNhbWUgaWQgZXhpc3RzLCB0aGUgZmlyc3QgdGVtcGxhdGVcbiAqIGluIHRoYXQgYGRvbS1tb2R1bGVgIHdpbGwgYmUgc3RhbXBlZCBpbnRvIHRoZSBzaGFkb3cgcm9vdCBvZiB0aGlzIGVsZW1lbnQsXG4gKiB3aXRoIHN1cHBvcnQgZm9yIGRlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVycyAoYG9uLS4uLmApLCBQb2x5bWVyIGRhdGFcbiAqIGJpbmRpbmdzIChgW1suLi5dXWAgYW5kIGB7ey4uLn19YCksIGFuZCBpZC1iYXNlZCBub2RlIGZpbmRpbmcgaW50b1xuICogYHRoaXMuJGAuXG4gKlxuICogYHByb3BlcnRpZXNgOiBPYmplY3QgZGVzY3JpYmluZyBwcm9wZXJ0eS1yZWxhdGVkIG1ldGFkYXRhIHVzZWQgYnkgUG9seW1lclxuICogZmVhdHVyZXMgKGtleTogcHJvcGVydHkgbmFtZXMsIHZhbHVlOiBvYmplY3QgY29udGFpbmluZyBwcm9wZXJ0eSBtZXRhZGF0YSkuXG4gKiBWYWxpZCBrZXlzIGluIHBlci1wcm9wZXJ0eSBtZXRhZGF0YSBpbmNsdWRlOlxuICogLSBgdHlwZWAgKFN0cmluZ3xOdW1iZXJ8T2JqZWN0fEFycmF5fC4uLik6IFVzZWQgYnlcbiAqICAgYGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja2AgdG8gZGV0ZXJtaW5lIGhvdyBzdHJpbmctYmFzZWQgYXR0cmlidXRlc1xuICogICBhcmUgZGVzZXJpYWxpemVkIHRvIEphdmFTY3JpcHQgcHJvcGVydHkgdmFsdWVzLlxuICogLSBgbm90aWZ5YCAoYm9vbGVhbik6IENhdXNlcyBhIGNoYW5nZSBpbiB0aGUgcHJvcGVydHkgdG8gZmlyZSBhXG4gKiAgIG5vbi1idWJibGluZyBldmVudCBjYWxsZWQgYDxwcm9wZXJ0eT4tY2hhbmdlZGAuIEVsZW1lbnRzIHRoYXQgaGF2ZVxuICogICBlbmFibGVkIHR3by13YXkgYmluZGluZyB0byB0aGUgcHJvcGVydHkgdXNlIHRoaXMgZXZlbnQgdG8gb2JzZXJ2ZSBjaGFuZ2VzLlxuICogLSBgcmVhZE9ubHlgIChib29sZWFuKTogQ3JlYXRlcyBhIGdldHRlciBmb3IgdGhlIHByb3BlcnR5LCBidXQgbm8gc2V0dGVyLlxuICogICBUbyBzZXQgYSByZWFkLW9ubHkgcHJvcGVydHksIHVzZSB0aGUgcHJpdmF0ZSBzZXR0ZXIgbWV0aG9kXG4gKiAgIGBfc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKWAuXG4gKiAtIGBvYnNlcnZlcmAgKHN0cmluZyk6IE9ic2VydmVyIG1ldGhvZCBuYW1lIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlblxuICogICB0aGUgcHJvcGVydHkgY2hhbmdlcy4gVGhlIGFyZ3VtZW50cyBvZiB0aGUgbWV0aG9kIGFyZVxuICogICBgKHZhbHVlLCBwcmV2aW91c1ZhbHVlKWAuXG4gKiAtIGBjb21wdXRlZGAgKHN0cmluZyk6IFN0cmluZyBkZXNjcmliaW5nIG1ldGhvZCBhbmQgZGVwZW5kZW50IHByb3BlcnRpZXNcbiAqICAgZm9yIGNvbXB1dGluZyB0aGUgdmFsdWUgb2YgdGhpcyBwcm9wZXJ0eSAoZS5nLiBgJ2NvbXB1dGVGb28oYmFyLCB6b3QpJ2ApLlxuICogICBDb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSByZWFkLW9ubHkgYnkgZGVmYXVsdCBhbmQgY2FuIG9ubHkgYmUgY2hhbmdlZFxuICogICB2aWEgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgY29tcHV0aW5nIG1ldGhvZC5cbiAqXG4gKiBgb2JzZXJ2ZXJzYDogQXJyYXkgb2Ygc3RyaW5ncyBkZXNjcmliaW5nIG11bHRpLXByb3BlcnR5IG9ic2VydmVyIG1ldGhvZHNcbiAqICBhbmQgdGhlaXIgZGVwZW5kZW50IHByb3BlcnRpZXMgKGUuZy4gYCdvYnNlcnZlQUJDKGEsIGIsIGMpJ2ApLlxuICpcbiAqIGBsaXN0ZW5lcnNgOiBPYmplY3QgZGVzY3JpYmluZyBldmVudCBsaXN0ZW5lcnMgdG8gYmUgYWRkZWQgdG8gZWFjaFxuICogIGluc3RhbmNlIG9mIHRoaXMgZWxlbWVudCAoa2V5OiBldmVudCBuYW1lLCB2YWx1ZTogbWV0aG9kIG5hbWUpLlxuICpcbiAqIGBiZWhhdmlvcnNgOiBBcnJheSBvZiBhZGRpdGlvbmFsIGBpbmZvYCBvYmplY3RzIGNvbnRhaW5pbmcgbWV0YWRhdGFcbiAqIGFuZCBjYWxsYmFja3MgaW4gdGhlIHNhbWUgZm9ybWF0IGFzIHRoZSBgaW5mb2Agb2JqZWN0IGhlcmUgd2hpY2ggYXJlXG4gKiBtZXJnZWQgaW50byB0aGlzIGVsZW1lbnQuXG4gKlxuICogYGhvc3RBdHRyaWJ1dGVzYDogT2JqZWN0IGxpc3RpbmcgYXR0cmlidXRlcyB0byBiZSBhcHBsaWVkIHRvIHRoZSBob3N0XG4gKiAgb25jZSBjcmVhdGVkIChrZXk6IGF0dHJpYnV0ZSBuYW1lLCB2YWx1ZTogYXR0cmlidXRlIHZhbHVlKS4gIFZhbHVlc1xuICogIGFyZSBzZXJpYWxpemVkIGJhc2VkIG9uIHRoZSB0eXBlIG9mIHRoZSB2YWx1ZS4gIEhvc3QgYXR0cmlidXRlcyBzaG91bGRcbiAqICBnZW5lcmFsbHkgYmUgbGltaXRlZCB0byBhdHRyaWJ1dGVzIHN1Y2ggYXMgYHRhYkluZGV4YCBhbmQgYGFyaWEtLi4uYC5cbiAqICBBdHRyaWJ1dGVzIGluIGBob3N0QXR0cmlidXRlc2AgYXJlIG9ubHkgYXBwbGllZCBpZiBhIHVzZXItc3VwcGxpZWRcbiAqICBhdHRyaWJ1dGUgaXMgbm90IGFscmVhZHkgcHJlc2VudCAoYXR0cmlidXRlcyBpbiBtYXJrdXAgb3ZlcnJpZGVcbiAqICBgaG9zdEF0dHJpYnV0ZXNgKS5cbiAqXG4gKiBJbiBhZGRpdGlvbiwgdGhlIGZvbGxvd2luZyBQb2x5bWVyLXNwZWNpZmljIGNhbGxiYWNrcyBtYXkgYmUgcHJvdmlkZWQ6XG4gKiAtIGByZWdpc3RlcmVkYDogY2FsbGVkIGFmdGVyIGZpcnN0IGluc3RhbmNlIG9mIHRoaXMgZWxlbWVudCxcbiAqIC0gYGNyZWF0ZWRgOiBjYWxsZWQgZHVyaW5nIGBjb25zdHJ1Y3RvcmBcbiAqIC0gYGF0dGFjaGVkYDogY2FsbGVkIGR1cmluZyBgY29ubmVjdGVkQ2FsbGJhY2tgXG4gKiAtIGBkZXRhY2hlZGA6IGNhbGxlZCBkdXJpbmcgYGRpc2Nvbm5lY3RlZENhbGxiYWNrYFxuICogLSBgcmVhZHlgOiBjYWxsZWQgYmVmb3JlIGZpcnN0IGBhdHRhY2hlZGAsIGFmdGVyIGFsbCBwcm9wZXJ0aWVzIG9mXG4gKiAgIHRoaXMgZWxlbWVudCBoYXZlIGJlZW4gcHJvcGFnYXRlZCB0byBpdHMgdGVtcGxhdGUgYW5kIGFsbCBvYnNlcnZlcnNcbiAqICAgaGF2ZSBydW5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVySW5pdH0gaW5mbyBPYmplY3QgY29udGFpbmluZyBQb2x5bWVyIG1ldGFkYXRhIGFuZCBmdW5jdGlvbnNcbiAqICAgdG8gYmVjb21lIGNsYXNzIG1ldGhvZHMuXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtmdW5jdGlvbihUKTpUfSBtaXhpbiBPcHRpb25hbCBtaXhpbiB0byBhcHBseSB0byBsZWdhY3kgYmFzZSBjbGFzc1xuICogICBiZWZvcmUgZXh0ZW5kaW5nIHdpdGggUG9seW1lciBtZXRhcHJvZ3JhbW1pbmcuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6SFRNTEVsZW1lbnQpfSBHZW5lcmF0ZWQgY2xhc3NcbiAqL1xuZXhwb3J0IGNvbnN0IENsYXNzID0gZnVuY3Rpb24oaW5mbywgbWl4aW4pIHtcbiAgaWYgKCFpbmZvKSB7XG4gICAgY29uc29sZS53YXJuKCdQb2x5bWVyLkNsYXNzIHJlcXVpcmVzIGBpbmZvYCBhcmd1bWVudCcpO1xuICB9XG4gIGxldCBrbGFzcyA9IG1peGluID8gbWl4aW4oTGVnYWN5RWxlbWVudCkgOlxuICAgICAgTGVnYWN5RWxlbWVudDtcbiAga2xhc3MgPSBHZW5lcmF0ZUNsYXNzRnJvbUluZm8oaW5mbywga2xhc3MsIGluZm8uYmVoYXZpb3JzKTtcbiAgLy8gZGVjb3JhdGUga2xhc3Mgd2l0aCByZWdpc3RyYXRpb24gaW5mb1xuICBrbGFzcy5pcyA9IGtsYXNzLnByb3RvdHlwZS5pcyA9IGluZm8uaXM7XG4gIHJldHVybiBrbGFzcztcbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0IHsgQ2xhc3MgfSBmcm9tICcuL2NsYXNzLmpzJztcblxuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcblxuLyoqXG4gKiBMZWdhY3kgY2xhc3MgZmFjdG9yeSBhbmQgcmVnaXN0cmF0aW9uIGhlbHBlciBmb3IgZGVmaW5pbmcgUG9seW1lclxuICogZWxlbWVudHMuXG4gKlxuICogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0b1xuICpcbiAqICAgICBpbXBvcnQge0NsYXNzfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi9sZWdhY3kvY2xhc3MuanMnO1xuICogICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZShpbmZvLmlzLCBDbGFzcyhpbmZvKSk7XG4gKlxuICogU2VlIGBDbGFzc2AgZm9yIGRldGFpbHMgb24gdmFsaWQgbGVnYWN5IG1ldGFkYXRhIGZvcm1hdCBmb3IgYGluZm9gLlxuICpcbiAqIEBnbG9iYWxcbiAqIEBvdmVycmlkZVxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFQb2x5bWVySW5pdH0gaW5mbyBPYmplY3QgY29udGFpbmluZyBQb2x5bWVyIG1ldGFkYXRhIGFuZCBmdW5jdGlvbnNcbiAqICAgdG8gYmVjb21lIGNsYXNzIG1ldGhvZHMuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6IEhUTUxFbGVtZW50KX0gR2VuZXJhdGVkIGNsYXNzXG4gKiBAc3VwcHJlc3Mge2R1cGxpY2F0ZSwgaW52YWxpZENhc3RzLCBjaGVja1R5cGVzfVxuICovXG5jb25zdCBQb2x5bWVyID0gZnVuY3Rpb24oaW5mbykge1xuICAvLyBpZiBpbnB1dCBpcyBhIGBjbGFzc2AgKGFrYSBhIGZ1bmN0aW9uIHdpdGggYSBwcm90b3R5cGUpLCB1c2UgdGhlIHByb3RvdHlwZVxuICAvLyByZW1lbWJlciB0aGF0IHRoZSBgY29uc3RydWN0b3JgIHdpbGwgbmV2ZXIgYmUgY2FsbGVkXG4gIGxldCBrbGFzcztcbiAgaWYgKHR5cGVvZiBpbmZvID09PSAnZnVuY3Rpb24nKSB7XG4gICAga2xhc3MgPSBpbmZvO1xuICB9IGVsc2Uge1xuICAgIGtsYXNzID0gUG9seW1lci5DbGFzcyhpbmZvKTtcbiAgfVxuICAvLyBDb3B5IG9wdCBvdXQgZm9yIGBsZWdhY3lOb09ic2VydmVkQXR0cmlidXRlc2AgZnJvbSBpbmZvIG9iamVjdCB0byBjbGFzcy5cbiAgaWYgKGluZm8uX2xlZ2FjeUZvcmNlT2JzZXJ2ZWRBdHRyaWJ1dGVzKSB7XG4gICAga2xhc3MucHJvdG90eXBlLl9sZWdhY3lGb3JjZU9ic2VydmVkQXR0cmlidXRlcyA9IGluZm8uX2xlZ2FjeUZvcmNlT2JzZXJ2ZWRBdHRyaWJ1dGVzO1xuICB9XG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZShrbGFzcy5pcywgLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKGtsYXNzKSk7XG4gIHJldHVybiBrbGFzcztcbn07XG5cblBvbHltZXIuQ2xhc3MgPSBDbGFzcztcblxuZXhwb3J0IHsgUG9seW1lciB9OyIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuXG4vLyBDb21tb24gaW1wbGVtZW50YXRpb24gZm9yIG1peGluICYgYmVoYXZpb3JcbmZ1bmN0aW9uIG11dGFibGVQcm9wZXJ0eUNoYW5nZShpbnN0LCBwcm9wZXJ0eSwgdmFsdWUsIG9sZCwgbXV0YWJsZURhdGEpIHtcbiAgbGV0IGlzT2JqZWN0O1xuICBpZiAobXV0YWJsZURhdGEpIHtcbiAgICBpc09iamVjdCA9ICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKTtcbiAgICAvLyBQdWxsIGBvbGRgIGZvciBPYmplY3RzIGZyb20gdGVtcCBjYWNoZSwgYnV0IHRyZWF0IGBudWxsYCBhcyBhIHByaW1pdGl2ZVxuICAgIGlmIChpc09iamVjdCkge1xuICAgICAgb2xkID0gaW5zdC5fX2RhdGFUZW1wW3Byb3BlcnR5XTtcbiAgICB9XG4gIH1cbiAgLy8gU3RyaWN0IGVxdWFsaXR5IGNoZWNrLCBidXQgcmV0dXJuIGZhbHNlIGZvciBOYU49PT1OYU5cbiAgbGV0IHNob3VsZENoYW5nZSA9IChvbGQgIT09IHZhbHVlICYmIChvbGQgPT09IG9sZCB8fCB2YWx1ZSA9PT0gdmFsdWUpKTtcbiAgLy8gT2JqZWN0cyBhcmUgc3RvcmVkIGluIHRlbXBvcmFyeSBjYWNoZSAoY2xlYXJlZCBhdCBlbmQgb2ZcbiAgLy8gdHVybiksIHdoaWNoIGlzIHVzZWQgZm9yIGRpcnR5LWNoZWNraW5nXG4gIGlmIChpc09iamVjdCAmJiBzaG91bGRDaGFuZ2UpIHtcbiAgICBpbnN0Ll9fZGF0YVRlbXBbcHJvcGVydHldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHNob3VsZENoYW5nZTtcbn1cblxuLyoqXG4gKiBFbGVtZW50IGNsYXNzIG1peGluIHRvIHNraXAgc3RyaWN0IGRpcnR5LWNoZWNraW5nIGZvciBvYmplY3RzIGFuZCBhcnJheXNcbiAqIChhbHdheXMgY29uc2lkZXIgdGhlbSB0byBiZSBcImRpcnR5XCIpLCBmb3IgdXNlIG9uIGVsZW1lbnRzIHV0aWxpemluZ1xuICogYFByb3BlcnR5RWZmZWN0c2BcbiAqXG4gKiBCeSBkZWZhdWx0LCBgUHJvcGVydHlFZmZlY3RzYCBwZXJmb3JtcyBzdHJpY3QgZGlydHkgY2hlY2tpbmcgb25cbiAqIG9iamVjdHMsIHdoaWNoIG1lYW5zIHRoYXQgYW55IGRlZXAgbW9kaWZpY2F0aW9ucyB0byBhbiBvYmplY3Qgb3IgYXJyYXkgd2lsbFxuICogbm90IGJlIHByb3BhZ2F0ZWQgdW5sZXNzIFwiaW1tdXRhYmxlXCIgZGF0YSBwYXR0ZXJucyBhcmUgdXNlZCAoaS5lLiBhbGwgb2JqZWN0XG4gKiByZWZlcmVuY2VzIGZyb20gdGhlIHJvb3QgdG8gdGhlIG11dGF0aW9uIHdlcmUgY2hhbmdlZCkuXG4gKlxuICogUG9seW1lciBhbHNvIHByb3ZpZGVzIGEgcHJvcHJpZXRhcnkgZGF0YSBtdXRhdGlvbiBhbmQgcGF0aCBub3RpZmljYXRpb24gQVBJXG4gKiAoZS5nLiBgbm90aWZ5UGF0aGAsIGBzZXRgLCBhbmQgYXJyYXkgbXV0YXRpb24gQVBJJ3MpIHRoYXQgYWxsb3cgZWZmaWNpZW50XG4gKiBtdXRhdGlvbiBhbmQgbm90aWZpY2F0aW9uIG9mIGRlZXAgY2hhbmdlcyBpbiBhbiBvYmplY3QgZ3JhcGggdG8gYWxsIGVsZW1lbnRzXG4gKiBib3VuZCB0byB0aGUgc2FtZSBvYmplY3QgZ3JhcGguXG4gKlxuICogSW4gY2FzZXMgd2hlcmUgbmVpdGhlciBpbW11dGFibGUgcGF0dGVybnMgbm9yIHRoZSBkYXRhIG11dGF0aW9uIEFQSSBjYW4gYmVcbiAqIHVzZWQsIGFwcGx5aW5nIHRoaXMgbWl4aW4gd2lsbCBjYXVzZSBQb2x5bWVyIHRvIHNraXAgZGlydHkgY2hlY2tpbmcgZm9yXG4gKiBvYmplY3RzIGFuZCBhcnJheXMgKGFsd2F5cyBjb25zaWRlciB0aGVtIHRvIGJlIFwiZGlydHlcIikuICBUaGlzIGFsbG93cyBhXG4gKiB1c2VyIHRvIG1ha2UgYSBkZWVwIG1vZGlmaWNhdGlvbiB0byBhIGJvdW5kIG9iamVjdCBncmFwaCwgYW5kIHRoZW4gZWl0aGVyXG4gKiBzaW1wbHkgcmUtc2V0IHRoZSBvYmplY3QgKGUuZy4gYHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zYCkgb3IgY2FsbCBgbm90aWZ5UGF0aGBcbiAqIChlLmcuIGB0aGlzLm5vdGlmeVBhdGgoJ2l0ZW1zJylgKSB0byB1cGRhdGUgdGhlIHRyZWUuICBOb3RlIHRoYXQgYWxsXG4gKiBlbGVtZW50cyB0aGF0IHdpc2ggdG8gYmUgdXBkYXRlZCBiYXNlZCBvbiBkZWVwIG11dGF0aW9ucyBtdXN0IGFwcGx5IHRoaXNcbiAqIG1peGluIG9yIG90aGVyd2lzZSBza2lwIHN0cmljdCBkaXJ0eSBjaGVja2luZyBmb3Igb2JqZWN0cy9hcnJheXMuXG4gKiBTcGVjaWZpY2FsbHksIGFueSBlbGVtZW50cyBpbiB0aGUgYmluZGluZyB0cmVlIGJldHdlZW4gdGhlIHNvdXJjZSBvZiBhXG4gKiBtdXRhdGlvbiBhbmQgdGhlIGNvbnN1bXB0aW9uIG9mIGl0IG11c3QgYXBwbHkgdGhpcyBtaXhpbiBvciBlbmFibGUgdGhlXG4gKiBgT3B0aW9uYWxNdXRhYmxlRGF0YWAgbWl4aW4uXG4gKlxuICogSW4gb3JkZXIgdG8gbWFrZSB0aGUgZGlydHkgY2hlY2sgc3RyYXRlZ3kgY29uZmlndXJhYmxlLCBzZWVcbiAqIGBPcHRpb25hbE11dGFibGVEYXRhYC5cbiAqXG4gKiBOb3RlLCB0aGUgcGVyZm9ybWFuY2UgY2hhcmFjdGVyaXN0aWNzIG9mIHByb3BhZ2F0aW5nIGxhcmdlIG9iamVjdCBncmFwaHNcbiAqIHdpbGwgYmUgd29yc2UgYXMgb3Bwb3NlZCB0byB1c2luZyBzdHJpY3QgZGlydHkgY2hlY2tpbmcgd2l0aCBpbW11dGFibGVcbiAqIHBhdHRlcm5zIG9yIFBvbHltZXIncyBwYXRoIG5vdGlmaWNhdGlvbiBBUEkuXG4gKlxuICogQG1peGluRnVuY3Rpb25cbiAqIEBwb2x5bWVyXG4gKiBAc3VtbWFyeSBFbGVtZW50IGNsYXNzIG1peGluIHRvIHNraXAgc3RyaWN0IGRpcnR5LWNoZWNraW5nIGZvciBvYmplY3RzXG4gKiAgIGFuZCBhcnJheXNcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyBDbGFzcyB0byBhcHBseSBtaXhpbiB0by5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyB3aXRoIG1peGluIGFwcGxpZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBNdXRhYmxlRGF0YSA9IGRlZHVwaW5nTWl4aW4oc3VwZXJDbGFzcyA9PiB7XG5cbiAgLyoqXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtaXhpbkNsYXNzXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX011dGFibGVEYXRhfVxuICAgKi9cbiAgY2xhc3MgTXV0YWJsZURhdGEgZXh0ZW5kcyBzdXBlckNsYXNzIHtcbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgYFByb3BlcnR5RWZmZWN0c2AgdG8gcHJvdmlkZSBvcHRpb24gZm9yIHNraXBwaW5nXG4gICAgICogc3RyaWN0IGVxdWFsaXR5IGNoZWNraW5nIGZvciBPYmplY3RzIGFuZCBBcnJheXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBwdWxscyB0aGUgdmFsdWUgdG8gZGlydHkgY2hlY2sgYWdhaW5zdCBmcm9tIHRoZSBgX19kYXRhVGVtcGBcbiAgICAgKiBjYWNoZSAocmF0aGVyIHRoYW4gdGhlIG5vcm1hbCBgX19kYXRhYCBjYWNoZSkgZm9yIE9iamVjdHMuICBTaW5jZSB0aGUgdGVtcFxuICAgICAqIGNhY2hlIGlzIGNsZWFyZWQgYXQgdGhlIGVuZCBvZiBhIHR1cm4sIHRoaXMgaW1wbGVtZW50YXRpb24gYWxsb3dzXG4gICAgICogc2lkZS1lZmZlY3RzIG9mIGRlZXAgb2JqZWN0IGNoYW5nZXMgdG8gYmUgcHJvY2Vzc2VkIGJ5IHJlLXNldHRpbmcgdGhlXG4gICAgICogc2FtZSBvYmplY3QgKHVzaW5nIHRoZSB0ZW1wIGNhY2hlIGFzIGFuIGluLXR1cm4gYmFja3N0b3AgdG8gcHJldmVudFxuICAgICAqIGN5Y2xlcyBkdWUgdG8gMi13YXkgbm90aWZpY2F0aW9uKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBOZXcgcHJvcGVydHkgdmFsdWVcbiAgICAgKiBAcGFyYW0geyp9IG9sZCBQcmV2aW91cyBwcm9wZXJ0eSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSBjb25zaWRlcmVkIGEgY2hhbmdlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9zaG91bGRQcm9wZXJ0eUNoYW5nZShwcm9wZXJ0eSwgdmFsdWUsIG9sZCkge1xuICAgICAgcmV0dXJuIG11dGFibGVQcm9wZXJ0eUNoYW5nZSh0aGlzLCBwcm9wZXJ0eSwgdmFsdWUsIG9sZCwgdHJ1ZSk7XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gTXV0YWJsZURhdGE7XG5cbn0pO1xuXG4vKipcbiAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdG8gYWRkIHRoZSBvcHRpb25hbCBhYmlsaXR5IHRvIHNraXAgc3RyaWN0XG4gKiBkaXJ0eS1jaGVja2luZyBmb3Igb2JqZWN0cyBhbmQgYXJyYXlzIChhbHdheXMgY29uc2lkZXIgdGhlbSB0byBiZVxuICogXCJkaXJ0eVwiKSBieSBzZXR0aW5nIGEgYG11dGFibGUtZGF0YWAgYXR0cmlidXRlIG9uIGFuIGVsZW1lbnQgaW5zdGFuY2UuXG4gKlxuICogQnkgZGVmYXVsdCwgYFByb3BlcnR5RWZmZWN0c2AgcGVyZm9ybXMgc3RyaWN0IGRpcnR5IGNoZWNraW5nIG9uXG4gKiBvYmplY3RzLCB3aGljaCBtZWFucyB0aGF0IGFueSBkZWVwIG1vZGlmaWNhdGlvbnMgdG8gYW4gb2JqZWN0IG9yIGFycmF5IHdpbGxcbiAqIG5vdCBiZSBwcm9wYWdhdGVkIHVubGVzcyBcImltbXV0YWJsZVwiIGRhdGEgcGF0dGVybnMgYXJlIHVzZWQgKGkuZS4gYWxsIG9iamVjdFxuICogcmVmZXJlbmNlcyBmcm9tIHRoZSByb290IHRvIHRoZSBtdXRhdGlvbiB3ZXJlIGNoYW5nZWQpLlxuICpcbiAqIFBvbHltZXIgYWxzbyBwcm92aWRlcyBhIHByb3ByaWV0YXJ5IGRhdGEgbXV0YXRpb24gYW5kIHBhdGggbm90aWZpY2F0aW9uIEFQSVxuICogKGUuZy4gYG5vdGlmeVBhdGhgLCBgc2V0YCwgYW5kIGFycmF5IG11dGF0aW9uIEFQSSdzKSB0aGF0IGFsbG93IGVmZmljaWVudFxuICogbXV0YXRpb24gYW5kIG5vdGlmaWNhdGlvbiBvZiBkZWVwIGNoYW5nZXMgaW4gYW4gb2JqZWN0IGdyYXBoIHRvIGFsbCBlbGVtZW50c1xuICogYm91bmQgdG8gdGhlIHNhbWUgb2JqZWN0IGdyYXBoLlxuICpcbiAqIEluIGNhc2VzIHdoZXJlIG5laXRoZXIgaW1tdXRhYmxlIHBhdHRlcm5zIG5vciB0aGUgZGF0YSBtdXRhdGlvbiBBUEkgY2FuIGJlXG4gKiB1c2VkLCBhcHBseWluZyB0aGlzIG1peGluIHdpbGwgYWxsb3cgUG9seW1lciB0byBza2lwIGRpcnR5IGNoZWNraW5nIGZvclxuICogb2JqZWN0cyBhbmQgYXJyYXlzIChhbHdheXMgY29uc2lkZXIgdGhlbSB0byBiZSBcImRpcnR5XCIpLiAgVGhpcyBhbGxvd3MgYVxuICogdXNlciB0byBtYWtlIGEgZGVlcCBtb2RpZmljYXRpb24gdG8gYSBib3VuZCBvYmplY3QgZ3JhcGgsIGFuZCB0aGVuIGVpdGhlclxuICogc2ltcGx5IHJlLXNldCB0aGUgb2JqZWN0IChlLmcuIGB0aGlzLml0ZW1zID0gdGhpcy5pdGVtc2ApIG9yIGNhbGwgYG5vdGlmeVBhdGhgXG4gKiAoZS5nLiBgdGhpcy5ub3RpZnlQYXRoKCdpdGVtcycpYCkgdG8gdXBkYXRlIHRoZSB0cmVlLiAgTm90ZSB0aGF0IGFsbFxuICogZWxlbWVudHMgdGhhdCB3aXNoIHRvIGJlIHVwZGF0ZWQgYmFzZWQgb24gZGVlcCBtdXRhdGlvbnMgbXVzdCBhcHBseSB0aGlzXG4gKiBtaXhpbiBvciBvdGhlcndpc2Ugc2tpcCBzdHJpY3QgZGlydHkgY2hlY2tpbmcgZm9yIG9iamVjdHMvYXJyYXlzLlxuICogU3BlY2lmaWNhbGx5LCBhbnkgZWxlbWVudHMgaW4gdGhlIGJpbmRpbmcgdHJlZSBiZXR3ZWVuIHRoZSBzb3VyY2Ugb2YgYVxuICogbXV0YXRpb24gYW5kIHRoZSBjb25zdW1wdGlvbiBvZiBpdCBtdXN0IGVuYWJsZSB0aGlzIG1peGluIG9yIGFwcGx5IHRoZVxuICogYE11dGFibGVEYXRhYCBtaXhpbi5cbiAqXG4gKiBXaGlsZSB0aGlzIG1peGluIGFkZHMgdGhlIGFiaWxpdHkgdG8gZm9yZ28gT2JqZWN0L0FycmF5IGRpcnR5IGNoZWNraW5nLFxuICogdGhlIGBtdXRhYmxlRGF0YWAgZmxhZyBkZWZhdWx0cyB0byBmYWxzZSBhbmQgbXVzdCBiZSBzZXQgb24gdGhlIGluc3RhbmNlLlxuICpcbiAqIE5vdGUsIHRoZSBwZXJmb3JtYW5jZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgcHJvcGFnYXRpbmcgbGFyZ2Ugb2JqZWN0IGdyYXBoc1xuICogd2lsbCBiZSB3b3JzZSBieSByZWx5aW5nIG9uIGBtdXRhYmxlRGF0YTogdHJ1ZWAgYXMgb3Bwb3NlZCB0byB1c2luZ1xuICogc3RyaWN0IGRpcnR5IGNoZWNraW5nIHdpdGggaW1tdXRhYmxlIHBhdHRlcm5zIG9yIFBvbHltZXIncyBwYXRoIG5vdGlmaWNhdGlvblxuICogQVBJLlxuICpcbiAqIEBtaXhpbkZ1bmN0aW9uXG4gKiBAcG9seW1lclxuICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiB0byBvcHRpb25hbGx5IHNraXAgc3RyaWN0IGRpcnR5LWNoZWNraW5nXG4gKiAgIGZvciBvYmplY3RzIGFuZCBhcnJheXNcbiAqL1xuZXhwb3J0IGNvbnN0IE9wdGlvbmFsTXV0YWJsZURhdGEgPSBkZWR1cGluZ01peGluKHN1cGVyQ2xhc3MgPT4ge1xuXG4gIC8qKlxuICAgKiBAbWl4aW5DbGFzc1xuICAgKiBAcG9seW1lclxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9PcHRpb25hbE11dGFibGVEYXRhfVxuICAgKi9cbiAgY2xhc3MgT3B0aW9uYWxNdXRhYmxlRGF0YSBleHRlbmRzIHN1cGVyQ2xhc3Mge1xuXG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluc3RhbmNlLWxldmVsIGZsYWcgZm9yIGNvbmZpZ3VyaW5nIHRoZSBkaXJ0eS1jaGVja2luZyBzdHJhdGVneVxuICAgICAgICAgKiBmb3IgdGhpcyBlbGVtZW50LiAgV2hlbiB0cnVlLCBPYmplY3RzIGFuZCBBcnJheXMgd2lsbCBza2lwIGRpcnR5XG4gICAgICAgICAqIGNoZWNraW5nLCBvdGhlcndpc2Ugc3RyaWN0IGVxdWFsaXR5IGNoZWNraW5nIHdpbGwgYmUgdXNlZC5cbiAgICAgICAgICovXG4gICAgICAgIG11dGFibGVEYXRhOiBCb29sZWFuXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBgUHJvcGVydHlFZmZlY3RzYCB0byBwcm92aWRlIG9wdGlvbiBmb3Igc2tpcHBpbmdcbiAgICAgKiBzdHJpY3QgZXF1YWxpdHkgY2hlY2tpbmcgZm9yIE9iamVjdHMgYW5kIEFycmF5cy5cbiAgICAgKlxuICAgICAqIFdoZW4gYHRoaXMubXV0YWJsZURhdGFgIGlzIHRydWUgb24gdGhpcyBpbnN0YW5jZSwgdGhpcyBtZXRob2RcbiAgICAgKiBwdWxscyB0aGUgdmFsdWUgdG8gZGlydHkgY2hlY2sgYWdhaW5zdCBmcm9tIHRoZSBgX19kYXRhVGVtcGAgY2FjaGVcbiAgICAgKiAocmF0aGVyIHRoYW4gdGhlIG5vcm1hbCBgX19kYXRhYCBjYWNoZSkgZm9yIE9iamVjdHMuICBTaW5jZSB0aGUgdGVtcFxuICAgICAqIGNhY2hlIGlzIGNsZWFyZWQgYXQgdGhlIGVuZCBvZiBhIHR1cm4sIHRoaXMgaW1wbGVtZW50YXRpb24gYWxsb3dzXG4gICAgICogc2lkZS1lZmZlY3RzIG9mIGRlZXAgb2JqZWN0IGNoYW5nZXMgdG8gYmUgcHJvY2Vzc2VkIGJ5IHJlLXNldHRpbmcgdGhlXG4gICAgICogc2FtZSBvYmplY3QgKHVzaW5nIHRoZSB0ZW1wIGNhY2hlIGFzIGFuIGluLXR1cm4gYmFja3N0b3AgdG8gcHJldmVudFxuICAgICAqIGN5Y2xlcyBkdWUgdG8gMi13YXkgbm90aWZpY2F0aW9uKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBOZXcgcHJvcGVydHkgdmFsdWVcbiAgICAgKiBAcGFyYW0geyp9IG9sZCBQcmV2aW91cyBwcm9wZXJ0eSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSBjb25zaWRlcmVkIGEgY2hhbmdlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9zaG91bGRQcm9wZXJ0eUNoYW5nZShwcm9wZXJ0eSwgdmFsdWUsIG9sZCkge1xuICAgICAgcmV0dXJuIG11dGFibGVQcm9wZXJ0eUNoYW5nZSh0aGlzLCBwcm9wZXJ0eSwgdmFsdWUsIG9sZCwgdGhpcy5tdXRhYmxlRGF0YSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE9wdGlvbmFsTXV0YWJsZURhdGE7XG5cbn0pO1xuXG4vLyBFeHBvcnQgZm9yIHVzZSBieSBsZWdhY3kgYmVoYXZpb3Jcbk11dGFibGVEYXRhLl9tdXRhYmxlUHJvcGVydHlDaGFuZ2UgPSBtdXRhYmxlUHJvcGVydHlDaGFuZ2U7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4vKipcbiAqIE1vZHVsZSBmb3IgcHJlcGFyaW5nIGFuZCBzdGFtcGluZyBpbnN0YW5jZXMgb2YgdGVtcGxhdGVzIHRoYXQgdXRpbGl6ZVxuICogUG9seW1lcidzIGRhdGEtYmluZGluZyBhbmQgZGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXIgZmVhdHVyZXMuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgLy8gR2V0IGEgdGVtcGxhdGUgZnJvbSBzb21ld2hlcmUsIGUuZy4gbGlnaHQgRE9NXG4gKiAgICAgbGV0IHRlbXBsYXRlID0gdGhpcy5xdWVyeVNlbGVjdG9yKCd0ZW1wbGF0ZScpO1xuICogICAgIC8vIFByZXBhcmUgdGhlIHRlbXBsYXRlXG4gKiAgICAgbGV0IFRlbXBsYXRlQ2xhc3MgPSBUZW1wbGF0aXplLnRlbXBsYXRpemUodGVtcGxhdGUpO1xuICogICAgIC8vIEluc3RhbmNlIHRoZSB0ZW1wbGF0ZSB3aXRoIGFuIGluaXRpYWwgZGF0YSBtb2RlbFxuICogICAgIGxldCBpbnN0YW5jZSA9IG5ldyBUZW1wbGF0ZUNsYXNzKHtteVByb3A6ICdpbml0aWFsJ30pO1xuICogICAgIC8vIEluc2VydCB0aGUgaW5zdGFuY2UncyBET00gc29tZXdoZXJlLCBlLmcuIGVsZW1lbnQncyBzaGFkb3cgRE9NXG4gKiAgICAgdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKGluc3RhbmNlLnJvb3QpO1xuICogICAgIC8vIENoYW5naW5nIGEgcHJvcGVydHkgb24gdGhlIGluc3RhbmNlIHdpbGwgcHJvcGFnYXRlIHRvIGJpbmRpbmdzXG4gKiAgICAgLy8gaW4gdGhlIHRlbXBsYXRlXG4gKiAgICAgaW5zdGFuY2UubXlQcm9wID0gJ25ldyB2YWx1ZSc7XG4gKlxuICogVGhlIGBvcHRpb25zYCBkaWN0aW9uYXJ5IHBhc3NlZCB0byBgdGVtcGxhdGl6ZWAgYWxsb3dzIGZvciBjdXN0b21pemluZ1xuICogZmVhdHVyZXMgb2YgdGhlIGdlbmVyYXRlZCB0ZW1wbGF0ZSBjbGFzcywgaW5jbHVkaW5nIGhvdyBvdXRlci1zY29wZSBob3N0XG4gKiBwcm9wZXJ0aWVzIHNob3VsZCBiZSBmb3J3YXJkZWQgaW50byB0ZW1wbGF0ZSBpbnN0YW5jZXMsIGhvdyBhbnkgaW5zdGFuY2VcbiAqIHByb3BlcnRpZXMgYWRkZWQgaW50byB0aGUgdGVtcGxhdGUncyBzY29wZSBzaG91bGQgYmUgbm90aWZpZWQgb3V0IHRvXG4gKiB0aGUgaG9zdCwgYW5kIHdoZXRoZXIgdGhlIGluc3RhbmNlIHNob3VsZCBiZSBkZWNvcmF0ZWQgYXMgYSBcInBhcmVudCBtb2RlbFwiXG4gKiBvZiBhbnkgZXZlbnQgaGFuZGxlcnMuXG4gKlxuICogICAgIC8vIEN1c3RvbWl6ZSBwcm9wZXJ0eSBmb3J3YXJkaW5nIGFuZCBldmVudCBtb2RlbCBkZWNvcmF0aW9uXG4gKiAgICAgbGV0IFRlbXBsYXRlQ2xhc3MgPSBUZW1wbGF0aXplLnRlbXBsYXRpemUodGVtcGxhdGUsIHRoaXMsIHtcbiAqICAgICAgIHBhcmVudE1vZGVsOiB0cnVlLFxuICogICAgICAgZm9yd2FyZEhvc3RQcm9wKHByb3BlcnR5LCB2YWx1ZSkgey4uLn0sXG4gKiAgICAgICBpbnN0YW5jZVByb3BzOiB7Li4ufSxcbiAqICAgICAgIG5vdGlmeUluc3RhbmNlUHJvcChpbnN0YW5jZSwgcHJvcGVydHksIHZhbHVlKSB7Li4ufSxcbiAqICAgICB9KTtcbiAqXG4gKiBAc3VtbWFyeSBNb2R1bGUgZm9yIHByZXBhcmluZyBhbmQgc3RhbXBpbmcgaW5zdGFuY2VzIG9mIHRlbXBsYXRlc1xuICogICB1dGlsaXppbmcgUG9seW1lciB0ZW1wbGF0aW5nIGZlYXR1cmVzLlxuICovXG5cbmltcG9ydCAnLi9ib290LmpzJztcblxuaW1wb3J0IHsgUHJvcGVydHlFZmZlY3RzIH0gZnJvbSAnLi4vbWl4aW5zL3Byb3BlcnR5LWVmZmVjdHMuanMnO1xuaW1wb3J0IHsgTXV0YWJsZURhdGEgfSBmcm9tICcuLi9taXhpbnMvbXV0YWJsZS1kYXRhLmpzJztcbmltcG9ydCB7IHN0cmljdFRlbXBsYXRlUG9saWN5LCBsZWdhY3lXYXJuaW5ncyB9IGZyb20gJy4vc2V0dGluZ3MuanMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4vd3JhcC5qcyc7XG5cbi8vIEJhc2UgY2xhc3MgZm9yIEhUTUxUZW1wbGF0ZUVsZW1lbnQgZXh0ZW5zaW9uIHRoYXQgaGFzIHByb3BlcnR5IGVmZmVjdHNcbi8vIG1hY2hpbmVyeSBmb3IgcHJvcGFnYXRpbmcgaG9zdCBwcm9wZXJ0aWVzIHRvIGNoaWxkcmVuLiBUaGlzIGlzIGFuIEVTNVxuLy8gY2xhc3Mgb25seSBiZWNhdXNlIEJhYmVsIChpbmNvcnJlY3RseSkgcmVxdWlyZXMgc3VwZXIoKSBpbiB0aGUgY2xhc3Ncbi8vIGNvbnN0cnVjdG9yIGV2ZW4gdGhvdWdoIG5vIGB0aGlzYCBpcyB1c2VkIGFuZCBpdCByZXR1cm5zIGFuIGluc3RhbmNlLlxubGV0IG5ld0luc3RhbmNlID0gbnVsbDtcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtIVE1MVGVtcGxhdGVFbGVtZW50fVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gSFRNTFRlbXBsYXRlRWxlbWVudEV4dGVuc2lvbigpIHsgcmV0dXJuIG5ld0luc3RhbmNlOyB9XG5IVE1MVGVtcGxhdGVFbGVtZW50RXh0ZW5zaW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSFRNTFRlbXBsYXRlRWxlbWVudC5wcm90b3R5cGUsIHtcbiAgY29uc3RydWN0b3I6IHtcbiAgICB2YWx1ZTogSFRNTFRlbXBsYXRlRWxlbWVudEV4dGVuc2lvbixcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9XG59KTtcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c31cbiAqIEBleHRlbmRzIHtIVE1MVGVtcGxhdGVFbGVtZW50RXh0ZW5zaW9ufVxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgRGF0YVRlbXBsYXRlID0gUHJvcGVydHlFZmZlY3RzKEhUTUxUZW1wbGF0ZUVsZW1lbnRFeHRlbnNpb24pO1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQGltcGxlbWVudHMge1BvbHltZXJfTXV0YWJsZURhdGF9XG4gKiBAZXh0ZW5kcyB7RGF0YVRlbXBsYXRlfVxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgTXV0YWJsZURhdGFUZW1wbGF0ZSA9IE11dGFibGVEYXRhKERhdGFUZW1wbGF0ZSk7XG5cbi8vIEFwcGxpZXMgYSBEYXRhVGVtcGxhdGUgc3ViY2xhc3MgdG8gYSA8dGVtcGxhdGU+IGluc3RhbmNlXG5mdW5jdGlvbiB1cGdyYWRlVGVtcGxhdGUodGVtcGxhdGUsIGNvbnN0cnVjdG9yKSB7XG4gIG5ld0luc3RhbmNlID0gdGVtcGxhdGU7XG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZih0ZW1wbGF0ZSwgY29uc3RydWN0b3IucHJvdG90eXBlKTtcbiAgbmV3IGNvbnN0cnVjdG9yKCk7XG4gIG5ld0luc3RhbmNlID0gbnVsbDtcbn1cblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBUZW1wbGF0ZUluc3RhbmNlLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7SFRNTEVsZW1lbnR9XG4gKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCB0ZW1wbGF0ZUluc3RhbmNlQmFzZSA9IFByb3BlcnR5RWZmZWN0cyhjbGFzcyB7fSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93SGlkZUNoaWxkcmVuKGhpZGUsIGNoaWxkcmVuKSB7XG4gIGZvciAobGV0IGk9MDsgaTxjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGxldCBuID0gY2hpbGRyZW5baV07XG4gICAgLy8gSWdub3JlIG5vbi1jaGFuZ2VzXG4gICAgaWYgKEJvb2xlYW4oaGlkZSkgIT0gQm9vbGVhbihuLl9faGlkZVRlbXBsYXRlQ2hpbGRyZW5fXykpIHtcbiAgICAgIC8vIGNsZWFyIGFuZCByZXN0b3JlIHRleHRcbiAgICAgIGlmIChuLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgICBpZiAoaGlkZSkge1xuICAgICAgICAgIG4uX19wb2x5bWVyVGV4dENvbnRlbnRfXyA9IG4udGV4dENvbnRlbnQ7XG4gICAgICAgICAgbi50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG4udGV4dENvbnRlbnQgPSBuLl9fcG9seW1lclRleHRDb250ZW50X187XG4gICAgICAgIH1cbiAgICAgIC8vIHJlbW92ZSBhbmQgcmVwbGFjZSBzbG90XG4gICAgICB9IGVsc2UgaWYgKG4ubG9jYWxOYW1lID09PSAnc2xvdCcpIHtcbiAgICAgICAgaWYgKGhpZGUpIHtcbiAgICAgICAgICBuLl9fcG9seW1lclJlcGxhY2VkX18gPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCdoaWRkZW4tc2xvdCcpO1xuICAgICAgICAgIHdyYXAod3JhcChuKS5wYXJlbnROb2RlKS5yZXBsYWNlQ2hpbGQobi5fX3BvbHltZXJSZXBsYWNlZF9fLCBuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCByZXBsYWNlID0gbi5fX3BvbHltZXJSZXBsYWNlZF9fO1xuICAgICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgICB3cmFwKHdyYXAocmVwbGFjZSkucGFyZW50Tm9kZSkucmVwbGFjZUNoaWxkKG4sIHJlcGxhY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gaGlkZSBhbmQgc2hvdyBub2Rlc1xuICAgICAgZWxzZSBpZiAobi5zdHlsZSkge1xuICAgICAgICBpZiAoaGlkZSkge1xuICAgICAgICAgIG4uX19wb2x5bWVyRGlzcGxheV9fID0gbi5zdHlsZS5kaXNwbGF5O1xuICAgICAgICAgIG4uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuLnN0eWxlLmRpc3BsYXkgPSBuLl9fcG9seW1lckRpc3BsYXlfXztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBuLl9faGlkZVRlbXBsYXRlQ2hpbGRyZW5fXyA9IGhpZGU7XG4gICAgaWYgKG4uX3Nob3dIaWRlQ2hpbGRyZW4pIHtcbiAgICAgIG4uX3Nob3dIaWRlQ2hpbGRyZW4oaGlkZSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBvbHltZXJcbiAqIEBjdXN0b21FbGVtZW50XG4gKiBAYXBwbGllc01peGluIFByb3BlcnR5RWZmZWN0c1xuICogQHVucmVzdHJpY3RlZFxuICovXG5jbGFzcyBUZW1wbGF0ZUluc3RhbmNlQmFzZSBleHRlbmRzIHRlbXBsYXRlSW5zdGFuY2VCYXNlIHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2NvbmZpZ3VyZVByb3BlcnRpZXMocHJvcHMpO1xuICAgIC8qKiBAdHlwZSB7IVN0YW1wZWRUZW1wbGF0ZX0gKi9cbiAgICB0aGlzLnJvb3QgPSB0aGlzLl9zdGFtcFRlbXBsYXRlKHRoaXMuX19kYXRhSG9zdCk7XG4gICAgLy8gU2F2ZSBsaXN0IG9mIHN0YW1wZWQgY2hpbGRyZW5cbiAgICBsZXQgY2hpbGRyZW4gPSBbXTtcbiAgICAvKiogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9ICovXG4gICAgdGhpcy5jaGlsZHJlbiA9IC8qKiBAdHlwZSB7IU5vZGVMaXN0fSAqLyAoY2hpbGRyZW4pO1xuICAgIC8vIFBvbHltZXIgMS54IGRpZCBub3QgdXNlIGBQb2x5bWVyLmRvbWAgaGVyZSBzbyBub3QgYm90aGVyaW5nLlxuICAgIGZvciAobGV0IG4gPSB0aGlzLnJvb3QuZmlyc3RDaGlsZDsgbjsgbj1uLm5leHRTaWJsaW5nKSB7XG4gICAgICBjaGlsZHJlbi5wdXNoKG4pO1xuICAgICAgbi5fX3RlbXBsYXRpemVJbnN0YW5jZSA9IHRoaXM7XG4gICAgfVxuICAgIGlmICh0aGlzLl9fdGVtcGxhdGl6ZU93bmVyICYmXG4gICAgICB0aGlzLl9fdGVtcGxhdGl6ZU93bmVyLl9faGlkZVRlbXBsYXRlQ2hpbGRyZW5fXykge1xuICAgICAgdGhpcy5fc2hvd0hpZGVDaGlsZHJlbih0cnVlKTtcbiAgICB9XG4gICAgLy8gRmx1c2ggcHJvcHMgb25seSB3aGVuIHByb3BzIGFyZSBwYXNzZWQgaWYgaW5zdGFuY2UgcHJvcHMgZXhpc3RcbiAgICAvLyBvciB3aGVuIHRoZXJlIGlzbid0IGluc3RhbmNlIHByb3BzLlxuICAgIGxldCBvcHRpb25zID0gdGhpcy5fX3RlbXBsYXRpemVPcHRpb25zO1xuICAgIGlmICgocHJvcHMgJiYgb3B0aW9ucy5pbnN0YW5jZVByb3BzKSB8fCAhb3B0aW9ucy5pbnN0YW5jZVByb3BzKSB7XG4gICAgICB0aGlzLl9lbmFibGVQcm9wZXJ0aWVzKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDb25maWd1cmUgdGhlIGdpdmVuIGBwcm9wc2AgYnkgY2FsbGluZyBgX3NldFBlbmRpbmdQcm9wZXJ0eWAuIEFsc29cbiAgICogc2V0cyBhbnkgcHJvcGVydGllcyBzdG9yZWQgaW4gYF9faG9zdFByb3BzYC5cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIE9iamVjdCBvZiBwcm9wZXJ0eSBuYW1lLXZhbHVlIHBhaXJzIHRvIHNldC5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIF9jb25maWd1cmVQcm9wZXJ0aWVzKHByb3BzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSB0aGlzLl9fdGVtcGxhdGl6ZU9wdGlvbnM7XG4gICAgaWYgKG9wdGlvbnMuZm9yd2FyZEhvc3RQcm9wKSB7XG4gICAgICBmb3IgKGxldCBocHJvcCBpbiB0aGlzLl9faG9zdFByb3BzKSB7XG4gICAgICAgIHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eShocHJvcCwgdGhpcy5fX2RhdGFIb3N0WydfaG9zdF8nICsgaHByb3BdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQW55IGluc3RhbmNlIHByb3BzIHBhc3NlZCBpbiB0aGUgY29uc3RydWN0b3Igd2lsbCBvdmVyd3JpdGUgaG9zdCBwcm9wcztcbiAgICAvLyBub3JtYWxseSB0aGlzIHdvdWxkIGJlIGEgdXNlciBlcnJvciBidXQgd2UgZG9uJ3Qgc3BlY2lmaWNhbGx5IGZpbHRlciB0aGVtXG4gICAgZm9yIChsZXQgaXByb3AgaW4gcHJvcHMpIHtcbiAgICAgIHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eShpcHJvcCwgcHJvcHNbaXByb3BdKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEZvcndhcmRzIGEgaG9zdCBwcm9wZXJ0eSB0byB0aGlzIGluc3RhbmNlLiAgVGhpcyBtZXRob2Qgc2hvdWxkIGJlXG4gICAqIGNhbGxlZCBvbiBpbnN0YW5jZXMgZnJvbSB0aGUgYG9wdGlvbnMuZm9yd2FyZEhvc3RQcm9wYCBjYWxsYmFja1xuICAgKiB0byBwcm9wYWdhdGUgY2hhbmdlcyBvZiBob3N0IHByb3BlcnRpZXMgdG8gZWFjaCBpbnN0YW5jZS5cbiAgICpcbiAgICogTm90ZSB0aGlzIG1ldGhvZCBlbnF1ZXVlcyB0aGUgY2hhbmdlLCB3aGljaCBhcmUgZmx1c2hlZCBhcyBhIGJhdGNoLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSBvciBwYXRoIG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvZiB0aGUgcHJvcGVydHkgdG8gZm9yd2FyZFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgZm9yd2FyZEhvc3RQcm9wKHByb3AsIHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChwcm9wLCB2YWx1ZSwgZmFsc2UsIHRydWUpKSB7XG4gICAgICB0aGlzLl9fZGF0YUhvc3QuX2VucXVldWVDbGllbnQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHBvaW50IGZvciBhZGRpbmcgY3VzdG9tIG9yIHNpbXVsYXRlZCBldmVudCBoYW5kbGluZy5cbiAgICpcbiAgICogQG92ZXJyaWRlXG4gICAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgTm9kZSB0byBhZGQgZXZlbnQgbGlzdGVuZXIgdG9cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIGV2ZW50XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUV2ZW50KTp2b2lkfSBoYW5kbGVyIExpc3RlbmVyIGZ1bmN0aW9uIHRvIGFkZFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgX2FkZEV2ZW50TGlzdGVuZXJUb05vZGUobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgaWYgKHRoaXMuX21ldGhvZEhvc3QgJiYgdGhpcy5fX3RlbXBsYXRpemVPcHRpb25zLnBhcmVudE1vZGVsKSB7XG4gICAgICAvLyBJZiB0aGlzIGluc3RhbmNlIHNob3VsZCBiZSBjb25zaWRlcmVkIGEgcGFyZW50IG1vZGVsLCBkZWNvcmF0ZVxuICAgICAgLy8gZXZlbnRzIHRoaXMgdGVtcGxhdGUgaW5zdGFuY2UgYXMgYG1vZGVsYFxuICAgICAgdGhpcy5fbWV0aG9kSG9zdC5fYWRkRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBldmVudE5hbWUsIChlKSA9PiB7XG4gICAgICAgIGUubW9kZWwgPSB0aGlzO1xuICAgICAgICBoYW5kbGVyKGUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSBkZWxlZ2F0ZSB0byB0aGUgdGVtcGxhdGUncyBob3N0ICh3aGljaCBjb3VsZCBiZSlcbiAgICAgIC8vIGFub3RoZXIgdGVtcGxhdGUgaW5zdGFuY2VcbiAgICAgIGxldCB0ZW1wbGF0ZUhvc3QgPSB0aGlzLl9fZGF0YUhvc3QuX19kYXRhSG9zdDtcbiAgICAgIGlmICh0ZW1wbGF0ZUhvc3QpIHtcbiAgICAgICAgdGVtcGxhdGVIb3N0Ll9hZGRFdmVudExpc3RlbmVyVG9Ob2RlKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTaG93cyBvciBoaWRlcyB0aGUgdGVtcGxhdGUgaW5zdGFuY2UgdG9wIGxldmVsIGNoaWxkIGVsZW1lbnRzLiBGb3JcbiAgICogdGV4dCBub2RlcywgYHRleHRDb250ZW50YCBpcyByZW1vdmVkIHdoaWxlIFwiaGlkZGVuXCIgYW5kIHJlcGxhY2VkIHdoZW5cbiAgICogXCJzaG93bi5cIlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhpZGUgU2V0IHRvIHRydWUgdG8gaGlkZSB0aGUgY2hpbGRyZW47XG4gICAqIHNldCB0byBmYWxzZSB0byBzaG93IHRoZW0uXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9zaG93SGlkZUNoaWxkcmVuKGhpZGUpIHtcbiAgICBzaG93SGlkZUNoaWxkcmVuKGhpZGUsIHRoaXMuY2hpbGRyZW4pO1xuICB9XG4gIC8qKlxuICAgKiBPdmVycmlkZXMgZGVmYXVsdCBwcm9wZXJ0eS1lZmZlY3RzIGltcGxlbWVudGF0aW9uIHRvIGludGVyY2VwdFxuICAgKiB0ZXh0Q29udGVudCBiaW5kaW5ncyB3aGlsZSBjaGlsZHJlbiBhcmUgXCJoaWRkZW5cIiBhbmQgY2FjaGUgaW5cbiAgICogcHJpdmF0ZSBzdG9yYWdlIGZvciBsYXRlciByZXRyaWV2YWwuXG4gICAqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcGFyYW0geyFOb2RlfSBub2RlIFRoZSBub2RlIHRvIHNldCBhIHByb3BlcnR5IG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFRoZSBwcm9wZXJ0eSB0byBzZXRcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0XG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9zZXRVbm1hbmFnZWRQcm9wZXJ0eVRvTm9kZShub2RlLCBwcm9wLCB2YWx1ZSkge1xuICAgIGlmIChub2RlLl9faGlkZVRlbXBsYXRlQ2hpbGRyZW5fXyAmJlxuICAgICAgICBub2RlLm5vZGVUeXBlID09IE5vZGUuVEVYVF9OT0RFICYmIHByb3AgPT0gJ3RleHRDb250ZW50Jykge1xuICAgICAgbm9kZS5fX3BvbHltZXJUZXh0Q29udGVudF9fID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLl9zZXRVbm1hbmFnZWRQcm9wZXJ0eVRvTm9kZShub2RlLCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBGaW5kIHRoZSBwYXJlbnQgbW9kZWwgb2YgdGhpcyB0ZW1wbGF0ZSBpbnN0YW5jZS4gIFRoZSBwYXJlbnQgbW9kZWxcbiAgICogaXMgZWl0aGVyIGFub3RoZXIgdGVtcGxhdGl6ZSBpbnN0YW5jZSB0aGF0IGhhZCBvcHRpb24gYHBhcmVudE1vZGVsOiB0cnVlYCxcbiAgICogb3IgZWxzZSB0aGUgaG9zdCBlbGVtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IFRoZSBwYXJlbnQgbW9kZWwgb2YgdGhpcyBpbnN0YW5jZVxuICAgKi9cbiAgZ2V0IHBhcmVudE1vZGVsKCkge1xuICAgIGxldCBtb2RlbCA9IHRoaXMuX19wYXJlbnRNb2RlbDtcbiAgICBpZiAoIW1vZGVsKSB7XG4gICAgICBsZXQgb3B0aW9ucztcbiAgICAgIG1vZGVsID0gdGhpcztcbiAgICAgIGRvIHtcbiAgICAgICAgLy8gQSB0ZW1wbGF0ZSBpbnN0YW5jZSdzIGBfX2RhdGFIb3N0YCBpcyBhIDx0ZW1wbGF0ZT5cbiAgICAgICAgLy8gYG1vZGVsLl9fZGF0YUhvc3QuX19kYXRhSG9zdGAgaXMgdGhlIHRlbXBsYXRlJ3MgaG9zdFxuICAgICAgICBtb2RlbCA9IG1vZGVsLl9fZGF0YUhvc3QuX19kYXRhSG9zdDtcbiAgICAgIH0gd2hpbGUgKChvcHRpb25zID0gbW9kZWwuX190ZW1wbGF0aXplT3B0aW9ucykgJiYgIW9wdGlvbnMucGFyZW50TW9kZWwpO1xuICAgICAgdGhpcy5fX3BhcmVudE1vZGVsID0gbW9kZWw7XG4gICAgfVxuICAgIHJldHVybiBtb2RlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdHViIG9mIEhUTUxFbGVtZW50J3MgYGRpc3BhdGNoRXZlbnRgLCBzbyB0aGF0IGVmZmVjdHMgdGhhdCBtYXlcbiAgICogZGlzcGF0Y2ggZXZlbnRzIHNhZmVseSBuby1vcC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgRXZlbnQgdG8gZGlzcGF0Y2hcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gQWx3YXlzIHRydWUuXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgIGRpc3BhdGNoRXZlbnQoZXZlbnQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vKiogQHR5cGUgeyFEYXRhVGVtcGxhdGV9ICovXG5UZW1wbGF0ZUluc3RhbmNlQmFzZS5wcm90b3R5cGUuX19kYXRhSG9zdDtcbi8qKiBAdHlwZSB7IVRlbXBsYXRpemVPcHRpb25zfSAqL1xuVGVtcGxhdGVJbnN0YW5jZUJhc2UucHJvdG90eXBlLl9fdGVtcGxhdGl6ZU9wdGlvbnM7XG4vKiogQHR5cGUgeyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gKi9cblRlbXBsYXRlSW5zdGFuY2VCYXNlLnByb3RvdHlwZS5fbWV0aG9kSG9zdDtcbi8qKiBAdHlwZSB7IU9iamVjdH0gKi9cblRlbXBsYXRlSW5zdGFuY2VCYXNlLnByb3RvdHlwZS5fX3RlbXBsYXRpemVPd25lcjtcbi8qKiBAdHlwZSB7IU9iamVjdH0gKi9cblRlbXBsYXRlSW5zdGFuY2VCYXNlLnByb3RvdHlwZS5fX2hvc3RQcm9wcztcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtUZW1wbGF0ZUluc3RhbmNlQmFzZX1cbiAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX011dGFibGVEYXRhfVxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgTXV0YWJsZVRlbXBsYXRlSW5zdGFuY2VCYXNlID0gTXV0YWJsZURhdGEoXG4gICAgLy8gVGhpcyBjYXN0IHNob3VsZG4ndCBiZSBuZWNjZXNzYXJ5LCBidXQgQ2xvc3VyZSBkb2Vzbid0IHVuZGVyc3RhbmQgdGhhdFxuICAgIC8vIFRlbXBsYXRlSW5zdGFuY2VCYXNlIGlzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAgLyoqIEB0eXBlIHtmdW5jdGlvbihuZXc6VGVtcGxhdGVJbnN0YW5jZUJhc2UpfSAqLyAoVGVtcGxhdGVJbnN0YW5jZUJhc2UpKTtcblxuZnVuY3Rpb24gZmluZE1ldGhvZEhvc3QodGVtcGxhdGUpIHtcbiAgLy8gVGVjaG5pY2FsbHkgdGhpcyBzaG91bGQgYmUgdGhlIG93bmVyIG9mIHRoZSBvdXRlcm1vc3QgdGVtcGxhdGUuXG4gIC8vIEluIHNoYWRvdyBkb20sIHRoaXMgaXMgYWx3YXlzIGdldFJvb3ROb2RlKCkuaG9zdCwgYnV0IHdlIGNhblxuICAvLyBhcHByb3hpbWF0ZSB0aGlzIHZpYSBjb29wZXJhdGlvbiB3aXRoIG91ciBkYXRhSG9zdCBhbHdheXMgc2V0dGluZ1xuICAvLyBgX21ldGhvZEhvc3RgIGFzIGxvbmcgYXMgdGhlcmUgd2VyZSBiaW5kaW5ncyAob3IgaWQncykgb24gdGhpc1xuICAvLyBpbnN0YW5jZSBjYXVzaW5nIGl0IHRvIGdldCBhIGRhdGFIb3N0LlxuICBsZXQgdGVtcGxhdGVIb3N0ID0gdGVtcGxhdGUuX19kYXRhSG9zdDtcbiAgcmV0dXJuIHRlbXBsYXRlSG9zdCAmJiB0ZW1wbGF0ZUhvc3QuX21ldGhvZEhvc3QgfHwgdGVtcGxhdGVIb3N0O1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYyAqL1xuLyoqXG4gKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBjbGFzcy5wcm90b3R5cGUgaXMgbm90IGRlZmluZWQgZm9yIHNvbWUgcmVhc29uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRlbXBsYXRpemVyQ2xhc3ModGVtcGxhdGUsIHRlbXBsYXRlSW5mbywgb3B0aW9ucykge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIHtUZW1wbGF0ZUluc3RhbmNlQmFzZX1cbiAgICovXG4gIGxldCB0ZW1wbGF0aXplckJhc2UgPSBvcHRpb25zLm11dGFibGVEYXRhID9cbiAgICBNdXRhYmxlVGVtcGxhdGVJbnN0YW5jZUJhc2UgOiBUZW1wbGF0ZUluc3RhbmNlQmFzZTtcblxuICAvLyBBZmZvcmRhbmNlIGZvciBnbG9iYWwgbWl4aW5zIG9udG8gVGVtcGxhdGl6ZUluc3RhbmNlXG4gIGlmICh0ZW1wbGF0aXplLm1peGluKSB7XG4gICAgdGVtcGxhdGl6ZXJCYXNlID0gdGVtcGxhdGl6ZS5taXhpbih0ZW1wbGF0aXplckJhc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFub255bW91cyBjbGFzcyBjcmVhdGVkIGJ5IHRoZSB0ZW1wbGF0aXplXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbGV0IGtsYXNzID0gY2xhc3MgZXh0ZW5kcyB0ZW1wbGF0aXplckJhc2UgeyB9O1xuICAvKiogQG92ZXJyaWRlICovXG4gIGtsYXNzLnByb3RvdHlwZS5fX3RlbXBsYXRpemVPcHRpb25zID0gb3B0aW9ucztcbiAga2xhc3MucHJvdG90eXBlLl9iaW5kVGVtcGxhdGUodGVtcGxhdGUpO1xuICBhZGROb3RpZnlFZmZlY3RzKGtsYXNzLCB0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCBvcHRpb25zKTtcbiAgcmV0dXJuIGtsYXNzO1xufVxuXG4vKipcbiAqIEFkZHMgcHJvcGFnYXRlIGVmZmVjdHMgZnJvbSB0aGUgdGVtcGxhdGUgdG8gdGhlIHRlbXBsYXRlIGluc3RhbmNlIGZvclxuICogcHJvcGVydGllcyB0aGF0IHRoZSBob3N0IGJpbmRzIHRvIHRoZSB0ZW1wbGF0ZSB1c2luZyB0aGUgYF9ob3N0X2AgcHJlZml4LlxuICpcbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IGNsYXNzLnByb3RvdHlwZSBpcyBub3QgZGVmaW5lZCBmb3Igc29tZSByZWFzb25cbiAqL1xuZnVuY3Rpb24gYWRkUHJvcGFnYXRlRWZmZWN0cyh0YXJnZXQsIHRlbXBsYXRlSW5mbywgb3B0aW9ucywgbWV0aG9kSG9zdCkge1xuICBsZXQgdXNlckZvcndhcmRIb3N0UHJvcCA9IG9wdGlvbnMuZm9yd2FyZEhvc3RQcm9wO1xuICBpZiAodXNlckZvcndhcmRIb3N0UHJvcCAmJiB0ZW1wbGF0ZUluZm8uaGFzSG9zdFByb3BzKSB7XG4gICAgLy8gVW5kZXIgdGhlIGByZW1vdmVOZXN0ZWRUZW1wbGF0ZXNgIG9wdGltaXphdGlvbiwgYSBjdXN0b20gZWxlbWVudCBsaWtlXG4gICAgLy8gYGRvbS1pZmAgb3IgYGRvbS1yZXBlYXRgIGNhbiBpdHNlbGYgYmUgdHJlYXRlZCBhcyB0aGUgXCJ0ZW1wbGF0ZVwiOyB0aGlzXG4gICAgLy8gZmxhZyBpcyB1c2VkIHRvIHN3aXRjaCBiZXR3ZWVuIHVwZ3JhZGluZyBhIGA8dGVtcGxhdGU+YCB0byBiZSBhIHByb3BlcnR5XG4gICAgLy8gZWZmZWN0cyBjbGllbnQgdnMuIGFkZGluZyB0aGUgZWZmZWN0cyBkaXJlY3RseSB0byB0aGUgY3VzdG9tIGVsZW1lbnRcbiAgICBjb25zdCBpc1RlbXBsYXRlID0gdGFyZ2V0LmxvY2FsTmFtZSA9PSAndGVtcGxhdGUnO1xuICAgIC8vIFByb3ZpZGUgZGF0YSBBUEkgYW5kIHByb3BlcnR5IGVmZmVjdHMgb24gbWVtb2l6ZWQgdGVtcGxhdGUgY2xhc3NcbiAgICBsZXQga2xhc3MgPSB0ZW1wbGF0ZUluZm8udGVtcGxhdGl6ZVRlbXBsYXRlQ2xhc3M7XG4gICAgaWYgKCFrbGFzcykge1xuICAgICAgaWYgKGlzVGVtcGxhdGUpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAZXh0ZW5kcyB7RGF0YVRlbXBsYXRlfVxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IHRlbXBsYXRpemVkQmFzZSA9XG4gICAgICAgICAgICBvcHRpb25zLm11dGFibGVEYXRhID8gTXV0YWJsZURhdGFUZW1wbGF0ZSA6IERhdGFUZW1wbGF0ZTtcblxuICAgICAgICAvLyBOT1RFOiBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWNvbXBpbGVyL2lzc3Vlcy8yOTI4LFxuICAgICAgICAvLyBjb21iaW5pbmcgdGhlIG5leHQgdHdvIGxpbmVzIGludG8gb25lIGFzc2lnbm1lbnQgY2F1c2VzIGEgc3B1cmlvdXNcbiAgICAgICAgLy8gdHlwZSBlcnJvci5cbiAgICAgICAgLyoqIEBwcml2YXRlICovXG4gICAgICAgIGNsYXNzIFRlbXBsYXRpemVkVGVtcGxhdGUgZXh0ZW5kcyB0ZW1wbGF0aXplZEJhc2Uge31cbiAgICAgICAga2xhc3MgPSB0ZW1wbGF0ZUluZm8udGVtcGxhdGl6ZVRlbXBsYXRlQ2xhc3MgPSBUZW1wbGF0aXplZFRlbXBsYXRlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAZXh0ZW5kcyB7UG9seW1lckVsZW1lbnR9XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCB0ZW1wbGF0aXplZEJhc2UgPSB0YXJnZXQuY29uc3RydWN0b3I7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgY2FjaGVkIHN1YmNsYXNzIG9mIHRoZSBiYXNlIGN1c3RvbSBlbGVtZW50IGNsYXNzIG9udG8gd2hpY2hcbiAgICAgICAgLy8gdG8gcHV0IHRoZSB0ZW1wbGF0ZS1zcGVjaWZpYyBwcm9wYWdhdGUgZWZmZWN0c1xuICAgICAgICAvLyBOT1RFOiBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWNvbXBpbGVyL2lzc3Vlcy8yOTI4LFxuICAgICAgICAvLyBjb21iaW5pbmcgdGhlIG5leHQgdHdvIGxpbmVzIGludG8gb25lIGFzc2lnbm1lbnQgY2F1c2VzIGEgc3B1cmlvdXNcbiAgICAgICAgLy8gdHlwZSBlcnJvci5cbiAgICAgICAgLyoqIEBwcml2YXRlICovXG4gICAgICAgIGNsYXNzIFRlbXBsYXRpemVkVGVtcGxhdGVFeHRlbnNpb24gZXh0ZW5kcyB0ZW1wbGF0aXplZEJhc2Uge31cbiAgICAgICAga2xhc3MgPSB0ZW1wbGF0ZUluZm8udGVtcGxhdGl6ZVRlbXBsYXRlQ2xhc3MgPVxuICAgICAgICAgICAgVGVtcGxhdGl6ZWRUZW1wbGF0ZUV4dGVuc2lvbjtcbiAgICAgIH1cbiAgICAgIC8vIEFkZCB0ZW1wbGF0ZSAtID5pbnN0YW5jZXMgZWZmZWN0c1xuICAgICAgLy8gYW5kIGhvc3QgPC0gdGVtcGxhdGUgZWZmZWN0c1xuICAgICAgbGV0IGhvc3RQcm9wcyA9IHRlbXBsYXRlSW5mby5ob3N0UHJvcHM7XG4gICAgICBmb3IgKGxldCBwcm9wIGluIGhvc3RQcm9wcykge1xuICAgICAgICBrbGFzcy5wcm90b3R5cGUuX2FkZFByb3BlcnR5RWZmZWN0KCdfaG9zdF8nICsgcHJvcCxcbiAgICAgICAgICBrbGFzcy5wcm90b3R5cGUuUFJPUEVSVFlfRUZGRUNUX1RZUEVTLlBST1BBR0FURSxcbiAgICAgICAgICB7Zm46IGNyZWF0ZUZvcndhcmRIb3N0UHJvcEVmZmVjdChwcm9wLCB1c2VyRm9yd2FyZEhvc3RQcm9wKX0pO1xuICAgICAgICBrbGFzcy5wcm90b3R5cGUuX2NyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5KCdfaG9zdF8nICsgcHJvcCk7XG4gICAgICB9XG4gICAgICBpZiAobGVnYWN5V2FybmluZ3MgJiYgbWV0aG9kSG9zdCkge1xuICAgICAgICB3YXJuT25VbmRlY2xhcmVkUHJvcGVydGllcyh0ZW1wbGF0ZUluZm8sIG9wdGlvbnMsIG1ldGhvZEhvc3QpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBNaXggYW55IHByZS1ib3VuZCBkYXRhIGludG8gX19kYXRhOyBubyBuZWVkIHRvIGZsdXNoIHRoaXMgdG9cbiAgICAvLyBpbnN0YW5jZXMgc2luY2UgdGhleSBwdWxsIGZyb20gdGhlIHRlbXBsYXRlIGF0IGluc3RhbmNlLXRpbWVcbiAgICBpZiAodGFyZ2V0Ll9fZGF0YVByb3RvKSB7XG4gICAgICAvLyBOb3RlLCBnZW5lcmFsbHkgYF9fZGF0YVByb3RvYCBjb3VsZCBiZSBjaGFpbmVkLCBidXQgaXQncyBndWFyYW50ZWVkXG4gICAgICAvLyB0byBub3QgYmUgc2luY2UgdGhpcyBpcyBhIHZhbmlsbGEgdGVtcGxhdGUgd2UganVzdCBhZGRlZCBlZmZlY3RzIHRvXG4gICAgICBPYmplY3QuYXNzaWduKHRhcmdldC5fX2RhdGEsIHRhcmdldC5fX2RhdGFQcm90byk7XG4gICAgfVxuICAgIGlmIChpc1RlbXBsYXRlKSB7XG4gICAgICB1cGdyYWRlVGVtcGxhdGUodGFyZ2V0LCBrbGFzcyk7XG4gICAgICAvLyBDbGVhciBhbnkgcGVuZGluZyBkYXRhIGZvciBwZXJmb3JtYW5jZVxuICAgICAgdGFyZ2V0Ll9fZGF0YVRlbXAgPSB7fTtcbiAgICAgIHRhcmdldC5fX2RhdGFQZW5kaW5nID0gbnVsbDtcbiAgICAgIHRhcmdldC5fX2RhdGFPbGQgPSBudWxsO1xuICAgICAgdGFyZ2V0Ll9lbmFibGVQcm9wZXJ0aWVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFN3aXp6bGUgdGhlIGNhY2hlZCBzdWJjbGFzcyBwcm90b3R5cGUgb250byB0aGUgY3VzdG9tIGVsZW1lbnRcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIGtsYXNzLnByb3RvdHlwZSk7XG4gICAgICAvLyBDaGVjayBmb3IgYW55IHByZS1ib3VuZCBpbnN0YW5jZSBob3N0IHByb3BlcnRpZXMsIGFuZCBkbyB0aGVcbiAgICAgIC8vIGluc3RhbmNlIHByb3BlcnR5IGRlbGV0ZS9hc3NpZ24gZGFuY2UgZm9yIHRob3NlIChkaXJlY3RseSBpbnRvIGRhdGE7XG4gICAgICAvLyBub3QgbmVlZCB0byBnbyB0aHJvdWdoIGFjY2Vzc29yIHNpbmNlIHRoZXkgYXJlIHB1bGxlZCBhdCBpbnN0YW5jZSB0aW1lKVxuICAgICAgY29uc3QgaG9zdFByb3BzID0gdGVtcGxhdGVJbmZvLmhvc3RQcm9wcztcbiAgICAgIGZvciAobGV0IHByb3AgaW4gaG9zdFByb3BzKSB7XG4gICAgICAgIHByb3AgPSAnX2hvc3RfJyArIHByb3A7XG4gICAgICAgIGlmIChwcm9wIGluIHRhcmdldCkge1xuICAgICAgICAgIGNvbnN0IHZhbCA9IHRhcmdldFtwcm9wXTtcbiAgICAgICAgICBkZWxldGUgdGFyZ2V0W3Byb3BdO1xuICAgICAgICAgIHRhcmdldC5fX2RhdGFbcHJvcF0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbi8qIGVzbGludC1lbmFibGUgdmFsaWQtanNkb2MgKi9cblxuZnVuY3Rpb24gY3JlYXRlRm9yd2FyZEhvc3RQcm9wRWZmZWN0KGhvc3RQcm9wLCB1c2VyRm9yd2FyZEhvc3RQcm9wKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb3J3YXJkSG9zdFByb3AodGVtcGxhdGUsIHByb3AsIHByb3BzKSB7XG4gICAgdXNlckZvcndhcmRIb3N0UHJvcC5jYWxsKHRlbXBsYXRlLl9fdGVtcGxhdGl6ZU93bmVyLFxuICAgICAgcHJvcC5zdWJzdHJpbmcoJ19ob3N0XycubGVuZ3RoKSwgcHJvcHNbcHJvcF0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGROb3RpZnlFZmZlY3RzKGtsYXNzLCB0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCBvcHRpb25zKSB7XG4gIGxldCBob3N0UHJvcHMgPSB0ZW1wbGF0ZUluZm8uaG9zdFByb3BzIHx8IHt9O1xuICBmb3IgKGxldCBpcHJvcCBpbiBvcHRpb25zLmluc3RhbmNlUHJvcHMpIHtcbiAgICBkZWxldGUgaG9zdFByb3BzW2lwcm9wXTtcbiAgICBsZXQgdXNlck5vdGlmeUluc3RhbmNlUHJvcCA9IG9wdGlvbnMubm90aWZ5SW5zdGFuY2VQcm9wO1xuICAgIGlmICh1c2VyTm90aWZ5SW5zdGFuY2VQcm9wKSB7XG4gICAgICBrbGFzcy5wcm90b3R5cGUuX2FkZFByb3BlcnR5RWZmZWN0KGlwcm9wLFxuICAgICAgICBrbGFzcy5wcm90b3R5cGUuUFJPUEVSVFlfRUZGRUNUX1RZUEVTLk5PVElGWSxcbiAgICAgICAge2ZuOiBjcmVhdGVOb3RpZnlJbnN0YW5jZVByb3BFZmZlY3QoaXByb3AsIHVzZXJOb3RpZnlJbnN0YW5jZVByb3ApfSk7XG4gICAgfVxuICB9XG4gIGlmIChvcHRpb25zLmZvcndhcmRIb3N0UHJvcCAmJiB0ZW1wbGF0ZS5fX2RhdGFIb3N0KSB7XG4gICAgZm9yIChsZXQgaHByb3AgaW4gaG9zdFByb3BzKSB7XG4gICAgICAvLyBBcyB3ZSdyZSBpdGVyYXRpbmcgaG9zdFByb3BzIGluIHRoaXMgZnVuY3Rpb24sIG5vdGUgd2hldGhlclxuICAgICAgLy8gdGhlcmUgd2VyZSBhbnksIGZvciBhbiBvcHRpbWl6YXRpb24gaW4gYWRkUHJvcGFnYXRlRWZmZWN0c1xuICAgICAgaWYgKCF0ZW1wbGF0ZUluZm8uaGFzSG9zdFByb3BzKSB7XG4gICAgICAgIHRlbXBsYXRlSW5mby5oYXNIb3N0UHJvcHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAga2xhc3MucHJvdG90eXBlLl9hZGRQcm9wZXJ0eUVmZmVjdChocHJvcCxcbiAgICAgICAga2xhc3MucHJvdG90eXBlLlBST1BFUlRZX0VGRkVDVF9UWVBFUy5OT1RJRlksXG4gICAgICAgIHtmbjogY3JlYXRlTm90aWZ5SG9zdFByb3BFZmZlY3QoKX0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVOb3RpZnlJbnN0YW5jZVByb3BFZmZlY3QoaW5zdFByb3AsIHVzZXJOb3RpZnlJbnN0YW5jZVByb3ApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG5vdGlmeUluc3RhbmNlUHJvcChpbnN0LCBwcm9wLCBwcm9wcykge1xuICAgIHVzZXJOb3RpZnlJbnN0YW5jZVByb3AuY2FsbChpbnN0Ll9fdGVtcGxhdGl6ZU93bmVyLFxuICAgICAgaW5zdCwgcHJvcCwgcHJvcHNbcHJvcF0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOb3RpZnlIb3N0UHJvcEVmZmVjdCgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG5vdGlmeUhvc3RQcm9wKGluc3QsIHByb3AsIHByb3BzKSB7XG4gICAgaW5zdC5fX2RhdGFIb3N0Ll9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgoJ19ob3N0XycgKyBwcm9wLCBwcm9wc1twcm9wXSwgdHJ1ZSwgdHJ1ZSk7XG4gIH07XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFub255bW91cyBgUHJvcGVydHlFZmZlY3RzYCBjbGFzcyBib3VuZCB0byB0aGVcbiAqIGA8dGVtcGxhdGU+YCBwcm92aWRlZC4gIEluc3RhbmNpbmcgdGhlIGNsYXNzIHdpbGwgcmVzdWx0IGluIHRoZVxuICogdGVtcGxhdGUgYmVpbmcgc3RhbXBlZCBpbnRvIGEgZG9jdW1lbnQgZnJhZ21lbnQgc3RvcmVkIGFzIHRoZSBpbnN0YW5jZSdzXG4gKiBgcm9vdGAgcHJvcGVydHksIGFmdGVyIHdoaWNoIGl0IGNhbiBiZSBhcHBlbmRlZCB0byB0aGUgRE9NLlxuICpcbiAqIFRlbXBsYXRlcyBtYXkgdXRpbGl6ZSBhbGwgUG9seW1lciBkYXRhLWJpbmRpbmcgZmVhdHVyZXMgYXMgd2VsbCBhc1xuICogZGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXJzLiAgRXZlbnQgbGlzdGVuZXJzIGFuZCBpbmxpbmUgY29tcHV0aW5nXG4gKiBmdW5jdGlvbnMgaW4gdGhlIHRlbXBsYXRlIHdpbGwgYmUgY2FsbGVkIG9uIHRoZSBob3N0IG9mIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiBUaGUgY29uc3RydWN0b3IgcmV0dXJuZWQgdGFrZXMgYSBzaW5nbGUgYXJndW1lbnQgZGljdGlvbmFyeSBvZiBpbml0aWFsXG4gKiBwcm9wZXJ0eSB2YWx1ZXMgdG8gcHJvcGFnYXRlIGludG8gdGVtcGxhdGUgYmluZGluZ3MuICBBZGRpdGlvbmFsbHlcbiAqIGhvc3QgcHJvcGVydGllcyBjYW4gYmUgZm9yd2FyZGVkIGluLCBhbmQgaW5zdGFuY2UgcHJvcGVydGllcyBjYW4gYmVcbiAqIG5vdGlmaWVkIG91dCBieSBwcm92aWRpbmcgb3B0aW9uYWwgY2FsbGJhY2tzIGluIHRoZSBgb3B0aW9uc2AgZGljdGlvbmFyeS5cbiAqXG4gKiBWYWxpZCBjb25maWd1cmF0aW9uIGluIGBvcHRpb25zYCBhcmUgYXMgZm9sbG93czpcbiAqXG4gKiAtIGBmb3J3YXJkSG9zdFByb3AocHJvcGVydHksIHZhbHVlKWA6IENhbGxlZCB3aGVuIGEgcHJvcGVydHkgcmVmZXJlbmNlZFxuICogICBpbiB0aGUgdGVtcGxhdGUgY2hhbmdlZCBvbiB0aGUgdGVtcGxhdGUncyBob3N0LiBBcyB0aGlzIGxpYnJhcnkgZG9lc1xuICogICBub3QgcmV0YWluIHJlZmVyZW5jZXMgdG8gdGVtcGxhdGVzIGluc3RhbmNlZCBieSB0aGUgdXNlciwgaXQgaXMgdGhlXG4gKiAgIHRlbXBsYXRpemUgb3duZXIncyByZXNwb25zaWJpbGl0eSB0byBmb3J3YXJkIGhvc3QgcHJvcGVydHkgY2hhbmdlcyBpbnRvXG4gKiAgIHVzZXItc3RhbXBlZCBpbnN0YW5jZXMuICBUaGUgYGluc3RhbmNlLmZvcndhcmRIb3N0UHJvcChwcm9wZXJ0eSwgdmFsdWUpYFxuICogICAgbWV0aG9kIG9uIHRoZSBnZW5lcmF0ZWQgY2xhc3Mgc2hvdWxkIGJlIGNhbGxlZCB0byBmb3J3YXJkIGhvc3RcbiAqICAgcHJvcGVydGllcyBpbnRvIHRoZSB0ZW1wbGF0ZSB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IHByb3BlcnR5LWNoYW5nZWRcbiAqICAgbm90aWZpY2F0aW9ucy4gQW55IHByb3BlcnRpZXMgcmVmZXJlbmNlZCBpbiB0aGUgdGVtcGxhdGUgdGhhdCBhcmUgbm90XG4gKiAgIGRlZmluZWQgaW4gYGluc3RhbmNlUHJvcHNgIHdpbGwgYmUgbm90aWZpZWQgdXAgdG8gdGhlIHRlbXBsYXRlJ3MgaG9zdFxuICogICBhdXRvbWF0aWNhbGx5LlxuICogLSBgaW5zdGFuY2VQcm9wc2A6IERpY3Rpb25hcnkgb2YgcHJvcGVydHkgbmFtZXMgdGhhdCB3aWxsIGJlIGFkZGVkXG4gKiAgIHRvIHRoZSBpbnN0YW5jZSBieSB0aGUgdGVtcGxhdGl6ZSBvd25lci4gIFRoZXNlIHByb3BlcnRpZXMgc2hhZG93IGFueVxuICogICBob3N0IHByb3BlcnRpZXMsIGFuZCBjaGFuZ2VzIHdpdGhpbiB0aGUgdGVtcGxhdGUgdG8gdGhlc2UgcHJvcGVydGllc1xuICogICB3aWxsIHJlc3VsdCBpbiBgbm90aWZ5SW5zdGFuY2VQcm9wYCBiZWluZyBjYWxsZWQuXG4gKiAtIGBtdXRhYmxlRGF0YWA6IFdoZW4gYHRydWVgLCB0aGUgZ2VuZXJhdGVkIGNsYXNzIHdpbGwgc2tpcCBzdHJpY3RcbiAqICAgZGlydHktY2hlY2tpbmcgZm9yIG9iamVjdHMgYW5kIGFycmF5cyAoYWx3YXlzIGNvbnNpZGVyIHRoZW0gdG8gYmVcbiAqICAgXCJkaXJ0eVwiKS5cbiAqIC0gYG5vdGlmeUluc3RhbmNlUHJvcChpbnN0YW5jZSwgcHJvcGVydHksIHZhbHVlKWA6IENhbGxlZCB3aGVuXG4gKiAgIGFuIGluc3RhbmNlIHByb3BlcnR5IGNoYW5nZXMuICBVc2VycyBtYXkgY2hvb3NlIHRvIGNhbGwgYG5vdGlmeVBhdGhgXG4gKiAgIG9uIGUuZy4gdGhlIG93bmVyIHRvIG5vdGlmeSB0aGUgY2hhbmdlLlxuICogLSBgcGFyZW50TW9kZWxgOiBXaGVuIGB0cnVlYCwgZXZlbnRzIGhhbmRsZWQgYnkgZGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXJzXG4gKiAgIChgb24tZXZlbnQ9XCJoYW5kbGVyXCJgKSB3aWxsIGJlIGRlY29yYXRlZCB3aXRoIGEgYG1vZGVsYCBwcm9wZXJ0eSBwb2ludGluZ1xuICogICB0byB0aGUgdGVtcGxhdGUgaW5zdGFuY2UgdGhhdCBzdGFtcGVkIGl0LiAgSXQgd2lsbCBhbHNvIGJlIHJldHVybmVkXG4gKiAgIGZyb20gYGluc3RhbmNlLnBhcmVudE1vZGVsYCBpbiBjYXNlcyB3aGVyZSB0ZW1wbGF0ZSBpbnN0YW5jZSBuZXN0aW5nXG4gKiAgIGNhdXNlcyBhbiBpbm5lciBtb2RlbCB0byBzaGFkb3cgYW4gb3V0ZXIgbW9kZWwuXG4gKlxuICogQWxsIGNhbGxiYWNrcyBhcmUgY2FsbGVkIGJvdW5kIHRvIHRoZSBgb3duZXJgLiBBbnkgY29udGV4dFxuICogbmVlZGVkIGZvciB0aGUgY2FsbGJhY2tzIChzdWNoIGFzIHJlZmVyZW5jZXMgdG8gYGluc3RhbmNlc2Agc3RhbXBlZClcbiAqIHNob3VsZCBiZSBzdG9yZWQgb24gdGhlIGBvd25lcmAgc3VjaCB0aGF0IHRoZXkgY2FuIGJlIHJldHJpZXZlZCB2aWFcbiAqIGB0aGlzYC5cbiAqXG4gKiBXaGVuIGBvcHRpb25zLmZvcndhcmRIb3N0UHJvcGAgaXMgZGVjbGFyZWQgYXMgYW4gb3B0aW9uLCBhbnkgcHJvcGVydGllc1xuICogcmVmZXJlbmNlZCBpbiB0aGUgdGVtcGxhdGUgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGZvcndhcmRlZCBmcm9tIHRoZSBob3N0IG9mXG4gKiB0aGUgYDx0ZW1wbGF0ZT5gIHRvIGluc3RhbmNlcywgd2l0aCB0aGUgZXhjZXB0aW9uIG9mIGFueSBwcm9wZXJ0aWVzIGxpc3RlZCBpblxuICogdGhlIGBvcHRpb25zLmluc3RhbmNlUHJvcHNgIG9iamVjdC4gIGBpbnN0YW5jZVByb3BzYCBhcmUgYXNzdW1lZCB0byBiZVxuICogbWFuYWdlZCBieSB0aGUgb3duZXIgb2YgdGhlIGluc3RhbmNlcywgZWl0aGVyIHBhc3NlZCBpbnRvIHRoZSBjb25zdHJ1Y3RvclxuICogb3Igc2V0IGFmdGVyIHRoZSBmYWN0LiAgTm90ZSwgYW55IHByb3BlcnRpZXMgcGFzc2VkIGludG8gdGhlIGNvbnN0cnVjdG9yIHdpbGxcbiAqIGFsd2F5cyBiZSBzZXQgdG8gdGhlIGluc3RhbmNlIChyZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhleSB3b3VsZCBub3JtYWxseVxuICogYmUgZm9yd2FyZGVkIGZyb20gdGhlIGhvc3QpLlxuICpcbiAqIE5vdGUgdGhhdCBgdGVtcGxhdGl6ZSgpYCBjYW4gYmUgcnVuIG9ubHkgb25jZSBmb3IgYSBnaXZlbiBgPHRlbXBsYXRlPmAuXG4gKiBGdXJ0aGVyIGNhbGxzIHdpbGwgcmVzdWx0IGluIGFuIGVycm9yLiBBbHNvLCB0aGVyZSBpcyBhIHNwZWNpYWxcbiAqIGJlaGF2aW9yIGlmIHRoZSB0ZW1wbGF0ZSB3YXMgZHVwbGljYXRlZCB0aHJvdWdoIGEgbWVjaGFuaXNtIHN1Y2ggYXNcbiAqIGA8ZG9tLXJlcGVhdD5gIG9yIGA8dGVzdC1maXh0dXJlPmAuIEluIHRoaXMgY2FzZSwgYWxsIGNhbGxzIHRvXG4gKiBgdGVtcGxhdGl6ZSgpYCByZXR1cm4gdGhlIHNhbWUgY2xhc3MgZm9yIGFsbCBkdXBsaWNhdGVzIG9mIGEgdGVtcGxhdGUuXG4gKiBUaGUgY2xhc3MgcmV0dXJuZWQgZnJvbSBgdGVtcGxhdGl6ZSgpYCBpcyBnZW5lcmF0ZWQgb25seSBvbmNlIHVzaW5nXG4gKiB0aGUgYG9wdGlvbnNgIGZyb20gdGhlIGZpcnN0IGNhbGwuIFRoaXMgbWVhbnMgdGhhdCBhbnkgYG9wdGlvbnNgXG4gKiBwcm92aWRlZCB0byBzdWJzZXF1ZW50IGNhbGxzIHdpbGwgYmUgaWdub3JlZC4gVGhlcmVmb3JlLCBpdCBpcyB2ZXJ5XG4gKiBpbXBvcnRhbnQgbm90IHRvIGNsb3NlIG92ZXIgYW55IHZhcmlhYmxlcyBpbnNpZGUgdGhlIGNhbGxiYWNrcy4gQWxzbyxcbiAqIGFycm93IGZ1bmN0aW9ucyBtdXN0IGJlIGF2b2lkZWQgYmVjYXVzZSB0aGV5IGJpbmQgdGhlIG91dGVyIGB0aGlzYC5cbiAqIEluc2lkZSB0aGUgY2FsbGJhY2tzLCBhbnkgY29udGV4dHVhbCBpbmZvcm1hdGlvbiBjYW4gYmUgYWNjZXNzZWRcbiAqIHRocm91Z2ggYHRoaXNgLCB3aGljaCBwb2ludHMgdG8gdGhlIGBvd25lcmAuXG4gKlxuICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgdG8gdGVtcGxhdGl6ZVxuICogQHBhcmFtIHtQb2x5bWVyX1Byb3BlcnR5RWZmZWN0cz19IG93bmVyIE93bmVyIG9mIHRoZSB0ZW1wbGF0ZSBpbnN0YW5jZXM7XG4gKiAgIGFueSBvcHRpb25hbCBjYWxsYmFja3Mgd2lsbCBiZSBib3VuZCB0byB0aGlzIG93bmVyLlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgZGljdGlvbmFyeSAoc2VlIHN1bW1hcnkgZm9yIGRldGFpbHMpXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VGVtcGxhdGVJbnN0YW5jZUJhc2UsIE9iamVjdD0pfSBHZW5lcmF0ZWQgY2xhc3MgYm91bmRcbiAqICAgdG8gdGhlIHRlbXBsYXRlIHByb3ZpZGVkXG4gKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRlbXBsYXRpemUodGVtcGxhdGUsIG93bmVyLCBvcHRpb25zKSB7XG4gIC8vIFVuZGVyIHN0cmljdFRlbXBsYXRlUG9saWN5LCB0aGUgdGVtcGxhdGl6ZWQgZWxlbWVudCBtdXN0IGJlIG93bmVkXG4gIC8vIGJ5IGEgKHRydXN0ZWQpIFBvbHltZXIgZWxlbWVudCwgaW5kaWNhdGVkIGJ5IGV4aXN0ZW5jZSBvZiBfbWV0aG9kSG9zdDtcbiAgLy8gZS5nLiBmb3IgZG9tLWlmICYgZG9tLXJlcGVhdCBpbiBtYWluIGRvY3VtZW50LCBfbWV0aG9kSG9zdCBpcyBudWxsXG4gIGlmIChzdHJpY3RUZW1wbGF0ZVBvbGljeSAmJiAhZmluZE1ldGhvZEhvc3QodGVtcGxhdGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzdHJpY3RUZW1wbGF0ZVBvbGljeTogdGVtcGxhdGUgb3duZXIgbm90IHRydXN0ZWQnKTtcbiAgfVxuICBvcHRpb25zID0gLyoqIEB0eXBlIHshVGVtcGxhdGl6ZU9wdGlvbnN9ICovKG9wdGlvbnMgfHwge30pO1xuICBpZiAodGVtcGxhdGUuX190ZW1wbGF0aXplT3duZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgPHRlbXBsYXRlPiBjYW4gb25seSBiZSB0ZW1wbGF0aXplZCBvbmNlJyk7XG4gIH1cbiAgdGVtcGxhdGUuX190ZW1wbGF0aXplT3duZXIgPSBvd25lcjtcbiAgY29uc3QgY3RvciA9IG93bmVyID8gb3duZXIuY29uc3RydWN0b3IgOiBUZW1wbGF0ZUluc3RhbmNlQmFzZTtcbiAgbGV0IHRlbXBsYXRlSW5mbyA9IGN0b3IuX3BhcnNlVGVtcGxhdGUodGVtcGxhdGUpO1xuICAvLyBHZXQgbWVtb2l6ZWQgYmFzZSBjbGFzcyBmb3IgdGhlIHByb3RvdHlwaWNhbCB0ZW1wbGF0ZSwgd2hpY2hcbiAgLy8gaW5jbHVkZXMgcHJvcGVydHkgZWZmZWN0cyBmb3IgYmluZGluZyB0ZW1wbGF0ZSAmIGZvcndhcmRpbmdcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyB7VGVtcGxhdGVJbnN0YW5jZUJhc2V9XG4gICAqL1xuICBsZXQgYmFzZUNsYXNzID0gdGVtcGxhdGVJbmZvLnRlbXBsYXRpemVJbnN0YW5jZUNsYXNzO1xuICBpZiAoIWJhc2VDbGFzcykge1xuICAgIGJhc2VDbGFzcyA9IGNyZWF0ZVRlbXBsYXRpemVyQ2xhc3ModGVtcGxhdGUsIHRlbXBsYXRlSW5mbywgb3B0aW9ucyk7XG4gICAgdGVtcGxhdGVJbmZvLnRlbXBsYXRpemVJbnN0YW5jZUNsYXNzID0gYmFzZUNsYXNzO1xuICB9XG4gIGNvbnN0IG1ldGhvZEhvc3QgPSBmaW5kTWV0aG9kSG9zdCh0ZW1wbGF0ZSk7XG4gIC8vIEhvc3QgcHJvcGVydHkgZm9yd2FyZGluZyBtdXN0IGJlIGluc3RhbGxlZCBvbnRvIHRlbXBsYXRlIGluc3RhbmNlXG4gIGFkZFByb3BhZ2F0ZUVmZmVjdHModGVtcGxhdGUsIHRlbXBsYXRlSW5mbywgb3B0aW9ucywgbWV0aG9kSG9zdCk7XG4gIC8vIFN1YmNsYXNzIGJhc2UgY2xhc3MgYW5kIGFkZCByZWZlcmVuY2UgZm9yIHRoaXMgc3BlY2lmaWMgdGVtcGxhdGVcbiAgLyoqIEBwcml2YXRlICovXG4gIGxldCBrbGFzcyA9IGNsYXNzIFRlbXBsYXRlSW5zdGFuY2UgZXh0ZW5kcyBiYXNlQ2xhc3Mge307XG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAga2xhc3MucHJvdG90eXBlLl9tZXRob2RIb3N0ID0gbWV0aG9kSG9zdDtcbiAgLyoqIEBvdmVycmlkZSAqL1xuICBrbGFzcy5wcm90b3R5cGUuX19kYXRhSG9zdCA9IC8qKiBAdHlwZSB7IURhdGFUZW1wbGF0ZX0gKi8gKHRlbXBsYXRlKTtcbiAgLyoqIEBvdmVycmlkZSAqL1xuICBrbGFzcy5wcm90b3R5cGUuX190ZW1wbGF0aXplT3duZXIgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChvd25lcik7XG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAga2xhc3MucHJvdG90eXBlLl9faG9zdFByb3BzID0gdGVtcGxhdGVJbmZvLmhvc3RQcm9wcztcbiAga2xhc3MgPSAvKiogQHR5cGUge2Z1bmN0aW9uKG5ldzpUZW1wbGF0ZUluc3RhbmNlQmFzZSl9ICovKGtsYXNzKTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtYXNzaWduXG4gIHJldHVybiBrbGFzcztcbn1cblxuZnVuY3Rpb24gd2Fybk9uVW5kZWNsYXJlZFByb3BlcnRpZXModGVtcGxhdGVJbmZvLCBvcHRpb25zLCBtZXRob2RIb3N0KSB7XG4gIGNvbnN0IGRlY2xhcmVkUHJvcHMgPSBtZXRob2RIb3N0LmNvbnN0cnVjdG9yLl9wcm9wZXJ0aWVzO1xuICBjb25zdCB7cHJvcGVydHlFZmZlY3RzfSA9IHRlbXBsYXRlSW5mbztcbiAgY29uc3Qge2luc3RhbmNlUHJvcHN9ID0gb3B0aW9ucztcbiAgZm9yIChsZXQgcHJvcCBpbiBwcm9wZXJ0eUVmZmVjdHMpIHtcbiAgICAvLyBFbnN1cmUgcHJvcGVydGllcyB3aXRoIHRlbXBsYXRlIGVmZmVjdHMgYXJlIGRlY2xhcmVkIG9uIHRoZSBvdXRlcm1vc3RcbiAgICAvLyBob3N0IChgbWV0aG9kSG9zdGApLCB1bmxlc3MgdGhleSBhcmUgaW5zdGFuY2UgcHJvcHMgb3Igc3RhdGljIGZ1bmN0aW9uc1xuICAgIGlmICghZGVjbGFyZWRQcm9wc1twcm9wXSAmJiAhKGluc3RhbmNlUHJvcHMgJiYgaW5zdGFuY2VQcm9wc1twcm9wXSkpIHtcbiAgICAgIGNvbnN0IGVmZmVjdHMgPSBwcm9wZXJ0eUVmZmVjdHNbcHJvcF07XG4gICAgICBmb3IgKGxldCBpPTA7IGk8ZWZmZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB7cGFydH0gPSBlZmZlY3RzW2ldLmluZm87XG4gICAgICAgIGlmICghKHBhcnQuc2lnbmF0dXJlICYmIHBhcnQuc2lnbmF0dXJlLnN0YXRpYykpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYFByb3BlcnR5ICcke3Byb3B9JyB1c2VkIGluIHRlbXBsYXRlIGJ1dCBub3QgYCArXG4gICAgICAgICAgICBgZGVjbGFyZWQgaW4gJ3Byb3BlcnRpZXMnOyBhdHRyaWJ1dGUgd2lsbCBub3QgYmUgb2JzZXJ2ZWQuYCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0ZW1wbGF0ZSBcIm1vZGVsXCIgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gZWxlbWVudCwgd2hpY2hcbiAqIHNlcnZlcyBhcyB0aGUgYmluZGluZyBzY29wZSBmb3IgdGhlIHRlbXBsYXRlIGluc3RhbmNlIHRoZSBlbGVtZW50IGlzXG4gKiBjb250YWluZWQgaW4uIEEgdGVtcGxhdGUgbW9kZWwgaXMgYW4gaW5zdGFuY2Ugb2ZcbiAqIGBUZW1wbGF0ZUluc3RhbmNlQmFzZWAsIGFuZCBzaG91bGQgYmUgdXNlZCB0byBtYW5pcHVsYXRlIGRhdGFcbiAqIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHRlbXBsYXRlIGluc3RhbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICBsZXQgbW9kZWwgPSBtb2RlbEZvckVsZW1lbnQoZWwpO1xuICogICBpZiAobW9kZWwuaW5kZXggPCAxMCkge1xuICogICAgIG1vZGVsLnNldCgnaXRlbS5jaGVja2VkJywgdHJ1ZSk7XG4gKiAgIH1cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0ZW1wbGF0ZSBUaGUgbW9kZWwgd2lsbCBiZSByZXR1cm5lZCBmb3JcbiAqICAgZWxlbWVudHMgc3RhbXBlZCBmcm9tIHRoaXMgdGVtcGxhdGUgKGFjY2VwdHMgZWl0aGVyIGFuIEhUTUxUZW1wbGF0ZUVsZW1lbnQpXG4gKiAgIG9yIGEgYDxkb20taWY+YC9gPGRvbS1yZXBlYXQ+YCBlbGVtZW50IHdoZW4gdXNpbmcgYHJlbW92ZU5lc3RlZFRlbXBsYXRlc2BcbiAqICAgb3B0aW1pemF0aW9uLlxuICogQHBhcmFtIHtOb2RlPX0gbm9kZSBOb2RlIGZvciB3aGljaCB0byByZXR1cm4gYSB0ZW1wbGF0ZSBtb2RlbC5cbiAqIEByZXR1cm4ge1RlbXBsYXRlSW5zdGFuY2VCYXNlfSBUZW1wbGF0ZSBpbnN0YW5jZSByZXByZXNlbnRpbmcgdGhlXG4gKiAgIGJpbmRpbmcgc2NvcGUgZm9yIHRoZSBlbGVtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtb2RlbEZvckVsZW1lbnQodGVtcGxhdGUsIG5vZGUpIHtcbiAgbGV0IG1vZGVsO1xuICB3aGlsZSAobm9kZSkge1xuICAgIC8vIEFuIGVsZW1lbnQgd2l0aCBhIF9fdGVtcGxhdGl6ZUluc3RhbmNlIG1hcmtzIHRoZSB0b3AgYm91bmRhcnlcbiAgICAvLyBvZiBhIHNjb3BlOyB3YWxrIHVwIHVudGlsIHdlIGZpbmQgb25lLCBhbmQgdGhlbiBlbnN1cmUgdGhhdFxuICAgIC8vIGl0cyBfX2RhdGFIb3N0IG1hdGNoZXMgYHRoaXNgLCBtZWFuaW5nIHRoaXMgZG9tLXJlcGVhdCBzdGFtcGVkIGl0XG4gICAgaWYgKChtb2RlbCA9IG5vZGUuX19kYXRhSG9zdCA/IG5vZGUgOiBub2RlLl9fdGVtcGxhdGl6ZUluc3RhbmNlKSkge1xuICAgICAgLy8gRm91bmQgYW4gZWxlbWVudCBzdGFtcGVkIGJ5IGFub3RoZXIgdGVtcGxhdGU7IGtlZXAgd2Fsa2luZyB1cFxuICAgICAgLy8gZnJvbSBpdHMgX19kYXRhSG9zdFxuICAgICAgaWYgKG1vZGVsLl9fZGF0YUhvc3QgIT0gdGVtcGxhdGUpIHtcbiAgICAgICAgbm9kZSA9IG1vZGVsLl9fZGF0YUhvc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbW9kZWw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFN0aWxsIGluIGEgdGVtcGxhdGUgc2NvcGUsIGtlZXAgZ29pbmcgdXAgdW50aWxcbiAgICAgIC8vIGEgX190ZW1wbGF0aXplSW5zdGFuY2UgaXMgZm91bmRcbiAgICAgIG5vZGUgPSB3cmFwKG5vZGUpLnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgeyBUZW1wbGF0ZUluc3RhbmNlQmFzZSB9O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKlxuICogTW9kdWxlIHRvIGhpZGUgYDxkb20tYmluZD5gLCBgPGRvbS1pZj5gLCBhbmQgYDxkb20tcmVwZWF0PmAgZWxlbWVudHNcbiAqIG9wdGltYWxseSBpbiBTaGFkeURPTVxuICovXG5cbmltcG9ydCB7bGVnYWN5T3B0aW1pemF0aW9ucywgdXNlU2hhZG93fSBmcm9tICcuL3NldHRpbmdzLmpzJztcblxubGV0IGVsZW1lbnRzSGlkZGVuID0gZmFsc2U7XG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBlbGVtZW50cyB3aWxsIGJlIGhpZGRlbiBnbG9iYWxseVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGlkZUVsZW1lbnRzR2xvYmFsbHkoKSB7XG4gIGlmIChsZWdhY3lPcHRpbWl6YXRpb25zICYmICF1c2VTaGFkb3cpIHtcbiAgICBpZiAoIWVsZW1lbnRzSGlkZGVuKSB7XG4gICAgICBlbGVtZW50c0hpZGRlbiA9IHRydWU7XG4gICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICBzdHlsZS50ZXh0Q29udGVudCA9ICdkb20tYmluZCxkb20taWYsZG9tLXJlcGVhdHtkaXNwbGF5Om5vbmU7fSc7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4uL3V0aWxzL2Jvb3QuanMnO1xuXG5pbXBvcnQgeyBQcm9wZXJ0eUVmZmVjdHMgfSBmcm9tICcuLi9taXhpbnMvcHJvcGVydHktZWZmZWN0cy5qcyc7XG5pbXBvcnQgeyBPcHRpb25hbE11dGFibGVEYXRhIH0gZnJvbSAnLi4vbWl4aW5zL211dGFibGUtZGF0YS5qcyc7XG5pbXBvcnQgeyBHZXN0dXJlRXZlbnRMaXN0ZW5lcnMgfSBmcm9tICcuLi9taXhpbnMvZ2VzdHVyZS1ldmVudC1saXN0ZW5lcnMuanMnO1xuaW1wb3J0IHsgc3RyaWN0VGVtcGxhdGVQb2xpY3kgfSBmcm9tICcuLi91dGlscy9zZXR0aW5ncy5qcyc7XG5pbXBvcnQgeyB3cmFwIH0gZnJvbSAnLi4vdXRpbHMvd3JhcC5qcyc7XG5pbXBvcnQgeyBoaWRlRWxlbWVudHNHbG9iYWxseSB9IGZyb20gJy4uL3V0aWxzL2hpZGUtdGVtcGxhdGUtY29udHJvbHMuanMnO1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge0hUTUxFbGVtZW50fVxuICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlFZmZlY3RzfVxuICogQGltcGxlbWVudHMge1BvbHltZXJfT3B0aW9uYWxNdXRhYmxlRGF0YX1cbiAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0dlc3R1cmVFdmVudExpc3RlbmVyc31cbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGRvbUJpbmRCYXNlID1cbiAgR2VzdHVyZUV2ZW50TGlzdGVuZXJzKFxuICAgIE9wdGlvbmFsTXV0YWJsZURhdGEoXG4gICAgICBQcm9wZXJ0eUVmZmVjdHMoSFRNTEVsZW1lbnQpKSk7XG5cbi8qKlxuICogQ3VzdG9tIGVsZW1lbnQgdG8gYWxsb3cgdXNpbmcgUG9seW1lcidzIHRlbXBsYXRlIGZlYXR1cmVzIChkYXRhIGJpbmRpbmcsXG4gKiBkZWNsYXJhdGl2ZSBldmVudCBsaXN0ZW5lcnMsIGV0Yy4pIGluIHRoZSBtYWluIGRvY3VtZW50IHdpdGhvdXQgZGVmaW5pbmdcbiAqIGEgbmV3IGN1c3RvbSBlbGVtZW50LlxuICpcbiAqIGA8dGVtcGxhdGU+YCB0YWdzIHV0aWxpemluZyBiaW5kaW5ncyBtYXkgYmUgd3JhcHBlZCB3aXRoIHRoZSBgPGRvbS1iaW5kPmBcbiAqIGVsZW1lbnQsIHdoaWNoIHdpbGwgaW1tZWRpYXRlbHkgc3RhbXAgdGhlIHdyYXBwZWQgdGVtcGxhdGUgaW50byB0aGUgbWFpblxuICogZG9jdW1lbnQgYW5kIGJpbmQgZWxlbWVudHMgdG8gdGhlIGBkb20tYmluZGAgZWxlbWVudCBpdHNlbGYgYXMgdGhlXG4gKiBiaW5kaW5nIHNjb3BlLlxuICpcbiAqIEBwb2x5bWVyXG4gKiBAY3VzdG9tRWxlbWVudFxuICogQGFwcGxpZXNNaXhpbiBQcm9wZXJ0eUVmZmVjdHNcbiAqIEBhcHBsaWVzTWl4aW4gT3B0aW9uYWxNdXRhYmxlRGF0YVxuICogQGFwcGxpZXNNaXhpbiBHZXN0dXJlRXZlbnRMaXN0ZW5lcnNcbiAqIEBleHRlbmRzIHtkb21CaW5kQmFzZX1cbiAqIEBzdW1tYXJ5IEN1c3RvbSBlbGVtZW50IHRvIGFsbG93IHVzaW5nIFBvbHltZXIncyB0ZW1wbGF0ZSBmZWF0dXJlcyAoZGF0YVxuICogICBiaW5kaW5nLCBkZWNsYXJhdGl2ZSBldmVudCBsaXN0ZW5lcnMsIGV0Yy4pIGluIHRoZSBtYWluIGRvY3VtZW50LlxuICovXG5leHBvcnQgY2xhc3MgRG9tQmluZCBleHRlbmRzIGRvbUJpbmRCYXNlIHtcblxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHsgcmV0dXJuIFsnbXV0YWJsZS1kYXRhJ107IH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmIChzdHJpY3RUZW1wbGF0ZVBvbGljeSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBzdHJpY3RUZW1wbGF0ZVBvbGljeTogZG9tLWJpbmQgbm90IGFsbG93ZWRgKTtcbiAgICB9XG4gICAgdGhpcy5yb290ID0gbnVsbDtcbiAgICB0aGlzLiQgPSBudWxsO1xuICAgIHRoaXMuX19jaGlsZHJlbiA9IG51bGw7XG4gIH1cblxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgYXR0cmlidXRlIHRoYXQgY2hhbmdlZFxuICAgKiBAcGFyYW0gez9zdHJpbmd9IG9sZCBPbGQgYXR0cmlidXRlIHZhbHVlXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgTmV3IGF0dHJpYnV0ZSB2YWx1ZVxuICAgKiBAcGFyYW0gez9zdHJpbmd9IG5hbWVzcGFjZSBBdHRyaWJ1dGUgbmFtZXNwYWNlLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZCwgdmFsdWUsIG5hbWVzcGFjZSkge1xuICAgIC8vIGFzc3VtZXMgb25seSBvbmUgb2JzZXJ2ZWQgYXR0cmlidXRlXG4gICAgdGhpcy5tdXRhYmxlRGF0YSA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBpZiAoIWhpZGVFbGVtZW50c0dsb2JhbGx5KCkpIHtcbiAgICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMuX19yZW1vdmVDaGlsZHJlbigpO1xuICB9XG5cbiAgX19pbnNlcnRDaGlsZHJlbigpIHtcbiAgICB3cmFwKHdyYXAodGhpcykucGFyZW50Tm9kZSkuaW5zZXJ0QmVmb3JlKHRoaXMucm9vdCwgdGhpcyk7XG4gIH1cblxuICBfX3JlbW92ZUNoaWxkcmVuKCkge1xuICAgIGlmICh0aGlzLl9fY2hpbGRyZW4pIHtcbiAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLl9fY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5yb290LmFwcGVuZENoaWxkKHRoaXMuX19jaGlsZHJlbltpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZvcmNlcyB0aGUgZWxlbWVudCB0byByZW5kZXIgaXRzIGNvbnRlbnQuIFRoaXMgaXMgdHlwaWNhbGx5IG9ubHlcbiAgICogbmVjZXNzYXJ5IHRvIGNhbGwgaWYgSFRNTEltcG9ydHMgd2l0aCB0aGUgYXN5bmMgYXR0cmlidXRlIGFyZSB1c2VkLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIGxldCB0ZW1wbGF0ZTtcbiAgICBpZiAoIXRoaXMuX19jaGlsZHJlbikge1xuICAgICAgdGVtcGxhdGUgPSAvKiogQHR5cGUgez9IVE1MVGVtcGxhdGVFbGVtZW50fSAqLyh0ZW1wbGF0ZSB8fCB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlJykpO1xuICAgICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgICAvLyBXYWl0IHVudGlsIGNoaWxkTGlzdCBjaGFuZ2VzIGFuZCB0ZW1wbGF0ZSBzaG91bGQgYmUgdGhlcmUgYnkgdGhlblxuICAgICAgICBsZXQgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XG4gICAgICAgICAgdGVtcGxhdGUgPSAvKiogQHR5cGUge0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovKHRoaXMucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKSk7XG4gICAgICAgICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RvbS1iaW5kIHJlcXVpcmVzIGEgPHRlbXBsYXRlPiBjaGlsZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUodGhpcywge2NoaWxkTGlzdDogdHJ1ZX0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnJvb3QgPSB0aGlzLl9zdGFtcFRlbXBsYXRlKFxuICAgICAgICAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyh0ZW1wbGF0ZSkpO1xuICAgICAgdGhpcy4kID0gdGhpcy5yb290LiQ7XG4gICAgICB0aGlzLl9fY2hpbGRyZW4gPSBbXTtcbiAgICAgIGZvciAobGV0IG49dGhpcy5yb290LmZpcnN0Q2hpbGQ7IG47IG49bi5uZXh0U2libGluZykge1xuICAgICAgICB0aGlzLl9fY2hpbGRyZW5bdGhpcy5fX2NoaWxkcmVuLmxlbmd0aF0gPSBuO1xuICAgICAgfVxuICAgICAgdGhpcy5fZW5hYmxlUHJvcGVydGllcygpO1xuICAgIH1cbiAgICB0aGlzLl9faW5zZXJ0Q2hpbGRyZW4oKTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdkb20tY2hhbmdlJywge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNvbXBvc2VkOiB0cnVlXG4gICAgfSkpO1xuICB9XG5cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdkb20tYmluZCcsIERvbUJpbmQpO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi9ib290LmpzJztcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBzdGF0aWMgc3RyaW5nIHZhbHVlIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZpbHRlclxuICogc3RyaW5ncyBieSBhc3NldGluZyB0aGF0IHRoZXkgaGF2ZSBiZWVuIGNyZWF0ZWQgdmlhIHRoaXMgY2xhc3MuIFRoZVxuICogYHZhbHVlYCBwcm9wZXJ0eSByZXR1cm5zIHRoZSBzdHJpbmcgcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAqL1xuY2xhc3MgTGl0ZXJhbFN0cmluZyB7XG4gIGNvbnN0cnVjdG9yKHN0cmluZykge1xuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIHRoaXMudmFsdWUgPSBzdHJpbmcudG9TdHJpbmcoKTtcbiAgfVxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfSBMaXRlcmFsU3RyaW5nIHN0cmluZyB2YWx1ZVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBPYmplY3QgdG8gc3RyaW5naWZ5IGludG8gSFRNTFxuICogQHJldHVybiB7c3RyaW5nfSBIVE1MIHN0cmluZ2lmaWVkIGZvcm0gb2YgYG9iamBcbiAqL1xuZnVuY3Rpb24gbGl0ZXJhbFZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExpdGVyYWxTdHJpbmcpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshTGl0ZXJhbFN0cmluZ30gKi8odmFsdWUpLnZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYG5vbi1saXRlcmFsIHZhbHVlIHBhc3NlZCB0byBQb2x5bWVyJ3MgaHRtbExpdGVyYWwgZnVuY3Rpb246ICR7dmFsdWV9YFxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0geyp9IHZhbHVlIE9iamVjdCB0byBzdHJpbmdpZnkgaW50byBIVE1MXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEhUTUwgc3RyaW5naWZpZWQgZm9ybSBvZiBgb2JqYFxuICovXG5mdW5jdGlvbiBodG1sVmFsdWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSFRNTFRlbXBsYXRlRWxlbWVudCkge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50IH0gKi8odmFsdWUpLmlubmVySFRNTDtcbiAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExpdGVyYWxTdHJpbmcpIHtcbiAgICByZXR1cm4gbGl0ZXJhbFZhbHVlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBub24tdGVtcGxhdGUgdmFsdWUgcGFzc2VkIHRvIFBvbHltZXIncyBodG1sIGZ1bmN0aW9uOiAke3ZhbHVlfWApO1xuICB9XG59XG5cbi8qKlxuICogQSB0ZW1wbGF0ZSBsaXRlcmFsIHRhZyB0aGF0IGNyZWF0ZXMgYW4gSFRNTCA8dGVtcGxhdGU+IGVsZW1lbnQgZnJvbSB0aGVcbiAqIGNvbnRlbnRzIG9mIHRoZSBzdHJpbmcuXG4gKlxuICogVGhpcyBhbGxvd3MgeW91IHRvIHdyaXRlIGEgUG9seW1lciBUZW1wbGF0ZSBpbiBKYXZhU2NyaXB0LlxuICpcbiAqIFRlbXBsYXRlcyBjYW4gYmUgY29tcG9zZWQgYnkgaW50ZXJwb2xhdGluZyBgSFRNTFRlbXBsYXRlRWxlbWVudGBzIGluXG4gKiBleHByZXNzaW9ucyBpbiB0aGUgSmF2YVNjcmlwdCB0ZW1wbGF0ZSBsaXRlcmFsLiBUaGUgbmVzdGVkIHRlbXBsYXRlJ3NcbiAqIGBpbm5lckhUTUxgIGlzIGluY2x1ZGVkIGluIHRoZSBjb250YWluaW5nIHRlbXBsYXRlLiAgVGhlIG9ubHkgb3RoZXJcbiAqIHZhbHVlcyBhbGxvd2VkIGluIGV4cHJlc3Npb25zIGFyZSB0aG9zZSByZXR1cm5lZCBmcm9tIGBodG1sTGl0ZXJhbGBcbiAqIHdoaWNoIGVuc3VyZXMgb25seSBsaXRlcmFsIHZhbHVlcyBmcm9tIEpTIHNvdXJjZSBldmVyIHJlYWNoIHRoZSBIVE1MLCB0b1xuICogZ3VhcmQgYWdhaW5zdCBYU1Mgcmlza3MuXG4gKlxuICogQWxsIG90aGVyIHZhbHVlcyBhcmUgZGlzYWxsb3dlZCBpbiBleHByZXNzaW9ucyB0byBoZWxwIHByZXZlbnQgWFNTXG4gKiBhdHRhY2tzOyBob3dldmVyLCBgaHRtbExpdGVyYWxgIGNhbiBiZSB1c2VkIHRvIGNvbXBvc2Ugc3RhdGljXG4gKiBzdHJpbmcgdmFsdWVzIGludG8gdGVtcGxhdGVzLiBUaGlzIGlzIHVzZWZ1bCB0byBjb21wb3NlIHN0cmluZ3MgaW50b1xuICogcGxhY2VzIHRoYXQgZG8gbm90IGFjY2VwdCBodG1sLCBsaWtlIHRoZSBjc3MgdGV4dCBvZiBhIGBzdHlsZWBcbiAqIGVsZW1lbnQuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgc3RhdGljIGdldCB0ZW1wbGF0ZSgpIHtcbiAqICAgICAgIHJldHVybiBodG1sYFxuICogICAgICAgICA8c3R5bGU+Omhvc3R7IGNvbnRlbnQ6XCIuLi5cIiB9PC9zdHlsZT5cbiAqICAgICAgICAgPGRpdiBjbGFzcz1cInNoYWRvd2VkXCI+JHt0aGlzLnBhcnRpYWxUZW1wbGF0ZX08L2Rpdj5cbiAqICAgICAgICAgJHtzdXBlci50ZW1wbGF0ZX1cbiAqICAgICAgIGA7XG4gKiAgICAgfVxuICogICAgIHN0YXRpYyBnZXQgcGFydGlhbFRlbXBsYXRlKCkgeyByZXR1cm4gaHRtbGA8c3Bhbj5QYXJ0aWFsITwvc3Bhbj5gOyB9XG4gKlxuICogQHBhcmFtIHshSVRlbXBsYXRlQXJyYXl9IHN0cmluZ3MgQ29uc3RhbnQgcGFydHMgb2YgdGFnZ2VkIHRlbXBsYXRlIGxpdGVyYWxcbiAqIEBwYXJhbSB7Li4uKn0gdmFsdWVzIFZhcmlhYmxlIHBhcnRzIG9mIHRhZ2dlZCB0ZW1wbGF0ZSBsaXRlcmFsXG4gKiBAcmV0dXJuIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gQ29uc3RydWN0ZWQgSFRNTFRlbXBsYXRlRWxlbWVudFxuICovXG5leHBvcnQgY29uc3QgaHRtbCA9IGZ1bmN0aW9uIGh0bWwoc3RyaW5ncywgLi4udmFsdWVzKSB7XG4gIGNvbnN0IHRlbXBsYXRlID0gLyoqIEB0eXBlIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gKi8oZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKSk7XG4gIHRlbXBsYXRlLmlubmVySFRNTCA9IHZhbHVlcy5yZWR1Y2UoKGFjYywgdiwgaWR4KSA9PlxuICAgICAgYWNjICsgaHRtbFZhbHVlKHYpICsgc3RyaW5nc1tpZHggKyAxXSwgc3RyaW5nc1swXSk7XG4gIHJldHVybiB0ZW1wbGF0ZTtcbn07XG5cbi8qKlxuICogQW4gaHRtbCBsaXRlcmFsIHRhZyB0aGF0IGNhbiBiZSB1c2VkIHdpdGggYGh0bWxgIHRvIGNvbXBvc2UuXG4gKiBhIGxpdGVyYWwgc3RyaW5nLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7XG4gKiAgICAgICByZXR1cm4gaHRtbGBcbiAqICAgICAgICAgPHN0eWxlPlxuICogICAgICAgICAgIDpob3N0IHsgZGlzcGxheTogYmxvY2s7IH1cbiAqICAgICAgICAgICAke3RoaXMuc3R5bGVUZW1wbGF0ZSgpfVxuICogICAgICAgICA8L3N0eWxlPlxuICogICAgICAgICA8ZGl2IGNsYXNzPVwic2hhZG93ZWRcIj4ke3N0YXRpY1ZhbHVlfTwvZGl2PlxuICogICAgICAgICAke3N1cGVyLnRlbXBsYXRlfVxuICogICAgICAgYDtcbiAqICAgICB9XG4gKiAgICAgc3RhdGljIGdldCBzdHlsZVRlbXBsYXRlKCkge1xuICogICAgICAgIHJldHVybiBodG1sTGl0ZXJhbGAuc2hhZG93ZWQgeyBiYWNrZ3JvdW5kOiBncmF5OyB9YDtcbiAqICAgICB9XG4gKlxuICogQHBhcmFtIHshSVRlbXBsYXRlQXJyYXl9IHN0cmluZ3MgQ29uc3RhbnQgcGFydHMgb2YgdGFnZ2VkIHRlbXBsYXRlIGxpdGVyYWxcbiAqIEBwYXJhbSB7Li4uKn0gdmFsdWVzIFZhcmlhYmxlIHBhcnRzIG9mIHRhZ2dlZCB0ZW1wbGF0ZSBsaXRlcmFsXG4gKiBAcmV0dXJuIHshTGl0ZXJhbFN0cmluZ30gQ29uc3RydWN0ZWQgbGl0ZXJhbCBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGh0bWxMaXRlcmFsID0gZnVuY3Rpb24oc3RyaW5ncywgLi4udmFsdWVzKSB7XG4gIHJldHVybiBuZXcgTGl0ZXJhbFN0cmluZyh2YWx1ZXMucmVkdWNlKChhY2MsIHYsIGlkeCkgPT5cbiAgICAgIGFjYyArIGxpdGVyYWxWYWx1ZSh2KSArIHN0cmluZ3NbaWR4ICsgMV0sIHN0cmluZ3NbMF0pKTtcbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgeyBFbGVtZW50TWl4aW4sIHZlcnNpb24gfSBmcm9tICcuL2xpYi9taXhpbnMvZWxlbWVudC1taXhpbi5qcyc7XG5leHBvcnQgeyBodG1sIH0gZnJvbSAnLi9saWIvdXRpbHMvaHRtbC10YWcuanMnO1xuXG5leHBvcnQgeyB2ZXJzaW9uIH07XG5cbi8qKlxuICogQmFzZSBjbGFzcyB0aGF0IHByb3ZpZGVzIHRoZSBjb3JlIEFQSSBmb3IgUG9seW1lcidzIG1ldGEtcHJvZ3JhbW1pbmdcbiAqIGZlYXR1cmVzIGluY2x1ZGluZyB0ZW1wbGF0ZSBzdGFtcGluZywgZGF0YS1iaW5kaW5nLCBhdHRyaWJ1dGUgZGVzZXJpYWxpemF0aW9uLFxuICogYW5kIHByb3BlcnR5IGNoYW5nZSBvYnNlcnZhdGlvbi5cbiAqXG4gKiBAY3VzdG9tRWxlbWVudFxuICogQHBvbHltZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQGltcGxlbWVudHMge1BvbHltZXJfRWxlbWVudE1peGlufVxuICogQGV4dGVuZHMgSFRNTEVsZW1lbnRcbiAqIEBhcHBsaWVzTWl4aW4gRWxlbWVudE1peGluXG4gKiBAc3VtbWFyeSBDdXN0b20gZWxlbWVudCBiYXNlIGNsYXNzIHRoYXQgcHJvdmlkZXMgdGhlIGNvcmUgQVBJIGZvciBQb2x5bWVyJ3NcbiAqICAga2V5IG1ldGEtcHJvZ3JhbW1pbmcgZmVhdHVyZXMgaW5jbHVkaW5nIHRlbXBsYXRlIHN0YW1waW5nLCBkYXRhLWJpbmRpbmcsXG4gKiAgIGF0dHJpYnV0ZSBkZXNlcmlhbGl6YXRpb24sIGFuZCBwcm9wZXJ0eSBjaGFuZ2Ugb2JzZXJ2YXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IFBvbHltZXJFbGVtZW50ID0gRWxlbWVudE1peGluKEhUTUxFbGVtZW50KTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgeyBQb2x5bWVyRWxlbWVudCB9IGZyb20gJy4uLy4uL3BvbHltZXItZWxlbWVudC5qcyc7XG5cbmltcG9ydCB7IFRlbXBsYXRlSW5zdGFuY2VCYXNlLCB0ZW1wbGF0aXplLCBtb2RlbEZvckVsZW1lbnQgfSBmcm9tICcuLi91dGlscy90ZW1wbGF0aXplLmpzJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuaW1wb3J0IHsgRGVib3VuY2VyIH0gZnJvbSAnLi4vdXRpbHMvZGVib3VuY2UuanMnO1xuaW1wb3J0IHsgZW5xdWV1ZURlYm91bmNlciwgZmx1c2ggfSBmcm9tICcuLi91dGlscy9mbHVzaC5qcyc7XG5pbXBvcnQgeyBPcHRpb25hbE11dGFibGVEYXRhIH0gZnJvbSAnLi4vbWl4aW5zL211dGFibGUtZGF0YS5qcyc7XG5pbXBvcnQgeyBtYXRjaGVzLCB0cmFuc2xhdGUgfSBmcm9tICcuLi91dGlscy9wYXRoLmpzJztcbmltcG9ydCB7IHRpbWVPdXQsIG1pY3JvVGFzayB9IGZyb20gJy4uL3V0aWxzL2FzeW5jLmpzJztcbmltcG9ydCB7IHdyYXAgfSBmcm9tICcuLi91dGlscy93cmFwLmpzJztcbmltcG9ydCB7IGhpZGVFbGVtZW50c0dsb2JhbGx5IH0gZnJvbSAnLi4vdXRpbHMvaGlkZS10ZW1wbGF0ZS1jb250cm9scy5qcyc7XG5pbXBvcnQgeyBzdXBwcmVzc1RlbXBsYXRlTm90aWZpY2F0aW9ucyB9IGZyb20gJy4uL3V0aWxzL3NldHRpbmdzLmpzJztcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX09wdGlvbmFsTXV0YWJsZURhdGF9XG4gKiBAZXh0ZW5kcyB7UG9seW1lckVsZW1lbnR9XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBkb21SZXBlYXRCYXNlID0gT3B0aW9uYWxNdXRhYmxlRGF0YShQb2x5bWVyRWxlbWVudCk7XG5cbi8qKlxuICogVGhlIGA8ZG9tLXJlcGVhdD5gIGVsZW1lbnQgd2lsbCBhdXRvbWF0aWNhbGx5IHN0YW1wIGFuZCBiaW5kcyBvbmUgaW5zdGFuY2VcbiAqIG9mIHRlbXBsYXRlIGNvbnRlbnQgdG8gZWFjaCBvYmplY3QgaW4gYSB1c2VyLXByb3ZpZGVkIGFycmF5LlxuICogYGRvbS1yZXBlYXRgIGFjY2VwdHMgYW4gYGl0ZW1zYCBwcm9wZXJ0eSwgYW5kIG9uZSBpbnN0YW5jZSBvZiB0aGUgdGVtcGxhdGVcbiAqIGlzIHN0YW1wZWQgZm9yIGVhY2ggaXRlbSBpbnRvIHRoZSBET00gYXQgdGhlIGxvY2F0aW9uIG9mIHRoZSBgZG9tLXJlcGVhdGBcbiAqIGVsZW1lbnQuICBUaGUgYGl0ZW1gIHByb3BlcnR5IHdpbGwgYmUgc2V0IG9uIGVhY2ggaW5zdGFuY2UncyBiaW5kaW5nXG4gKiBzY29wZSwgdGh1cyB0ZW1wbGF0ZXMgc2hvdWxkIGJpbmQgdG8gc3ViLXByb3BlcnRpZXMgb2YgYGl0ZW1gLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgaHRtbFxuICogPGRvbS1tb2R1bGUgaWQ9XCJlbXBsb3llZS1saXN0XCI+XG4gKlxuICogICA8dGVtcGxhdGU+XG4gKlxuICogICAgIDxkaXY+IEVtcGxveWVlIGxpc3Q6IDwvZGl2PlxuICogICAgIDxkb20tcmVwZWF0IGl0ZW1zPVwie3tlbXBsb3llZXN9fVwiPlxuICogICAgICAgPHRlbXBsYXRlPlxuICogICAgICAgICA8ZGl2PkZpcnN0IG5hbWU6IDxzcGFuPnt7aXRlbS5maXJzdH19PC9zcGFuPjwvZGl2PlxuICogICAgICAgICA8ZGl2Pkxhc3QgbmFtZTogPHNwYW4+e3tpdGVtLmxhc3R9fTwvc3Bhbj48L2Rpdj5cbiAqICAgICAgIDwvdGVtcGxhdGU+XG4gKiAgICAgPC9kb20tcmVwZWF0PlxuICpcbiAqICAgPC90ZW1wbGF0ZT5cbiAqXG4gKiA8L2RvbS1tb2R1bGU+XG4gKiBgYGBcbiAqXG4gKiBXaXRoIHRoZSBmb2xsb3dpbmcgY3VzdG9tIGVsZW1lbnQgZGVmaW5pdGlvbjpcbiAqXG4gKiBgYGBqc1xuICogY2xhc3MgRW1wbG95ZWVMaXN0IGV4dGVuZHMgUG9seW1lckVsZW1lbnQge1xuICogICBzdGF0aWMgZ2V0IGlzKCkgeyByZXR1cm4gJ2VtcGxveWVlLWxpc3QnOyB9XG4gKiAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAqICAgICByZXR1cm4ge1xuICogICAgICAgZW1wbG95ZWVzOiB7XG4gKiAgICAgICAgIHZhbHVlKCkge1xuICogICAgICAgICAgIHJldHVybiBbXG4gKiAgICAgICAgICAgICB7Zmlyc3Q6ICdCb2InLCBsYXN0OiAnU21pdGgnfSxcbiAqICAgICAgICAgICAgIHtmaXJzdDogJ1NhbGx5JywgbGFzdDogJ0pvaG5zb24nfSxcbiAqICAgICAgICAgICAgIC4uLlxuICogICAgICAgICAgIF07XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICB9O1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBOb3RpZmljYXRpb25zIGZvciBjaGFuZ2VzIHRvIGl0ZW1zIHN1Yi1wcm9wZXJ0aWVzIHdpbGwgYmUgZm9yd2FyZGVkIHRvIHRlbXBsYXRlXG4gKiBpbnN0YW5jZXMsIHdoaWNoIHdpbGwgdXBkYXRlIHZpYSB0aGUgbm9ybWFsIHN0cnVjdHVyZWQgZGF0YSBub3RpZmljYXRpb24gc3lzdGVtLlxuICpcbiAqIE11dGF0aW9ucyB0byB0aGUgYGl0ZW1zYCBhcnJheSBpdHNlbGYgc2hvdWxkIGJlIG1hZGUgdXNpbmcgdGhlIEFycmF5XG4gKiBtdXRhdGlvbiBBUEkncyBvbiB0aGUgUHJvcGVydHlFZmZlY3RzIG1peGluIChgcHVzaGAsIGBwb3BgLCBgc3BsaWNlYCxcbiAqIGBzaGlmdGAsIGB1bnNoaWZ0YCksIGFuZCB0ZW1wbGF0ZSBpbnN0YW5jZXMgd2lsbCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGVcbiAqIGRhdGEgaW4gdGhlIGFycmF5LlxuICpcbiAqIEV2ZW50cyBjYXVnaHQgYnkgZXZlbnQgaGFuZGxlcnMgd2l0aGluIHRoZSBgZG9tLXJlcGVhdGAgdGVtcGxhdGUgd2lsbCBiZVxuICogZGVjb3JhdGVkIHdpdGggYSBgbW9kZWxgIHByb3BlcnR5LCB3aGljaCByZXByZXNlbnRzIHRoZSBiaW5kaW5nIHNjb3BlIGZvclxuICogZWFjaCB0ZW1wbGF0ZSBpbnN0YW5jZS4gIFRoZSBtb2RlbCBzaG91bGQgYmUgdXNlZCB0byBtYW5pcHVsYXRlIGRhdGEgb24gdGhlXG4gKiBpbnN0YW5jZSwgZm9yIGV4YW1wbGUgYGV2ZW50Lm1vZGVsLnNldCgnaXRlbS5jaGVja2VkJywgdHJ1ZSk7YC5cbiAqXG4gKiBBbHRlcm5hdGl2ZWx5LCB0aGUgbW9kZWwgZm9yIGEgdGVtcGxhdGUgaW5zdGFuY2UgZm9yIGFuIGVsZW1lbnQgc3RhbXBlZCBieVxuICogYSBgZG9tLXJlcGVhdGAgY2FuIGJlIG9idGFpbmVkIHVzaW5nIHRoZSBgbW9kZWxGb3JFbGVtZW50YCBBUEkgb24gdGhlXG4gKiBgZG9tLXJlcGVhdGAgdGhhdCBzdGFtcGVkIGl0LCBmb3IgZXhhbXBsZVxuICogYHRoaXMuJC5kb21SZXBlYXQubW9kZWxGb3JFbGVtZW50KGV2ZW50LnRhcmdldCkuc2V0KCdpdGVtLmNoZWNrZWQnLCB0cnVlKTtgLlxuICogVGhpcyBtYXkgYmUgdXNlZnVsIGZvciBtYW5pcHVsYXRpbmcgaW5zdGFuY2UgZGF0YSBvZiBldmVudCB0YXJnZXRzIG9idGFpbmVkXG4gKiBieSBldmVudCBoYW5kbGVycyBvbiBwYXJlbnRzIG9mIHRoZSBgZG9tLXJlcGVhdGAgKGV2ZW50IGRlbGVnYXRpb24pLlxuICpcbiAqIEEgdmlldy1zcGVjaWZpYyBmaWx0ZXIvc29ydCBtYXkgYmUgYXBwbGllZCB0byBlYWNoIGBkb20tcmVwZWF0YCBieSBzdXBwbHlpbmcgYVxuICogYGZpbHRlcmAgYW5kL29yIGBzb3J0YCBwcm9wZXJ0eS4gIFRoaXMgbWF5IGJlIGEgc3RyaW5nIHRoYXQgbmFtZXMgYSBmdW5jdGlvbiBvblxuICogdGhlIGhvc3QsIG9yIGEgZnVuY3Rpb24gbWF5IGJlIGFzc2lnbmVkIHRvIHRoZSBwcm9wZXJ0eSBkaXJlY3RseS4gIFRoZSBmdW5jdGlvbnNcbiAqIHNob3VsZCBpbXBsZW1lbnRlZCBmb2xsb3dpbmcgdGhlIHN0YW5kYXJkIGBBcnJheWAgZmlsdGVyL3NvcnQgQVBJLlxuICpcbiAqIEluIG9yZGVyIHRvIHJlLXJ1biB0aGUgZmlsdGVyIG9yIHNvcnQgZnVuY3Rpb25zIGJhc2VkIG9uIGNoYW5nZXMgdG8gc3ViLWZpZWxkc1xuICogb2YgYGl0ZW1zYCwgdGhlIGBvYnNlcnZlYCBwcm9wZXJ0eSBtYXkgYmUgc2V0IGFzIGEgc3BhY2Utc2VwYXJhdGVkIGxpc3Qgb2ZcbiAqIGBpdGVtYCBzdWItZmllbGRzIHRoYXQgc2hvdWxkIGNhdXNlIGEgcmUtZmlsdGVyL3NvcnQgd2hlbiBtb2RpZmllZC4gIElmXG4gKiB0aGUgZmlsdGVyIG9yIHNvcnQgZnVuY3Rpb24gZGVwZW5kcyBvbiBwcm9wZXJ0aWVzIG5vdCBjb250YWluZWQgaW4gYGl0ZW1zYCxcbiAqIHRoZSB1c2VyIHNob3VsZCBvYnNlcnZlIGNoYW5nZXMgdG8gdGhvc2UgcHJvcGVydGllcyBhbmQgY2FsbCBgcmVuZGVyYCB0byB1cGRhdGVcbiAqIHRoZSB2aWV3IGJhc2VkIG9uIHRoZSBkZXBlbmRlbmN5IGNoYW5nZS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgZm9yIGFuIGBkb20tcmVwZWF0YCB3aXRoIGEgZmlsdGVyIG9mIHRoZSBmb2xsb3dpbmc6XG4gKlxuICogYGBganNcbiAqIGlzRW5naW5lZXIoaXRlbSkge1xuICogICByZXR1cm4gaXRlbS50eXBlID09ICdlbmdpbmVlcicgfHwgaXRlbS5tYW5hZ2VyLnR5cGUgPT0gJ2VuZ2luZWVyJztcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRoZW4gdGhlIGBvYnNlcnZlYCBwcm9wZXJ0eSBzaG91bGQgYmUgY29uZmlndXJlZCBhcyBmb2xsb3dzOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkb20tcmVwZWF0IGl0ZW1zPVwie3tlbXBsb3llZXN9fVwiIGZpbHRlcj1cImlzRW5naW5lZXJcIiBvYnNlcnZlPVwidHlwZSBtYW5hZ2VyLnR5cGVcIj5cbiAqIGBgYFxuICpcbiAqIEBjdXN0b21FbGVtZW50XG4gKiBAcG9seW1lclxuICogQGV4dGVuZHMge2RvbVJlcGVhdEJhc2V9XG4gKiBAYXBwbGllc01peGluIE9wdGlvbmFsTXV0YWJsZURhdGFcbiAqIEBzdW1tYXJ5IEN1c3RvbSBlbGVtZW50IGZvciBzdGFtcGluZyBpbnN0YW5jZSBvZiBhIHRlbXBsYXRlIGJvdW5kIHRvXG4gKiAgIGl0ZW1zIGluIGFuIGFycmF5LlxuICovXG5leHBvcnQgY2xhc3MgRG9tUmVwZWF0IGV4dGVuZHMgZG9tUmVwZWF0QmFzZSB7XG5cbiAgLy8gTm90IG5lZWRlZCB0byBmaW5kIHRlbXBsYXRlOyBjYW4gYmUgcmVtb3ZlZCBvbmNlIHRoZSBhbmFseXplclxuICAvLyBjYW4gZmluZCB0aGUgdGFnIG5hbWUgZnJvbSBjdXN0b21FbGVtZW50cy5kZWZpbmUgY2FsbFxuICBzdGF0aWMgZ2V0IGlzKCkgeyByZXR1cm4gJ2RvbS1yZXBlYXQnOyB9XG5cbiAgc3RhdGljIGdldCB0ZW1wbGF0ZSgpIHsgcmV0dXJuIG51bGw7IH1cblxuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuZXZlciBET00gaXMgYWRkZWQgb3IgcmVtb3ZlZCBieSB0aGlzIHRlbXBsYXRlIChieVxuICAgICAqIGRlZmF1bHQsIHJlbmRlcmluZyBvY2N1cnMgbGF6aWx5KS4gIFRvIGZvcmNlIGltbWVkaWF0ZSByZW5kZXJpbmcsIGNhbGxcbiAgICAgKiBgcmVuZGVyYC5cbiAgICAgKlxuICAgICAqIEBldmVudCBkb20tY2hhbmdlXG4gICAgICovXG4gICAgcmV0dXJuIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBBbiBhcnJheSBjb250YWluaW5nIGl0ZW1zIGRldGVybWluaW5nIGhvdyBtYW55IGluc3RhbmNlcyBvZiB0aGUgdGVtcGxhdGVcbiAgICAgICAqIHRvIHN0YW1wIGFuZCB0aGF0IHRoYXQgZWFjaCB0ZW1wbGF0ZSBpbnN0YW5jZSBzaG91bGQgYmluZCB0by5cbiAgICAgICAqL1xuICAgICAgaXRlbXM6IHtcbiAgICAgICAgdHlwZTogQXJyYXlcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG5hbWUgb2YgdGhlIHZhcmlhYmxlIHRvIGFkZCB0byB0aGUgYmluZGluZyBzY29wZSBmb3IgdGhlIGFycmF5XG4gICAgICAgKiBlbGVtZW50IGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuIHRlbXBsYXRlIGluc3RhbmNlLlxuICAgICAgICovXG4gICAgICBhczoge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHZhbHVlOiAnaXRlbSdcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG5hbWUgb2YgdGhlIHZhcmlhYmxlIHRvIGFkZCB0byB0aGUgYmluZGluZyBzY29wZSB3aXRoIHRoZSBpbmRleFxuICAgICAgICogb2YgdGhlIGluc3RhbmNlIGluIHRoZSBzb3J0ZWQgYW5kIGZpbHRlcmVkIGxpc3Qgb2YgcmVuZGVyZWQgaXRlbXMuXG4gICAgICAgKiBOb3RlLCBmb3IgdGhlIGluZGV4IGluIHRoZSBgdGhpcy5pdGVtc2AgYXJyYXksIHVzZSB0aGUgdmFsdWUgb2YgdGhlXG4gICAgICAgKiBgaXRlbXNJbmRleEFzYCBwcm9wZXJ0eS5cbiAgICAgICAqL1xuICAgICAgaW5kZXhBczoge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHZhbHVlOiAnaW5kZXgnXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZSB0byBhZGQgdG8gdGhlIGJpbmRpbmcgc2NvcGUgd2l0aCB0aGUgaW5kZXhcbiAgICAgICAqIG9mIHRoZSBpbnN0YW5jZSBpbiB0aGUgYHRoaXMuaXRlbXNgIGFycmF5LiBOb3RlLCBmb3IgdGhlIGluZGV4IG9mXG4gICAgICAgKiB0aGlzIGluc3RhbmNlIGluIHRoZSBzb3J0ZWQgYW5kIGZpbHRlcmVkIGxpc3Qgb2YgcmVuZGVyZWQgaXRlbXMsXG4gICAgICAgKiB1c2UgdGhlIHZhbHVlIG9mIHRoZSBgaW5kZXhBc2AgcHJvcGVydHkuXG4gICAgICAgKi9cbiAgICAgIGl0ZW1zSW5kZXhBczoge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHZhbHVlOiAnaXRlbXNJbmRleCdcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQSBmdW5jdGlvbiB0aGF0IHNob3VsZCBkZXRlcm1pbmUgdGhlIHNvcnQgb3JkZXIgb2YgdGhlIGl0ZW1zLiAgVGhpc1xuICAgICAgICogcHJvcGVydHkgc2hvdWxkIGVpdGhlciBiZSBwcm92aWRlZCBhcyBhIHN0cmluZywgaW5kaWNhdGluZyBhIG1ldGhvZFxuICAgICAgICogbmFtZSBvbiB0aGUgZWxlbWVudCdzIGhvc3QsIG9yIGVsc2UgYmUgYW4gYWN0dWFsIGZ1bmN0aW9uLiAgVGhlXG4gICAgICAgKiBmdW5jdGlvbiBzaG91bGQgbWF0Y2ggdGhlIHNvcnQgZnVuY3Rpb24gcGFzc2VkIHRvIGBBcnJheS5zb3J0YC5cbiAgICAgICAqIFVzaW5nIGEgc29ydCBmdW5jdGlvbiBoYXMgbm8gZWZmZWN0IG9uIHRoZSB1bmRlcmx5aW5nIGBpdGVtc2AgYXJyYXkuXG4gICAgICAgKi9cbiAgICAgIHNvcnQ6IHtcbiAgICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICAgIG9ic2VydmVyOiAnX19zb3J0Q2hhbmdlZCdcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGZpbHRlciBpdGVtcyBvdXQgb2YgdGhlIHZpZXcuICBUaGlzXG4gICAgICAgKiBwcm9wZXJ0eSBzaG91bGQgZWl0aGVyIGJlIHByb3ZpZGVkIGFzIGEgc3RyaW5nLCBpbmRpY2F0aW5nIGEgbWV0aG9kXG4gICAgICAgKiBuYW1lIG9uIHRoZSBlbGVtZW50J3MgaG9zdCwgb3IgZWxzZSBiZSBhbiBhY3R1YWwgZnVuY3Rpb24uICBUaGVcbiAgICAgICAqIGZ1bmN0aW9uIHNob3VsZCBtYXRjaCB0aGUgc29ydCBmdW5jdGlvbiBwYXNzZWQgdG8gYEFycmF5LmZpbHRlcmAuXG4gICAgICAgKiBVc2luZyBhIGZpbHRlciBmdW5jdGlvbiBoYXMgbm8gZWZmZWN0IG9uIHRoZSB1bmRlcmx5aW5nIGBpdGVtc2AgYXJyYXkuXG4gICAgICAgKi9cbiAgICAgIGZpbHRlcjoge1xuICAgICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgICAgb2JzZXJ2ZXI6ICdfX2ZpbHRlckNoYW5nZWQnXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFdoZW4gdXNpbmcgYSBgZmlsdGVyYCBvciBgc29ydGAgZnVuY3Rpb24sIHRoZSBgb2JzZXJ2ZWAgcHJvcGVydHlcbiAgICAgICAqIHNob3VsZCBiZSBzZXQgdG8gYSBzcGFjZS1zZXBhcmF0ZWQgbGlzdCBvZiB0aGUgbmFtZXMgb2YgaXRlbVxuICAgICAgICogc3ViLWZpZWxkcyB0aGF0IHNob3VsZCB0cmlnZ2VyIGEgcmUtc29ydCBvciByZS1maWx0ZXIgd2hlbiBjaGFuZ2VkLlxuICAgICAgICogVGhlc2Ugc2hvdWxkIGdlbmVyYWxseSBiZSBmaWVsZHMgb2YgYGl0ZW1gIHRoYXQgdGhlIHNvcnQgb3IgZmlsdGVyXG4gICAgICAgKiBmdW5jdGlvbiBkZXBlbmRzIG9uLlxuICAgICAgICovXG4gICAgICBvYnNlcnZlOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgb2JzZXJ2ZXI6ICdfX29ic2VydmVDaGFuZ2VkJ1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBXaGVuIHVzaW5nIGEgYGZpbHRlcmAgb3IgYHNvcnRgIGZ1bmN0aW9uLCB0aGUgYGRlbGF5YCBwcm9wZXJ0eVxuICAgICAgICogZGV0ZXJtaW5lcyBhIGRlYm91bmNlIHRpbWUgaW4gbXMgYWZ0ZXIgYSBjaGFuZ2UgdG8gb2JzZXJ2ZWQgaXRlbVxuICAgICAgICogcHJvcGVydGllcyB0aGF0IG11c3QgcGFzcyBiZWZvcmUgdGhlIGZpbHRlciBvciBzb3J0IGlzIHJlLXJ1bi5cbiAgICAgICAqIFRoaXMgaXMgdXNlZnVsIGluIHJhdGUtbGltaXRpbmcgc2h1ZmZsaW5nIG9mIHRoZSB2aWV3IHdoZW5cbiAgICAgICAqIGl0ZW0gY2hhbmdlcyBtYXkgYmUgZnJlcXVlbnQuXG4gICAgICAgKi9cbiAgICAgIGRlbGF5OiBOdW1iZXIsXG5cbiAgICAgIC8qKlxuICAgICAgICogQ291bnQgb2YgY3VycmVudGx5IHJlbmRlcmVkIGl0ZW1zIGFmdGVyIGBmaWx0ZXJgIChpZiBhbnkpIGhhcyBiZWVuIGFwcGxpZWQuXG4gICAgICAgKiBJZiBcImNodW5raW5nIG1vZGVcIiBpcyBlbmFibGVkLCBgcmVuZGVyZWRJdGVtQ291bnRgIGlzIHVwZGF0ZWQgZWFjaCB0aW1lIGFcbiAgICAgICAqIHNldCBvZiB0ZW1wbGF0ZSBpbnN0YW5jZXMgaXMgcmVuZGVyZWQuXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICByZW5kZXJlZEl0ZW1Db3VudDoge1xuICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgIG5vdGlmeTogIXN1cHByZXNzVGVtcGxhdGVOb3RpZmljYXRpb25zLFxuICAgICAgICByZWFkT25seTogdHJ1ZVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBXaGVuIGdyZWF0ZXIgdGhhbiB6ZXJvLCBkZWZpbmVzIGFuIGluaXRpYWwgY291bnQgb2YgdGVtcGxhdGUgaW5zdGFuY2VzXG4gICAgICAgKiB0byByZW5kZXIgYWZ0ZXIgc2V0dGluZyB0aGUgYGl0ZW1zYCBhcnJheSwgYmVmb3JlIHRoZSBuZXh0IHBhaW50LCBhbmRcbiAgICAgICAqIHB1dHMgdGhlIGBkb20tcmVwZWF0YCBpbnRvIFwiY2h1bmtpbmcgbW9kZVwiLiAgVGhlIHJlbWFpbmluZyBpdGVtcyAoYW5kXG4gICAgICAgKiBhbnkgZnV0dXJlIGl0ZW1zIGFzIGEgcmVzdWx0IG9mIHB1c2hpbmcgb250byB0aGUgYXJyYXkpIHdpbGwgYmUgY3JlYXRlZFxuICAgICAgICogYW5kIHJlbmRlcmVkIGluY3JlbWVudGFsbHkgYXQgZWFjaCBhbmltYXRpb24gZnJhbWUgdGhlcmVvZiB1bnRpbCBhbGxcbiAgICAgICAqIGluc3RhbmNlcyBoYXZlIGJlZW4gcmVuZGVyZWQuXG4gICAgICAgKi9cbiAgICAgIGluaXRpYWxDb3VudDoge1xuICAgICAgICB0eXBlOiBOdW1iZXJcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogV2hlbiBgaW5pdGlhbENvdW50YCBpcyB1c2VkLCB0aGlzIHByb3BlcnR5IGRlZmluZXMgYSBmcmFtZSByYXRlIChpblxuICAgICAgICogZnBzKSB0byB0YXJnZXQgYnkgdGhyb3R0bGluZyB0aGUgbnVtYmVyIG9mIGluc3RhbmNlcyByZW5kZXJlZCBlYWNoXG4gICAgICAgKiBmcmFtZSB0byBub3QgZXhjZWVkIHRoZSBidWRnZXQgZm9yIHRoZSB0YXJnZXQgZnJhbWUgcmF0ZS4gIFRoZVxuICAgICAgICogZnJhbWVyYXRlIGlzIGVmZmVjdGl2ZWx5IHRoZSBudW1iZXIgb2YgYHJlcXVlc3RBbmltYXRpb25GcmFtZWBzIHRoYXRcbiAgICAgICAqIGl0IHRyaWVzIHRvIGFsbG93IHRvIGFjdHVhbGx5IGZpcmUgaW4gYSBnaXZlbiBzZWNvbmQuIEl0IGRvZXMgdGhpc1xuICAgICAgICogYnkgbWVhc3VyaW5nIHRoZSB0aW1lIGJldHdlZW4gYHJBRmBzIGFuZCBjb250aW51b3VzbHkgYWRqdXN0aW5nIHRoZVxuICAgICAgICogbnVtYmVyIG9mIGl0ZW1zIGNyZWF0ZWQgZWFjaCBgckFGYCB0byBtYWludGFpbiB0aGUgdGFyZ2V0IGZyYW1lcmF0ZS5cbiAgICAgICAqIFNldHRpbmcgdGhpcyB0byBhIGhpZ2hlciBudW1iZXIgYWxsb3dzIGxvd2VyIGxhdGVuY3kgYW5kIGhpZ2hlclxuICAgICAgICogdGhyb3VnaHB1dCBmb3IgZXZlbnQgaGFuZGxlcnMgYW5kIG90aGVyIHRhc2tzLCBidXQgcmVzdWx0cyBpbiBhXG4gICAgICAgKiBsb25nZXIgdGltZSBmb3IgdGhlIHJlbWFpbmluZyBpdGVtcyB0byBjb21wbGV0ZSByZW5kZXJpbmcuXG4gICAgICAgKi9cbiAgICAgIHRhcmdldEZyYW1lcmF0ZToge1xuICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgIHZhbHVlOiAyMFxuICAgICAgfSxcblxuICAgICAgX3RhcmdldEZyYW1lVGltZToge1xuICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgIGNvbXB1dGVkOiAnX19jb21wdXRlRnJhbWVUaW1lKHRhcmdldEZyYW1lcmF0ZSknXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFdoZW4gdGhlIGdsb2JhbCBgc3VwcHJlc3NUZW1wbGF0ZU5vdGlmaWNhdGlvbnNgIHNldHRpbmcgaXMgdXNlZCwgc2V0dGluZ1xuICAgICAgICogYG5vdGlmeURvbUNoYW5nZTogdHJ1ZWAgd2lsbCBlbmFibGUgZmlyaW5nIGBkb20tY2hhbmdlYCBldmVudHMgb24gdGhpc1xuICAgICAgICogZWxlbWVudC5cbiAgICAgICAqL1xuICAgICAgbm90aWZ5RG9tQ2hhbmdlOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW5cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogV2hlbiBjaHVua2luZyBpcyBlbmFibGVkIHZpYSBgaW5pdGlhbENvdW50YCBhbmQgdGhlIGBpdGVtc2AgYXJyYXkgaXNcbiAgICAgICAqIHNldCB0byBhIG5ldyBhcnJheSwgdGhpcyBmbGFnIGNvbnRyb2xzIHdoZXRoZXIgdGhlIHByZXZpb3VzbHkgcmVuZGVyZWRcbiAgICAgICAqIGluc3RhbmNlcyBhcmUgcmV1c2VkIG9yIG5vdC5cbiAgICAgICAqXG4gICAgICAgKiBXaGVuIGB0cnVlYCwgYW55IHByZXZpb3VzbHkgcmVuZGVyZWQgdGVtcGxhdGUgaW5zdGFuY2VzIGFyZSB1cGRhdGVkIGluXG4gICAgICAgKiBwbGFjZSB0byB0aGVpciBuZXcgaXRlbSB2YWx1ZXMgc3luY2hyb25vdXNseSBpbiBvbmUgc2hvdCwgYW5kIHRoZW4gYW55XG4gICAgICAgKiBmdXJ0aGVyIGl0ZW1zIChpZiBhbnkpIGFyZSBjaHVua2VkIG91dC4gIFdoZW4gYGZhbHNlYCwgdGhlIGxpc3QgaXNcbiAgICAgICAqIHJldHVybmVkIGJhY2sgdG8gaXRzIGBpbml0aWFsQ291bnRgIChhbnkgaW5zdGFuY2VzIG92ZXIgdGhlIGluaXRpYWxcbiAgICAgICAqIGNvdW50IGFyZSBkaXNjYXJkZWQpIGFuZCB0aGUgcmVtYWluZGVyIG9mIHRoZSBsaXN0IGlzIGNodW5rZWQgYmFjayBpbi5cbiAgICAgICAqIFNldCB0aGlzIHRvIGB0cnVlYCB0byBhdm9pZCByZS1jcmVhdGluZyB0aGUgbGlzdCBhbmQgbG9zaW5nIHNjcm9sbFxuICAgICAgICogcG9zaXRpb24sIGFsdGhvdWdoIG5vdGUgdGhhdCB3aGVuIGNoYW5naW5nIHRoZSBsaXN0IHRvIGNvbXBsZXRlbHlcbiAgICAgICAqIGRpZmZlcmVudCBkYXRhIHRoZSByZW5kZXIgdGhyZWFkIHdpbGwgYmUgYmxvY2tlZCB1bnRpbCBhbGwgZXhpc3RpbmdcbiAgICAgICAqIGluc3RhbmNlcyBhcmUgdXBkYXRlZCB0byB0aGVpciBuZXcgZGF0YS5cbiAgICAgICAqL1xuICAgICAgcmV1c2VDaHVua2VkSW5zdGFuY2VzOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW5cbiAgICAgIH1cblxuICAgIH07XG5cbiAgfVxuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZXJzKCkge1xuICAgIHJldHVybiBbICdfX2l0ZW1zQ2hhbmdlZChpdGVtcy4qKScgXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fX2luc3RhbmNlcyA9IFtdO1xuICAgIHRoaXMuX19yZW5kZXJEZWJvdW5jZXIgPSBudWxsO1xuICAgIHRoaXMuX19pdGVtc0lkeFRvSW5zdElkeCA9IHt9O1xuICAgIHRoaXMuX19jaHVua0NvdW50ID0gbnVsbDtcbiAgICB0aGlzLl9fcmVuZGVyU3RhcnRUaW1lID0gbnVsbDtcbiAgICB0aGlzLl9faXRlbXNBcnJheUNoYW5nZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9fc2hvdWxkTWVhc3VyZUNodW5rID0gZmFsc2U7XG4gICAgdGhpcy5fX3Nob3VsZENvbnRpbnVlQ2h1bmtpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9fY2h1bmtpbmdJZCA9IDA7XG4gICAgdGhpcy5fX3NvcnRGbiA9IG51bGw7XG4gICAgdGhpcy5fX2ZpbHRlckZuID0gbnVsbDtcbiAgICB0aGlzLl9fb2JzZXJ2ZVBhdGhzID0gbnVsbDtcbiAgICAvKiogQHR5cGUgez9mdW5jdGlvbihuZXc6VGVtcGxhdGVJbnN0YW5jZUJhc2UsIE9iamVjdD0pfSAqL1xuICAgIHRoaXMuX19jdG9yID0gbnVsbDtcbiAgICB0aGlzLl9faXNEZXRhY2hlZCA9IHRydWU7XG4gICAgdGhpcy50ZW1wbGF0ZSA9IG51bGw7XG4gICAgLyoqIEB0eXBlIHtUZW1wbGF0ZUluZm99ICovXG4gICAgdGhpcy5fdGVtcGxhdGVJbmZvO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLl9faXNEZXRhY2hlZCA9IHRydWU7XG4gICAgZm9yIChsZXQgaT0wOyBpPHRoaXMuX19pbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuX19kZXRhY2hJbnN0YW5jZShpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIGlmICghaGlkZUVsZW1lbnRzR2xvYmFsbHkoKSkge1xuICAgICAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbiAgICAvLyBvbmx5IHBlcmZvcm0gYXR0YWNobWVudCBpZiB0aGUgZWxlbWVudCB3YXMgcHJldmlvdXNseSBkZXRhY2hlZC5cbiAgICBpZiAodGhpcy5fX2lzRGV0YWNoZWQpIHtcbiAgICAgIHRoaXMuX19pc0RldGFjaGVkID0gZmFsc2U7XG4gICAgICBsZXQgd3JhcHBlZFBhcmVudCA9IHdyYXAod3JhcCh0aGlzKS5wYXJlbnROb2RlKTtcbiAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLl9faW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuX19hdHRhY2hJbnN0YW5jZShpLCB3cmFwcGVkUGFyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfX2Vuc3VyZVRlbXBsYXRpemVkKCkge1xuICAgIC8vIFRlbXBsYXRpemluZyAoZ2VuZXJhdGluZyB0aGUgaW5zdGFuY2UgY29uc3RydWN0b3IpIG5lZWRzIHRvIHdhaXRcbiAgICAvLyB1bnRpbCByZWFkeSwgc2luY2Ugd29uJ3QgaGF2ZSBpdHMgdGVtcGxhdGUgY29udGVudCBoYW5kZWQgYmFjayB0b1xuICAgIC8vIGl0IHVudGlsIHRoZW5cbiAgICBpZiAoIXRoaXMuX19jdG9yKSB7XG4gICAgICAvLyBXaGVuIGByZW1vdmVOZXN0ZWRUZW1wbGF0ZXNgIGlzIHRydWUsIHRoZSBcInRlbXBsYXRlXCIgaXMgdGhlIGVsZW1lbnRcbiAgICAgIC8vIGl0c2VsZiwgd2hpY2ggaGFzIGJlZW4gZ2l2ZW4gYSBgX3RlbXBsYXRlSW5mb2AgcHJvcGVydHlcbiAgICAgIGNvbnN0IHRoaXNBc1RlbXBsYXRlID0gLyoqIEB0eXBlIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gKi8gKFxuICAgICAgICAgIC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyAodGhpcykpO1xuICAgICAgbGV0IHRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZSA9IHRoaXNBc1RlbXBsYXRlLl90ZW1wbGF0ZUluZm8gP1xuICAgICAgICAgIHRoaXNBc1RlbXBsYXRlIDpcbiAgICAgICAgICAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyAodGhpcy5xdWVyeVNlbGVjdG9yKCd0ZW1wbGF0ZScpKTtcbiAgICAgIGlmICghdGVtcGxhdGUpIHtcbiAgICAgICAgLy8gV2FpdCB1bnRpbCBjaGlsZExpc3QgY2hhbmdlcyBhbmQgdGVtcGxhdGUgc2hvdWxkIGJlIHRoZXJlIGJ5IHRoZW5cbiAgICAgICAgbGV0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlJykpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIHRoaXMuX19yZW5kZXIoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkb20tcmVwZWF0IHJlcXVpcmVzIGEgPHRlbXBsYXRlPiBjaGlsZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUodGhpcywge2NoaWxkTGlzdDogdHJ1ZX0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUZW1wbGF0ZSBpbnN0YW5jZSBwcm9wcyB0aGF0IHNob3VsZCBiZSBleGNsdWRlZCBmcm9tIGZvcndhcmRpbmdcbiAgICAgIGxldCBpbnN0YW5jZVByb3BzID0ge307XG4gICAgICBpbnN0YW5jZVByb3BzW3RoaXMuYXNdID0gdHJ1ZTtcbiAgICAgIGluc3RhbmNlUHJvcHNbdGhpcy5pbmRleEFzXSA9IHRydWU7XG4gICAgICBpbnN0YW5jZVByb3BzW3RoaXMuaXRlbXNJbmRleEFzXSA9IHRydWU7XG4gICAgICB0aGlzLl9fY3RvciA9IHRlbXBsYXRpemUodGVtcGxhdGUsIHRoaXMsIHtcbiAgICAgICAgbXV0YWJsZURhdGE6IHRoaXMubXV0YWJsZURhdGEsXG4gICAgICAgIHBhcmVudE1vZGVsOiB0cnVlLFxuICAgICAgICBpbnN0YW5jZVByb3BzOiBpbnN0YW5jZVByb3BzLFxuICAgICAgICAvKipcbiAgICAgICAgICogQHRoaXMge0RvbVJlcGVhdH1cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgdG8gc2V0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0IHByb3BlcnR5IHRvXG4gICAgICAgICAqL1xuICAgICAgICBmb3J3YXJkSG9zdFByb3A6IGZ1bmN0aW9uKHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgbGV0IGkkID0gdGhpcy5fX2luc3RhbmNlcztcbiAgICAgICAgICBmb3IgKGxldCBpPTAsIGluc3Q7IChpPGkkLmxlbmd0aCkgJiYgKGluc3Q9aSRbaV0pOyBpKyspIHtcbiAgICAgICAgICAgIGluc3QuZm9yd2FyZEhvc3RQcm9wKHByb3AsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdGhpcyB7RG9tUmVwZWF0fVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5zdCBJbnN0YW5jZSB0byBub3RpZnlcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgdG8gbm90aWZ5XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gbm90aWZ5XG4gICAgICAgICAqL1xuICAgICAgICBub3RpZnlJbnN0YW5jZVByb3A6IGZ1bmN0aW9uKGluc3QsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKG1hdGNoZXModGhpcy5hcywgcHJvcCkpIHtcbiAgICAgICAgICAgIGxldCBpZHggPSBpbnN0W3RoaXMuaXRlbXNJbmRleEFzXTtcbiAgICAgICAgICAgIGlmIChwcm9wID09IHRoaXMuYXMpIHtcbiAgICAgICAgICAgICAgdGhpcy5pdGVtc1tpZHhdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcGF0aCA9IHRyYW5zbGF0ZSh0aGlzLmFzLCBgJHtKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdpdGVtcycsIHRoaXMpfS4ke2lkeH1gLCBwcm9wKTtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5UGF0aChwYXRoLCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBfX2dldE1ldGhvZEhvc3QoKSB7XG4gICAgLy8gVGVjaG5pY2FsbHkgdGhpcyBzaG91bGQgYmUgdGhlIG93bmVyIG9mIHRoZSBvdXRlcm1vc3QgdGVtcGxhdGUuXG4gICAgLy8gSW4gc2hhZG93IGRvbSwgdGhpcyBpcyBhbHdheXMgZ2V0Um9vdE5vZGUoKS5ob3N0LCBidXQgd2UgY2FuXG4gICAgLy8gYXBwcm94aW1hdGUgdGhpcyB2aWEgY29vcGVyYXRpb24gd2l0aCBvdXIgZGF0YUhvc3QgYWx3YXlzIHNldHRpbmdcbiAgICAvLyBgX21ldGhvZEhvc3RgIGFzIGxvbmcgYXMgdGhlcmUgd2VyZSBiaW5kaW5ncyAob3IgaWQncykgb24gdGhpc1xuICAgIC8vIGluc3RhbmNlIGNhdXNpbmcgaXQgdG8gZ2V0IGEgZGF0YUhvc3QuXG4gICAgcmV0dXJuIHRoaXMuX19kYXRhSG9zdC5fbWV0aG9kSG9zdCB8fCB0aGlzLl9fZGF0YUhvc3Q7XG4gIH1cblxuICBfX2Z1bmN0aW9uRnJvbVByb3BlcnR5VmFsdWUoZnVuY3Rpb25Pck1ldGhvZE5hbWUpIHtcbiAgICBpZiAodHlwZW9mIGZ1bmN0aW9uT3JNZXRob2ROYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgbGV0IG1ldGhvZE5hbWUgPSBmdW5jdGlvbk9yTWV0aG9kTmFtZTtcbiAgICAgIGxldCBvYmogPSB0aGlzLl9fZ2V0TWV0aG9kSG9zdCgpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgeyByZXR1cm4gb2JqW21ldGhvZE5hbWVdLmFwcGx5KG9iaiwgYXJndW1lbnRzKTsgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb25Pck1ldGhvZE5hbWU7XG4gIH1cblxuICBfX3NvcnRDaGFuZ2VkKHNvcnQpIHtcbiAgICB0aGlzLl9fc29ydEZuID0gdGhpcy5fX2Z1bmN0aW9uRnJvbVByb3BlcnR5VmFsdWUoc29ydCk7XG4gICAgaWYgKHRoaXMuaXRlbXMpIHsgdGhpcy5fX2RlYm91bmNlUmVuZGVyKHRoaXMuX19yZW5kZXIpOyB9XG4gIH1cblxuICBfX2ZpbHRlckNoYW5nZWQoZmlsdGVyKSB7XG4gICAgdGhpcy5fX2ZpbHRlckZuID0gdGhpcy5fX2Z1bmN0aW9uRnJvbVByb3BlcnR5VmFsdWUoZmlsdGVyKTtcbiAgICBpZiAodGhpcy5pdGVtcykgeyB0aGlzLl9fZGVib3VuY2VSZW5kZXIodGhpcy5fX3JlbmRlcik7IH1cbiAgfVxuXG4gIF9fY29tcHV0ZUZyYW1lVGltZShyYXRlKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCgxMDAwL3JhdGUpO1xuICB9XG5cbiAgX19vYnNlcnZlQ2hhbmdlZCgpIHtcbiAgICB0aGlzLl9fb2JzZXJ2ZVBhdGhzID0gdGhpcy5vYnNlcnZlICYmXG4gICAgICB0aGlzLm9ic2VydmUucmVwbGFjZSgnLionLCAnLicpLnNwbGl0KCcgJyk7XG4gIH1cblxuICBfX2hhbmRsZU9ic2VydmVkUGF0aHMocGF0aCkge1xuICAgIC8vIEhhbmRsZSBjYXNlcyB3aGVyZSBwYXRoIGNoYW5nZXMgc2hvdWxkIGNhdXNlIGEgcmUtc29ydC9maWx0ZXJcbiAgICBpZiAodGhpcy5fX3NvcnRGbiB8fCB0aGlzLl9fZmlsdGVyRm4pIHtcbiAgICAgIGlmICghcGF0aCkge1xuICAgICAgICAvLyBBbHdheXMgcmUtcmVuZGVyIGlmIHRoZSBpdGVtIGl0c2VsZiBjaGFuZ2VkXG4gICAgICAgIHRoaXMuX19kZWJvdW5jZVJlbmRlcih0aGlzLl9fcmVuZGVyLCB0aGlzLmRlbGF5KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fX29ic2VydmVQYXRocykge1xuICAgICAgICAvLyBPdGhlcndpc2UsIHJlLXJlbmRlciBpZiB0aGUgcGF0aCBjaGFuZ2VkIG1hdGNoZXMgYW4gb2JzZXJ2ZWQgcGF0aFxuICAgICAgICBsZXQgcGF0aHMgPSB0aGlzLl9fb2JzZXJ2ZVBhdGhzO1xuICAgICAgICBmb3IgKGxldCBpPTA7IGk8cGF0aHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAocGF0aC5pbmRleE9mKHBhdGhzW2ldKSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fX2RlYm91bmNlUmVuZGVyKHRoaXMuX19yZW5kZXIsIHRoaXMuZGVsYXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9faXRlbXNDaGFuZ2VkKGNoYW5nZSkge1xuICAgIGlmICh0aGlzLml0ZW1zICYmICFBcnJheS5pc0FycmF5KHRoaXMuaXRlbXMpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2RvbS1yZXBlYXQgZXhwZWN0ZWQgYXJyYXkgZm9yIGBpdGVtc2AsIGZvdW5kJywgdGhpcy5pdGVtcyk7XG4gICAgfVxuICAgIC8vIElmIHBhdGggd2FzIHRvIGFuIGl0ZW0gKGUuZy4gJ2l0ZW1zLjMnIG9yICdpdGVtcy4zLmZvbycpLCBmb3J3YXJkIHRoZVxuICAgIC8vIHBhdGggdG8gdGhhdCBpbnN0YW5jZSBzeW5jaHJvbm91c2x5IChyZXR1cm5zIGZhbHNlIGZvciBub24taXRlbSBwYXRocylcbiAgICBpZiAoIXRoaXMuX19oYW5kbGVJdGVtUGF0aChjaGFuZ2UucGF0aCwgY2hhbmdlLnZhbHVlKSkge1xuICAgICAgLy8gT3RoZXJ3aXNlLCB0aGUgYXJyYXkgd2FzIHJlc2V0ICgnaXRlbXMnKSBvciBzcGxpY2VkICgnaXRlbXMuc3BsaWNlcycpLFxuICAgICAgLy8gc28gcXVldWUgYSByZW5kZXIuICBSZXN0YXJ0IGNodW5raW5nIHdoZW4gdGhlIGl0ZW1zIGNoYW5nZWQgKGZvclxuICAgICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSksIHVubGVzcyBgcmV1c2VDaHVua2VkSW5zdGFuY2VzYCBvcHRpb24gaXMgc2V0XG4gICAgICBpZiAoY2hhbmdlLnBhdGggPT09ICdpdGVtcycpIHtcbiAgICAgICAgdGhpcy5fX2l0ZW1zQXJyYXlDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19kZWJvdW5jZVJlbmRlcih0aGlzLl9fcmVuZGVyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOkRvbVJlcGVhdCl9IGZuIEZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IGRlbGF5IERlbGF5IGluIG1zIHRvIGRlYm91bmNlIGJ5LlxuICAgKi9cbiAgX19kZWJvdW5jZVJlbmRlcihmbiwgZGVsYXkgPSAwKSB7XG4gICAgdGhpcy5fX3JlbmRlckRlYm91bmNlciA9IERlYm91bmNlci5kZWJvdW5jZShcbiAgICAgICAgICB0aGlzLl9fcmVuZGVyRGVib3VuY2VyXG4gICAgICAgICwgZGVsYXkgPiAwID8gdGltZU91dC5hZnRlcihkZWxheSkgOiBtaWNyb1Rhc2tcbiAgICAgICAgLCBmbi5iaW5kKHRoaXMpKTtcbiAgICBlbnF1ZXVlRGVib3VuY2VyKHRoaXMuX19yZW5kZXJEZWJvdW5jZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcmNlcyB0aGUgZWxlbWVudCB0byByZW5kZXIgaXRzIGNvbnRlbnQuIE5vcm1hbGx5IHJlbmRlcmluZyBpc1xuICAgKiBhc3luY2hyb25vdXMgdG8gYSBwcm92b2tpbmcgY2hhbmdlLiBUaGlzIGlzIGRvbmUgZm9yIGVmZmljaWVuY3kgc29cbiAgICogdGhhdCBtdWx0aXBsZSBjaGFuZ2VzIHRyaWdnZXIgb25seSBhIHNpbmdsZSByZW5kZXIuIFRoZSByZW5kZXIgbWV0aG9kXG4gICAqIHNob3VsZCBiZSBjYWxsZWQgaWYsIGZvciBleGFtcGxlLCB0ZW1wbGF0ZSByZW5kZXJpbmcgaXMgcmVxdWlyZWQgdG9cbiAgICogdmFsaWRhdGUgYXBwbGljYXRpb24gc3RhdGUuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgLy8gUXVldWUgdGhpcyByZXBlYXRlciwgdGhlbiBmbHVzaCBhbGwgaW4gb3JkZXJcbiAgICB0aGlzLl9fZGVib3VuY2VSZW5kZXIodGhpcy5fX3JlbmRlcik7XG4gICAgZmx1c2goKTtcbiAgfVxuXG4gIF9fcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5fX2Vuc3VyZVRlbXBsYXRpemVkKCkpIHtcbiAgICAgIC8vIE5vIHRlbXBsYXRlIGZvdW5kIHlldFxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgaXRlbXMgPSB0aGlzLml0ZW1zIHx8IFtdO1xuICAgIC8vIFNvcnQgYW5kIGZpbHRlciB0aGUgaXRlbXMgaW50byBhIG1hcHBpbmcgYXJyYXkgZnJvbSBpbnN0YW5jZS0+aXRlbVxuICAgIGNvbnN0IGlzbnRJZHhUb0l0ZW1zSWR4ID0gdGhpcy5fX3NvcnRBbmRGaWx0ZXJJdGVtcyhpdGVtcyk7XG4gICAgLy8gSWYgd2UncmUgY2h1bmtpbmcsIGluY3JlYXNlIHRoZSBsaW1pdCBpZiB0aGVyZSBhcmUgbmV3IGluc3RhbmNlcyB0b1xuICAgIC8vIGNyZWF0ZSBhbmQgc2NoZWR1bGUgdGhlIG5leHQgY2h1bmtcbiAgICBjb25zdCBsaW1pdCA9IHRoaXMuX19jYWxjdWxhdGVMaW1pdChpc250SWR4VG9JdGVtc0lkeC5sZW5ndGgpO1xuICAgIC8vIENyZWF0ZSwgdXBkYXRlLCBhbmQvb3IgcmVtb3ZlIGluc3RhbmNlc1xuICAgIHRoaXMuX191cGRhdGVJbnN0YW5jZXMoaXRlbXMsIGxpbWl0LCBpc250SWR4VG9JdGVtc0lkeCk7XG4gICAgLy8gSWYgd2UncmUgY2h1bmtpbmcsIHNjaGVkdWxlIGEgckFGIHRhc2sgdG8gbWVhc3VyZS9jb250aW51ZSBjaHVua2luZy4gICAgIFxuICAgIC8vIERvIHRoaXMgYmVmb3JlIGFueSBub3RpZnlpbmcgZXZlbnRzIChyZW5kZXJlZEl0ZW1Db3VudCAmIGRvbS1jaGFuZ2UpXG4gICAgLy8gc2luY2UgdGhvc2UgY291bGQgbW9kaWZ5IGl0ZW1zIGFuZCBlbnF1ZXVlIGEgbmV3IGZ1bGwgcmVuZGVyIHdoaWNoIHdpbGxcbiAgICAvLyBwcmUtZW1wdCB0aGlzIG1lYXN1cmVtZW50LlxuICAgIGlmICh0aGlzLmluaXRpYWxDb3VudCAmJlxuICAgICAgICh0aGlzLl9fc2hvdWxkTWVhc3VyZUNodW5rIHx8IHRoaXMuX19zaG91bGRDb250aW51ZUNodW5raW5nKSkge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5fX2NodW5raW5nSWQpO1xuICAgICAgdGhpcy5fX2NodW5raW5nSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5fX2NvbnRpbnVlQ2h1bmtpbmcoKSk7XG4gICAgfVxuICAgIC8vIFNldCByZW5kZXJlZCBpdGVtIGNvdW50XG4gICAgdGhpcy5fc2V0UmVuZGVyZWRJdGVtQ291bnQodGhpcy5fX2luc3RhbmNlcy5sZW5ndGgpO1xuICAgIC8vIE5vdGlmeSB1c2Vyc1xuICAgIGlmICghc3VwcHJlc3NUZW1wbGF0ZU5vdGlmaWNhdGlvbnMgfHwgdGhpcy5ub3RpZnlEb21DaGFuZ2UpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2RvbS1jaGFuZ2UnLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNvbXBvc2VkOiB0cnVlXG4gICAgICB9KSk7XG4gICAgfVxuICB9XG5cbiAgX19zb3J0QW5kRmlsdGVySXRlbXMoaXRlbXMpIHtcbiAgICAvLyBHZW5lcmF0ZSBhcnJheSBtYXBpbmcgdGhlIGluc3RhbmNlIGluZGV4IHRvIHRoZSBpdGVtcyBhcnJheSBpbmRleFxuICAgIGxldCBpc250SWR4VG9JdGVtc0lkeCA9IG5ldyBBcnJheShpdGVtcy5sZW5ndGgpO1xuICAgIGZvciAobGV0IGk9MDsgaTxpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgaXNudElkeFRvSXRlbXNJZHhbaV0gPSBpO1xuICAgIH1cbiAgICAvLyBBcHBseSB1c2VyIGZpbHRlclxuICAgIGlmICh0aGlzLl9fZmlsdGVyRm4pIHtcbiAgICAgIGlzbnRJZHhUb0l0ZW1zSWR4ID0gaXNudElkeFRvSXRlbXNJZHguZmlsdGVyKChpLCBpZHgsIGFycmF5KSA9PlxuICAgICAgICB0aGlzLl9fZmlsdGVyRm4oaXRlbXNbaV0sIGlkeCwgYXJyYXkpKTtcbiAgICB9XG4gICAgLy8gQXBwbHkgdXNlciBzb3J0XG4gICAgaWYgKHRoaXMuX19zb3J0Rm4pIHtcbiAgICAgIGlzbnRJZHhUb0l0ZW1zSWR4LnNvcnQoKGEsIGIpID0+IHRoaXMuX19zb3J0Rm4oaXRlbXNbYV0sIGl0ZW1zW2JdKSk7XG4gICAgfVxuICAgIHJldHVybiBpc250SWR4VG9JdGVtc0lkeDtcbiAgfVxuXG4gIF9fY2FsY3VsYXRlTGltaXQoZmlsdGVyZWRJdGVtQ291bnQpIHtcbiAgICBsZXQgbGltaXQgPSBmaWx0ZXJlZEl0ZW1Db3VudDtcbiAgICBjb25zdCBjdXJyZW50Q291bnQgPSB0aGlzLl9faW5zdGFuY2VzLmxlbmd0aDtcbiAgICAvLyBXaGVuIGNodW5raW5nLCB3ZSBpbmNyZWFzZSB0aGUgbGltaXQgZnJvbSB0aGUgY3VycmVudGx5IHJlbmRlcmVkIGNvdW50XG4gICAgLy8gYnkgdGhlIGNodW5rIGNvdW50IHRoYXQgaXMgcmUtY2FsY3VsYXRlZCBhZnRlciBlYWNoIHJBRiAod2l0aCBzcGVjaWFsXG4gICAgLy8gY2FzZXMgZm9yIHJlc2V0aW5nIHRoZSBsaW1pdCB0byBpbml0aWFsQ291bnQgYWZ0ZXIgY2hhbmdpbmcgaXRlbXMpXG4gICAgaWYgKHRoaXMuaW5pdGlhbENvdW50KSB7XG4gICAgICBsZXQgbmV3Q291bnQ7XG4gICAgICBpZiAoIXRoaXMuX19jaHVua0NvdW50IHx8XG4gICAgICAgICh0aGlzLl9faXRlbXNBcnJheUNoYW5nZWQgJiYgIXRoaXMucmV1c2VDaHVua2VkSW5zdGFuY2VzKSkge1xuICAgICAgICAvLyBMaW1pdCBuZXh0IHJlbmRlciB0byB0aGUgaW5pdGlhbCBjb3VudFxuICAgICAgICBsaW1pdCA9IE1hdGgubWluKGZpbHRlcmVkSXRlbUNvdW50LCB0aGlzLmluaXRpYWxDb3VudCk7XG4gICAgICAgIC8vIFN1YnRyYWN0IG9mZiBhbnkgZXhpc3RpbmcgaW5zdGFuY2VzIHRvIGRldGVybWluZSB0aGUgbnVtYmVyIG9mXG4gICAgICAgIC8vIGluc3RhbmNlcyB0aGF0IHdpbGwgYmUgY3JlYXRlZFxuICAgICAgICBuZXdDb3VudCA9IE1hdGgubWF4KGxpbWl0IC0gY3VycmVudENvdW50LCAwKTtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgY2h1bmsgc2l6ZSB3aXRoIGhvdyBtYW55IGl0ZW1zIHdlJ3JlIGNyZWF0aW5nXG4gICAgICAgIHRoaXMuX19jaHVua0NvdW50ID0gbmV3Q291bnQgfHwgMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoZSBudW1iZXIgb2YgbmV3IGluc3RhbmNlcyB0aGF0IHdpbGwgYmUgY3JlYXRlZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgICAgLy8gZXhpc3RpbmcgaW5zdGFuY2VzLCB0aGUgbmV3IGxpc3Qgc2l6ZSwgYW5kIHRoZSBjaHVuayBzaXplXG4gICAgICAgIG5ld0NvdW50ID0gTWF0aC5taW4oXG4gICAgICAgICAgTWF0aC5tYXgoZmlsdGVyZWRJdGVtQ291bnQgLSBjdXJyZW50Q291bnQsIDApLCBcbiAgICAgICAgICB0aGlzLl9fY2h1bmtDb3VudCk7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgbGltaXQgYmFzZWQgb24gaG93IG1hbnkgbmV3IGl0ZW1zIHdlJ3JlIG1ha2luZywgbGltaXRlZFxuICAgICAgICAvLyBidXkgdGhlIHRvdGFsIHNpemUgb2YgdGhlIGxpc3RcbiAgICAgICAgbGltaXQgPSBNYXRoLm1pbihjdXJyZW50Q291bnQgKyBuZXdDb3VudCwgZmlsdGVyZWRJdGVtQ291bnQpO1xuICAgICAgfVxuICAgICAgLy8gUmVjb3JkIHNvbWUgc3RhdGUgYWJvdXQgY2h1bmtpbmcgZm9yIHVzZSBpbiBgX19jb250aW51ZUNodW5raW5nYFxuICAgICAgdGhpcy5fX3Nob3VsZE1lYXN1cmVDaHVuayA9IG5ld0NvdW50ID09PSB0aGlzLl9fY2h1bmtDb3VudDtcbiAgICAgIHRoaXMuX19zaG91bGRDb250aW51ZUNodW5raW5nID0gbGltaXQgPCBmaWx0ZXJlZEl0ZW1Db3VudDtcbiAgICAgIHRoaXMuX19yZW5kZXJTdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9XG4gICAgdGhpcy5fX2l0ZW1zQXJyYXlDaGFuZ2VkID0gZmFsc2U7XG4gICAgcmV0dXJuIGxpbWl0O1xuICB9XG5cbiAgX19jb250aW51ZUNodW5raW5nKCkge1xuICAgIC8vIFNpbXBsZSBhdXRvIGNodW5rU2l6ZSB0aHJvdHRsaW5nIGFsZ29yaXRobSBiYXNlZCBvbiBmZWVkYmFjayBsb29wOlxuICAgIC8vIG1lYXN1cmUgYWN0dWFsIHRpbWUgYmV0d2VlbiBmcmFtZXMgYW5kIHNjYWxlIGNodW5rIGNvdW50IGJ5IHJhdGlvIG9mXG4gICAgLy8gdGFyZ2V0L2FjdHVhbCBmcmFtZSB0aW1lLiAgT25seSBtb2RpZnkgY2h1bmsgc2l6ZSBpZiBvdXIgbWVhc3VyZW1lbnRcbiAgICAvLyByZWZsZWN0cyB0aGUgY29zdCBvZiBhIGNyZWF0aW5nIGEgZnVsbCBjaHVuaydzIHdvcnRoIG9mIGluc3RhbmNlczsgdGhpc1xuICAgIC8vIGF2b2lkcyBzY2FsaW5nIHVwIHRoZSBjaHVuayBzaXplIGlmIHdlIGUuZy4gcXVpY2tseSByZS1yZW5kZXJlZCBpbnN0YW5jZXNcbiAgICAvLyBpbiBwbGFjZVxuICAgIGlmICh0aGlzLl9fc2hvdWxkTWVhc3VyZUNodW5rKSB7XG4gICAgICBjb25zdCByZW5kZXJUaW1lID0gcGVyZm9ybWFuY2Uubm93KCkgLSB0aGlzLl9fcmVuZGVyU3RhcnRUaW1lO1xuICAgICAgY29uc3QgcmF0aW8gPSB0aGlzLl90YXJnZXRGcmFtZVRpbWUgLyByZW5kZXJUaW1lO1xuICAgICAgdGhpcy5fX2NodW5rQ291bnQgPSBNYXRoLnJvdW5kKHRoaXMuX19jaHVua0NvdW50ICogcmF0aW8pIHx8IDE7XG4gICAgfVxuICAgIC8vIEVucXVldWUgYSBuZXcgcmVuZGVyIGlmIHdlIGhhdmVuJ3QgcmVhY2hlZCB0aGUgZnVsbCBzaXplIG9mIHRoZSBsaXN0XG4gICAgaWYgKHRoaXMuX19zaG91bGRDb250aW51ZUNodW5raW5nKSB7XG4gICAgICB0aGlzLl9fZGVib3VuY2VSZW5kZXIodGhpcy5fX3JlbmRlcik7XG4gICAgfVxuICB9XG4gIFxuICBfX3VwZGF0ZUluc3RhbmNlcyhpdGVtcywgbGltaXQsIGlzbnRJZHhUb0l0ZW1zSWR4KSB7XG4gICAgLy8gaXRlbXMtPmluc3QgbWFwIGtlcHQgZm9yIGl0ZW0gcGF0aCBmb3J3YXJkaW5nXG4gICAgY29uc3QgaXRlbXNJZHhUb0luc3RJZHggPSB0aGlzLl9faXRlbXNJZHhUb0luc3RJZHggPSB7fTtcbiAgICBsZXQgaW5zdElkeDtcbiAgICAvLyBHZW5lcmF0ZSBpbnN0YW5jZXMgYW5kIGFzc2lnbiBpdGVtc1xuICAgIGZvciAoaW5zdElkeD0wOyBpbnN0SWR4PGxpbWl0OyBpbnN0SWR4KyspIHtcbiAgICAgIGxldCBpbnN0ID0gdGhpcy5fX2luc3RhbmNlc1tpbnN0SWR4XTtcbiAgICAgIGxldCBpdGVtSWR4ID0gaXNudElkeFRvSXRlbXNJZHhbaW5zdElkeF07XG4gICAgICBsZXQgaXRlbSA9IGl0ZW1zW2l0ZW1JZHhdO1xuICAgICAgaXRlbXNJZHhUb0luc3RJZHhbaXRlbUlkeF0gPSBpbnN0SWR4O1xuICAgICAgaWYgKGluc3QpIHtcbiAgICAgICAgaW5zdC5fc2V0UGVuZGluZ1Byb3BlcnR5KHRoaXMuYXMsIGl0ZW0pO1xuICAgICAgICBpbnN0Ll9zZXRQZW5kaW5nUHJvcGVydHkodGhpcy5pbmRleEFzLCBpbnN0SWR4KTtcbiAgICAgICAgaW5zdC5fc2V0UGVuZGluZ1Byb3BlcnR5KHRoaXMuaXRlbXNJbmRleEFzLCBpdGVtSWR4KTtcbiAgICAgICAgaW5zdC5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9faW5zZXJ0SW5zdGFuY2UoaXRlbSwgaW5zdElkeCwgaXRlbUlkeCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFJlbW92ZSBhbnkgZXh0cmEgaW5zdGFuY2VzIGZyb20gcHJldmlvdXMgc3RhdGVcbiAgICBmb3IgKGxldCBpPXRoaXMuX19pbnN0YW5jZXMubGVuZ3RoLTE7IGk+PWluc3RJZHg7IGktLSkge1xuICAgICAgdGhpcy5fX2RldGFjaEFuZFJlbW92ZUluc3RhbmNlKGkpO1xuICAgIH1cbiAgfVxuXG4gIF9fZGV0YWNoSW5zdGFuY2UoaWR4KSB7XG4gICAgbGV0IGluc3QgPSB0aGlzLl9faW5zdGFuY2VzW2lkeF07XG4gICAgY29uc3Qgd3JhcHBlZFJvb3QgPSB3cmFwKGluc3Qucm9vdCk7XG4gICAgZm9yIChsZXQgaT0wOyBpPGluc3QuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBlbCA9IGluc3QuY2hpbGRyZW5baV07XG4gICAgICB3cmFwcGVkUm9vdC5hcHBlbmRDaGlsZChlbCk7XG4gICAgfVxuICAgIHJldHVybiBpbnN0O1xuICB9XG5cbiAgX19hdHRhY2hJbnN0YW5jZShpZHgsIHBhcmVudCkge1xuICAgIGxldCBpbnN0ID0gdGhpcy5fX2luc3RhbmNlc1tpZHhdO1xuICAgIC8vIE5vdGUsIHRoaXMgaXMgcHJlLXdyYXBwZWQgYXMgYW4gb3B0aW1pemF0aW9uXG4gICAgcGFyZW50Lmluc2VydEJlZm9yZShpbnN0LnJvb3QsIHRoaXMpO1xuICB9XG5cbiAgX19kZXRhY2hBbmRSZW1vdmVJbnN0YW5jZShpZHgpIHtcbiAgICB0aGlzLl9fZGV0YWNoSW5zdGFuY2UoaWR4KTtcbiAgICB0aGlzLl9faW5zdGFuY2VzLnNwbGljZShpZHgsIDEpO1xuICB9XG5cbiAgX19zdGFtcEluc3RhbmNlKGl0ZW0sIGluc3RJZHgsIGl0ZW1JZHgpIHtcbiAgICBsZXQgbW9kZWwgPSB7fTtcbiAgICBtb2RlbFt0aGlzLmFzXSA9IGl0ZW07XG4gICAgbW9kZWxbdGhpcy5pbmRleEFzXSA9IGluc3RJZHg7XG4gICAgbW9kZWxbdGhpcy5pdGVtc0luZGV4QXNdID0gaXRlbUlkeDtcbiAgICByZXR1cm4gbmV3IHRoaXMuX19jdG9yKG1vZGVsKTtcbiAgfVxuXG4gIF9faW5zZXJ0SW5zdGFuY2UoaXRlbSwgaW5zdElkeCwgaXRlbUlkeCkge1xuICAgIGNvbnN0IGluc3QgPSB0aGlzLl9fc3RhbXBJbnN0YW5jZShpdGVtLCBpbnN0SWR4LCBpdGVtSWR4KTtcbiAgICBsZXQgYmVmb3JlUm93ID0gdGhpcy5fX2luc3RhbmNlc1tpbnN0SWR4ICsgMV07XG4gICAgbGV0IGJlZm9yZU5vZGUgPSBiZWZvcmVSb3cgPyBiZWZvcmVSb3cuY2hpbGRyZW5bMF0gOiB0aGlzO1xuICAgIHdyYXAod3JhcCh0aGlzKS5wYXJlbnROb2RlKS5pbnNlcnRCZWZvcmUoaW5zdC5yb290LCBiZWZvcmVOb2RlKTtcbiAgICB0aGlzLl9faW5zdGFuY2VzW2luc3RJZHhdID0gaW5zdDtcbiAgICByZXR1cm4gaW5zdDtcbiAgfVxuXG4gIC8vIEltcGxlbWVudHMgZXh0ZW5zaW9uIHBvaW50IGZyb20gVGVtcGxhdGl6ZSBtaXhpblxuICAvKipcbiAgICogU2hvd3Mgb3IgaGlkZXMgdGhlIHRlbXBsYXRlIGluc3RhbmNlIHRvcCBsZXZlbCBjaGlsZCBlbGVtZW50cy4gRm9yXG4gICAqIHRleHQgbm9kZXMsIGB0ZXh0Q29udGVudGAgaXMgcmVtb3ZlZCB3aGlsZSBcImhpZGRlblwiIGFuZCByZXBsYWNlZCB3aGVuXG4gICAqIFwic2hvd24uXCJcbiAgICogQHBhcmFtIHtib29sZWFufSBoaWRkZW4gU2V0IHRvIHRydWUgdG8gaGlkZSB0aGUgY2hpbGRyZW47XG4gICAqIHNldCB0byBmYWxzZSB0byBzaG93IHRoZW0uXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9zaG93SGlkZUNoaWxkcmVuKGhpZGRlbikge1xuICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLl9faW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9faW5zdGFuY2VzW2ldLl9zaG93SGlkZUNoaWxkcmVuKGhpZGRlbik7XG4gICAgfVxuICB9XG5cbiAgLy8gQ2FsbGVkIGFzIGEgc2lkZSBlZmZlY3Qgb2YgYSBob3N0IGl0ZW1zLjxrZXk+LjxwYXRoPiBwYXRoIGNoYW5nZSxcbiAgLy8gcmVzcG9uc2libGUgZm9yIG5vdGlmeWluZyBpdGVtLjxwYXRoPiBjaGFuZ2VzIHRvIGluc3QgZm9yIGtleVxuICBfX2hhbmRsZUl0ZW1QYXRoKHBhdGgsIHZhbHVlKSB7XG4gICAgbGV0IGl0ZW1zUGF0aCA9IHBhdGguc2xpY2UoNik7IC8vICdpdGVtcy4nLmxlbmd0aCA9PSA2XG4gICAgbGV0IGRvdCA9IGl0ZW1zUGF0aC5pbmRleE9mKCcuJyk7XG4gICAgbGV0IGl0ZW1zSWR4ID0gZG90IDwgMCA/IGl0ZW1zUGF0aCA6IGl0ZW1zUGF0aC5zdWJzdHJpbmcoMCwgZG90KTtcbiAgICAvLyBJZiBwYXRoIHdhcyBpbmRleCBpbnRvIGFycmF5Li4uXG4gICAgaWYgKGl0ZW1zSWR4ID09IHBhcnNlSW50KGl0ZW1zSWR4LCAxMCkpIHtcbiAgICAgIGxldCBpdGVtU3ViUGF0aCA9IGRvdCA8IDAgPyAnJyA6IGl0ZW1zUGF0aC5zdWJzdHJpbmcoZG90KzEpO1xuICAgICAgLy8gSWYgdGhlIHBhdGggaXMgb2JzZXJ2ZWQsIGl0IHdpbGwgdHJpZ2dlciBhIGZ1bGwgcmVmcmVzaFxuICAgICAgdGhpcy5fX2hhbmRsZU9ic2VydmVkUGF0aHMoaXRlbVN1YlBhdGgpO1xuICAgICAgLy8gTm90ZSwgZXZlbiBpZiBhIHJ1bGwgcmVmcmVzaCBpcyB0cmlnZ2VyZWQsIGFsd2F5cyBkbyB0aGUgcGF0aFxuICAgICAgLy8gbm90aWZpY2F0aW9uIGJlY2F1c2UgdW5sZXNzIG11dGFibGVEYXRhIGlzIHVzZWQgZm9yIGRvbS1yZXBlYXRcbiAgICAgIC8vIGFuZCBhbGwgZWxlbWVudHMgaW4gdGhlIGluc3RhbmNlIHN1YnRyZWUsIGEgZnVsbCByZWZyZXNoIG1heVxuICAgICAgLy8gbm90IHRyaWdnZXIgdGhlIHByb3BlciB1cGRhdGUuXG4gICAgICBsZXQgaW5zdElkeCA9IHRoaXMuX19pdGVtc0lkeFRvSW5zdElkeFtpdGVtc0lkeF07XG4gICAgICBsZXQgaW5zdCA9IHRoaXMuX19pbnN0YW5jZXNbaW5zdElkeF07XG4gICAgICBpZiAoaW5zdCkge1xuICAgICAgICBsZXQgaXRlbVBhdGggPSB0aGlzLmFzICsgKGl0ZW1TdWJQYXRoID8gJy4nICsgaXRlbVN1YlBhdGggOiAnJyk7XG4gICAgICAgIC8vIFRoaXMgaXMgZWZmZWN0aXZlbHkgYG5vdGlmeVBhdGhgLCBidXQgYXZvaWRzIHNvbWUgb2YgdGhlIG92ZXJoZWFkXG4gICAgICAgIC8vIG9mIHRoZSBwdWJsaWMgQVBJXG4gICAgICAgIGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChpdGVtUGF0aCwgdmFsdWUsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgaW5zdC5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaXRlbSBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiBlbGVtZW50IHN0YW1wZWQgYnlcbiAgICogdGhpcyBgZG9tLXJlcGVhdGAuXG4gICAqXG4gICAqIE5vdGUsIHRvIG1vZGlmeSBzdWItcHJvcGVydGllcyBvZiB0aGUgaXRlbSxcbiAgICogYG1vZGVsRm9yRWxlbWVudChlbCkuc2V0KCdpdGVtLjxzdWItcHJvcD4nLCB2YWx1ZSlgXG4gICAqIHNob3VsZCBiZSB1c2VkLlxuICAgKlxuICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gZWwgRWxlbWVudCBmb3Igd2hpY2ggdG8gcmV0dXJuIHRoZSBpdGVtLlxuICAgKiBAcmV0dXJuIHsqfSBJdGVtIGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudC5cbiAgICovXG4gIGl0ZW1Gb3JFbGVtZW50KGVsKSB7XG4gICAgbGV0IGluc3RhbmNlID0gdGhpcy5tb2RlbEZvckVsZW1lbnQoZWwpO1xuICAgIHJldHVybiBpbnN0YW5jZSAmJiBpbnN0YW5jZVt0aGlzLmFzXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpbnN0IGluZGV4IGZvciBhIGdpdmVuIGVsZW1lbnQgc3RhbXBlZCBieSB0aGlzIGBkb20tcmVwZWF0YC5cbiAgICogSWYgYHNvcnRgIGlzIHByb3ZpZGVkLCB0aGUgaW5kZXggd2lsbCByZWZsZWN0IHRoZSBzb3J0ZWQgb3JkZXIgKHJhdGhlclxuICAgKiB0aGFuIHRoZSBvcmlnaW5hbCBhcnJheSBvcmRlcikuXG4gICAqXG4gICAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBlbCBFbGVtZW50IGZvciB3aGljaCB0byByZXR1cm4gdGhlIGluZGV4LlxuICAgKiBAcmV0dXJuIHs/bnVtYmVyfSBSb3cgaW5kZXggYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50IChub3RlIHRoaXMgbWF5XG4gICAqICAgbm90IGNvcnJlc3BvbmQgdG8gdGhlIGFycmF5IGluZGV4IGlmIGEgdXNlciBgc29ydGAgaXMgYXBwbGllZCkuXG4gICAqL1xuICBpbmRleEZvckVsZW1lbnQoZWwpIHtcbiAgICBsZXQgaW5zdGFuY2UgPSB0aGlzLm1vZGVsRm9yRWxlbWVudChlbCk7XG4gICAgcmV0dXJuIGluc3RhbmNlICYmIGluc3RhbmNlW3RoaXMuaW5kZXhBc107XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdGVtcGxhdGUgXCJtb2RlbFwiIGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuIGVsZW1lbnQsIHdoaWNoXG4gICAqIHNlcnZlcyBhcyB0aGUgYmluZGluZyBzY29wZSBmb3IgdGhlIHRlbXBsYXRlIGluc3RhbmNlIHRoZSBlbGVtZW50IGlzXG4gICAqIGNvbnRhaW5lZCBpbi4gQSB0ZW1wbGF0ZSBtb2RlbFxuICAgKiBzaG91bGQgYmUgdXNlZCB0byBtYW5pcHVsYXRlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoaXMgdGVtcGxhdGUgaW5zdGFuY2UuXG4gICAqXG4gICAqIEV4YW1wbGU6XG4gICAqXG4gICAqICAgbGV0IG1vZGVsID0gbW9kZWxGb3JFbGVtZW50KGVsKTtcbiAgICogICBpZiAobW9kZWwuaW5kZXggPCAxMCkge1xuICAgKiAgICAgbW9kZWwuc2V0KCdpdGVtLmNoZWNrZWQnLCB0cnVlKTtcbiAgICogICB9XG4gICAqXG4gICAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBlbCBFbGVtZW50IGZvciB3aGljaCB0byByZXR1cm4gYSB0ZW1wbGF0ZSBtb2RlbC5cbiAgICogQHJldHVybiB7VGVtcGxhdGVJbnN0YW5jZUJhc2V9IE1vZGVsIHJlcHJlc2VudGluZyB0aGUgYmluZGluZyBzY29wZSBmb3JcbiAgICogICB0aGUgZWxlbWVudC5cbiAgICovXG4gIG1vZGVsRm9yRWxlbWVudChlbCkge1xuICAgIHJldHVybiBtb2RlbEZvckVsZW1lbnQodGhpcy50ZW1wbGF0ZSwgZWwpO1xuICB9XG5cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKERvbVJlcGVhdC5pcywgRG9tUmVwZWF0KTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgeyBQb2x5bWVyRWxlbWVudCB9IGZyb20gJy4uLy4uL3BvbHltZXItZWxlbWVudC5qcyc7XG5cbmltcG9ydCB7IERlYm91bmNlciB9IGZyb20gJy4uL3V0aWxzL2RlYm91bmNlLmpzJztcbmltcG9ydCB7IGVucXVldWVEZWJvdW5jZXIsIGZsdXNoIH0gZnJvbSAnLi4vdXRpbHMvZmx1c2guanMnO1xuaW1wb3J0IHsgbWljcm9UYXNrIH0gZnJvbSAnLi4vdXRpbHMvYXN5bmMuanMnO1xuaW1wb3J0IHsgcm9vdCB9IGZyb20gJy4uL3V0aWxzL3BhdGguanMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4uL3V0aWxzL3dyYXAuanMnO1xuaW1wb3J0IHsgaGlkZUVsZW1lbnRzR2xvYmFsbHkgfSBmcm9tICcuLi91dGlscy9oaWRlLXRlbXBsYXRlLWNvbnRyb2xzLmpzJztcbmltcG9ydCB7IGZhc3REb21JZiwgc3RyaWN0VGVtcGxhdGVQb2xpY3ksIHN1cHByZXNzVGVtcGxhdGVOb3RpZmljYXRpb25zIH0gZnJvbSAnLi4vdXRpbHMvc2V0dGluZ3MuanMnO1xuaW1wb3J0IHsgc2hvd0hpZGVDaGlsZHJlbiwgdGVtcGxhdGl6ZSB9IGZyb20gJy4uL3V0aWxzL3RlbXBsYXRpemUuanMnO1xuXG4vKipcbiAqIEBjdXN0b21FbGVtZW50XG4gKiBAcG9seW1lclxuICogQGV4dGVuZHMgUG9seW1lckVsZW1lbnRcbiAqIEBzdW1tYXJ5IEJhc2UgY2xhc3MgZm9yIGRvbS1pZiBlbGVtZW50OyBzdWJjbGFzc2VkIGludG8gY29uY3JldGVcbiAqICAgaW1wbGVtZW50YXRpb24uXG4gKi9cbmNsYXNzIERvbUlmQmFzZSBleHRlbmRzIFBvbHltZXJFbGVtZW50IHtcblxuICAvLyBOb3QgbmVlZGVkIHRvIGZpbmQgdGVtcGxhdGU7IGNhbiBiZSByZW1vdmVkIG9uY2UgdGhlIGFuYWx5emVyXG4gIC8vIGNhbiBmaW5kIHRoZSB0YWcgbmFtZSBmcm9tIGN1c3RvbUVsZW1lbnRzLmRlZmluZSBjYWxsXG4gIHN0YXRpYyBnZXQgaXMoKSB7IHJldHVybiAnZG9tLWlmJzsgfVxuXG4gIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7IHJldHVybiBudWxsOyB9XG5cbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuXG4gICAgcmV0dXJuIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlZCB3aGVuZXZlciBET00gaXMgYWRkZWQgb3IgcmVtb3ZlZC9oaWRkZW4gYnkgdGhpcyB0ZW1wbGF0ZSAoYnlcbiAgICAgICAqIGRlZmF1bHQsIHJlbmRlcmluZyBvY2N1cnMgbGF6aWx5KS4gIFRvIGZvcmNlIGltbWVkaWF0ZSByZW5kZXJpbmcsIGNhbGxcbiAgICAgICAqIGByZW5kZXJgLlxuICAgICAgICpcbiAgICAgICAqIEBldmVudCBkb20tY2hhbmdlXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBBIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoaXMgdGVtcGxhdGUgc2hvdWxkIHN0YW1wLlxuICAgICAgICovXG4gICAgICBpZjoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBvYnNlcnZlcjogJ19fZGVib3VuY2VSZW5kZXInXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFdoZW4gdHJ1ZSwgZWxlbWVudHMgd2lsbCBiZSByZW1vdmVkIGZyb20gRE9NIGFuZCBkaXNjYXJkZWQgd2hlbiBgaWZgXG4gICAgICAgKiBiZWNvbWVzIGZhbHNlIGFuZCByZS1jcmVhdGVkIGFuZCBhZGRlZCBiYWNrIHRvIHRoZSBET00gd2hlbiBgaWZgXG4gICAgICAgKiBiZWNvbWVzIHRydWUuICBCeSBkZWZhdWx0LCBzdGFtcGVkIGVsZW1lbnRzIHdpbGwgYmUgaGlkZGVuIGJ1dCBsZWZ0XG4gICAgICAgKiBpbiB0aGUgRE9NIHdoZW4gYGlmYCBiZWNvbWVzIGZhbHNlLCB3aGljaCBpcyBnZW5lcmFsbHkgcmVzdWx0c1xuICAgICAgICogaW4gYmV0dGVyIHBlcmZvcm1hbmNlLlxuICAgICAgICovXG4gICAgICByZXN0YW1wOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIG9ic2VydmVyOiAnX19kZWJvdW5jZVJlbmRlcidcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogV2hlbiB0aGUgZ2xvYmFsIGBzdXBwcmVzc1RlbXBsYXRlTm90aWZpY2F0aW9uc2Agc2V0dGluZyBpcyB1c2VkLCBzZXR0aW5nXG4gICAgICAgKiBgbm90aWZ5RG9tQ2hhbmdlOiB0cnVlYCB3aWxsIGVuYWJsZSBmaXJpbmcgYGRvbS1jaGFuZ2VgIGV2ZW50cyBvbiB0aGlzXG4gICAgICAgKiBlbGVtZW50LlxuICAgICAgICovXG4gICAgICBub3RpZnlEb21DaGFuZ2U6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhblxuICAgICAgfVxuICAgIH07XG5cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fX3JlbmRlckRlYm91bmNlciA9IG51bGw7XG4gICAgdGhpcy5fbGFzdElmID0gZmFsc2U7XG4gICAgdGhpcy5fX2hpZGVUZW1wbGF0ZUNoaWxkcmVuX18gPSBmYWxzZTtcbiAgICAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50fHVuZGVmaW5lZH0gKi9cbiAgICB0aGlzLl9fdGVtcGxhdGU7XG4gICAgLyoqIEB0eXBlIHshVGVtcGxhdGVJbmZvfHVuZGVmaW5lZH0gKi9cbiAgICB0aGlzLl90ZW1wbGF0ZUluZm87XG4gIH1cblxuICBfX2RlYm91bmNlUmVuZGVyKCkge1xuICAgIC8vIFJlbmRlciBpcyBhc3luYyBmb3IgMiByZWFzb25zOlxuICAgIC8vIDEuIFRvIGVsaW1pbmF0ZSBkb20gY3JlYXRpb24gdHJhc2hpbmcgaWYgdXNlciBjb2RlIHRocmFzaGVzIGBpZmAgaW4gdGhlXG4gICAgLy8gICAgc2FtZSB0dXJuLiBUaGlzIHdhcyBtb3JlIGNvbW1vbiBpbiAxLnggd2hlcmUgYSBjb21wb3VuZCBjb21wdXRlZFxuICAgIC8vICAgIHByb3BlcnR5IGNvdWxkIHJlc3VsdCBpbiB0aGUgcmVzdWx0IGNoYW5naW5nIG11bHRpcGxlIHRpbWVzLCBidXQgaXNcbiAgICAvLyAgICBtaXRpZ2F0ZWQgdG8gYSBsYXJnZSBleHRlbnQgYnkgYmF0Y2hlZCBwcm9wZXJ0eSBwcm9jZXNzaW5nIGluIDIueC5cbiAgICAvLyAyLiBUbyBhdm9pZCBkb3VibGUgb2JqZWN0IHByb3BhZ2F0aW9uIHdoZW4gYSBiYWcgaW5jbHVkaW5nIHZhbHVlcyBib3VuZFxuICAgIC8vICAgIHRvIHRoZSBgaWZgIHByb3BlcnR5IGFzIHdlbGwgYXMgb25lIG9yIG1vcmUgaG9zdFByb3BzIGNvdWxkIGVucXVldWVcbiAgICAvLyAgICB0aGUgPGRvbS1pZj4gdG8gZmx1c2ggYmVmb3JlIHRoZSA8dGVtcGxhdGU+J3MgaG9zdCBwcm9wZXJ0eVxuICAgIC8vICAgIGZvcndhcmRpbmcuIEluIHRoYXQgc2NlbmFyaW8gY3JlYXRpbmcgYW4gaW5zdGFuY2Ugd291bGQgcmVzdWx0IGluXG4gICAgLy8gICAgdGhlIGhvc3QgcHJvcHMgYmVpbmcgc2V0IG9uY2UsIGFuZCB0aGVuIHRoZSBlbnF1ZXVlZCBjaGFuZ2VzIG9uIHRoZVxuICAgIC8vICAgIHRlbXBsYXRlIHdvdWxkIHNldCBwcm9wZXJ0aWVzIGEgc2Vjb25kIHRpbWUsIHBvdGVudGlhbGx5IGNhdXNpbmcgYW5cbiAgICAvLyAgICBvYmplY3QgdG8gYmUgc2V0IHRvIGFuIGluc3RhbmNlIG1vcmUgdGhhbiBvbmNlLiAgQ3JlYXRpbmcgdGhlXG4gICAgLy8gICAgaW5zdGFuY2UgYXN5bmMgZnJvbSBmbHVzaGluZyBkYXRhIGVuc3VyZXMgdGhpcyBkb2Vzbid0IGhhcHBlbi4gSWZcbiAgICAvLyAgICB3ZSB3YW50ZWQgYSBzeW5jIG9wdGlvbiBpbiB0aGUgZnV0dXJlLCBzaW1wbHkgaGF2aW5nIDxkb20taWY+IGZsdXNoXG4gICAgLy8gICAgKG9yIGNsZWFyKSBpdHMgdGVtcGxhdGUncyBwZW5kaW5nIGhvc3QgcHJvcGVydGllcyBiZWZvcmUgY3JlYXRpbmdcbiAgICAvLyAgICB0aGUgaW5zdGFuY2Ugd291bGQgYWxzbyBhdm9pZCB0aGUgcHJvYmxlbS5cbiAgICB0aGlzLl9fcmVuZGVyRGVib3VuY2VyID0gRGVib3VuY2VyLmRlYm91bmNlKFxuICAgICAgICAgIHRoaXMuX19yZW5kZXJEZWJvdW5jZXJcbiAgICAgICAgLCBtaWNyb1Rhc2tcbiAgICAgICAgLCAoKSA9PiB0aGlzLl9fcmVuZGVyKCkpO1xuICAgIGVucXVldWVEZWJvdW5jZXIodGhpcy5fX3JlbmRlckRlYm91bmNlcik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIGNvbnN0IHBhcmVudCA9IHdyYXAodGhpcykucGFyZW50Tm9kZTtcbiAgICBpZiAoIXBhcmVudCB8fCAocGFyZW50Lm5vZGVUeXBlID09IE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSAmJlxuICAgICAgICAhd3JhcChwYXJlbnQpLmhvc3QpKSB7XG4gICAgICB0aGlzLl9fdGVhcmRvd25JbnN0YW5jZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgaWYgKCFoaWRlRWxlbWVudHNHbG9iYWxseSgpKSB7XG4gICAgICB0aGlzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxuICAgIGlmICh0aGlzLmlmKSB7XG4gICAgICB0aGlzLl9fZGVib3VuY2VSZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRW5zdXJlcyBhIHRlbXBsYXRlIGhhcyBiZWVuIGFzc2lnbmVkIHRvIGB0aGlzLl9fdGVtcGxhdGVgLiAgSWYgaXQgaGFzIG5vdFxuICAgKiB5ZXQgYmVlbiwgaXQgcXVlcnlTZWxlY3RvcnMgZm9yIGl0IGluIGl0cyBjaGlsZHJlbiBhbmQgaWYgaXQgZG9lcyBub3QgeWV0XG4gICAqIGV4aXN0IChlLmcuIGluIHBhcnNlci1nZW5lcmF0ZWQgY2FzZSksIG9wZW5zIGEgbXV0YXRpb24gb2JzZXJ2ZXIgYW5kXG4gICAqIHdhaXRzIGZvciBpdCB0byBhcHBlYXIgKHJldHVybnMgZmFsc2UgaWYgaXQgaGFzIG5vdCB5ZXQgYmVlbiBmb3VuZCxcbiAgICogb3RoZXJ3aXNlIHRydWUpLiAgSW4gdGhlIGByZW1vdmVOZXN0ZWRUZW1wbGF0ZXNgIGNhc2UsIHRoZSBcInRlbXBsYXRlXCIgd2lsbFxuICAgKiBiZSB0aGUgYGRvbS1pZmAgZWxlbWVudCBpdHNlbGYuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgd2hlbiBhIHRlbXBsYXRlIGhhcyBiZWVuIGZvdW5kLCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIF9fZW5zdXJlVGVtcGxhdGUoKSB7XG4gICAgaWYgKCF0aGlzLl9fdGVtcGxhdGUpIHtcbiAgICAgIC8vIFdoZW4gYHJlbW92ZU5lc3RlZFRlbXBsYXRlc2AgaXMgdHJ1ZSwgdGhlIFwidGVtcGxhdGVcIiBpcyB0aGUgZWxlbWVudFxuICAgICAgLy8gaXRzZWxmLCB3aGljaCBoYXMgYmVlbiBnaXZlbiBhIGBfdGVtcGxhdGVJbmZvYCBwcm9wZXJ0eVxuICAgICAgY29uc3QgdGhpc0FzVGVtcGxhdGUgPSAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyAoXG4gICAgICAgICAgLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovICh0aGlzKSk7XG4gICAgICBsZXQgdGVtcGxhdGUgPSB0aGlzQXNUZW1wbGF0ZS5fdGVtcGxhdGVJbmZvID9cbiAgICAgICAgICB0aGlzQXNUZW1wbGF0ZSA6XG4gICAgICAgICAgLyoqIEB0eXBlIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gKi9cbiAgICAgICAgICAod3JhcCh0aGlzQXNUZW1wbGF0ZSkucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKSk7XG4gICAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICAgIC8vIFdhaXQgdW50aWwgY2hpbGRMaXN0IGNoYW5nZXMgYW5kIHRlbXBsYXRlIHNob3VsZCBiZSB0aGVyZSBieSB0aGVuXG4gICAgICAgIGxldCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcbiAgICAgICAgICBpZiAod3JhcCh0aGlzKS5xdWVyeVNlbGVjdG9yKCd0ZW1wbGF0ZScpKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB0aGlzLl9fcmVuZGVyKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZG9tLWlmIHJlcXVpcmVzIGEgPHRlbXBsYXRlPiBjaGlsZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUodGhpcywge2NoaWxkTGlzdDogdHJ1ZX0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aGlzLl9fdGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogRW5zdXJlcyBhIGFuIGluc3RhbmNlIG9mIHRoZSB0ZW1wbGF0ZSBoYXMgYmVlbiBjcmVhdGVkIGFuZCBpbnNlcnRlZC4gVGhpc1xuICAgKiBtZXRob2QgbWF5IHJldHVybiBmYWxzZSBpZiB0aGUgdGVtcGxhdGUgaGFzIG5vdCB5ZXQgYmVlbiBmb3VuZCBvciBpZlxuICAgKiB0aGVyZSBpcyBubyBgcGFyZW50Tm9kZWAgdG8gaW5zZXJ0IHRoZSB0ZW1wbGF0ZSBpbnRvIChpbiBlaXRoZXIgY2FzZSxcbiAgICogY29ubmVjdGlvbiBvciB0aGUgdGVtcGxhdGUtZmluZGluZyBtdXRhdGlvbiBvYnNlcnZlciBmaXJpbmcgd2lsbCBxdWV1ZVxuICAgKiBhbm90aGVyIHJlbmRlciwgY2F1c2luZyB0aGlzIG1ldGhvZCB0byBiZSBjYWxsZWQgYWdhaW4gYXQgYSBtb3JlXG4gICAqIGFwcHJvcHJpYXRlIHRpbWUpLlxuICAgKlxuICAgKiBTdWJjbGFzc2VzIHNob3VsZCBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBtZXRob2RzIGNhbGxlZCBoZXJlOlxuICAgKiAtIGBfX2hhc0luc3RhbmNlYFxuICAgKiAtIGBfX2NyZWF0ZUFuZEluc2VydEluc3RhbmNlYFxuICAgKiAtIGBfX2dldEluc3RhbmNlTm9kZXNgXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGluc3RhbmNlIHdhcyBjcmVhdGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBfX2Vuc3VyZUluc3RhbmNlKCkge1xuICAgIGxldCBwYXJlbnROb2RlID0gd3JhcCh0aGlzKS5wYXJlbnROb2RlO1xuICAgIGlmICghdGhpcy5fX2hhc0luc3RhbmNlKCkpIHtcbiAgICAgIC8vIEd1YXJkIGFnYWluc3QgZWxlbWVudCBiZWluZyBkZXRhY2hlZCB3aGlsZSByZW5kZXIgd2FzIHF1ZXVlZFxuICAgICAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEZpbmQgdGhlIHRlbXBsYXRlICh3aGVuIGZhbHNlLCB0aGVyZSB3YXMgbm8gdGVtcGxhdGUgeWV0KVxuICAgICAgaWYgKCF0aGlzLl9fZW5zdXJlVGVtcGxhdGUoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aGlzLl9fY3JlYXRlQW5kSW5zZXJ0SW5zdGFuY2UocGFyZW50Tm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE1vdmUgaW5zdGFuY2UgY2hpbGRyZW4gaWYgbmVjZXNzYXJ5XG4gICAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLl9fZ2V0SW5zdGFuY2VOb2RlcygpO1xuICAgICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAvLyBEZXRlY3QgY2FzZSB3aGVyZSBkb20taWYgd2FzIHJlLWF0dGFjaGVkIGluIG5ldyBwb3NpdGlvblxuICAgICAgICBsZXQgbGFzdENoaWxkID0gd3JhcCh0aGlzKS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgIGlmIChsYXN0Q2hpbGQgIT09IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aC0xXSkge1xuICAgICAgICAgIGZvciAobGV0IGk9MCwgbjsgKGk8Y2hpbGRyZW4ubGVuZ3RoKSAmJiAobj1jaGlsZHJlbltpXSk7IGkrKykge1xuICAgICAgICAgICAgd3JhcChwYXJlbnROb2RlKS5pbnNlcnRCZWZvcmUobiwgdGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcmNlcyB0aGUgZWxlbWVudCB0byByZW5kZXIgaXRzIGNvbnRlbnQuIE5vcm1hbGx5IHJlbmRlcmluZyBpc1xuICAgKiBhc3luY2hyb25vdXMgdG8gYSBwcm92b2tpbmcgY2hhbmdlLiBUaGlzIGlzIGRvbmUgZm9yIGVmZmljaWVuY3kgc29cbiAgICogdGhhdCBtdWx0aXBsZSBjaGFuZ2VzIHRyaWdnZXIgb25seSBhIHNpbmdsZSByZW5kZXIuIFRoZSByZW5kZXIgbWV0aG9kXG4gICAqIHNob3VsZCBiZSBjYWxsZWQgaWYsIGZvciBleGFtcGxlLCB0ZW1wbGF0ZSByZW5kZXJpbmcgaXMgcmVxdWlyZWQgdG9cbiAgICogdmFsaWRhdGUgYXBwbGljYXRpb24gc3RhdGUuXG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgZmx1c2goKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyB0aGUga2V5IHJlbmRlcmluZyBzdGVwczpcbiAgICogMS4gRW5zdXJlIGEgdGVtcGxhdGUgaW5zdGFuY2UgaGFzIGJlZW4gc3RhbXBlZCAod2hlbiB0cnVlKVxuICAgKiAyLiBSZW1vdmUgdGhlIHRlbXBsYXRlIGluc3RhbmNlICh3aGVuIGZhbHNlIGFuZCByZXN0YW1wOnRydWUpXG4gICAqIDMuIFN5bmMgdGhlIGhpZGRlbiBzdGF0ZSBvZiB0aGUgaW5zdGFuY2Ugbm9kZXMgd2l0aCB0aGUgaWYvcmVzdGFtcCBzdGF0ZVxuICAgKiA0LiBGaXJlcyB0aGUgYGRvbS1jaGFuZ2VgIGV2ZW50IHdoZW4gbmVjZXNzYXJ5XG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBfX3JlbmRlcigpIHtcbiAgICBpZiAodGhpcy5pZikge1xuICAgICAgaWYgKCF0aGlzLl9fZW5zdXJlSW5zdGFuY2UoKSkge1xuICAgICAgICAvLyBObyB0ZW1wbGF0ZSBmb3VuZCB5ZXRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5yZXN0YW1wKSB7XG4gICAgICB0aGlzLl9fdGVhcmRvd25JbnN0YW5jZSgpO1xuICAgIH1cbiAgICB0aGlzLl9zaG93SGlkZUNoaWxkcmVuKCk7XG4gICAgaWYgKCghc3VwcHJlc3NUZW1wbGF0ZU5vdGlmaWNhdGlvbnMgfHwgdGhpcy5ub3RpZnlEb21DaGFuZ2UpXG4gICAgICAgICYmIHRoaXMuaWYgIT0gdGhpcy5fbGFzdElmKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdkb20tY2hhbmdlJywge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBjb21wb3NlZDogdHJ1ZVxuICAgICAgfSkpO1xuICAgICAgdGhpcy5fbGFzdElmID0gdGhpcy5pZjtcbiAgICB9XG4gIH1cblxuICAvLyBJZGVhbGx5IHRoZXNlIHdvdWxkIGJlIGFubm90YXRlZCBhcyBhYnN0cmFjdCBtZXRob2RzIGluIGFuIGFic3RyYWN0IGNsYXNzLFxuICAvLyBidXQgY2xvc3VyZSBjb21waWxlciBpcyBmaW5uaWNreVxuICAvKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYyAqL1xuICAvKipcbiAgICogQWJzdHJhY3QgQVBJIHRvIGJlIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzOiBSZXR1cm5zIHRydWUgaWYgYSB0ZW1wbGF0ZVxuICAgKiBpbnN0YW5jZSBoYXMgYmVlbiBjcmVhdGVkIGFuZCBpbnNlcnRlZC5cbiAgICpcbiAgICogQHByb3RlY3RlZFxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIHdoZW4gYW4gaW5zdGFuY2UgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICovXG4gIF9faGFzSW5zdGFuY2UoKSB7IH1cblxuICAvKipcbiAgICogQWJzdHJhY3QgQVBJIHRvIGJlIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzOiBSZXR1cm5zIHRoZSBjaGlsZCBub2RlcyBzdGFtcGVkXG4gICAqIGZyb20gYSB0ZW1wbGF0ZSBpbnN0YW5jZS5cbiAgICpcbiAgICogQHByb3RlY3RlZFxuICAgKiBAcmV0dXJuIHtBcnJheTxOb2RlPn0gQXJyYXkgb2YgY2hpbGQgbm9kZXMgc3RhbXBlZCBmcm9tIHRoZSB0ZW1wbGF0ZVxuICAgKiBpbnN0YW5jZS5cbiAgICovXG4gIF9fZ2V0SW5zdGFuY2VOb2RlcygpIHsgfVxuXG4gIC8qKlxuICAgKiBBYnN0cmFjdCBBUEkgdG8gYmUgaW1wbGVtZW50ZWQgYnkgc3ViY2xhc3M6IENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlXG4gICAqIHRlbXBsYXRlIGFuZCBpbnNlcnRzIGl0IGludG8gdGhlIGdpdmVuIHBhcmVudCBub2RlLlxuICAgKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50Tm9kZSBUaGUgcGFyZW50IG5vZGUgdG8gaW5zZXJ0IHRoZSBpbnN0YW5jZSBpbnRvXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBfX2NyZWF0ZUFuZEluc2VydEluc3RhbmNlKHBhcmVudE5vZGUpIHsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgLyoqXG4gICAqIEFic3RyYWN0IEFQSSB0byBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzczogUmVtb3ZlcyBub2RlcyBjcmVhdGVkIGJ5IGFuXG4gICAqIGluc3RhbmNlIG9mIGEgdGVtcGxhdGUgYW5kIGFueSBhc3NvY2lhdGVkIGNsZWFudXAuXG4gICAqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIF9fdGVhcmRvd25JbnN0YW5jZSgpIHsgfVxuXG4gIC8qKlxuICAgKiBBYnN0cmFjdCBBUEkgdG8gYmUgaW1wbGVtZW50ZWQgYnkgc3ViY2xhc3M6IFNob3dzIG9yIGhpZGVzIGFueSB0ZW1wbGF0ZVxuICAgKiBpbnN0YW5jZSBjaGlsZE5vZGVzIGJhc2VkIG9uIHRoZSBgaWZgIHN0YXRlIG9mIHRoZSBlbGVtZW50IGFuZCBpdHNcbiAgICogYF9faGlkZVRlbXBsYXRlQ2hpbGRyZW5fX2AgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIF9zaG93SGlkZUNoaWxkcmVuKCkgeyB9XG4gIC8qIGVzbGludC1lbmFibGUgdmFsaWQtanNkb2MgKi9cbn1cblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiBEb21JZiB1c2VkIHdoZW4gYGZhc3REb21JZmAgc2V0dGluZyBpcyBpbiB1c2UsIHdoaWNoIGlzXG4gKiBvcHRpbWl6ZWQgZm9yIGZpcnN0LXJlbmRlciAoYnV0IGFkZHMgYSB0YXggdG8gYWxsIHN1YnNlcXVlbnQgcHJvcGVydHkgdXBkYXRlc1xuICogb24gdGhlIGhvc3QsIHdoZXRoZXIgdGhleSB3ZXJlIHVzZWQgaW4gYSBnaXZlbiBgZG9tLWlmYCBvciBub3QpLlxuICpcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gYXZvaWRzIHVzZSBvZiBgVGVtcGxhdGl6ZXJgLCB3aGljaCBpbnRyb2R1Y2VzIGEgbmV3IHNjb3BlXG4gKiAoYSBub24tZWxlbWVudCBQcm9wZXJ0eUVmZmVjdHMgaW5zdGFuY2UpLCB3aGljaCBpcyBub3Qgc3RyaWN0bHkgbmVjZXNzYXJ5XG4gKiBzaW5jZSBgZG9tLWlmYCBuZXZlciBpbnRyb2R1Y2VzIG5ldyBwcm9wZXJ0aWVzIHRvIGl0cyBzY29wZSAodW5saWtlXG4gKiBgZG9tLXJlcGVhdGApLiBUYWtpbmcgYWR2YW50YWdlIG9mIHRoaXMgZmFjdCwgdGhlIGBkb20taWZgIHJlYWNoZXMgdXAgdG8gaXRzXG4gKiBgX19kYXRhSG9zdGAgYW5kIHN0YW1wcyB0aGUgdGVtcGxhdGUgZGlyZWN0bHkgZnJvbSB0aGUgaG9zdCB1c2luZyB0aGUgaG9zdCdzXG4gKiBydW50aW1lIGBfc3RhbXBUZW1wbGF0ZWAgQVBJLCB3aGljaCBiaW5kcyB0aGUgcHJvcGVydHkgZWZmZWN0cyBvZiB0aGVcbiAqIHRlbXBsYXRlIGRpcmVjdGx5IHRvIHRoZSBob3N0LiBUaGlzIGJvdGggYXZvaWRzIHRoZSBpbnRlcm1lZGlhcnlcbiAqIGBUZW1wbGF0aXplcmAgaW5zdGFuY2UsIGJ1dCBhbHNvIGF2b2lkcyB0aGUgbmVlZCB0byBiaW5kIGhvc3QgcHJvcGVydGllcyB0b1xuICogdGhlIGA8dGVtcGxhdGU+YCBlbGVtZW50IGFuZCBmb3J3YXJkIHRob3NlIGludG8gdGhlIHRlbXBsYXRlIGluc3RhbmNlLlxuICpcbiAqIEluIHRoaXMgdmVyc2lvbiBvZiBgZG9tLWlmYCwgdGhlIGB0aGlzLl9faW5zdGFuY2VgIG1ldGhvZCBpcyB0aGVcbiAqIGBEb2N1bWVudEZyYWdtZW50YCByZXR1cm5lZCBmcm9tIGBfc3RhbXBUZW1wbGF0ZWAsIHdoaWNoIGFsc28gc2VydmVzIGFzIHRoZVxuICogaGFuZGxlIGZvciBsYXRlciByZW1vdmluZyBpdCB1c2luZyB0aGUgYF9yZW1vdmVCb3VuZERvbWAgbWV0aG9kLlxuICovXG5jbGFzcyBEb21JZkZhc3QgZXh0ZW5kcyBEb21JZkJhc2Uge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fX2luc3RhbmNlID0gbnVsbDtcbiAgICB0aGlzLl9fc3luY0luZm8gPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEltcGxlbWVudGF0aW9uIG9mIGFic3RyYWN0IEFQSSBuZWVkZWQgYnkgRG9tSWZCYXNlLlxuICAgKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSB3aGVuIGFuIGluc3RhbmNlIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAqL1xuICBfX2hhc0luc3RhbmNlKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMuX19pbnN0YW5jZSk7XG4gIH1cblxuICAvKipcbiAgICogSW1wbGVtZW50YXRpb24gb2YgYWJzdHJhY3QgQVBJIG5lZWRlZCBieSBEb21JZkJhc2UuXG4gICAqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcmV0dXJuIHtBcnJheTxOb2RlPn0gQXJyYXkgb2YgY2hpbGQgbm9kZXMgc3RhbXBlZCBmcm9tIHRoZSB0ZW1wbGF0ZVxuICAgKiBpbnN0YW5jZS5cbiAgICovXG4gIF9fZ2V0SW5zdGFuY2VOb2RlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fX2luc3RhbmNlLnRlbXBsYXRlSW5mby5jaGlsZE5vZGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEltcGxlbWVudGF0aW9uIG9mIGFic3RyYWN0IEFQSSBuZWVkZWQgYnkgRG9tSWZCYXNlLlxuICAgKlxuICAgKiBTdGFtcHMgdGhlIHRlbXBsYXRlIGJ5IGNhbGxpbmcgYF9zdGFtcFRlbXBsYXRlYCBvbiB0aGUgYF9fZGF0YUhvc3RgIG9mIHRoaXNcbiAgICogZWxlbWVudCBhbmQgdGhlbiBpbnNlcnRzIHRoZSByZXN1bHRpbmcgbm9kZXMgaW50byB0aGUgZ2l2ZW4gYHBhcmVudE5vZGVgLlxuICAgKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHtOb2RlfSBwYXJlbnROb2RlIFRoZSBwYXJlbnQgbm9kZSB0byBpbnNlcnQgdGhlIGluc3RhbmNlIGludG9cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIF9fY3JlYXRlQW5kSW5zZXJ0SW5zdGFuY2UocGFyZW50Tm9kZSkge1xuICAgIGNvbnN0IGhvc3QgPSB0aGlzLl9fZGF0YUhvc3QgfHwgdGhpcztcbiAgICBpZiAoc3RyaWN0VGVtcGxhdGVQb2xpY3kpIHtcbiAgICAgIGlmICghdGhpcy5fX2RhdGFIb3N0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc3RyaWN0VGVtcGxhdGVQb2xpY3k6IHRlbXBsYXRlIG93bmVyIG5vdCB0cnVzdGVkJyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFByZS1iaW5kIGFuZCBsaW5rIHRoZSB0ZW1wbGF0ZSBpbnRvIHRoZSBlZmZlY3RzIHN5c3RlbVxuICAgIGNvbnN0IHRlbXBsYXRlSW5mbyA9IGhvc3QuX2JpbmRUZW1wbGF0ZShcbiAgICAgICAgLyoqIEB0eXBlIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gKi8gKHRoaXMuX190ZW1wbGF0ZSksIHRydWUpO1xuICAgIC8vIEluc3RhbGwgcnVuRWZmZWN0cyBob29rIHRoYXQgcHJldmVudHMgcnVubmluZyBwcm9wZXJ0eSBlZmZlY3RzXG4gICAgLy8gKGFuZCBhbnkgbmVzdGVkIHRlbXBsYXRlIGVmZmVjdHMpIHdoZW4gdGhlIGBpZmAgaXMgZmFsc2VcbiAgICB0ZW1wbGF0ZUluZm8ucnVuRWZmZWN0cyA9IChydW5FZmZlY3RzLCBjaGFuZ2VkUHJvcHMsIGhhc1BhdGhzKSA9PiB7XG4gICAgICBsZXQgc3luY0luZm8gPSB0aGlzLl9fc3luY0luZm87XG4gICAgICBpZiAodGhpcy5pZikge1xuICAgICAgICAvLyBNaXggYW55IHByb3BzIHRoYXQgY2hhbmdlZCB3aGlsZSB0aGUgYGlmYCB3YXMgZmFsc2UgaW50byBgY2hhbmdlZFByb3BzYFxuICAgICAgICBpZiAoc3luY0luZm8pIHtcbiAgICAgICAgICAvLyBJZiB0aGVyZSB3ZXJlIHByb3BlcnRpZXMgcmVjZWl2ZWQgd2hpbGUgdGhlIGBpZmAgd2FzIGZhbHNlLCBpdCBpc1xuICAgICAgICAgIC8vIGltcG9ydGFudCB0byBzeW5jIHRoZSBoaWRkZW4gc3RhdGUgd2l0aCB0aGUgZWxlbWVudCBfZmlyc3RfLCBzbyB0aGF0XG4gICAgICAgICAgLy8gbmV3IGJpbmRpbmdzIHRvIGUuZy4gYHRleHRDb250ZW50YCBkbyBub3QgZ2V0IHN0b21wZWQgb24gYnlcbiAgICAgICAgICAvLyBwcmUtaGlkZGVuIHZhbHVlcyBpZiBgX3Nob3dIaWRlQ2hpbGRyZW5gIHdlcmUgdG8gYmUgY2FsbGVkIGxhdGVyIGF0XG4gICAgICAgICAgLy8gdGhlIG5leHQgcmVuZGVyLiBDbGVhcmluZyBgX19pbnZhbGlkUHJvcHNgIGhlcmUgZW5zdXJlc1xuICAgICAgICAgIC8vIGBfc2hvd0hpZGVDaGlsZHJlbmAncyBjYWxsIHRvIGBfX3N5bmNIb3N0UHJvcGVydGllc2Agbm8tb3BzLCBzb1xuICAgICAgICAgIC8vIHRoYXQgd2UgZG9uJ3QgY2FsbCBgcnVuRWZmZWN0c2AgbW9yZSBvZnRlbiB0aGFuIG5lY2Vzc2FyeS5cbiAgICAgICAgICB0aGlzLl9fc3luY0luZm8gPSBudWxsO1xuICAgICAgICAgIHRoaXMuX3Nob3dIaWRlQ2hpbGRyZW4oKTtcbiAgICAgICAgICBjaGFuZ2VkUHJvcHMgPSBPYmplY3QuYXNzaWduKHN5bmNJbmZvLmNoYW5nZWRQcm9wcywgY2hhbmdlZFByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICBydW5FZmZlY3RzKGNoYW5nZWRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQWNjdW11bGF0ZSBhbnkgdmFsdWVzIGNoYW5nZWQgd2hpbGUgYGlmYCB3YXMgZmFsc2UsIGFsb25nIHdpdGggdGhlXG4gICAgICAgIC8vIHJ1bkVmZmVjdHMgbWV0aG9kIHRvIHN5bmMgdGhlbSwgc28gdGhhdCB3ZSBjYW4gcmVwbGF5IHRoZW0gb25jZSBgaWZgXG4gICAgICAgIC8vIGJlY29tZXMgdHJ1ZVxuICAgICAgICBpZiAodGhpcy5fX2luc3RhbmNlKSB7XG4gICAgICAgICAgaWYgKCFzeW5jSW5mbykge1xuICAgICAgICAgICAgc3luY0luZm8gPSB0aGlzLl9fc3luY0luZm8gPSB7IHJ1bkVmZmVjdHMsIGNoYW5nZWRQcm9wczoge30gfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhc1BhdGhzKSB7XG4gICAgICAgICAgICAvLyBTdG9yZSByb290IG9iamVjdCBvZiBhbnkgcGF0aHM7IHRoaXMgd2lsbCBlbnN1cmUgZGlyZWN0IGJpbmRpbmdzXG4gICAgICAgICAgICAvLyBsaWtlIFtbb2JqLmZvb11dIGJpbmRpbmdzIHJ1biBhZnRlciBhIGBzZXQoJ29iai5mb28nLCB2KWAsIGJ1dFxuICAgICAgICAgICAgLy8gbm90ZSB0aGF0IHBhdGggbm90aWZpY2F0aW9ucyBsaWtlIGBzZXQoJ29iai5mb28uYmFyJywgdilgIHdpbGxcbiAgICAgICAgICAgIC8vIG5vdCBwcm9wYWdhdGUuIFNpbmNlIGJhdGNoZWQgcGF0aCBub3RpZmljYXRpb25zIGFyZSBub3RcbiAgICAgICAgICAgIC8vIHN1cHBvcnRlZCwgd2UgY2Fubm90IHNpbXBseSBhY2N1bXVsYXRlIHBhdGggbm90aWZpY2F0aW9ucy4gVGhpc1xuICAgICAgICAgICAgLy8gaXMgZXF1aXZhbGVudCB0byB0aGUgbm9uLWZhc3REb21JZiBjYXNlLCB3aGljaCBzdG9yZXMgcm9vdChwKSBpblxuICAgICAgICAgICAgLy8gX19pbnZhbGlkUHJvcHMuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHAgaW4gY2hhbmdlZFByb3BzKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJvb3RQcm9wID0gcm9vdChwKTtcbiAgICAgICAgICAgICAgc3luY0luZm8uY2hhbmdlZFByb3BzW3Jvb3RQcm9wXSA9IHRoaXMuX19kYXRhSG9zdFtyb290UHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3luY0luZm8uY2hhbmdlZFByb3BzLCBjaGFuZ2VkUHJvcHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgLy8gU3RhbXAgdGhlIHRlbXBsYXRlLCBhbmQgc2V0IGl0cyBEb2N1bWVudEZyYWdtZW50IHRvIHRoZSBcImluc3RhbmNlXCJcbiAgICB0aGlzLl9faW5zdGFuY2UgPSBob3N0Ll9zdGFtcFRlbXBsYXRlKFxuICAgICAgICAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyAodGhpcy5fX3RlbXBsYXRlKSwgdGVtcGxhdGVJbmZvKTtcbiAgICB3cmFwKHBhcmVudE5vZGUpLmluc2VydEJlZm9yZSh0aGlzLl9faW5zdGFuY2UsIHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1biBlZmZlY3RzIGZvciBhbnkgcHJvcGVydGllcyB0aGF0IGNoYW5nZWQgd2hpbGUgdGhlIGBpZmAgd2FzIGZhbHNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgX19zeW5jSG9zdFByb3BlcnRpZXMoKSB7XG4gICAgY29uc3Qgc3luY0luZm8gPSB0aGlzLl9fc3luY0luZm87XG4gICAgaWYgKHN5bmNJbmZvKSB7XG4gICAgICB0aGlzLl9fc3luY0luZm8gPSBudWxsO1xuICAgICAgc3luY0luZm8ucnVuRWZmZWN0cyhzeW5jSW5mby5jaGFuZ2VkUHJvcHMsIGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW1wbGVtZW50YXRpb24gb2YgYWJzdHJhY3QgQVBJIG5lZWRlZCBieSBEb21JZkJhc2UuXG4gICAqXG4gICAqIFJlbW92ZSB0aGUgaW5zdGFuY2UgYW5kIGFueSBub2RlcyBpdCBjcmVhdGVkLiAgVXNlcyB0aGUgYF9fZGF0YUhvc3RgJ3NcbiAgICogcnVudGltZSBgX3JlbW92ZUJvdW5kRG9tYCBtZXRob2QuXG4gICAqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgX190ZWFyZG93bkluc3RhbmNlKCkge1xuICAgIGNvbnN0IGhvc3QgPSB0aGlzLl9fZGF0YUhvc3QgfHwgdGhpcztcbiAgICBpZiAodGhpcy5fX2luc3RhbmNlKSB7XG4gICAgICBob3N0Ll9yZW1vdmVCb3VuZERvbSh0aGlzLl9faW5zdGFuY2UpO1xuICAgICAgdGhpcy5fX2luc3RhbmNlID0gbnVsbDtcbiAgICAgIHRoaXMuX19zeW5jSW5mbyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEltcGxlbWVudGF0aW9uIG9mIGFic3RyYWN0IEFQSSBuZWVkZWQgYnkgRG9tSWZCYXNlLlxuICAgKlxuICAgKiBTaG93cyBvciBoaWRlcyB0aGUgdGVtcGxhdGUgaW5zdGFuY2UgdG9wIGxldmVsIGNoaWxkIG5vZGVzLiBGb3JcbiAgICogdGV4dCBub2RlcywgYHRleHRDb250ZW50YCBpcyByZW1vdmVkIHdoaWxlIFwiaGlkZGVuXCIgYW5kIHJlcGxhY2VkIHdoZW5cbiAgICogXCJzaG93bi5cIlxuICAgKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByb3RlY3RlZFxuICAgKiBAc3VwcHJlc3Mge3Zpc2liaWxpdHl9XG4gICAqL1xuICBfc2hvd0hpZGVDaGlsZHJlbigpIHtcbiAgICBjb25zdCBoaWRkZW4gPSB0aGlzLl9faGlkZVRlbXBsYXRlQ2hpbGRyZW5fXyB8fCAhdGhpcy5pZjtcbiAgICBpZiAodGhpcy5fX2luc3RhbmNlICYmIEJvb2xlYW4odGhpcy5fX2luc3RhbmNlLl9faGlkZGVuKSAhPT0gaGlkZGVuKSB7XG4gICAgICB0aGlzLl9faW5zdGFuY2UuX19oaWRkZW4gPSBoaWRkZW47XG4gICAgICBzaG93SGlkZUNoaWxkcmVuKGhpZGRlbiwgdGhpcy5fX2luc3RhbmNlLnRlbXBsYXRlSW5mby5jaGlsZE5vZGVzKTtcbiAgICB9XG4gICAgaWYgKCFoaWRkZW4pIHtcbiAgICAgIHRoaXMuX19zeW5jSG9zdFByb3BlcnRpZXMoKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgXCJsZWdhY3lcIiBpbXBsZW1lbnRhdGlvbiBvZiBgZG9tLWlmYCwgaW1wbGVtZW50ZWQgdXNpbmcgYFRlbXBsYXRpemVyYC5cbiAqXG4gKiBJbiB0aGlzIHZlcnNpb24sIGB0aGlzLl9faW5zdGFuY2VgIGlzIHRoZSBgVGVtcGxhdGVJbnN0YW5jZWAgcmV0dXJuZWRcbiAqIGZyb20gdGhlIHRlbXBsYXRpemVkIGNvbnN0cnVjdG9yLlxuICovXG5jbGFzcyBEb21JZkxlZ2FjeSBleHRlbmRzIERvbUlmQmFzZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9fY3RvciA9IG51bGw7XG4gICAgdGhpcy5fX2luc3RhbmNlID0gbnVsbDtcbiAgICB0aGlzLl9faW52YWxpZFByb3BzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBsZW1lbnRhdGlvbiBvZiBhYnN0cmFjdCBBUEkgbmVlZGVkIGJ5IERvbUlmQmFzZS5cbiAgICpcbiAgICogQG92ZXJyaWRlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgd2hlbiBhbiBpbnN0YW5jZSBoYXMgYmVlbiBjcmVhdGVkLlxuICAgKi9cbiAgX19oYXNJbnN0YW5jZSgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLl9faW5zdGFuY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEltcGxlbWVudGF0aW9uIG9mIGFic3RyYWN0IEFQSSBuZWVkZWQgYnkgRG9tSWZCYXNlLlxuICAgKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHJldHVybiB7QXJyYXk8Tm9kZT59IEFycmF5IG9mIGNoaWxkIG5vZGVzIHN0YW1wZWQgZnJvbSB0aGUgdGVtcGxhdGVcbiAgICogaW5zdGFuY2UuXG4gICAqL1xuICBfX2dldEluc3RhbmNlTm9kZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19pbnN0YW5jZS5jaGlsZHJlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBsZW1lbnRhdGlvbiBvZiBhYnN0cmFjdCBBUEkgbmVlZGVkIGJ5IERvbUlmQmFzZS5cbiAgICpcbiAgICogU3RhbXBzIHRoZSB0ZW1wbGF0ZSBieSBjcmVhdGluZyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgdGVtcGxhdGl6ZWRcbiAgICogY29uc3RydWN0b3IgKHdoaWNoIGlzIGNyZWF0ZWQgbGF6aWx5IGlmIGl0IGRvZXMgbm90IHlldCBleGlzdCksIGFuZCB0aGVuXG4gICAqIGluc2VydHMgaXRzIHJlc3VsdGluZyBgcm9vdGAgZG9jIGZyYWdtZW50IGludG8gdGhlIGdpdmVuIGBwYXJlbnROb2RlYC5cbiAgICpcbiAgICogQG92ZXJyaWRlXG4gICAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50Tm9kZSBUaGUgcGFyZW50IG5vZGUgdG8gaW5zZXJ0IHRoZSBpbnN0YW5jZSBpbnRvXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBfX2NyZWF0ZUFuZEluc2VydEluc3RhbmNlKHBhcmVudE5vZGUpIHtcbiAgICAvLyBFbnN1cmUgd2UgaGF2ZSBhbiBpbnN0YW5jZSBjb25zdHJ1Y3RvclxuICAgIGlmICghdGhpcy5fX2N0b3IpIHtcbiAgICAgIHRoaXMuX19jdG9yID0gdGVtcGxhdGl6ZShcbiAgICAgICAgICAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyAodGhpcy5fX3RlbXBsYXRlKSwgdGhpcywge1xuICAgICAgICAgICAgLy8gZG9tLWlmIHRlbXBsYXRpemVyIGluc3RhbmNlcyByZXF1aXJlIGBtdXRhYmxlOiB0cnVlYCwgYXNcbiAgICAgICAgICAgIC8vIGBfX3N5bmNIb3N0UHJvcGVydGllc2AgcmVsaWVzIG9uIHRoYXQgYmVoYXZpb3IgdG8gc3luYyBvYmplY3RzXG4gICAgICAgICAgICBtdXRhYmxlRGF0YTogdHJ1ZSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgdG8gZm9yd2FyZFxuICAgICAgICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvZiBwcm9wZXJ0eVxuICAgICAgICAgICAgICogQHRoaXMge0RvbUlmTGVnYWN5fVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmb3J3YXJkSG9zdFByb3A6IGZ1bmN0aW9uKHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9faW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pZikge1xuICAgICAgICAgICAgICAgICAgdGhpcy5fX2luc3RhbmNlLmZvcndhcmRIb3N0UHJvcChwcm9wLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYW4gaW5zdGFuY2UgYnV0IGFyZSBzcXVlbGNoaW5nIGhvc3QgcHJvcGVydHlcbiAgICAgICAgICAgICAgICAgIC8vIGZvcndhcmRpbmcgZHVlIHRvIGlmIGJlaW5nIGZhbHNlLCBub3RlIHRoZSBpbnZhbGlkYXRlZFxuICAgICAgICAgICAgICAgICAgLy8gcHJvcGVydGllcyBzbyBgX19zeW5jSG9zdFByb3BlcnRpZXNgIGNhbiBzeW5jIHRoZW0gdGhlIG5leHRcbiAgICAgICAgICAgICAgICAgIC8vIHRpbWUgYGlmYCBiZWNvbWVzIHRydWVcbiAgICAgICAgICAgICAgICAgIHRoaXMuX19pbnZhbGlkUHJvcHMgPVxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19pbnZhbGlkUHJvcHMgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX19pbnZhbGlkUHJvcHNbcm9vdChwcm9wKV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgYW5kIGluc2VydCB0aGUgaW5zdGFuY2VcbiAgICB0aGlzLl9faW5zdGFuY2UgPSBuZXcgdGhpcy5fX2N0b3IoKTtcbiAgICB3cmFwKHBhcmVudE5vZGUpLmluc2VydEJlZm9yZSh0aGlzLl9faW5zdGFuY2Uucm9vdCwgdGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogSW1wbGVtZW50YXRpb24gb2YgYWJzdHJhY3QgQVBJIG5lZWRlZCBieSBEb21JZkJhc2UuXG4gICAqXG4gICAqIFJlbW92ZXMgdGhlIGluc3RhbmNlIGFuZCBhbnkgbm9kZXMgaXQgY3JlYXRlZC5cbiAgICpcbiAgICogQG92ZXJyaWRlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBfX3RlYXJkb3duSW5zdGFuY2UoKSB7XG4gICAgaWYgKHRoaXMuX19pbnN0YW5jZSkge1xuICAgICAgbGV0IGMkID0gdGhpcy5fX2luc3RhbmNlLmNoaWxkcmVuO1xuICAgICAgaWYgKGMkICYmIGMkLmxlbmd0aCkge1xuICAgICAgICAvLyB1c2UgZmlyc3QgY2hpbGQgcGFyZW50LCBmb3IgY2FzZSB3aGVuIGRvbS1pZiBtYXkgaGF2ZSBiZWVuIGRldGFjaGVkXG4gICAgICAgIGxldCBwYXJlbnQgPSB3cmFwKGMkWzBdKS5wYXJlbnROb2RlO1xuICAgICAgICAvLyBJbnN0YW5jZSBjaGlsZHJlbiBtYXkgYmUgZGlzY29ubmVjdGVkIGZyb20gcGFyZW50cyB3aGVuIGRvbS1pZlxuICAgICAgICAvLyBkZXRhY2hlcyBpZiBhIHRyZWUgd2FzIGlubmVySFRNTCdlZFxuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgcGFyZW50ID0gd3JhcChwYXJlbnQpO1xuICAgICAgICAgIGZvciAobGV0IGk9MCwgbjsgKGk8YyQubGVuZ3RoKSAmJiAobj1jJFtpXSk7IGkrKykge1xuICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKG4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fX2ludmFsaWRQcm9wcyA9IG51bGw7XG4gICAgICB0aGlzLl9faW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb3J3YXJkcyBhbnkgcHJvcGVydGllcyB0aGF0IGNoYW5nZWQgd2hpbGUgdGhlIGBpZmAgd2FzIGZhbHNlIGludG8gdGhlXG4gICAqIHRlbXBsYXRlIGluc3RhbmNlIGFuZCBmbHVzaGVzIGl0LlxuICAgKlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgX19zeW5jSG9zdFByb3BlcnRpZXMoKSB7XG4gICAgbGV0IHByb3BzID0gdGhpcy5fX2ludmFsaWRQcm9wcztcbiAgICBpZiAocHJvcHMpIHtcbiAgICAgIHRoaXMuX19pbnZhbGlkUHJvcHMgPSBudWxsO1xuICAgICAgZm9yIChsZXQgcHJvcCBpbiBwcm9wcykge1xuICAgICAgICB0aGlzLl9faW5zdGFuY2UuX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wLCB0aGlzLl9fZGF0YUhvc3RbcHJvcF0pO1xuICAgICAgfVxuICAgICAgdGhpcy5fX2luc3RhbmNlLl9mbHVzaFByb3BlcnRpZXMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW1wbGVtZW50YXRpb24gb2YgYWJzdHJhY3QgQVBJIG5lZWRlZCBieSBEb21JZkJhc2UuXG4gICAqXG4gICAqIFNob3dzIG9yIGhpZGVzIHRoZSB0ZW1wbGF0ZSBpbnN0YW5jZSB0b3AgbGV2ZWwgY2hpbGQgZWxlbWVudHMuIEZvclxuICAgKiB0ZXh0IG5vZGVzLCBgdGV4dENvbnRlbnRgIGlzIHJlbW92ZWQgd2hpbGUgXCJoaWRkZW5cIiBhbmQgcmVwbGFjZWQgd2hlblxuICAgKiBcInNob3duLlwiXG4gICAqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBzdXBwcmVzcyB7dmlzaWJpbGl0eX1cbiAgICovXG4gIF9zaG93SGlkZUNoaWxkcmVuKCkge1xuICAgIGNvbnN0IGhpZGRlbiA9IHRoaXMuX19oaWRlVGVtcGxhdGVDaGlsZHJlbl9fIHx8ICF0aGlzLmlmO1xuICAgIGlmICh0aGlzLl9faW5zdGFuY2UgJiYgQm9vbGVhbih0aGlzLl9faW5zdGFuY2UuX19oaWRkZW4pICE9PSBoaWRkZW4pIHtcbiAgICAgIHRoaXMuX19pbnN0YW5jZS5fX2hpZGRlbiA9IGhpZGRlbjtcbiAgICAgIHRoaXMuX19pbnN0YW5jZS5fc2hvd0hpZGVDaGlsZHJlbihoaWRkZW4pO1xuICAgIH1cbiAgICBpZiAoIWhpZGRlbikge1xuICAgICAgdGhpcy5fX3N5bmNIb3N0UHJvcGVydGllcygpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFRoZSBgPGRvbS1pZj5gIGVsZW1lbnQgd2lsbCBzdGFtcCBhIGxpZ2h0LWRvbSBgPHRlbXBsYXRlPmAgY2hpbGQgd2hlblxuICogdGhlIGBpZmAgcHJvcGVydHkgYmVjb21lcyB0cnV0aHksIGFuZCB0aGUgdGVtcGxhdGUgY2FuIHVzZSBQb2x5bWVyXG4gKiBkYXRhLWJpbmRpbmcgYW5kIGRlY2xhcmF0aXZlIGV2ZW50IGZlYXR1cmVzIHdoZW4gdXNlZCBpbiB0aGUgY29udGV4dCBvZlxuICogYSBQb2x5bWVyIGVsZW1lbnQncyB0ZW1wbGF0ZS5cbiAqXG4gKiBXaGVuIGBpZmAgYmVjb21lcyBmYWxzeSwgdGhlIHN0YW1wZWQgY29udGVudCBpcyBoaWRkZW4gYnV0IG5vdFxuICogcmVtb3ZlZCBmcm9tIGRvbS4gV2hlbiBgaWZgIHN1YnNlcXVlbnRseSBiZWNvbWVzIHRydXRoeSBhZ2FpbiwgdGhlIGNvbnRlbnRcbiAqIGlzIHNpbXBseSByZS1zaG93bi4gVGhpcyBhcHByb2FjaCBpcyB1c2VkIGR1ZSB0byBpdHMgZmF2b3JhYmxlIHBlcmZvcm1hbmNlXG4gKiBjaGFyYWN0ZXJpc3RpY3M6IHRoZSBleHBlbnNlIG9mIGNyZWF0aW5nIHRlbXBsYXRlIGNvbnRlbnQgaXMgcGFpZCBvbmx5XG4gKiBvbmNlIGFuZCBsYXppbHkuXG4gKlxuICogU2V0IHRoZSBgcmVzdGFtcGAgcHJvcGVydHkgdG8gdHJ1ZSB0byBmb3JjZSB0aGUgc3RhbXBlZCBjb250ZW50IHRvIGJlXG4gKiBjcmVhdGVkIC8gZGVzdHJveWVkIHdoZW4gdGhlIGBpZmAgY29uZGl0aW9uIGNoYW5nZXMuXG4gKlxuICogQGN1c3RvbUVsZW1lbnRcbiAqIEBwb2x5bWVyXG4gKiBAZXh0ZW5kcyBEb21JZkJhc2VcbiAqIEBjb25zdHJ1Y3RvclxuICogQHN1bW1hcnkgQ3VzdG9tIGVsZW1lbnQgdGhhdCBjb25kaXRpb25hbGx5IHN0YW1wcyBhbmQgaGlkZXMgb3IgcmVtb3Zlc1xuICogICB0ZW1wbGF0ZSBjb250ZW50IGJhc2VkIG9uIGEgYm9vbGVhbiBmbGFnLlxuICovXG5leHBvcnQgY29uc3QgRG9tSWYgPSBmYXN0RG9tSWYgPyBEb21JZkZhc3QgOiBEb21JZkxlZ2FjeTtcblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKERvbUlmLmlzLCBEb21JZik7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0IHsgUG9seW1lckVsZW1lbnQgfSBmcm9tICcuLi8uLi9wb2x5bWVyLWVsZW1lbnQuanMnO1xuXG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuaW1wb3J0IHsgY2FsY3VsYXRlU3BsaWNlcyB9IGZyb20gJy4uL3V0aWxzL2FycmF5LXNwbGljZS5qcyc7XG5pbXBvcnQgeyBFbGVtZW50TWl4aW4gfSBmcm9tICcuLi9taXhpbnMvZWxlbWVudC1taXhpbi5qcyc7XG5cbi8qKlxuICogRWxlbWVudCBtaXhpbiBmb3IgcmVjb3JkaW5nIGR5bmFtaWMgYXNzb2NpYXRpb25zIGJldHdlZW4gaXRlbSBwYXRocyBpbiBhXG4gKiBtYXN0ZXIgYGl0ZW1zYCBhcnJheSBhbmQgYSBgc2VsZWN0ZWRgIGFycmF5IHN1Y2ggdGhhdCBwYXRoIGNoYW5nZXMgdG8gdGhlXG4gKiBtYXN0ZXIgYXJyYXkgKGF0IHRoZSBob3N0KSBlbGVtZW50IG9yIGVsc2V3aGVyZSB2aWEgZGF0YS1iaW5kaW5nKSBhcmVcbiAqIGNvcnJlY3RseSBwcm9wYWdhdGVkIHRvIGl0ZW1zIGluIHRoZSBzZWxlY3RlZCBhcnJheSBhbmQgdmljZS12ZXJzYS5cbiAqXG4gKiBUaGUgYGl0ZW1zYCBwcm9wZXJ0eSBhY2NlcHRzIGFuIGFycmF5IG9mIHVzZXIgZGF0YSwgYW5kIHZpYSB0aGVcbiAqIGBzZWxlY3QoaXRlbSlgIGFuZCBgZGVzZWxlY3QoaXRlbSlgIEFQSSwgdXBkYXRlcyB0aGUgYHNlbGVjdGVkYCBwcm9wZXJ0eVxuICogd2hpY2ggbWF5IGJlIGJvdW5kIHRvIG90aGVyIHBhcnRzIG9mIHRoZSBhcHBsaWNhdGlvbiwgYW5kIGFueSBjaGFuZ2VzIHRvXG4gKiBzdWItZmllbGRzIG9mIGBzZWxlY3RlZGAgaXRlbShzKSB3aWxsIGJlIGtlcHQgaW4gc3luYyB3aXRoIGl0ZW1zIGluIHRoZVxuICogYGl0ZW1zYCBhcnJheS4gIFdoZW4gYG11bHRpYCBpcyBmYWxzZSwgYHNlbGVjdGVkYCBpcyBhIHByb3BlcnR5XG4gKiByZXByZXNlbnRpbmcgdGhlIGxhc3Qgc2VsZWN0ZWQgaXRlbS4gIFdoZW4gYG11bHRpYCBpcyB0cnVlLCBgc2VsZWN0ZWRgXG4gKiBpcyBhbiBhcnJheSBvZiBtdWx0aXBseSBzZWxlY3RlZCBpdGVtcy5cbiAqXG4gKiBAcG9seW1lclxuICogQG1peGluRnVuY3Rpb25cbiAqIEBhcHBsaWVzTWl4aW4gRWxlbWVudE1peGluXG4gKiBAc3VtbWFyeSBFbGVtZW50IG1peGluIGZvciByZWNvcmRpbmcgZHluYW1pYyBhc3NvY2lhdGlvbnMgYmV0d2VlbiBpdGVtIHBhdGhzIGluIGFcbiAqIG1hc3RlciBgaXRlbXNgIGFycmF5IGFuZCBhIGBzZWxlY3RlZGAgYXJyYXlcbiAqL1xubGV0IEFycmF5U2VsZWN0b3JNaXhpbiA9IGRlZHVwaW5nTWl4aW4oc3VwZXJDbGFzcyA9PiB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9FbGVtZW50TWl4aW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBsZXQgZWxlbWVudEJhc2UgPSBFbGVtZW50TWl4aW4oc3VwZXJDbGFzcyk7XG5cbiAgLyoqXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtaXhpbkNsYXNzXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0FycmF5U2VsZWN0b3JNaXhpbn1cbiAgICogQHVucmVzdHJpY3RlZFxuICAgKi9cbiAgY2xhc3MgQXJyYXlTZWxlY3Rvck1peGluIGV4dGVuZHMgZWxlbWVudEJhc2Uge1xuXG4gICAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgICAgcmV0dXJuIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQW4gYXJyYXkgY29udGFpbmluZyBpdGVtcyBmcm9tIHdoaWNoIHNlbGVjdGlvbiB3aWxsIGJlIG1hZGUuXG4gICAgICAgICAqL1xuICAgICAgICBpdGVtczoge1xuICAgICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIGB0cnVlYCwgbXVsdGlwbGUgaXRlbXMgbWF5IGJlIHNlbGVjdGVkIGF0IG9uY2UgKGluIHRoaXMgY2FzZSxcbiAgICAgICAgICogYHNlbGVjdGVkYCBpcyBhbiBhcnJheSBvZiBjdXJyZW50bHkgc2VsZWN0ZWQgaXRlbXMpLiAgV2hlbiBgZmFsc2VgLFxuICAgICAgICAgKiBvbmx5IG9uZSBpdGVtIG1heSBiZSBzZWxlY3RlZCBhdCBhIHRpbWUuXG4gICAgICAgICAqL1xuICAgICAgICBtdWx0aToge1xuICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIGBtdWx0aWAgaXMgdHJ1ZSwgdGhpcyBpcyBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGFueSBzZWxlY3RlZC5cbiAgICAgICAgICogV2hlbiBgbXVsdGlgIGlzIGZhbHNlLCB0aGlzIGlzIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgaXRlbSwgb3IgYG51bGxgXG4gICAgICAgICAqIGlmIG5vIGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAgICAgICAqIEB0eXBlIHs/T2JqZWN0fD9BcnJheTwhT2JqZWN0Pn1cbiAgICAgICAgICovXG4gICAgICAgIHNlbGVjdGVkOiB7dHlwZTogT2JqZWN0LCBub3RpZnk6IHRydWV9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIGBtdWx0aWAgaXMgZmFsc2UsIHRoaXMgaXMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBpdGVtLCBvciBgbnVsbGBcbiAgICAgICAgICogaWYgbm8gaXRlbSBpcyBzZWxlY3RlZC5cbiAgICAgICAgICogQHR5cGUgez9PYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBzZWxlY3RlZEl0ZW06IHt0eXBlOiBPYmplY3QsIG5vdGlmeTogdHJ1ZX0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gYHRydWVgLCBjYWxsaW5nIGBzZWxlY3RgIG9uIGFuIGl0ZW0gdGhhdCBpcyBhbHJlYWR5IHNlbGVjdGVkXG4gICAgICAgICAqIHdpbGwgZGVzZWxlY3QgdGhlIGl0ZW0uXG4gICAgICAgICAqL1xuICAgICAgICB0b2dnbGU6IHt0eXBlOiBCb29sZWFuLCB2YWx1ZTogZmFsc2V9XG5cbiAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBvYnNlcnZlcnMoKSB7XG4gICAgICByZXR1cm4gWydfX3VwZGF0ZVNlbGVjdGlvbihtdWx0aSwgaXRlbXMuKiknXTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLl9fbGFzdEl0ZW1zID0gbnVsbDtcbiAgICAgIHRoaXMuX19sYXN0TXVsdGkgPSBudWxsO1xuICAgICAgdGhpcy5fX3NlbGVjdGVkTWFwID0gbnVsbDtcbiAgICB9XG5cbiAgICBfX3VwZGF0ZVNlbGVjdGlvbihtdWx0aSwgaXRlbXNJbmZvKSB7XG4gICAgICBsZXQgcGF0aCA9IGl0ZW1zSW5mby5wYXRoO1xuICAgICAgaWYgKHBhdGggPT0gSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnaXRlbXMnLCB0aGlzKSkge1xuICAgICAgICAvLyBDYXNlIDEgLSBpdGVtcyBhcnJheSBjaGFuZ2VkLCBzbyBkaWZmIGFnYWluc3QgcHJldmlvdXMgYXJyYXkgYW5kXG4gICAgICAgIC8vIGRlc2VsZWN0IGFueSByZW1vdmVkIGl0ZW1zIGFuZCBhZGp1c3Qgc2VsZWN0ZWQgaW5kaWNlc1xuICAgICAgICBsZXQgbmV3SXRlbXMgPSBpdGVtc0luZm8uYmFzZSB8fCBbXTtcbiAgICAgICAgbGV0IGxhc3RJdGVtcyA9IHRoaXMuX19sYXN0SXRlbXM7XG4gICAgICAgIGxldCBsYXN0TXVsdGkgPSB0aGlzLl9fbGFzdE11bHRpO1xuICAgICAgICBpZiAobXVsdGkgIT09IGxhc3RNdWx0aSkge1xuICAgICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdEl0ZW1zKSB7XG4gICAgICAgICAgbGV0IHNwbGljZXMgPSBjYWxjdWxhdGVTcGxpY2VzKG5ld0l0ZW1zLCBsYXN0SXRlbXMpO1xuICAgICAgICAgIHRoaXMuX19hcHBseVNwbGljZXMoc3BsaWNlcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fX2xhc3RJdGVtcyA9IG5ld0l0ZW1zO1xuICAgICAgICB0aGlzLl9fbGFzdE11bHRpID0gbXVsdGk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1zSW5mby5wYXRoID09IGAke0pTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ2l0ZW1zJywgdGhpcyl9LnNwbGljZXNgKSB7XG4gICAgICAgIC8vIENhc2UgMiAtIGdvdCBzcGVjaWZpYyBzcGxpY2UgaW5mb3JtYXRpb24gZGVzY3JpYmluZyB0aGUgYXJyYXkgbXV0YXRpb246XG4gICAgICAgIC8vIGRlc2VsZWN0IGFueSByZW1vdmVkIGl0ZW1zIGFuZCBhZGp1c3Qgc2VsZWN0ZWQgaW5kaWNlc1xuICAgICAgICB0aGlzLl9fYXBwbHlTcGxpY2VzKGl0ZW1zSW5mby52YWx1ZS5pbmRleFNwbGljZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ2FzZSAzIC0gYW4gYXJyYXkgZWxlbWVudCB3YXMgY2hhbmdlZCwgc28gZGVzZWxlY3QgdGhlIHByZXZpb3VzXG4gICAgICAgIC8vIGl0ZW0gZm9yIHRoYXQgaW5kZXggaWYgaXQgd2FzIHByZXZpb3VzbHkgc2VsZWN0ZWRcbiAgICAgICAgbGV0IHBhcnQgPSBwYXRoLnNsaWNlKGAke0pTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ2l0ZW1zJywgdGhpcyl9LmAubGVuZ3RoKTtcbiAgICAgICAgbGV0IGlkeCA9IHBhcnNlSW50KHBhcnQsIDEwKTtcbiAgICAgICAgaWYgKChwYXJ0LmluZGV4T2YoJy4nKSA8IDApICYmIHBhcnQgPT0gaWR4KSB7XG4gICAgICAgICAgdGhpcy5fX2Rlc2VsZWN0Q2hhbmdlZElkeChpZHgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgX19hcHBseVNwbGljZXMoc3BsaWNlcykge1xuICAgICAgbGV0IHNlbGVjdGVkID0gdGhpcy5fX3NlbGVjdGVkTWFwO1xuICAgICAgLy8gQWRqdXN0IHNlbGVjdGVkIGluZGljZXMgYW5kIG1hcmsgcmVtb3ZhbHNcbiAgICAgIGZvciAobGV0IGk9MDsgaTxzcGxpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBzID0gc3BsaWNlc1tpXTtcbiAgICAgICAgc2VsZWN0ZWQuZm9yRWFjaCgoaWR4LCBpdGVtKSA9PiB7XG4gICAgICAgICAgaWYgKGlkeCA8IHMuaW5kZXgpIHtcbiAgICAgICAgICAgIC8vIG5vIGNoYW5nZVxuICAgICAgICAgIH0gZWxzZSBpZiAoaWR4ID49IHMuaW5kZXggKyBzLnJlbW92ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBhZGp1c3QgaW5kZXhcbiAgICAgICAgICAgIHNlbGVjdGVkLnNldChpdGVtLCBpZHggKyBzLmFkZGVkQ291bnQgLSBzLnJlbW92ZWQubGVuZ3RoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGluZGV4XG4gICAgICAgICAgICBzZWxlY3RlZC5zZXQoaXRlbSwgLTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAobGV0IGo9MDsgajxzLmFkZGVkQ291bnQ7IGorKykge1xuICAgICAgICAgIGxldCBpZHggPSBzLmluZGV4ICsgajtcbiAgICAgICAgICBpZiAoc2VsZWN0ZWQuaGFzKHRoaXMuaXRlbXNbaWR4XSkpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkLnNldCh0aGlzLml0ZW1zW2lkeF0sIGlkeCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBVcGRhdGUgbGlua2VkIHBhdGhzXG4gICAgICB0aGlzLl9fdXBkYXRlTGlua3MoKTtcbiAgICAgIC8vIFJlbW92ZSBzZWxlY3RlZCBpdGVtcyB0aGF0IHdlcmUgcmVtb3ZlZCBmcm9tIHRoZSBpdGVtcyBhcnJheVxuICAgICAgbGV0IHNpZHggPSAwO1xuICAgICAgc2VsZWN0ZWQuZm9yRWFjaCgoaWR4LCBpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpZHggPCAwKSB7XG4gICAgICAgICAgaWYgKHRoaXMubXVsdGkpIHtcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlKEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ3NlbGVjdGVkJywgdGhpcyksIHNpZHgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZEl0ZW0gPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxlY3RlZC5kZWxldGUoaXRlbSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2lkeCsrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBfX3VwZGF0ZUxpbmtzKCkge1xuICAgICAgdGhpcy5fX2RhdGFMaW5rZWRQYXRocyA9IHt9O1xuICAgICAgaWYgKHRoaXMubXVsdGkpIHtcbiAgICAgICAgbGV0IHNpZHggPSAwO1xuICAgICAgICB0aGlzLl9fc2VsZWN0ZWRNYXAuZm9yRWFjaChpZHggPT4ge1xuICAgICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5saW5rUGF0aHMoXG4gICAgICAgICAgICAgICAgYCR7SlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnaXRlbXMnLCB0aGlzKX0uJHtpZHh9YCxcbiAgICAgICAgICAgICAgICBgJHtKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdzZWxlY3RlZCcsIHRoaXMpfS4ke3NpZHgrK31gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX3NlbGVjdGVkTWFwLmZvckVhY2goaWR4ID0+IHtcbiAgICAgICAgICB0aGlzLmxpbmtQYXRocyhcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnc2VsZWN0ZWQnLCB0aGlzKSxcbiAgICAgICAgICAgICAgYCR7SlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnaXRlbXMnLCB0aGlzKX0uJHtpZHh9YCk7XG4gICAgICAgICAgdGhpcy5saW5rUGF0aHMoXG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ3NlbGVjdGVkSXRlbScsIHRoaXMpLFxuICAgICAgICAgICAgICBgJHtKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdpdGVtcycsIHRoaXMpfS4ke2lkeH1gKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBzZWxlY3Rpb24gc3RhdGUuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBjbGVhclNlbGVjdGlvbigpIHtcbiAgICAgIC8vIFVuYmluZCBwcmV2aW91cyBzZWxlY3Rpb25cbiAgICAgIHRoaXMuX19kYXRhTGlua2VkUGF0aHMgPSB7fTtcbiAgICAgIC8vIFRoZSBzZWxlY3RlZCBtYXAgc3RvcmVzIDMgcGllY2VzIG9mIGluZm9ybWF0aW9uOlxuICAgICAgLy8ga2V5OiBpdGVtcyBhcnJheSBvYmplY3RcbiAgICAgIC8vIHZhbHVlOiBpdGVtcyBhcnJheSBpbmRleFxuICAgICAgLy8gb3JkZXI6IHNlbGVjdGVkIGFycmF5IGluZGV4XG4gICAgICB0aGlzLl9fc2VsZWN0ZWRNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAvLyBJbml0aWFsaXplIHNlbGVjdGlvblxuICAgICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMubXVsdGkgPyBbXSA6IG51bGw7XG4gICAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBpdGVtIGlzIGN1cnJlbnRseSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7Kn0gaXRlbSBJdGVtIGZyb20gYGl0ZW1zYCBhcnJheSB0byB0ZXN0XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgaXRlbSBpcyBzZWxlY3RlZFxuICAgICAqL1xuICAgIGlzU2VsZWN0ZWQoaXRlbSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19zZWxlY3RlZE1hcC5oYXMoaXRlbSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBpdGVtIGlzIGN1cnJlbnRseSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZHggSW5kZXggZnJvbSBgaXRlbXNgIGFycmF5IHRvIHRlc3RcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBpdGVtIGlzIHNlbGVjdGVkXG4gICAgICovXG4gICAgaXNJbmRleFNlbGVjdGVkKGlkeCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNTZWxlY3RlZCh0aGlzLml0ZW1zW2lkeF0pO1xuICAgIH1cblxuICAgIF9fZGVzZWxlY3RDaGFuZ2VkSWR4KGlkeCkge1xuICAgICAgbGV0IHNpZHggPSB0aGlzLl9fc2VsZWN0ZWRJbmRleEZvckl0ZW1JbmRleChpZHgpO1xuICAgICAgaWYgKHNpZHggPj0gMCkge1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHRoaXMuX19zZWxlY3RlZE1hcC5mb3JFYWNoKChpZHgsIGl0ZW0pID0+IHtcbiAgICAgICAgICBpZiAoc2lkeCA9PSBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuZGVzZWxlY3QoaXRlbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfX3NlbGVjdGVkSW5kZXhGb3JJdGVtSW5kZXgoaWR4KSB7XG4gICAgICBsZXQgc2VsZWN0ZWQgPSB0aGlzLl9fZGF0YUxpbmtlZFBhdGhzW2Ake0pTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ2l0ZW1zJywgdGhpcyl9LiR7aWR4fWBdO1xuICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChzZWxlY3RlZC5zbGljZShgJHtKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdzZWxlY3RlZCcsIHRoaXMpfS5gLmxlbmd0aCksIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXNlbGVjdHMgdGhlIGdpdmVuIGl0ZW0gaWYgaXQgaXMgYWxyZWFkeSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7Kn0gaXRlbSBJdGVtIGZyb20gYGl0ZW1zYCBhcnJheSB0byBkZXNlbGVjdFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgZGVzZWxlY3QoaXRlbSkge1xuICAgICAgbGV0IGlkeCA9IHRoaXMuX19zZWxlY3RlZE1hcC5nZXQoaXRlbSk7XG4gICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgdGhpcy5fX3NlbGVjdGVkTWFwLmRlbGV0ZShpdGVtKTtcbiAgICAgICAgbGV0IHNpZHg7XG4gICAgICAgIGlmICh0aGlzLm11bHRpKSB7XG4gICAgICAgICAgc2lkeCA9IHRoaXMuX19zZWxlY3RlZEluZGV4Rm9ySXRlbUluZGV4KGlkeCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fX3VwZGF0ZUxpbmtzKCk7XG4gICAgICAgIGlmICh0aGlzLm11bHRpKSB7XG4gICAgICAgICAgdGhpcy5zcGxpY2UoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnc2VsZWN0ZWQnLCB0aGlzKSwgc2lkeCwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWRJdGVtID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc2VsZWN0cyB0aGUgZ2l2ZW4gaW5kZXggaWYgaXQgaXMgYWxyZWFkeSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZHggSW5kZXggZnJvbSBgaXRlbXNgIGFycmF5IHRvIGRlc2VsZWN0XG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBkZXNlbGVjdEluZGV4KGlkeCkge1xuICAgICAgdGhpcy5kZXNlbGVjdCh0aGlzLml0ZW1zW2lkeF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbGVjdHMgdGhlIGdpdmVuIGl0ZW0uICBXaGVuIGB0b2dnbGVgIGlzIHRydWUsIHRoaXMgd2lsbCBhdXRvbWF0aWNhbGx5XG4gICAgICogZGVzZWxlY3QgdGhlIGl0ZW0gaWYgYWxyZWFkeSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7Kn0gaXRlbSBJdGVtIGZyb20gYGl0ZW1zYCBhcnJheSB0byBzZWxlY3RcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIHNlbGVjdChpdGVtKSB7XG4gICAgICB0aGlzLnNlbGVjdEluZGV4KHRoaXMuaXRlbXMuaW5kZXhPZihpdGVtKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VsZWN0cyB0aGUgZ2l2ZW4gaW5kZXguICBXaGVuIGB0b2dnbGVgIGlzIHRydWUsIHRoaXMgd2lsbCBhdXRvbWF0aWNhbGx5XG4gICAgICogZGVzZWxlY3QgdGhlIGl0ZW0gaWYgYWxyZWFkeSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZHggSW5kZXggZnJvbSBgaXRlbXNgIGFycmF5IHRvIHNlbGVjdFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgc2VsZWN0SW5kZXgoaWR4KSB7XG4gICAgICBsZXQgaXRlbSA9IHRoaXMuaXRlbXNbaWR4XTtcbiAgICAgIGlmICghdGhpcy5pc1NlbGVjdGVkKGl0ZW0pKSB7XG4gICAgICAgIGlmICghdGhpcy5tdWx0aSkge1xuICAgICAgICAgIHRoaXMuX19zZWxlY3RlZE1hcC5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX19zZWxlY3RlZE1hcC5zZXQoaXRlbSwgaWR4KTtcbiAgICAgICAgdGhpcy5fX3VwZGF0ZUxpbmtzKCk7XG4gICAgICAgIGlmICh0aGlzLm11bHRpKSB7XG4gICAgICAgICAgdGhpcy5wdXNoKEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ3NlbGVjdGVkJywgdGhpcyksIGl0ZW0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkSXRlbSA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy50b2dnbGUpIHtcbiAgICAgICAgdGhpcy5kZXNlbGVjdEluZGV4KGlkeCk7XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gQXJyYXlTZWxlY3Rvck1peGluO1xuXG59KTtcblxuLy8gZXhwb3J0IG1peGluXG5leHBvcnQgeyBBcnJheVNlbGVjdG9yTWl4aW4gfTtcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtQb2x5bWVyRWxlbWVudH1cbiAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0FycmF5U2VsZWN0b3JNaXhpbn1cbiAqIEBwcml2YXRlXG4gKi9cbmxldCBiYXNlQXJyYXlTZWxlY3RvciA9IEFycmF5U2VsZWN0b3JNaXhpbihQb2x5bWVyRWxlbWVudCk7XG5cbi8qKlxuICogRWxlbWVudCBpbXBsZW1lbnRpbmcgdGhlIGBBcnJheVNlbGVjdG9yYCBtaXhpbiwgd2hpY2ggcmVjb3Jkc1xuICogZHluYW1pYyBhc3NvY2lhdGlvbnMgYmV0d2VlbiBpdGVtIHBhdGhzIGluIGEgbWFzdGVyIGBpdGVtc2AgYXJyYXkgYW5kIGFcbiAqIGBzZWxlY3RlZGAgYXJyYXkgc3VjaCB0aGF0IHBhdGggY2hhbmdlcyB0byB0aGUgbWFzdGVyIGFycmF5IChhdCB0aGUgaG9zdClcbiAqIGVsZW1lbnQgb3IgZWxzZXdoZXJlIHZpYSBkYXRhLWJpbmRpbmcpIGFyZSBjb3JyZWN0bHkgcHJvcGFnYXRlZCB0byBpdGVtc1xuICogaW4gdGhlIHNlbGVjdGVkIGFycmF5IGFuZCB2aWNlLXZlcnNhLlxuICpcbiAqIFRoZSBgaXRlbXNgIHByb3BlcnR5IGFjY2VwdHMgYW4gYXJyYXkgb2YgdXNlciBkYXRhLCBhbmQgdmlhIHRoZVxuICogYHNlbGVjdChpdGVtKWAgYW5kIGBkZXNlbGVjdChpdGVtKWAgQVBJLCB1cGRhdGVzIHRoZSBgc2VsZWN0ZWRgIHByb3BlcnR5XG4gKiB3aGljaCBtYXkgYmUgYm91bmQgdG8gb3RoZXIgcGFydHMgb2YgdGhlIGFwcGxpY2F0aW9uLCBhbmQgYW55IGNoYW5nZXMgdG9cbiAqIHN1Yi1maWVsZHMgb2YgYHNlbGVjdGVkYCBpdGVtKHMpIHdpbGwgYmUga2VwdCBpbiBzeW5jIHdpdGggaXRlbXMgaW4gdGhlXG4gKiBgaXRlbXNgIGFycmF5LiAgV2hlbiBgbXVsdGlgIGlzIGZhbHNlLCBgc2VsZWN0ZWRgIGlzIGEgcHJvcGVydHlcbiAqIHJlcHJlc2VudGluZyB0aGUgbGFzdCBzZWxlY3RlZCBpdGVtLiAgV2hlbiBgbXVsdGlgIGlzIHRydWUsIGBzZWxlY3RlZGBcbiAqIGlzIGFuIGFycmF5IG9mIG11bHRpcGx5IHNlbGVjdGVkIGl0ZW1zLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIGltcG9ydCB7UG9seW1lckVsZW1lbnR9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXInO1xuICogaW1wb3J0ICdAcG9seW1lci9wb2x5bWVyL2xpYi9lbGVtZW50cy9hcnJheS1zZWxlY3Rvci5qcyc7XG4gKlxuICogY2xhc3MgRW1wbG95ZWVMaXN0IGV4dGVuZHMgUG9seW1lckVsZW1lbnQge1xuICogICBzdGF0aWMgZ2V0IF90ZW1wbGF0ZSgpIHtcbiAqICAgICByZXR1cm4gaHRtbGBcbiAqICAgICAgICAgPGRpdj4gRW1wbG95ZWUgbGlzdDogPC9kaXY+XG4gKiAgICAgICAgIDxkb20tcmVwZWF0IGlkPVwiZW1wbG95ZWVMaXN0XCIgaXRlbXM9XCJ7e2VtcGxveWVlc319XCI+XG4gKiAgICAgICAgICAgPHRlbXBsYXRlPlxuICogICAgICAgICAgICAgPGRpdj5GaXJzdCBuYW1lOiA8c3Bhbj57e2l0ZW0uZmlyc3R9fTwvc3Bhbj48L2Rpdj5cbiAqICAgICAgICAgICAgICAgPGRpdj5MYXN0IG5hbWU6IDxzcGFuPnt7aXRlbS5sYXN0fX08L3NwYW4+PC9kaXY+XG4gKiAgICAgICAgICAgICAgIDxidXR0b24gb24tY2xpY2s9XCJ0b2dnbGVTZWxlY3Rpb25cIj5TZWxlY3Q8L2J1dHRvbj5cbiAqICAgICAgICAgICA8L3RlbXBsYXRlPlxuICogICAgICAgICA8L2RvbS1yZXBlYXQ+XG4gKlxuICogICAgICAgICA8YXJyYXktc2VsZWN0b3IgaWQ9XCJzZWxlY3RvclwiXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcz1cInt7ZW1wbG95ZWVzfX1cIlxuICogICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ9XCJ7e3NlbGVjdGVkfX1cIlxuICogICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGkgdG9nZ2xlPjwvYXJyYXktc2VsZWN0b3I+XG4gKlxuICogICAgICAgICA8ZGl2PiBTZWxlY3RlZCBlbXBsb3llZXM6IDwvZGl2PlxuICogICAgICAgICA8ZG9tLXJlcGVhdCBpdGVtcz1cInt7c2VsZWN0ZWR9fVwiPlxuICogICAgICAgICAgIDx0ZW1wbGF0ZT5cbiAqICAgICAgICAgICAgIDxkaXY+Rmlyc3QgbmFtZTogPHNwYW4+e3tpdGVtLmZpcnN0fX08L3NwYW4+PC9kaXY+XG4gKiAgICAgICAgICAgICA8ZGl2Pkxhc3QgbmFtZTogPHNwYW4+e3tpdGVtLmxhc3R9fTwvc3Bhbj48L2Rpdj5cbiAqICAgICAgICAgICA8L3RlbXBsYXRlPlxuICogICAgICAgICA8L2RvbS1yZXBlYXQ+YDtcbiAqICAgfVxuICogICBzdGF0aWMgZ2V0IGlzKCkgeyByZXR1cm4gJ2VtcGxveWVlLWxpc3QnOyB9XG4gKiAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAqICAgICByZXR1cm4ge1xuICogICAgICAgZW1wbG95ZWVzOiB7XG4gKiAgICAgICAgIHZhbHVlKCkge1xuICogICAgICAgICAgIHJldHVybiBbXG4gKiAgICAgICAgICAgICB7Zmlyc3Q6ICdCb2InLCBsYXN0OiAnU21pdGgnfSxcbiAqICAgICAgICAgICAgIHtmaXJzdDogJ1NhbGx5JywgbGFzdDogJ0pvaG5zb24nfSxcbiAqICAgICAgICAgICAgIC4uLlxuICogICAgICAgICAgIF07XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICB9O1xuICogICB9XG4gKiAgIHRvZ2dsZVNlbGVjdGlvbihlKSB7XG4gKiAgICAgY29uc3QgaXRlbSA9IHRoaXMuJC5lbXBsb3llZUxpc3QuaXRlbUZvckVsZW1lbnQoZS50YXJnZXQpO1xuICogICAgIHRoaXMuJC5zZWxlY3Rvci5zZWxlY3QoaXRlbSk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwb2x5bWVyXG4gKiBAY3VzdG9tRWxlbWVudFxuICogQGV4dGVuZHMge2Jhc2VBcnJheVNlbGVjdG9yfVxuICogQGFwcGxpZXNNaXhpbiBBcnJheVNlbGVjdG9yTWl4aW5cbiAqIEBzdW1tYXJ5IEN1c3RvbSBlbGVtZW50IHRoYXQgbGlua3MgcGF0aHMgYmV0d2VlbiBhbiBpbnB1dCBgaXRlbXNgIGFycmF5IGFuZFxuICogICBhbiBvdXRwdXQgYHNlbGVjdGVkYCBpdGVtIG9yIGFycmF5IGJhc2VkIG9uIGNhbGxzIHRvIGl0cyBzZWxlY3Rpb24gQVBJLlxuICovXG5jbGFzcyBBcnJheVNlbGVjdG9yIGV4dGVuZHMgYmFzZUFycmF5U2VsZWN0b3Ige1xuICAvLyBOb3QgbmVlZGVkIHRvIGZpbmQgdGVtcGxhdGU7IGNhbiBiZSByZW1vdmVkIG9uY2UgdGhlIGFuYWx5emVyXG4gIC8vIGNhbiBmaW5kIHRoZSB0YWcgbmFtZSBmcm9tIGN1c3RvbUVsZW1lbnRzLmRlZmluZSBjYWxsXG4gIHN0YXRpYyBnZXQgaXMoKSB7IHJldHVybiAnYXJyYXktc2VsZWN0b3InOyB9XG4gIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7IHJldHVybiBudWxsOyB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoQXJyYXlTZWxlY3Rvci5pcywgQXJyYXlTZWxlY3Rvcik7XG5leHBvcnQgeyBBcnJheVNlbGVjdG9yIH07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDdXN0b21TdHlsZUludGVyZmFjZSBmcm9tICcuLi9zcmMvY3VzdG9tLXN0eWxlLWludGVyZmFjZS5qcyc7XG5pbXBvcnQge2dldENvbXB1dGVkU3R5bGVWYWx1ZSwgdXBkYXRlTmF0aXZlUHJvcGVydGllc30gZnJvbSAnLi4vc3JjL2NvbW1vbi11dGlscy5qcyc7XG5pbXBvcnQge25hdGl2ZUNzc1ZhcmlhYmxlcywgbmF0aXZlU2hhZG93LCBjc3NCdWlsZCwgZGlzYWJsZVJ1bnRpbWV9IGZyb20gJy4uL3NyYy9zdHlsZS1zZXR0aW5ncy5qcyc7XG5cbmNvbnN0IGN1c3RvbVN0eWxlSW50ZXJmYWNlID0gbmV3IEN1c3RvbVN0eWxlSW50ZXJmYWNlKCk7XG5cbmlmICghd2luZG93LlNoYWR5Q1NTKSB7XG4gIHdpbmRvdy5TaGFkeUNTUyA9IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gZWxlbWVudEV4dGVuZHNcbiAgICAgKi9cbiAgICBwcmVwYXJlVGVtcGxhdGUodGVtcGxhdGUsIGVsZW1lbnROYW1lLCBlbGVtZW50RXh0ZW5kcykge30sIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gICAgICovXG4gICAgcHJlcGFyZVRlbXBsYXRlRG9tKHRlbXBsYXRlLCBlbGVtZW50TmFtZSkge30sIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBlbGVtZW50RXh0ZW5kc1xuICAgICAqL1xuICAgIHByZXBhcmVUZW1wbGF0ZVN0eWxlcyh0ZW1wbGF0ZSwgZWxlbWVudE5hbWUsIGVsZW1lbnRFeHRlbmRzKSB7fSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgc3R5bGVTdWJ0cmVlKGVsZW1lbnQsIHByb3BlcnRpZXMpIHtcbiAgICAgIGN1c3RvbVN0eWxlSW50ZXJmYWNlLnByb2Nlc3NTdHlsZXMoKTtcbiAgICAgIHVwZGF0ZU5hdGl2ZVByb3BlcnRpZXMoZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICAgICAqL1xuICAgIHN0eWxlRWxlbWVudChlbGVtZW50KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIGN1c3RvbVN0eWxlSW50ZXJmYWNlLnByb2Nlc3NTdHlsZXMoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgc3R5bGVEb2N1bWVudChwcm9wZXJ0aWVzKSB7XG4gICAgICBjdXN0b21TdHlsZUludGVyZmFjZS5wcm9jZXNzU3R5bGVzKCk7XG4gICAgICB1cGRhdGVOYXRpdmVQcm9wZXJ0aWVzKGRvY3VtZW50LmJvZHksIHByb3BlcnRpZXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlKGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlKGVsZW1lbnQsIHByb3BlcnR5KTtcbiAgICB9LFxuXG4gICAgZmx1c2hDdXN0b21TdHlsZXMoKSB7fSxcbiAgICBuYXRpdmVDc3M6IG5hdGl2ZUNzc1ZhcmlhYmxlcyxcbiAgICBuYXRpdmVTaGFkb3c6IG5hdGl2ZVNoYWRvdyxcbiAgICBjc3NCdWlsZDogY3NzQnVpbGQsXG4gICAgZGlzYWJsZVJ1bnRpbWU6IGRpc2FibGVSdW50aW1lLFxuICB9XG59XG5cbndpbmRvdy5TaGFkeUNTUy5DdXN0b21TdHlsZUludGVyZmFjZSA9IGN1c3RvbVN0eWxlSW50ZXJmYWNlOyIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJ0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL2VudHJ5cG9pbnRzL2N1c3RvbS1zdHlsZS1pbnRlcmZhY2UuanMnO1xuXG5pbXBvcnQgeyBjc3NGcm9tTW9kdWxlcyB9IGZyb20gJy4uL3V0aWxzL3N0eWxlLWdhdGhlci5qcyc7XG5cbmNvbnN0IGF0dHIgPSAnaW5jbHVkZSc7XG5cbmNvbnN0IEN1c3RvbVN0eWxlSW50ZXJmYWNlID0gd2luZG93LlNoYWR5Q1NTLkN1c3RvbVN0eWxlSW50ZXJmYWNlO1xuXG4vKipcbiAqIEN1c3RvbSBlbGVtZW50IGZvciBkZWZpbmluZyBzdHlsZXMgaW4gdGhlIG1haW4gZG9jdW1lbnQgdGhhdCBjYW4gdGFrZVxuICogYWR2YW50YWdlIG9mIFtzaGFkeSBET01dKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL3NoYWR5Y3NzKSBzaGltc1xuICogZm9yIHN0eWxlIGVuY2Fwc3VsYXRpb24sIGN1c3RvbSBwcm9wZXJ0aWVzLCBhbmQgY3VzdG9tIG1peGlucy5cbiAqXG4gKiAtIERvY3VtZW50IHN0eWxlcyBkZWZpbmVkIGluIGEgYDxjdXN0b20tc3R5bGU+YCBhcmUgc2hpbW1lZCB0byBlbnN1cmUgdGhleVxuICogICBkbyBub3QgbGVhayBpbnRvIGxvY2FsIERPTSB3aGVuIHJ1bm5pbmcgb24gYnJvd3NlcnMgd2l0aG91dCBuYXRpdmVcbiAqICAgU2hhZG93IERPTS5cbiAqIC0gQ3VzdG9tIHByb3BlcnRpZXMgY2FuIGJlIGRlZmluZWQgaW4gYSBgPGN1c3RvbS1zdHlsZT5gLiBVc2UgdGhlIGBodG1sYCBzZWxlY3RvclxuICogICB0byBkZWZpbmUgY3VzdG9tIHByb3BlcnRpZXMgdGhhdCBhcHBseSB0byBhbGwgY3VzdG9tIGVsZW1lbnRzLlxuICogLSBDdXN0b20gbWl4aW5zIGNhbiBiZSBkZWZpbmVkIGluIGEgYDxjdXN0b20tc3R5bGU+YCwgaWYgeW91IGltcG9ydCB0aGUgb3B0aW9uYWxcbiAqICAgW2FwcGx5IHNoaW1dKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL3NoYWR5Y3NzI2Fib3V0LWFwcGx5c2hpbSlcbiAqICAgKGBzaGFkeWNzcy9hcHBseS1zaGltLmh0bWxgKS5cbiAqXG4gKiBUbyB1c2U6XG4gKlxuICogLSBJbXBvcnQgYGN1c3RvbS1zdHlsZS5odG1sYC5cbiAqIC0gUGxhY2UgYSBgPGN1c3RvbS1zdHlsZT5gIGVsZW1lbnQgaW4gdGhlIG1haW4gZG9jdW1lbnQsIHdyYXBwaW5nIGFuIGlubGluZSBgPHN0eWxlPmAgdGFnIHRoYXRcbiAqICAgY29udGFpbnMgdGhlIENTUyBydWxlcyB5b3Ugd2FudCB0byBzaGltLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gaW1wb3J0IGFwcGx5IHNoaW0tLW9ubHkgcmVxdWlyZWQgaWYgdXNpbmcgbWl4aW5zIC0tPlxuICogPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImJvd2VyX2NvbXBvbmVudHMvc2hhZHljc3MvYXBwbHktc2hpbS5odG1sXCI+XG4gKiA8IS0tIGltcG9ydCBjdXN0b20tc3R5bGUgZWxlbWVudCAtLT5cbiAqIDxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL2VsZW1lbnRzL2N1c3RvbS1zdHlsZS5odG1sXCI+XG4gKlxuICogPGN1c3RvbS1zdHlsZT5cbiAqICAgPHN0eWxlPlxuICogICAgIGh0bWwge1xuICogICAgICAgLS1jdXN0b20tY29sb3I6IGJsdWU7XG4gKiAgICAgICAtLWN1c3RvbS1taXhpbjoge1xuICogICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAqICAgICAgICAgY29sb3I6IHJlZDtcbiAqICAgICAgIH07XG4gKiAgICAgfVxuICogICA8L3N0eWxlPlxuICogPC9jdXN0b20tc3R5bGU+XG4gKiBgYGBcbiAqXG4gKiBAY3VzdG9tRWxlbWVudFxuICogQGV4dGVuZHMgSFRNTEVsZW1lbnRcbiAqIEBzdW1tYXJ5IEN1c3RvbSBlbGVtZW50IGZvciBkZWZpbmluZyBzdHlsZXMgaW4gdGhlIG1haW4gZG9jdW1lbnQgdGhhdCBjYW5cbiAqICAgdGFrZSBhZHZhbnRhZ2Ugb2YgUG9seW1lcidzIHN0eWxlIHNjb3BpbmcgYW5kIGN1c3RvbSBwcm9wZXJ0aWVzIHNoaW1zLlxuICovXG5leHBvcnQgY2xhc3MgQ3VzdG9tU3R5bGUgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc3R5bGUgPSBudWxsO1xuICAgIEN1c3RvbVN0eWxlSW50ZXJmYWNlLmFkZEN1c3RvbVN0eWxlKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsaWdodC1ET00gYDxzdHlsZT5gIGNoaWxkIHRoaXMgZWxlbWVudCB3cmFwcy4gIFVwb24gZmlyc3RcbiAgICogY2FsbCBhbnkgc3R5bGUgbW9kdWxlcyByZWZlcmVuY2VkIHZpYSB0aGUgYGluY2x1ZGVgIGF0dHJpYnV0ZSB3aWxsIGJlXG4gICAqIGNvbmNhdGVuYXRlZCB0byB0aGlzIGVsZW1lbnQncyBgPHN0eWxlPmAuXG4gICAqXG4gICAqIEBleHBvcnRcbiAgICogQHJldHVybiB7SFRNTFN0eWxlRWxlbWVudH0gVGhpcyBlbGVtZW50J3MgbGlnaHQtRE9NIGA8c3R5bGU+YFxuICAgKi9cbiAgZ2V0U3R5bGUoKSB7XG4gICAgaWYgKHRoaXMuX3N0eWxlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3R5bGU7XG4gICAgfVxuICAgIGNvbnN0IHN0eWxlID0gLyoqIEB0eXBlIHtIVE1MU3R5bGVFbGVtZW50fSAqLyh0aGlzLnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlJykpO1xuICAgIGlmICghc3R5bGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB0aGlzLl9zdHlsZSA9IHN0eWxlO1xuICAgIGNvbnN0IGluY2x1ZGUgPSBzdHlsZS5nZXRBdHRyaWJ1dGUoYXR0cik7XG4gICAgaWYgKGluY2x1ZGUpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICAgIC8qKiBAc3VwcHJlc3Mge2RlcHJlY2F0ZWR9ICovXG4gICAgICBzdHlsZS50ZXh0Q29udGVudCA9IGNzc0Zyb21Nb2R1bGVzKGluY2x1ZGUpICsgc3R5bGUudGV4dENvbnRlbnQ7XG4gICAgfVxuICAgIC8qXG4gICAgSFRNTCBJbXBvcnRzIHN0eWxpbmcgdGhlIG1haW4gZG9jdW1lbnQgYXJlIGRlcHJlY2F0ZWQgaW4gQ2hyb21lXG4gICAgaHR0cHM6Ly9jcmJ1Zy5jb20vNTIzOTUyXG5cbiAgICBJZiB0aGlzIGVsZW1lbnQgaXMgbm90IGluIHRoZSBtYWluIGRvY3VtZW50LCB0aGVuIGl0IG11c3QgYmUgaW4gYW4gSFRNTCBJbXBvcnQgZG9jdW1lbnQuXG4gICAgSW4gdGhhdCBjYXNlLCBtb3ZlIHRoZSBjdXN0b20gc3R5bGUgdG8gdGhlIG1haW4gZG9jdW1lbnQuXG5cbiAgICBUaGUgb3JkZXJpbmcgb2YgYDxjdXN0b20tc3R5bGU+YCBzaG91bGQgc3RheSB0aGUgc2FtZSBhcyB3aGVuIGxvYWRlZCBieSBIVE1MIEltcG9ydHMsIGJ1dCB0aGVyZSBtYXkgYmUgb2RkXG4gICAgY2FzZXMgb2Ygb3JkZXJpbmcgdy5yLnQgdGhlIG1haW4gZG9jdW1lbnQgc3R5bGVzLlxuICAgICovXG4gICAgaWYgKHRoaXMub3duZXJEb2N1bWVudCAhPT0gd2luZG93LmRvY3VtZW50KSB7XG4gICAgICB3aW5kb3cuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3N0eWxlO1xuICB9XG59XG5cbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2N1c3RvbS1zdHlsZScsIEN1c3RvbVN0eWxlKTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgeyBNdXRhYmxlRGF0YSB9IGZyb20gJy4uL21peGlucy9tdXRhYmxlLWRhdGEuanMnO1xuXG5sZXQgbXV0YWJsZVByb3BlcnR5Q2hhbmdlO1xuLyoqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9ICovXG4oKCkgPT4ge1xuICBtdXRhYmxlUHJvcGVydHlDaGFuZ2UgPSBNdXRhYmxlRGF0YS5fbXV0YWJsZVByb3BlcnR5Q2hhbmdlO1xufSkoKTtcblxuLyoqXG4gKiBMZWdhY3kgZWxlbWVudCBiZWhhdmlvciB0byBza2lwIHN0cmljdCBkaXJ0eS1jaGVja2luZyBmb3Igb2JqZWN0cyBhbmQgYXJyYXlzLFxuICogKGFsd2F5cyBjb25zaWRlciB0aGVtIHRvIGJlIFwiZGlydHlcIikgZm9yIHVzZSBvbiBsZWdhY3kgQVBJIFBvbHltZXIgZWxlbWVudHMuXG4gKlxuICogQnkgZGVmYXVsdCwgYFBvbHltZXIuUHJvcGVydHlFZmZlY3RzYCBwZXJmb3JtcyBzdHJpY3QgZGlydHkgY2hlY2tpbmcgb25cbiAqIG9iamVjdHMsIHdoaWNoIG1lYW5zIHRoYXQgYW55IGRlZXAgbW9kaWZpY2F0aW9ucyB0byBhbiBvYmplY3Qgb3IgYXJyYXkgd2lsbFxuICogbm90IGJlIHByb3BhZ2F0ZWQgdW5sZXNzIFwiaW1tdXRhYmxlXCIgZGF0YSBwYXR0ZXJucyBhcmUgdXNlZCAoaS5lLiBhbGwgb2JqZWN0XG4gKiByZWZlcmVuY2VzIGZyb20gdGhlIHJvb3QgdG8gdGhlIG11dGF0aW9uIHdlcmUgY2hhbmdlZCkuXG4gKlxuICogUG9seW1lciBhbHNvIHByb3ZpZGVzIGEgcHJvcHJpZXRhcnkgZGF0YSBtdXRhdGlvbiBhbmQgcGF0aCBub3RpZmljYXRpb24gQVBJXG4gKiAoZS5nLiBgbm90aWZ5UGF0aGAsIGBzZXRgLCBhbmQgYXJyYXkgbXV0YXRpb24gQVBJJ3MpIHRoYXQgYWxsb3cgZWZmaWNpZW50XG4gKiBtdXRhdGlvbiBhbmQgbm90aWZpY2F0aW9uIG9mIGRlZXAgY2hhbmdlcyBpbiBhbiBvYmplY3QgZ3JhcGggdG8gYWxsIGVsZW1lbnRzXG4gKiBib3VuZCB0byB0aGUgc2FtZSBvYmplY3QgZ3JhcGguXG4gKlxuICogSW4gY2FzZXMgd2hlcmUgbmVpdGhlciBpbW11dGFibGUgcGF0dGVybnMgbm9yIHRoZSBkYXRhIG11dGF0aW9uIEFQSSBjYW4gYmVcbiAqIHVzZWQsIGFwcGx5aW5nIHRoaXMgbWl4aW4gd2lsbCBjYXVzZSBQb2x5bWVyIHRvIHNraXAgZGlydHkgY2hlY2tpbmcgZm9yXG4gKiBvYmplY3RzIGFuZCBhcnJheXMgKGFsd2F5cyBjb25zaWRlciB0aGVtIHRvIGJlIFwiZGlydHlcIikuICBUaGlzIGFsbG93cyBhXG4gKiB1c2VyIHRvIG1ha2UgYSBkZWVwIG1vZGlmaWNhdGlvbiB0byBhIGJvdW5kIG9iamVjdCBncmFwaCwgYW5kIHRoZW4gZWl0aGVyXG4gKiBzaW1wbHkgcmUtc2V0IHRoZSBvYmplY3QgKGUuZy4gYHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zYCkgb3IgY2FsbCBgbm90aWZ5UGF0aGBcbiAqIChlLmcuIGB0aGlzLm5vdGlmeVBhdGgoJ2l0ZW1zJylgKSB0byB1cGRhdGUgdGhlIHRyZWUuICBOb3RlIHRoYXQgYWxsXG4gKiBlbGVtZW50cyB0aGF0IHdpc2ggdG8gYmUgdXBkYXRlZCBiYXNlZCBvbiBkZWVwIG11dGF0aW9ucyBtdXN0IGFwcGx5IHRoaXNcbiAqIG1peGluIG9yIG90aGVyd2lzZSBza2lwIHN0cmljdCBkaXJ0eSBjaGVja2luZyBmb3Igb2JqZWN0cy9hcnJheXMuXG4gKiBTcGVjaWZpY2FsbHksIGFueSBlbGVtZW50cyBpbiB0aGUgYmluZGluZyB0cmVlIGJldHdlZW4gdGhlIHNvdXJjZSBvZiBhXG4gKiBtdXRhdGlvbiBhbmQgdGhlIGNvbnN1bXB0aW9uIG9mIGl0IG11c3QgYXBwbHkgdGhpcyBiZWhhdmlvciBvciBlbmFibGUgdGhlXG4gKiBgUG9seW1lci5PcHRpb25hbE11dGFibGVEYXRhQmVoYXZpb3JgLlxuICpcbiAqIEluIG9yZGVyIHRvIG1ha2UgdGhlIGRpcnR5IGNoZWNrIHN0cmF0ZWd5IGNvbmZpZ3VyYWJsZSwgc2VlXG4gKiBgUG9seW1lci5PcHRpb25hbE11dGFibGVEYXRhQmVoYXZpb3JgLlxuICpcbiAqIE5vdGUsIHRoZSBwZXJmb3JtYW5jZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgcHJvcGFnYXRpbmcgbGFyZ2Ugb2JqZWN0IGdyYXBoc1xuICogd2lsbCBiZSB3b3JzZSBhcyBvcHBvc2VkIHRvIHVzaW5nIHN0cmljdCBkaXJ0eSBjaGVja2luZyB3aXRoIGltbXV0YWJsZVxuICogcGF0dGVybnMgb3IgUG9seW1lcidzIHBhdGggbm90aWZpY2F0aW9uIEFQSS5cbiAqXG4gKiBAcG9seW1lckJlaGF2aW9yXG4gKiBAc3VtbWFyeSBCZWhhdmlvciB0byBza2lwIHN0cmljdCBkaXJ0eS1jaGVja2luZyBmb3Igb2JqZWN0cyBhbmRcbiAqICAgYXJyYXlzXG4gKi9cbmV4cG9ydCBjb25zdCBNdXRhYmxlRGF0YUJlaGF2aW9yID0ge1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZXMgYFBvbHltZXIuUHJvcGVydHlFZmZlY3RzYCB0byBwcm92aWRlIG9wdGlvbiBmb3Igc2tpcHBpbmdcbiAgICogc3RyaWN0IGVxdWFsaXR5IGNoZWNraW5nIGZvciBPYmplY3RzIGFuZCBBcnJheXMuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHB1bGxzIHRoZSB2YWx1ZSB0byBkaXJ0eSBjaGVjayBhZ2FpbnN0IGZyb20gdGhlIGBfX2RhdGFUZW1wYFxuICAgKiBjYWNoZSAocmF0aGVyIHRoYW4gdGhlIG5vcm1hbCBgX19kYXRhYCBjYWNoZSkgZm9yIE9iamVjdHMuICBTaW5jZSB0aGUgdGVtcFxuICAgKiBjYWNoZSBpcyBjbGVhcmVkIGF0IHRoZSBlbmQgb2YgYSB0dXJuLCB0aGlzIGltcGxlbWVudGF0aW9uIGFsbG93c1xuICAgKiBzaWRlLWVmZmVjdHMgb2YgZGVlcCBvYmplY3QgY2hhbmdlcyB0byBiZSBwcm9jZXNzZWQgYnkgcmUtc2V0dGluZyB0aGVcbiAgICogc2FtZSBvYmplY3QgKHVzaW5nIHRoZSB0ZW1wIGNhY2hlIGFzIGFuIGluLXR1cm4gYmFja3N0b3AgdG8gcHJldmVudFxuICAgKiBjeWNsZXMgZHVlIHRvIDItd2F5IG5vdGlmaWNhdGlvbikuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgTmV3IHByb3BlcnR5IHZhbHVlXG4gICAqIEBwYXJhbSB7Kn0gb2xkIFByZXZpb3VzIHByb3BlcnR5IHZhbHVlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSBjb25zaWRlcmVkIGEgY2hhbmdlXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBfc2hvdWxkUHJvcGVydHlDaGFuZ2UocHJvcGVydHksIHZhbHVlLCBvbGQpIHtcbiAgICByZXR1cm4gbXV0YWJsZVByb3BlcnR5Q2hhbmdlKHRoaXMsIHByb3BlcnR5LCB2YWx1ZSwgb2xkLCB0cnVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBMZWdhY3kgZWxlbWVudCBiZWhhdmlvciB0byBhZGQgdGhlIG9wdGlvbmFsIGFiaWxpdHkgdG8gc2tpcCBzdHJpY3RcbiAqIGRpcnR5LWNoZWNraW5nIGZvciBvYmplY3RzIGFuZCBhcnJheXMgKGFsd2F5cyBjb25zaWRlciB0aGVtIHRvIGJlXG4gKiBcImRpcnR5XCIpIGJ5IHNldHRpbmcgYSBgbXV0YWJsZS1kYXRhYCBhdHRyaWJ1dGUgb24gYW4gZWxlbWVudCBpbnN0YW5jZS5cbiAqXG4gKiBCeSBkZWZhdWx0LCBgUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHNgIHBlcmZvcm1zIHN0cmljdCBkaXJ0eSBjaGVja2luZyBvblxuICogb2JqZWN0cywgd2hpY2ggbWVhbnMgdGhhdCBhbnkgZGVlcCBtb2RpZmljYXRpb25zIHRvIGFuIG9iamVjdCBvciBhcnJheSB3aWxsXG4gKiBub3QgYmUgcHJvcGFnYXRlZCB1bmxlc3MgXCJpbW11dGFibGVcIiBkYXRhIHBhdHRlcm5zIGFyZSB1c2VkIChpLmUuIGFsbCBvYmplY3RcbiAqIHJlZmVyZW5jZXMgZnJvbSB0aGUgcm9vdCB0byB0aGUgbXV0YXRpb24gd2VyZSBjaGFuZ2VkKS5cbiAqXG4gKiBQb2x5bWVyIGFsc28gcHJvdmlkZXMgYSBwcm9wcmlldGFyeSBkYXRhIG11dGF0aW9uIGFuZCBwYXRoIG5vdGlmaWNhdGlvbiBBUElcbiAqIChlLmcuIGBub3RpZnlQYXRoYCwgYHNldGAsIGFuZCBhcnJheSBtdXRhdGlvbiBBUEkncykgdGhhdCBhbGxvdyBlZmZpY2llbnRcbiAqIG11dGF0aW9uIGFuZCBub3RpZmljYXRpb24gb2YgZGVlcCBjaGFuZ2VzIGluIGFuIG9iamVjdCBncmFwaCB0byBhbGwgZWxlbWVudHNcbiAqIGJvdW5kIHRvIHRoZSBzYW1lIG9iamVjdCBncmFwaC5cbiAqXG4gKiBJbiBjYXNlcyB3aGVyZSBuZWl0aGVyIGltbXV0YWJsZSBwYXR0ZXJucyBub3IgdGhlIGRhdGEgbXV0YXRpb24gQVBJIGNhbiBiZVxuICogdXNlZCwgYXBwbHlpbmcgdGhpcyBtaXhpbiB3aWxsIGFsbG93IFBvbHltZXIgdG8gc2tpcCBkaXJ0eSBjaGVja2luZyBmb3JcbiAqIG9iamVjdHMgYW5kIGFycmF5cyAoYWx3YXlzIGNvbnNpZGVyIHRoZW0gdG8gYmUgXCJkaXJ0eVwiKS4gIFRoaXMgYWxsb3dzIGFcbiAqIHVzZXIgdG8gbWFrZSBhIGRlZXAgbW9kaWZpY2F0aW9uIHRvIGEgYm91bmQgb2JqZWN0IGdyYXBoLCBhbmQgdGhlbiBlaXRoZXJcbiAqIHNpbXBseSByZS1zZXQgdGhlIG9iamVjdCAoZS5nLiBgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXNgKSBvciBjYWxsIGBub3RpZnlQYXRoYFxuICogKGUuZy4gYHRoaXMubm90aWZ5UGF0aCgnaXRlbXMnKWApIHRvIHVwZGF0ZSB0aGUgdHJlZS4gIE5vdGUgdGhhdCBhbGxcbiAqIGVsZW1lbnRzIHRoYXQgd2lzaCB0byBiZSB1cGRhdGVkIGJhc2VkIG9uIGRlZXAgbXV0YXRpb25zIG11c3QgYXBwbHkgdGhpc1xuICogbWl4aW4gb3Igb3RoZXJ3aXNlIHNraXAgc3RyaWN0IGRpcnR5IGNoZWNraW5nIGZvciBvYmplY3RzL2FycmF5cy5cbiAqIFNwZWNpZmljYWxseSwgYW55IGVsZW1lbnRzIGluIHRoZSBiaW5kaW5nIHRyZWUgYmV0d2VlbiB0aGUgc291cmNlIG9mIGFcbiAqIG11dGF0aW9uIGFuZCB0aGUgY29uc3VtcHRpb24gb2YgaXQgbXVzdCBlbmFibGUgdGhpcyBiZWhhdmlvciBvciBhcHBseSB0aGVcbiAqIGBQb2x5bWVyLk9wdGlvbmFsTXV0YWJsZURhdGFCZWhhdmlvcmAuXG4gKlxuICogV2hpbGUgdGhpcyBiZWhhdmlvciBhZGRzIHRoZSBhYmlsaXR5IHRvIGZvcmdvIE9iamVjdC9BcnJheSBkaXJ0eSBjaGVja2luZyxcbiAqIHRoZSBgbXV0YWJsZURhdGFgIGZsYWcgZGVmYXVsdHMgdG8gZmFsc2UgYW5kIG11c3QgYmUgc2V0IG9uIHRoZSBpbnN0YW5jZS5cbiAqXG4gKiBOb3RlLCB0aGUgcGVyZm9ybWFuY2UgY2hhcmFjdGVyaXN0aWNzIG9mIHByb3BhZ2F0aW5nIGxhcmdlIG9iamVjdCBncmFwaHNcbiAqIHdpbGwgYmUgd29yc2UgYnkgcmVseWluZyBvbiBgbXV0YWJsZURhdGE6IHRydWVgIGFzIG9wcG9zZWQgdG8gdXNpbmdcbiAqIHN0cmljdCBkaXJ0eSBjaGVja2luZyB3aXRoIGltbXV0YWJsZSBwYXR0ZXJucyBvciBQb2x5bWVyJ3MgcGF0aCBub3RpZmljYXRpb25cbiAqIEFQSS5cbiAqXG4gKiBAcG9seW1lckJlaGF2aW9yXG4gKiBAc3VtbWFyeSBCZWhhdmlvciB0byBvcHRpb25hbGx5IHNraXAgc3RyaWN0IGRpcnR5LWNoZWNraW5nIGZvciBvYmplY3RzIGFuZFxuICogICBhcnJheXNcbiAqL1xuZXhwb3J0IGNvbnN0IE9wdGlvbmFsTXV0YWJsZURhdGFCZWhhdmlvciA9IHtcblxuICBwcm9wZXJ0aWVzOiB7XG4gICAgLyoqXG4gICAgICogSW5zdGFuY2UtbGV2ZWwgZmxhZyBmb3IgY29uZmlndXJpbmcgdGhlIGRpcnR5LWNoZWNraW5nIHN0cmF0ZWd5XG4gICAgICogZm9yIHRoaXMgZWxlbWVudC4gIFdoZW4gdHJ1ZSwgT2JqZWN0cyBhbmQgQXJyYXlzIHdpbGwgc2tpcCBkaXJ0eVxuICAgICAqIGNoZWNraW5nLCBvdGhlcndpc2Ugc3RyaWN0IGVxdWFsaXR5IGNoZWNraW5nIHdpbGwgYmUgdXNlZC5cbiAgICAgKi9cbiAgICBtdXRhYmxlRGF0YTogQm9vbGVhblxuICB9LFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZXMgYFBvbHltZXIuUHJvcGVydHlFZmZlY3RzYCB0byBza2lwIHN0cmljdCBlcXVhbGl0eSBjaGVja2luZ1xuICAgKiBmb3IgT2JqZWN0cyBhbmQgQXJyYXlzLlxuICAgKlxuICAgKiBQdWxscyB0aGUgdmFsdWUgdG8gZGlydHkgY2hlY2sgYWdhaW5zdCBmcm9tIHRoZSBgX19kYXRhVGVtcGAgY2FjaGVcbiAgICogKHJhdGhlciB0aGFuIHRoZSBub3JtYWwgYF9fZGF0YWAgY2FjaGUpIGZvciBPYmplY3RzLiAgU2luY2UgdGhlIHRlbXBcbiAgICogY2FjaGUgaXMgY2xlYXJlZCBhdCB0aGUgZW5kIG9mIGEgdHVybiwgdGhpcyBpbXBsZW1lbnRhdGlvbiBhbGxvd3NcbiAgICogc2lkZS1lZmZlY3RzIG9mIGRlZXAgb2JqZWN0IGNoYW5nZXMgdG8gYmUgcHJvY2Vzc2VkIGJ5IHJlLXNldHRpbmcgdGhlXG4gICAqIHNhbWUgb2JqZWN0ICh1c2luZyB0aGUgdGVtcCBjYWNoZSBhcyBhbiBpbi10dXJuIGJhY2tzdG9wIHRvIHByZXZlbnRcbiAgICogY3ljbGVzIGR1ZSB0byAyLXdheSBub3RpZmljYXRpb24pLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIE5ldyBwcm9wZXJ0eSB2YWx1ZVxuICAgKiBAcGFyYW0geyp9IG9sZCBQcmV2aW91cyBwcm9wZXJ0eSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBzaG91bGQgYmUgY29uc2lkZXJlZCBhIGNoYW5nZVxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgX3Nob3VsZFByb3BlcnR5Q2hhbmdlKHByb3BlcnR5LCB2YWx1ZSwgb2xkKSB7XG4gICAgcmV0dXJuIG11dGFibGVQcm9wZXJ0eUNoYW5nZSh0aGlzLCBwcm9wZXJ0eSwgdmFsdWUsIG9sZCwgdGhpcy5tdXRhYmxlRGF0YSk7XG4gIH1cbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgeyBMZWdhY3lFbGVtZW50TWl4aW4gfSBmcm9tICcuL2xpYi9sZWdhY3kvbGVnYWN5LWVsZW1lbnQtbWl4aW4uanMnO1xuZXhwb3J0IHsgUG9seW1lciB9IGZyb20gICcuL2xpYi9sZWdhY3kvcG9seW1lci1mbi5qcyc7XG4vKiB0ZW1wbGF0ZSBlbGVtZW50cyAqL1xuaW1wb3J0ICcuL2xpYi9sZWdhY3kvdGVtcGxhdGl6ZXItYmVoYXZpb3IuanMnO1xuaW1wb3J0ICcuL2xpYi9lbGVtZW50cy9kb20tYmluZC5qcyc7XG5pbXBvcnQgJy4vbGliL2VsZW1lbnRzL2RvbS1yZXBlYXQuanMnO1xuaW1wb3J0ICcuL2xpYi9lbGVtZW50cy9kb20taWYuanMnO1xuaW1wb3J0ICcuL2xpYi9lbGVtZW50cy9hcnJheS1zZWxlY3Rvci5qcyc7XG4vKiBjdXN0b20tc3R5bGUgKi9cbmltcG9ydCAnLi9saWIvZWxlbWVudHMvY3VzdG9tLXN0eWxlLmpzJztcbi8qIGJjIGJlaGF2aW9ycyAqL1xuaW1wb3J0ICcuL2xpYi9sZWdhY3kvbXV0YWJsZS1kYXRhLWJlaGF2aW9yLmpzJztcbi8qIGltcG9ydCBodG1sLXRhZyB0byBleHBvcnQgaHRtbCAqL1xuZXhwb3J0IHsgaHRtbCB9IGZyb20gJy4vbGliL3V0aWxzL2h0bWwtdGFnLmpzJztcblxuLy8gYmNcbmV4cG9ydCBjb25zdCBCYXNlID0gTGVnYWN5RWxlbWVudE1peGluKEhUTUxFbGVtZW50KS5wcm90b3R5cGU7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZVxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHQgQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXNcbnBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnRcbmZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnQHBvbHltZXIvcG9seW1lci9wb2x5bWVyLWxlZ2FjeS5qcyc7XG5pbXBvcnQge2h0bWx9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2h0bWwtdGFnLmpzJztcblxuLyoqXG5UaGUgYDxpcm9uLWZsZXgtbGF5b3V0PmAgY29tcG9uZW50IHByb3ZpZGVzIHNpbXBsZSB3YXlzIHRvIHVzZVxuW0NTUyBmbGV4aWJsZSBib3hcbmxheW91dF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvR3VpZGUvQ1NTL0ZsZXhpYmxlX2JveGVzKSxcbmFsc28ga25vd24gYXMgZmxleGJveC4gTm90ZSB0aGF0IHRoaXMgaXMgYW4gb2xkIGVsZW1lbnQsIHRoYXQgd2FzIHdyaXR0ZW5cbmJlZm9yZSBhbGwgbW9kZXJuIGJyb3dzZXJzIGhhZCBub24tcHJlZml4ZWQgZmxleCBzdHlsZXMuIEFzIHN1Y2gsIG5vd2FkYXlzIHlvdVxuZG9uJ3QgcmVhbGx5IG5lZWQgdG8gdXNlIHRoaXMgZWxlbWVudCBhbnltb3JlLCBhbmQgY2FuIHVzZSBDU1MgZmxleCBzdHlsZXNcbmRpcmVjdGx5IGluIHlvdXIgY29kZS5cblxuVGhpcyBjb21wb25lbnQgcHJvdmlkZXMgdHdvIGRpZmZlcmVudCB3YXlzIHRvIHVzZSBmbGV4Ym94OlxuXG4xLiBbTGF5b3V0XG5jbGFzc2VzXShodHRwczovL2dpdGh1Yi5jb20vUG9seW1lckVsZW1lbnRzL2lyb24tZmxleC1sYXlvdXQvdHJlZS9tYXN0ZXIvaXJvbi1mbGV4LWxheW91dC1jbGFzc2VzLmh0bWwpLlxuVGhlIGxheW91dCBjbGFzcyBzdHlsZXNoZWV0IHByb3ZpZGVzIGEgc2ltcGxlIHNldCBvZiBjbGFzcy1iYXNlZCBmbGV4Ym94IHJ1bGVzLFxudGhhdCBsZXQgeW91IHNwZWNpZnkgbGF5b3V0IHByb3BlcnRpZXMgZGlyZWN0bHkgaW4gbWFya3VwLiBZb3UgbXVzdCBpbmNsdWRlIHRoaXNcbmZpbGUgaW4gZXZlcnkgZWxlbWVudCB0aGF0IG5lZWRzIHRvIHVzZSB0aGVtLlxuXG4gICAgU2FtcGxlIHVzZTpcblxuICAgIGBgYFxuICAgIDxjdXN0b20tZWxlbWVudC1kZW1vPlxuICAgICAgPHRlbXBsYXRlPlxuICAgICAgICA8c2NyaXB0IHNyYz1cIi4uL3dlYmNvbXBvbmVudHNqcy93ZWJjb21wb25lbnRzLWxpdGUuanNcIj48L3NjcmlwdD5cbiAgICAgICAgPG5leHQtY29kZS1ibG9jaz48L25leHQtY29kZS1ibG9jaz5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC9jdXN0b20tZWxlbWVudC1kZW1vPlxuICAgIGBgYFxuXG4gICAgYGBganNcbiAgICBpbXBvcnQge2h0bWx9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2h0bWwtdGFnLmpzJztcbiAgICBpbXBvcnQgJ0Bwb2x5bWVyL2lyb24tZmxleC1sYXlvdXQvaXJvbi1mbGV4LWxheW91dC1jbGFzc2VzLmpzJztcblxuICAgIGNvbnN0IHRlbXBsYXRlID0gaHRtbGBcbiAgICAgIDxzdHlsZSBpcz1cImN1c3RvbS1zdHlsZVwiIGluY2x1ZGU9XCJpcm9uLWZsZXggaXJvbi1mbGV4LWFsaWdubWVudFwiPjwvc3R5bGU+XG4gICAgICA8c3R5bGU+XG4gICAgICAgIC50ZXN0IHsgd2lkdGg6IDEwMHB4OyB9XG4gICAgICA8L3N0eWxlPlxuICAgICAgPGRpdiBjbGFzcz1cImxheW91dCBob3Jpem9udGFsIGNlbnRlci1jZW50ZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRlc3RcIj5ob3Jpem9udGFsIGxheW91dCBjZW50ZXIgYWxpZ25tZW50PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGVtcGxhdGUuY29udGVudCk7XG4gICAgYGBgXG5cbjIuIFtDdXN0b20gQ1NTXG5taXhpbnNdKGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyRWxlbWVudHMvaXJvbi1mbGV4LWxheW91dC9ibG9iL21hc3Rlci9pcm9uLWZsZXgtbGF5b3V0Lmh0bWwpLlxuVGhlIG1peGluIHN0eWxlc2hlZXQgaW5jbHVkZXMgY3VzdG9tIENTUyBtaXhpbnMgdGhhdCBjYW4gYmUgYXBwbGllZCBpbnNpZGUgYSBDU1NcbnJ1bGUgdXNpbmcgdGhlIGBAYXBwbHlgIGZ1bmN0aW9uLlxuXG5QbGVhc2Ugbm90ZSB0aGF0IHRoZSBvbGQgWy9kZWVwLyBsYXlvdXRcbmNsYXNzZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyRWxlbWVudHMvaXJvbi1mbGV4LWxheW91dC90cmVlL21hc3Rlci9jbGFzc2VzKVxuYXJlIGRlcHJlY2F0ZWQsIGFuZCBzaG91bGQgbm90IGJlIHVzZWQuIFRvIGNvbnRpbnVlIHVzaW5nIGxheW91dCBwcm9wZXJ0aWVzXG5kaXJlY3RseSBpbiBtYXJrdXAsIHBsZWFzZSBzd2l0Y2ggdG8gdXNpbmcgdGhlIG5ldyBgZG9tLW1vZHVsZWAtYmFzZWRcbltsYXlvdXRcbmNsYXNzZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyRWxlbWVudHMvaXJvbi1mbGV4LWxheW91dC90cmVlL21hc3Rlci9pcm9uLWZsZXgtbGF5b3V0LWNsYXNzZXMuaHRtbCkuXG5QbGVhc2Ugbm90ZSB0aGF0IHRoZSBuZXcgdmVyc2lvbiBkb2VzIG5vdCB1c2UgYC9kZWVwL2AsIGFuZCB0aGVyZWZvcmUgcmVxdWlyZXNcbnlvdSB0byBpbXBvcnQgdGhlIGBkb20tbW9kdWxlc2AgaW4gZXZlcnkgZWxlbWVudCB0aGF0IG5lZWRzIHRvIHVzZSB0aGVtLlxuXG5AZ3JvdXAgSXJvbiBFbGVtZW50c1xuQHBzZXVkb0VsZW1lbnQgaXJvbi1mbGV4LWxheW91dFxuQGRlbW8gZGVtby9pbmRleC5odG1sXG4qL1xuY29uc3QgdGVtcGxhdGUgPSBodG1sYFxuPGN1c3RvbS1zdHlsZT5cbiAgPHN0eWxlIGlzPVwiY3VzdG9tLXN0eWxlXCI+XG4gICAgW2hpZGRlbl0ge1xuICAgICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xuICAgIH1cbiAgPC9zdHlsZT5cbjwvY3VzdG9tLXN0eWxlPlxuPGN1c3RvbS1zdHlsZT5cbiAgPHN0eWxlIGlzPVwiY3VzdG9tLXN0eWxlXCI+XG4gICAgaHRtbCB7XG5cbiAgICAgIC0tbGF5b3V0OiB7XG4gICAgICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICAgICAgICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1pbmxpbmU6IHtcbiAgICAgICAgZGlzcGxheTogLW1zLWlubGluZS1mbGV4Ym94O1xuICAgICAgICBkaXNwbGF5OiAtd2Via2l0LWlubGluZS1mbGV4O1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWhvcml6b250YWw6IHtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0O1xuXG4gICAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgICAtd2Via2l0LWZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1ob3Jpem9udGFsLXJldmVyc2U6IHtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0O1xuXG4gICAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7XG4gICAgICAgIC13ZWJraXQtZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlO1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC12ZXJ0aWNhbDoge1xuICAgICAgICBAYXBwbHkgLS1sYXlvdXQ7XG5cbiAgICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIC13ZWJraXQtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LXZlcnRpY2FsLXJldmVyc2U6IHtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0O1xuXG4gICAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7XG4gICAgICAgIC13ZWJraXQtZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlO1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC13cmFwOiB7XG4gICAgICAgIC1tcy1mbGV4LXdyYXA6IHdyYXA7XG4gICAgICAgIC13ZWJraXQtZmxleC13cmFwOiB3cmFwO1xuICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC13cmFwLXJldmVyc2U6IHtcbiAgICAgICAgLW1zLWZsZXgtd3JhcDogd3JhcC1yZXZlcnNlO1xuICAgICAgICAtd2Via2l0LWZsZXgtd3JhcDogd3JhcC1yZXZlcnNlO1xuICAgICAgICBmbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZTtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWZsZXgtYXV0bzoge1xuICAgICAgICAtbXMtZmxleDogMSAxIGF1dG87XG4gICAgICAgIC13ZWJraXQtZmxleDogMSAxIGF1dG87XG4gICAgICAgIGZsZXg6IDEgMSBhdXRvO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZmxleC1ub25lOiB7XG4gICAgICAgIC1tcy1mbGV4OiBub25lO1xuICAgICAgICAtd2Via2l0LWZsZXg6IG5vbmU7XG4gICAgICAgIGZsZXg6IG5vbmU7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1mbGV4OiB7XG4gICAgICAgIC1tcy1mbGV4OiAxIDEgMC4wMDAwMDAwMDFweDtcbiAgICAgICAgLXdlYmtpdC1mbGV4OiAxO1xuICAgICAgICBmbGV4OiAxO1xuICAgICAgICAtd2Via2l0LWZsZXgtYmFzaXM6IDAuMDAwMDAwMDAxcHg7XG4gICAgICAgIGZsZXgtYmFzaXM6IDAuMDAwMDAwMDAxcHg7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1mbGV4LTI6IHtcbiAgICAgICAgLW1zLWZsZXg6IDI7XG4gICAgICAgIC13ZWJraXQtZmxleDogMjtcbiAgICAgICAgZmxleDogMjtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWZsZXgtMzoge1xuICAgICAgICAtbXMtZmxleDogMztcbiAgICAgICAgLXdlYmtpdC1mbGV4OiAzO1xuICAgICAgICBmbGV4OiAzO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZmxleC00OiB7XG4gICAgICAgIC1tcy1mbGV4OiA0O1xuICAgICAgICAtd2Via2l0LWZsZXg6IDQ7XG4gICAgICAgIGZsZXg6IDQ7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1mbGV4LTU6IHtcbiAgICAgICAgLW1zLWZsZXg6IDU7XG4gICAgICAgIC13ZWJraXQtZmxleDogNTtcbiAgICAgICAgZmxleDogNTtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWZsZXgtNjoge1xuICAgICAgICAtbXMtZmxleDogNjtcbiAgICAgICAgLXdlYmtpdC1mbGV4OiA2O1xuICAgICAgICBmbGV4OiA2O1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZmxleC03OiB7XG4gICAgICAgIC1tcy1mbGV4OiA3O1xuICAgICAgICAtd2Via2l0LWZsZXg6IDc7XG4gICAgICAgIGZsZXg6IDc7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1mbGV4LTg6IHtcbiAgICAgICAgLW1zLWZsZXg6IDg7XG4gICAgICAgIC13ZWJraXQtZmxleDogODtcbiAgICAgICAgZmxleDogODtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWZsZXgtOToge1xuICAgICAgICAtbXMtZmxleDogOTtcbiAgICAgICAgLXdlYmtpdC1mbGV4OiA5O1xuICAgICAgICBmbGV4OiA5O1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZmxleC0xMDoge1xuICAgICAgICAtbXMtZmxleDogMTA7XG4gICAgICAgIC13ZWJraXQtZmxleDogMTA7XG4gICAgICAgIGZsZXg6IDEwO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZmxleC0xMToge1xuICAgICAgICAtbXMtZmxleDogMTE7XG4gICAgICAgIC13ZWJraXQtZmxleDogMTE7XG4gICAgICAgIGZsZXg6IDExO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZmxleC0xMjoge1xuICAgICAgICAtbXMtZmxleDogMTI7XG4gICAgICAgIC13ZWJraXQtZmxleDogMTI7XG4gICAgICAgIGZsZXg6IDEyO1xuICAgICAgfTtcblxuICAgICAgLyogYWxpZ25tZW50IGluIGNyb3NzIGF4aXMgKi9cblxuICAgICAgLS1sYXlvdXQtc3RhcnQ6IHtcbiAgICAgICAgLW1zLWZsZXgtYWxpZ246IHN0YXJ0O1xuICAgICAgICAtd2Via2l0LWFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWNlbnRlcjoge1xuICAgICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgICAgICAtd2Via2l0LWFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1lbmQ6IHtcbiAgICAgICAgLW1zLWZsZXgtYWxpZ246IGVuZDtcbiAgICAgICAgLXdlYmtpdC1hbGlnbi1pdGVtczogZmxleC1lbmQ7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWJhc2VsaW5lOiB7XG4gICAgICAgIC1tcy1mbGV4LWFsaWduOiBiYXNlbGluZTtcbiAgICAgICAgLXdlYmtpdC1hbGlnbi1pdGVtczogYmFzZWxpbmU7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTtcbiAgICAgIH07XG5cbiAgICAgIC8qIGFsaWdubWVudCBpbiBtYWluIGF4aXMgKi9cblxuICAgICAgLS1sYXlvdXQtc3RhcnQtanVzdGlmaWVkOiB7XG4gICAgICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xuICAgICAgICAtd2Via2l0LWp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtY2VudGVyLWp1c3RpZmllZDoge1xuICAgICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XG4gICAgICAgIC13ZWJraXQtanVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZW5kLWp1c3RpZmllZDoge1xuICAgICAgICAtbXMtZmxleC1wYWNrOiBlbmQ7XG4gICAgICAgIC13ZWJraXQtanVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWFyb3VuZC1qdXN0aWZpZWQ6IHtcbiAgICAgICAgLW1zLWZsZXgtcGFjazogZGlzdHJpYnV0ZTtcbiAgICAgICAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1qdXN0aWZpZWQ6IHtcbiAgICAgICAgLW1zLWZsZXgtcGFjazoganVzdGlmeTtcbiAgICAgICAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWNlbnRlci1jZW50ZXI6IHtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0LWNlbnRlcjtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0LWNlbnRlci1qdXN0aWZpZWQ7XG4gICAgICB9O1xuXG4gICAgICAvKiBzZWxmIGFsaWdubWVudCAqL1xuXG4gICAgICAtLWxheW91dC1zZWxmLXN0YXJ0OiB7XG4gICAgICAgIC1tcy1hbGlnbi1zZWxmOiBmbGV4LXN0YXJ0O1xuICAgICAgICAtd2Via2l0LWFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XG4gICAgICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1zZWxmLWNlbnRlcjoge1xuICAgICAgICAtbXMtYWxpZ24tc2VsZjogY2VudGVyO1xuICAgICAgICAtd2Via2l0LWFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtc2VsZi1lbmQ6IHtcbiAgICAgICAgLW1zLWFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICAgICAgICAtd2Via2l0LWFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICAgICAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LXNlbGYtc3RyZXRjaDoge1xuICAgICAgICAtbXMtYWxpZ24tc2VsZjogc3RyZXRjaDtcbiAgICAgICAgLXdlYmtpdC1hbGlnbi1zZWxmOiBzdHJldGNoO1xuICAgICAgICBhbGlnbi1zZWxmOiBzdHJldGNoO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtc2VsZi1iYXNlbGluZToge1xuICAgICAgICAtbXMtYWxpZ24tc2VsZjogYmFzZWxpbmU7XG4gICAgICAgIC13ZWJraXQtYWxpZ24tc2VsZjogYmFzZWxpbmU7XG4gICAgICAgIGFsaWduLXNlbGY6IGJhc2VsaW5lO1xuICAgICAgfTtcblxuICAgICAgLyogbXVsdGktbGluZSBhbGlnbm1lbnQgaW4gbWFpbiBheGlzICovXG5cbiAgICAgIC0tbGF5b3V0LXN0YXJ0LWFsaWduZWQ6IHtcbiAgICAgICAgLW1zLWZsZXgtbGluZS1wYWNrOiBzdGFydDsgIC8qIElFMTAgKi9cbiAgICAgICAgLW1zLWFsaWduLWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgICAgIC13ZWJraXQtYWxpZ24tY29udGVudDogZmxleC1zdGFydDtcbiAgICAgICAgYWxpZ24tY29udGVudDogZmxleC1zdGFydDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWVuZC1hbGlnbmVkOiB7XG4gICAgICAgIC1tcy1mbGV4LWxpbmUtcGFjazogZW5kOyAgLyogSUUxMCAqL1xuICAgICAgICAtbXMtYWxpZ24tY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgIC13ZWJraXQtYWxpZ24tY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtY2VudGVyLWFsaWduZWQ6IHtcbiAgICAgICAgLW1zLWZsZXgtbGluZS1wYWNrOiBjZW50ZXI7ICAvKiBJRTEwICovXG4gICAgICAgIC1tcy1hbGlnbi1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIC13ZWJraXQtYWxpZ24tY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1iZXR3ZWVuLWFsaWduZWQ6IHtcbiAgICAgICAgLW1zLWZsZXgtbGluZS1wYWNrOiBqdXN0aWZ5OyAgLyogSUUxMCAqL1xuICAgICAgICAtbXMtYWxpZ24tY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgLXdlYmtpdC1hbGlnbi1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICBhbGlnbi1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtYXJvdW5kLWFsaWduZWQ6IHtcbiAgICAgICAgLW1zLWZsZXgtbGluZS1wYWNrOiBkaXN0cmlidXRlOyAgLyogSUUxMCAqL1xuICAgICAgICAtbXMtYWxpZ24tY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgICAgICAtd2Via2l0LWFsaWduLWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgICAgICAgYWxpZ24tY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgICAgfTtcblxuICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgICAgICAgICBPdGhlciBMYXlvdXRcbiAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAgIC0tbGF5b3V0LWJsb2NrOiB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtaW52aXNpYmxlOiB7XG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50O1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtcmVsYXRpdmU6IHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZml0OiB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtc2Nyb2xsOiB7XG4gICAgICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcbiAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1mdWxsYmxlZWQ6IHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBoZWlnaHQ6IDEwMHZoO1xuICAgICAgfTtcblxuICAgICAgLyogZml4ZWQgcG9zaXRpb24gKi9cblxuICAgICAgLS1sYXlvdXQtZml4ZWQtdG9wOiB7XG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWZpeGVkLXJpZ2h0OiB7XG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZml4ZWQtYm90dG9tOiB7XG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWZpeGVkLWxlZnQ6IHtcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgIH07XG5cbiAgICB9XG4gIDwvc3R5bGU+XG48L2N1c3RvbS1zdHlsZT5gO1xuXG50ZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6IG5vbmU7Jyk7XG5kb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHRlbXBsYXRlLmNvbnRlbnQpO1xuXG52YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuc3R5bGUudGV4dENvbnRlbnQgPSAnW2hpZGRlbl0geyBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH0nO1xuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZVxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHQgQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXNcbnBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnRcbmZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnQHBvbHltZXIvcG9seW1lci9wb2x5bWVyLWxlZ2FjeS5qcyc7XG5cbmltcG9ydCB7UG9seW1lcn0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvbGVnYWN5L3BvbHltZXItZm4uanMnO1xuXG5leHBvcnQgY2xhc3MgSXJvbk1ldGEge1xuICAvKipcbiAgICogQHBhcmFtIHt7XG4gICAqICAgdHlwZTogKHN0cmluZ3xudWxsfHVuZGVmaW5lZCksXG4gICAqICAga2V5OiAoc3RyaW5nfG51bGx8dW5kZWZpbmVkKSxcbiAgICogICB2YWx1ZTogKixcbiAgICogfT19IG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBJcm9uTWV0YVsnICddKG9wdGlvbnMpO1xuXG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpcy50eXBlID0gKG9wdGlvbnMgJiYgb3B0aW9ucy50eXBlKSB8fCAnZGVmYXVsdCc7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd8bnVsbHx1bmRlZmluZWR9ICovXG4gICAgdGhpcy5rZXkgPSBvcHRpb25zICYmIG9wdGlvbnMua2V5O1xuICAgIGlmIChvcHRpb25zICYmICd2YWx1ZScgaW4gb3B0aW9ucykge1xuICAgICAgLyoqIEB0eXBlIHsqfSAqL1xuICAgICAgdGhpcy52YWx1ZSA9IG9wdGlvbnMudmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLyoqIEByZXR1cm4geyp9ICovXG4gIGdldCB2YWx1ZSgpIHtcbiAgICB2YXIgdHlwZSA9IHRoaXMudHlwZTtcbiAgICB2YXIga2V5ID0gdGhpcy5rZXk7XG5cbiAgICBpZiAodHlwZSAmJiBrZXkpIHtcbiAgICAgIHJldHVybiBJcm9uTWV0YS50eXBlc1t0eXBlXSAmJiBJcm9uTWV0YS50eXBlc1t0eXBlXVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAcGFyYW0geyp9IHZhbHVlICovXG4gIHNldCB2YWx1ZSh2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gdGhpcy50eXBlO1xuICAgIHZhciBrZXkgPSB0aGlzLmtleTtcblxuICAgIGlmICh0eXBlICYmIGtleSkge1xuICAgICAgdHlwZSA9IElyb25NZXRhLnR5cGVzW3R5cGVdID0gSXJvbk1ldGEudHlwZXNbdHlwZV0gfHwge307XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBkZWxldGUgdHlwZVtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHlwZVtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqIEByZXR1cm4geyFBcnJheTwqPn0gKi9cbiAgZ2V0IGxpc3QoKSB7XG4gICAgdmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cbiAgICBpZiAodHlwZSkge1xuICAgICAgdmFyIGl0ZW1zID0gSXJvbk1ldGEudHlwZXNbdGhpcy50eXBlXTtcbiAgICAgIGlmICghaXRlbXMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoaXRlbXMpLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIG1ldGFEYXRhc1t0aGlzLnR5cGVdW2tleV07XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcmV0dXJuIHsqfVxuICAgKi9cbiAgYnlLZXkoa2V5KSB7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gIH1cbn07XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBjb252aW5jZSBDbG9zdXJlIG5vdCB0byByZW1vdmUgY29uc3RydWN0b3IgY2FsbHNcbi8vIGZvciBpbnN0YW5jZXMgdGhhdCBhcmUgbm90IGhlbGQgYW55d2hlcmUuIEZvciBleGFtcGxlLCB3aGVuXG4vLyBgbmV3IElyb25NZXRhKHsuLi59KWAgaXMgdXNlZCBvbmx5IGZvciB0aGUgc2lkZSBlZmZlY3Qgb2YgYWRkaW5nIGEgdmFsdWUuXG5Jcm9uTWV0YVsnICddID0gZnVuY3Rpb24oKSB7fTtcblxuSXJvbk1ldGEudHlwZXMgPSB7fTtcblxudmFyIG1ldGFEYXRhcyA9IElyb25NZXRhLnR5cGVzO1xuXG4vKipcbmBpcm9uLW1ldGFgIGlzIGEgZ2VuZXJpYyBlbGVtZW50IHlvdSBjYW4gdXNlIGZvciBzaGFyaW5nIGluZm9ybWF0aW9uIGFjcm9zcyB0aGVcbkRPTSB0cmVlLiBJdCB1c2VzIFttb25vc3RhdGUgcGF0dGVybl0oaHR0cDovL2MyLmNvbS9jZ2kvd2lraT9Nb25vc3RhdGVQYXR0ZXJuKVxuc3VjaCB0aGF0IGFueSBpbnN0YW5jZSBvZiBpcm9uLW1ldGEgaGFzIGFjY2VzcyB0byB0aGUgc2hhcmVkIGluZm9ybWF0aW9uLiBZb3VcbmNhbiB1c2UgYGlyb24tbWV0YWAgdG8gc2hhcmUgd2hhdGV2ZXIgeW91IHdhbnQgKG9yIGNyZWF0ZSBhbiBleHRlbnNpb24gW2xpa2VcbngtbWV0YV0gZm9yIGVuaGFuY2VtZW50cykuXG5cblRoZSBgaXJvbi1tZXRhYCBpbnN0YW5jZXMgY29udGFpbmluZyB5b3VyIGFjdHVhbCBkYXRhIGNhbiBiZSBsb2FkZWQgaW4gYW5cbmltcG9ydCwgb3IgY29uc3RydWN0ZWQgaW4gYW55IHdheSB5b3Ugc2VlIGZpdC4gVGhlIG9ubHkgcmVxdWlyZW1lbnQgaXMgdGhhdCB5b3VcbmNyZWF0ZSB0aGVtIGJlZm9yZSB5b3UgdHJ5IHRvIGFjY2VzcyB0aGVtLlxuXG5FeGFtcGxlczpcblxuSWYgSSBjcmVhdGUgYW4gaW5zdGFuY2UgbGlrZSB0aGlzOlxuXG4gICAgPGlyb24tbWV0YSBrZXk9XCJpbmZvXCIgdmFsdWU9XCJmb28vYmFyXCI+PC9pcm9uLW1ldGE+XG5cbk5vdGUgdGhhdCB2YWx1ZT1cImZvby9iYXJcIiBpcyB0aGUgbWV0YWRhdGEgSSd2ZSBkZWZpbmVkLiBJIGNvdWxkIGRlZmluZSBtb3JlXG5hdHRyaWJ1dGVzIG9yIHVzZSBjaGlsZCBub2RlcyB0byBkZWZpbmUgYWRkaXRpb25hbCBtZXRhZGF0YS5cblxuTm93IEkgY2FuIGFjY2VzcyB0aGF0IGVsZW1lbnQgKGFuZCBpdCdzIG1ldGFkYXRhKSBmcm9tIGFueSBpcm9uLW1ldGEgaW5zdGFuY2VcbnZpYSB0aGUgYnlLZXkgbWV0aG9kLCBlLmcuXG5cbiAgICBtZXRhLmJ5S2V5KCdpbmZvJyk7XG5cblB1cmUgaW1wZXJhdGl2ZSBmb3JtIHdvdWxkIGJlIGxpa2U6XG5cbiAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpcm9uLW1ldGEnKS5ieUtleSgnaW5mbycpO1xuXG5PciwgaW4gYSBQb2x5bWVyIGVsZW1lbnQsIHlvdSBjYW4gaW5jbHVkZSBhIG1ldGEgaW4geW91ciB0ZW1wbGF0ZTpcblxuICAgIDxpcm9uLW1ldGEgaWQ9XCJtZXRhXCI+PC9pcm9uLW1ldGE+XG4gICAgLi4uXG4gICAgdGhpcy4kLm1ldGEuYnlLZXkoJ2luZm8nKTtcblxuQGdyb3VwIElyb24gRWxlbWVudHNcbkBkZW1vIGRlbW8vaW5kZXguaHRtbFxuQGVsZW1lbnQgaXJvbi1tZXRhXG4qL1xuUG9seW1lcih7XG5cbiAgaXM6ICdpcm9uLW1ldGEnLFxuXG4gIHByb3BlcnRpZXM6IHtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIG1ldGEtZGF0YS4gIEFsbCBtZXRhLWRhdGEgb2YgdGhlIHNhbWUgdHlwZSBpcyBzdG9yZWRcbiAgICAgKiB0b2dldGhlci5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHZhbHVlOiAnZGVmYXVsdCcsXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBrZXkgdXNlZCB0byBzdG9yZSBgdmFsdWVgIHVuZGVyIHRoZSBgdHlwZWAgbmFtZXNwYWNlLlxuICAgICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgICAqL1xuICAgIGtleToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWV0YS1kYXRhIHRvIHN0b3JlIG9yIHJldHJpZXZlLlxuICAgICAqIEB0eXBlIHsqfVxuICAgICAqL1xuICAgIHZhbHVlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBub3RpZnk6IHRydWUsXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGB2YWx1ZWAgaXMgc2V0IHRvIHRoZSBpcm9uLW1ldGEgaW5zdGFuY2UgaXRzZWxmLlxuICAgICAqL1xuICAgIHNlbGY6IHt0eXBlOiBCb29sZWFuLCBvYnNlcnZlcjogJ19zZWxmQ2hhbmdlZCd9LFxuXG4gICAgX19tZXRhOiB7dHlwZTogQm9vbGVhbiwgY29tcHV0ZWQ6ICdfX2NvbXB1dGVNZXRhKHR5cGUsIGtleSwgdmFsdWUpJ31cbiAgfSxcblxuICBob3N0QXR0cmlidXRlczoge2hpZGRlbjogdHJ1ZX0sXG5cbiAgX19jb21wdXRlTWV0YTogZnVuY3Rpb24odHlwZSwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBtZXRhID0gbmV3IElyb25NZXRhKHt0eXBlOiB0eXBlLCBrZXk6IGtleX0pO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG1ldGEudmFsdWUpIHtcbiAgICAgIG1ldGEudmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMudmFsdWUgIT09IG1ldGEudmFsdWUpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBtZXRhLnZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBtZXRhO1xuICB9LFxuXG4gIGdldCBsaXN0KCkge1xuICAgIHJldHVybiB0aGlzLl9fbWV0YSAmJiB0aGlzLl9fbWV0YS5saXN0O1xuICB9LFxuXG4gIF9zZWxmQ2hhbmdlZDogZnVuY3Rpb24oc2VsZikge1xuICAgIGlmIChzZWxmKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcztcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBtZXRhIGRhdGEgdmFsdWUgYnkga2V5LlxuICAgKlxuICAgKiBAbWV0aG9kIGJ5S2V5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0YS1kYXRhIHRvIGJlIHJldHVybmVkLlxuICAgKiBAcmV0dXJuIHsqfVxuICAgKi9cbiAgYnlLZXk6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBuZXcgSXJvbk1ldGEoe3R5cGU6IHRoaXMudHlwZSwga2V5OiBrZXl9KS52YWx1ZTtcbiAgfVxufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZVxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHQgQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXNcbnBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnRcbmZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnQHBvbHltZXIvaXJvbi1mbGV4LWxheW91dC9pcm9uLWZsZXgtbGF5b3V0LmpzJztcblxuaW1wb3J0IHtJcm9uTWV0YX0gZnJvbSAnQHBvbHltZXIvaXJvbi1tZXRhL2lyb24tbWV0YS5qcyc7XG5pbXBvcnQge1BvbHltZXJ9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL2xlZ2FjeS9wb2x5bWVyLWZuLmpzJztcbmltcG9ydCB7ZG9tfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi9sZWdhY3kvcG9seW1lci5kb20uanMnO1xuaW1wb3J0IHtodG1sfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9odG1sLXRhZy5qcyc7XG5pbXBvcnQge0Jhc2V9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvcG9seW1lci1sZWdhY3kuanMnO1xuXG4vKipcblxuVGhlIGBpcm9uLWljb25gIGVsZW1lbnQgZGlzcGxheXMgYW4gaWNvbi4gQnkgZGVmYXVsdCBhbiBpY29uIHJlbmRlcnMgYXMgYSAyNHB4XG5zcXVhcmUuXG5cbkV4YW1wbGUgdXNpbmcgc3JjOlxuXG4gICAgPGlyb24taWNvbiBzcmM9XCJzdGFyLnBuZ1wiPjwvaXJvbi1pY29uPlxuXG5FeGFtcGxlIHNldHRpbmcgc2l6ZSB0byAzMnB4IHggMzJweDpcblxuICAgIDxpcm9uLWljb24gY2xhc3M9XCJiaWdcIiBzcmM9XCJiaWdfc3Rhci5wbmdcIj48L2lyb24taWNvbj5cblxuICAgIDxzdHlsZSBpcz1cImN1c3RvbS1zdHlsZVwiPlxuICAgICAgLmJpZyB7XG4gICAgICAgIC0taXJvbi1pY29uLWhlaWdodDogMzJweDtcbiAgICAgICAgLS1pcm9uLWljb24td2lkdGg6IDMycHg7XG4gICAgICB9XG4gICAgPC9zdHlsZT5cblxuVGhlIGlyb24gZWxlbWVudHMgaW5jbHVkZSBzZXZlcmFsIHNldHMgb2YgaWNvbnMuIFRvIHVzZSB0aGUgZGVmYXVsdCBzZXQgb2Zcbmljb25zLCBpbXBvcnQgYGlyb24taWNvbnMuanNgIGFuZCB1c2UgdGhlIGBpY29uYCBhdHRyaWJ1dGUgdG8gc3BlY2lmeSBhbiBpY29uOlxuXG4gICAgPHNjcmlwdCB0eXBlPVwibW9kdWxlXCI+XG4gICAgICBpbXBvcnQgXCJAcG9seW1lci9pcm9uLWljb25zL2lyb24taWNvbnMuanNcIjtcbiAgICA8L3NjcmlwdD5cblxuICAgIDxpcm9uLWljb24gaWNvbj1cIm1lbnVcIj48L2lyb24taWNvbj5cblxuVG8gdXNlIGEgZGlmZmVyZW50IGJ1aWx0LWluIHNldCBvZiBpY29ucywgaW1wb3J0IHRoZSBzcGVjaWZpY1xuYGlyb24taWNvbnMvPGljb25zZXQ+LWljb25zLmpzYCwgYW5kIHNwZWNpZnkgdGhlIGljb24gYXMgYDxpY29uc2V0Pjo8aWNvbj5gLlxuRm9yIGV4YW1wbGUsIHRvIHVzZSBhIGNvbW11bmljYXRpb24gaWNvbiwgeW91IHdvdWxkIHVzZTpcblxuICAgIDxzY3JpcHQgdHlwZT1cIm1vZHVsZVwiPlxuICAgICAgaW1wb3J0IFwiQHBvbHltZXIvaXJvbi1pY29ucy9jb21tdW5pY2F0aW9uLWljb25zLmpzXCI7XG4gICAgPC9zY3JpcHQ+XG5cbiAgICA8aXJvbi1pY29uIGljb249XCJjb21tdW5pY2F0aW9uOmVtYWlsXCI+PC9pcm9uLWljb24+XG5cbllvdSBjYW4gYWxzbyBjcmVhdGUgY3VzdG9tIGljb24gc2V0cyBvZiBiaXRtYXAgb3IgU1ZHIGljb25zLlxuXG5FeGFtcGxlIG9mIHVzaW5nIGFuIGljb24gbmFtZWQgYGNoZXJyeWAgZnJvbSBhIGN1c3RvbSBpY29uc2V0IHdpdGggdGhlIElEXG5gZnJ1aXRgOlxuXG4gICAgPGlyb24taWNvbiBpY29uPVwiZnJ1aXQ6Y2hlcnJ5XCI+PC9pcm9uLWljb24+XG5cblNlZSBgPGlyb24taWNvbnNldD5gIGFuZCBgPGlyb24taWNvbnNldC1zdmc+YCBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBob3cgdG9cbmNyZWF0ZSBhIGN1c3RvbSBpY29uc2V0LlxuXG5TZWUgdGhlIGBpcm9uLWljb25zYCBkZW1vIHRvIHNlZSB0aGUgaWNvbnMgYXZhaWxhYmxlIGluIHRoZSB2YXJpb3VzIGljb25zZXRzLlxuXG4jIyMgU3R5bGluZ1xuXG5UaGUgZm9sbG93aW5nIGN1c3RvbSBwcm9wZXJ0aWVzIGFyZSBhdmFpbGFibGUgZm9yIHN0eWxpbmc6XG5cbkN1c3RvbSBwcm9wZXJ0eSB8IERlc2NyaXB0aW9uIHwgRGVmYXVsdFxuLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS1cbmAtLWlyb24taWNvbmAgfCBNaXhpbiBhcHBsaWVkIHRvIHRoZSBpY29uIHwge31cbmAtLWlyb24taWNvbi13aWR0aGAgfCBXaWR0aCBvZiB0aGUgaWNvbiB8IGAyNHB4YFxuYC0taXJvbi1pY29uLWhlaWdodGAgfCBIZWlnaHQgb2YgdGhlIGljb24gfCBgMjRweGBcbmAtLWlyb24taWNvbi1maWxsLWNvbG9yYCB8IEZpbGwgY29sb3Igb2YgdGhlIHN2ZyBpY29uIHwgYGN1cnJlbnRjb2xvcmBcbmAtLWlyb24taWNvbi1zdHJva2UtY29sb3JgIHwgU3Ryb2tlIGNvbG9yIG9mIHRoZSBzdmcgaWNvbiB8IG5vbmVcblxuQGdyb3VwIElyb24gRWxlbWVudHNcbkBlbGVtZW50IGlyb24taWNvblxuQGRlbW8gZGVtby9pbmRleC5odG1sXG5AaGVybyBoZXJvLnN2Z1xuQGhvbWVwYWdlIHBvbHltZXIuZ2l0aHViLmlvXG4qL1xuUG9seW1lcih7XG4gIF90ZW1wbGF0ZTogaHRtbGBcbiAgICA8c3R5bGU+XG4gICAgICA6aG9zdCB7XG4gICAgICAgIEBhcHBseSAtLWxheW91dC1pbmxpbmU7XG4gICAgICAgIEBhcHBseSAtLWxheW91dC1jZW50ZXItY2VudGVyO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcblxuICAgICAgICBmaWxsOiB2YXIoLS1pcm9uLWljb24tZmlsbC1jb2xvciwgY3VycmVudGNvbG9yKTtcbiAgICAgICAgc3Ryb2tlOiB2YXIoLS1pcm9uLWljb24tc3Ryb2tlLWNvbG9yLCBub25lKTtcblxuICAgICAgICB3aWR0aDogdmFyKC0taXJvbi1pY29uLXdpZHRoLCAyNHB4KTtcbiAgICAgICAgaGVpZ2h0OiB2YXIoLS1pcm9uLWljb24taGVpZ2h0LCAyNHB4KTtcbiAgICAgICAgQGFwcGx5IC0taXJvbi1pY29uO1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbaGlkZGVuXSkge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgfVxuICAgIDwvc3R5bGU+XG5gLFxuXG4gIGlzOiAnaXJvbi1pY29uJyxcblxuICBwcm9wZXJ0aWVzOiB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgaWNvbiB0byB1c2UuIFRoZSBuYW1lIHNob3VsZCBiZSBvZiB0aGUgZm9ybTpcbiAgICAgKiBgaWNvbnNldF9uYW1lOmljb25fbmFtZWAuXG4gICAgICovXG4gICAgaWNvbjoge3R5cGU6IFN0cmluZ30sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgdGhlbWUgdG8gdXNlZCwgaWYgb25lIGlzIHNwZWNpZmllZCBieSB0aGVcbiAgICAgKiBpY29uc2V0LlxuICAgICAqL1xuICAgIHRoZW1lOiB7dHlwZTogU3RyaW5nfSxcblxuICAgIC8qKlxuICAgICAqIElmIHVzaW5nIGlyb24taWNvbiB3aXRob3V0IGFuIGljb25zZXQsIHlvdSBjYW4gc2V0IHRoZSBzcmMgdG8gYmVcbiAgICAgKiB0aGUgVVJMIG9mIGFuIGluZGl2aWR1YWwgaWNvbiBpbWFnZSBmaWxlLiBOb3RlIHRoYXQgdGhpcyB3aWxsIHRha2VcbiAgICAgKiBwcmVjZWRlbmNlIG92ZXIgYSBnaXZlbiBpY29uIGF0dHJpYnV0ZS5cbiAgICAgKi9cbiAgICBzcmM6IHt0eXBlOiBTdHJpbmd9LFxuXG4gICAgLyoqXG4gICAgICogQHR5cGUgeyFJcm9uTWV0YX1cbiAgICAgKi9cbiAgICBfbWV0YToge3ZhbHVlOiBCYXNlLmNyZWF0ZSgnaXJvbi1tZXRhJywge3R5cGU6ICdpY29uc2V0J30pfVxuXG4gIH0sXG5cbiAgb2JzZXJ2ZXJzOiBbXG4gICAgJ191cGRhdGVJY29uKF9tZXRhLCBpc0F0dGFjaGVkKScsXG4gICAgJ191cGRhdGVJY29uKHRoZW1lLCBpc0F0dGFjaGVkKScsXG4gICAgJ19zcmNDaGFuZ2VkKHNyYywgaXNBdHRhY2hlZCknLFxuICAgICdfaWNvbkNoYW5nZWQoaWNvbiwgaXNBdHRhY2hlZCknXG4gIF0sXG5cbiAgX0RFRkFVTFRfSUNPTlNFVDogJ2ljb25zJyxcblxuICBfaWNvbkNoYW5nZWQ6IGZ1bmN0aW9uKGljb24pIHtcbiAgICB2YXIgcGFydHMgPSAoaWNvbiB8fCAnJykuc3BsaXQoJzonKTtcbiAgICB0aGlzLl9pY29uTmFtZSA9IHBhcnRzLnBvcCgpO1xuICAgIHRoaXMuX2ljb25zZXROYW1lID0gcGFydHMucG9wKCkgfHwgdGhpcy5fREVGQVVMVF9JQ09OU0VUO1xuICAgIHRoaXMuX3VwZGF0ZUljb24oKTtcbiAgfSxcblxuICBfc3JjQ2hhbmdlZDogZnVuY3Rpb24oc3JjKSB7XG4gICAgdGhpcy5fdXBkYXRlSWNvbigpO1xuICB9LFxuXG4gIF91c2VzSWNvbnNldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaWNvbiB8fCAhdGhpcy5zcmM7XG4gIH0sXG5cbiAgLyoqIEBzdXBwcmVzcyB7dmlzaWJpbGl0eX0gKi9cbiAgX3VwZGF0ZUljb246IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl91c2VzSWNvbnNldCgpKSB7XG4gICAgICBpZiAodGhpcy5faW1nICYmIHRoaXMuX2ltZy5wYXJlbnROb2RlKSB7XG4gICAgICAgIGRvbSh0aGlzLnJvb3QpLnJlbW92ZUNoaWxkKHRoaXMuX2ltZyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5faWNvbk5hbWUgPT09ICcnKSB7XG4gICAgICAgIGlmICh0aGlzLl9pY29uc2V0KSB7XG4gICAgICAgICAgdGhpcy5faWNvbnNldC5yZW1vdmVJY29uKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2ljb25zZXROYW1lICYmIHRoaXMuX21ldGEpIHtcbiAgICAgICAgdGhpcy5faWNvbnNldCA9IC8qKiBAdHlwZSB7P1BvbHltZXIuSWNvbnNldH0gKi8gKFxuICAgICAgICAgICAgdGhpcy5fbWV0YS5ieUtleSh0aGlzLl9pY29uc2V0TmFtZSkpO1xuICAgICAgICBpZiAodGhpcy5faWNvbnNldCkge1xuICAgICAgICAgIHRoaXMuX2ljb25zZXQuYXBwbHlJY29uKHRoaXMsIHRoaXMuX2ljb25OYW1lLCB0aGlzLnRoZW1lKTtcbiAgICAgICAgICB0aGlzLnVubGlzdGVuKHdpbmRvdywgJ2lyb24taWNvbnNldC1hZGRlZCcsICdfdXBkYXRlSWNvbicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubGlzdGVuKHdpbmRvdywgJ2lyb24taWNvbnNldC1hZGRlZCcsICdfdXBkYXRlSWNvbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLl9pY29uc2V0KSB7XG4gICAgICAgIHRoaXMuX2ljb25zZXQucmVtb3ZlSWNvbih0aGlzKTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5faW1nKSB7XG4gICAgICAgIHRoaXMuX2ltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICB0aGlzLl9pbWcuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgIHRoaXMuX2ltZy5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIHRoaXMuX2ltZy5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2ltZy5zcmMgPSB0aGlzLnNyYztcbiAgICAgIGRvbSh0aGlzLnJvb3QpLmFwcGVuZENoaWxkKHRoaXMuX2ltZyk7XG4gICAgfVxuICB9XG59KTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbmh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlXG5mb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhc1xucGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudFxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICdAcG9seW1lci9wb2x5bWVyL3BvbHltZXItbGVnYWN5LmpzJztcblxuaW1wb3J0IHtJcm9uTWV0YX0gZnJvbSAnQHBvbHltZXIvaXJvbi1tZXRhL2lyb24tbWV0YS5qcyc7XG5pbXBvcnQge1BvbHltZXJ9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL2xlZ2FjeS9wb2x5bWVyLWZuLmpzJztcbmltcG9ydCB7ZG9tfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi9sZWdhY3kvcG9seW1lci5kb20uanMnO1xuLyoqXG4gKiBUaGUgYGlyb24taWNvbnNldC1zdmdgIGVsZW1lbnQgYWxsb3dzIHVzZXJzIHRvIGRlZmluZSB0aGVpciBvd24gaWNvbiBzZXRzXG4gKiB0aGF0IGNvbnRhaW4gc3ZnIGljb25zLiBUaGUgc3ZnIGljb24gZWxlbWVudHMgc2hvdWxkIGJlIGNoaWxkcmVuIG9mIHRoZVxuICogYGlyb24taWNvbnNldC1zdmdgIGVsZW1lbnQuIE11bHRpcGxlIGljb25zIHNob3VsZCBiZSBnaXZlbiBkaXN0aW5jdCBpZCdzLlxuICpcbiAqIFVzaW5nIHN2ZyBlbGVtZW50cyB0byBjcmVhdGUgaWNvbnMgaGFzIGEgZmV3IGFkdmFudGFnZXMgb3ZlciB0cmFkaXRpb25hbFxuICogYml0bWFwIGdyYXBoaWNzIGxpa2UganBnIG9yIHBuZy4gSWNvbnMgdGhhdCB1c2Ugc3ZnIGFyZSB2ZWN0b3IgYmFzZWQgc29cbiAqIHRoZXkgYXJlIHJlc29sdXRpb24gaW5kZXBlbmRlbnQgYW5kIHNob3VsZCBsb29rIGdvb2Qgb24gYW55IGRldmljZS4gVGhleVxuICogYXJlIHN0eWxhYmxlIHZpYSBjc3MuIEljb25zIGNhbiBiZSB0aGVtZWQsIGNvbG9yaXplZCwgYW5kIGV2ZW4gYW5pbWF0ZWQuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgPGlyb24taWNvbnNldC1zdmcgbmFtZT1cIm15LXN2Zy1pY29uc1wiIHNpemU9XCIyNFwiPlxuICogICAgICAgPHN2Zz5cbiAqICAgICAgICAgPGRlZnM+XG4gKiAgICAgICAgICAgPGcgaWQ9XCJzaGFwZVwiPlxuICogICAgICAgICAgICAgPHJlY3QgeD1cIjEyXCIgeT1cIjBcIiB3aWR0aD1cIjEyXCIgaGVpZ2h0PVwiMjRcIiAvPlxuICogICAgICAgICAgICAgPGNpcmNsZSBjeD1cIjEyXCIgY3k9XCIxMlwiIHI9XCIxMlwiIC8+XG4gKiAgICAgICAgICAgPC9nPlxuICogICAgICAgICA8L2RlZnM+XG4gKiAgICAgICA8L3N2Zz5cbiAqICAgICA8L2lyb24taWNvbnNldC1zdmc+XG4gKlxuICogVGhpcyB3aWxsIGF1dG9tYXRpY2FsbHkgcmVnaXN0ZXIgdGhlIGljb24gc2V0IFwibXktc3ZnLWljb25zXCIgdG8gdGhlIGljb25zZXRcbiAqIGRhdGFiYXNlLiAgVG8gdXNlIHRoZXNlIGljb25zIGZyb20gd2l0aGluIGFub3RoZXIgZWxlbWVudCwgbWFrZSBhXG4gKiBgaXJvbi1pY29uc2V0YCBlbGVtZW50IGFuZCBjYWxsIHRoZSBgYnlJZGAgbWV0aG9kXG4gKiB0byByZXRyaWV2ZSBhIGdpdmVuIGljb25zZXQuIFRvIGFwcGx5IGEgcGFydGljdWxhciBpY29uIGluc2lkZSBhblxuICogZWxlbWVudCB1c2UgdGhlIGBhcHBseUljb25gIG1ldGhvZC4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIGljb25zZXQuYXBwbHlJY29uKGljb25Ob2RlLCAnY2FyJyk7XG4gKlxuICogQGVsZW1lbnQgaXJvbi1pY29uc2V0LXN2Z1xuICogQGRlbW8gZGVtby9pbmRleC5odG1sXG4gKiBAaW1wbGVtZW50cyB7UG9seW1lci5JY29uc2V0fVxuICovXG5Qb2x5bWVyKHtcbiAgaXM6ICdpcm9uLWljb25zZXQtc3ZnJyxcblxuICBwcm9wZXJ0aWVzOiB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgaWNvbnNldC5cbiAgICAgKi9cbiAgICBuYW1lOiB7dHlwZTogU3RyaW5nLCBvYnNlcnZlcjogJ19uYW1lQ2hhbmdlZCd9LFxuXG4gICAgLyoqXG4gICAgICogVGhlIHNpemUgb2YgYW4gaW5kaXZpZHVhbCBpY29uLiBOb3RlIHRoYXQgaWNvbnMgbXVzdCBiZSBzcXVhcmUuXG4gICAgICovXG4gICAgc2l6ZToge3R5cGU6IE51bWJlciwgdmFsdWU6IDI0fSxcblxuICAgIC8qKlxuICAgICAqIFNldCB0byB0cnVlIHRvIGVuYWJsZSBtaXJyb3Jpbmcgb2YgaWNvbnMgd2hlcmUgc3BlY2lmaWVkIHdoZW4gdGhleSBhcmVcbiAgICAgKiBzdGFtcGVkLiBJY29ucyB0aGF0IHNob3VsZCBiZSBtaXJyb3JlZCBzaG91bGQgYmUgZGVjb3JhdGVkIHdpdGggYVxuICAgICAqIGBtaXJyb3ItaW4tcnRsYCBhdHRyaWJ1dGUuXG4gICAgICpcbiAgICAgKiBOT1RFOiBGb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgZGlyZWN0aW9uIHdpbGwgYmUgcmVzb2x2ZWQgb25jZSBwZXJcbiAgICAgKiBkb2N1bWVudCBwZXIgaWNvbnNldCwgc28gbW92aW5nIGljb25zIGluIGFuZCBvdXQgb2YgUlRMIHN1YnRyZWVzIHdpbGxcbiAgICAgKiBub3QgY2F1c2UgdGhlaXIgbWlycm9yZWQgc3RhdGUgdG8gY2hhbmdlLlxuICAgICAqL1xuICAgIHJ0bE1pcnJvcmluZzoge3R5cGU6IEJvb2xlYW4sIHZhbHVlOiBmYWxzZX0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdG8gdHJ1ZSB0byBtZWFzdXJlIFJUTCBiYXNlZCBvbiB0aGUgZGlyIGF0dHJpYnV0ZSBvbiB0aGUgYm9keSBvclxuICAgICAqIGh0bWwgZWxlbWVudHMgKG1lYXN1cmVkIG9uIGRvY3VtZW50LmJvZHkgb3IgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IGFzXG4gICAgICogYXZhaWxhYmxlKS5cbiAgICAgKi9cbiAgICB1c2VHbG9iYWxSdGxBdHRyaWJ1dGU6IHt0eXBlOiBCb29sZWFuLCB2YWx1ZTogZmFsc2V9XG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbWV0YSA9IG5ldyBJcm9uTWV0YSh7dHlwZTogJ2ljb25zZXQnLCBrZXk6IG51bGwsIHZhbHVlOiBudWxsfSk7XG4gIH0sXG5cbiAgYXR0YWNoZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfSxcblxuICAvKipcbiAgICogQ29uc3RydWN0IGFuIGFycmF5IG9mIGFsbCBpY29uIG5hbWVzIGluIHRoaXMgaWNvbnNldC5cbiAgICpcbiAgICogQHJldHVybiB7IUFycmF5fSBBcnJheSBvZiBpY29uIG5hbWVzLlxuICAgKi9cbiAgZ2V0SWNvbk5hbWVzOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9pY29ucyA9IHRoaXMuX2NyZWF0ZUljb25NYXAoKTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5faWNvbnMpLm1hcChmdW5jdGlvbihuKSB7XG4gICAgICByZXR1cm4gdGhpcy5uYW1lICsgJzonICsgbjtcbiAgICB9LCB0aGlzKTtcbiAgfSxcblxuICAvKipcbiAgICogQXBwbGllcyBhbiBpY29uIHRvIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKlxuICAgKiBBbiBzdmcgaWNvbiBpcyBwcmVwZW5kZWQgdG8gdGhlIGVsZW1lbnQncyBzaGFkb3dSb290IGlmIGl0IGV4aXN0cyxcbiAgICogb3RoZXJ3aXNlIHRvIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICpcbiAgICogSWYgUlRMIG1pcnJvcmluZyBpcyBlbmFibGVkLCBhbmQgdGhlIGljb24gaXMgbWFya2VkIHRvIGJlIG1pcnJvcmVkIGluXG4gICAqIFJUTCwgdGhlIGVsZW1lbnQgd2lsbCBiZSB0ZXN0ZWQgKG9uY2UgYW5kIG9ubHkgb25jZSBldmVyIGZvciBlYWNoXG4gICAqIGljb25zZXQpIHRvIGRldGVybWluZSB0aGUgZGlyZWN0aW9uIG9mIHRoZSBzdWJ0cmVlIHRoZSBlbGVtZW50IGlzIGluLlxuICAgKiBUaGlzIGRpcmVjdGlvbiB3aWxsIGFwcGx5IHRvIGFsbCBmdXR1cmUgaWNvbiBhcHBsaWNhdGlvbnMsIGFsdGhvdWdoIG9ubHlcbiAgICogaWNvbnMgbWFya2VkIHRvIGJlIG1pcnJvcmVkIHdpbGwgYmUgYWZmZWN0ZWQuXG4gICAqXG4gICAqIEBtZXRob2QgYXBwbHlJY29uXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIHdoaWNoIHRoZSBpY29uIGlzIGFwcGxpZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpY29uTmFtZSBOYW1lIG9mIHRoZSBpY29uIHRvIGFwcGx5LlxuICAgKiBAcmV0dXJuIHs/RWxlbWVudH0gVGhlIHN2ZyBlbGVtZW50IHdoaWNoIHJlbmRlcnMgdGhlIGljb24uXG4gICAqL1xuICBhcHBseUljb246IGZ1bmN0aW9uKGVsZW1lbnQsIGljb25OYW1lKSB7XG4gICAgLy8gUmVtb3ZlIG9sZCBzdmcgZWxlbWVudFxuICAgIHRoaXMucmVtb3ZlSWNvbihlbGVtZW50KTtcbiAgICAvLyBpbnN0YWxsIG5ldyBzdmcgZWxlbWVudFxuICAgIHZhciBzdmcgPSB0aGlzLl9jbG9uZUljb24oXG4gICAgICAgIGljb25OYW1lLCB0aGlzLnJ0bE1pcnJvcmluZyAmJiB0aGlzLl90YXJnZXRJc1JUTChlbGVtZW50KSk7XG4gICAgaWYgKHN2Zykge1xuICAgICAgLy8gaW5zZXJ0IHN2ZyBlbGVtZW50IGludG8gc2hhZG93IHJvb3QsIGlmIGl0IGV4aXN0c1xuICAgICAgdmFyIHBkZSA9IGRvbShlbGVtZW50LnJvb3QgfHwgZWxlbWVudCk7XG4gICAgICBwZGUuaW5zZXJ0QmVmb3JlKHN2ZywgcGRlLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgcmV0dXJuIGVsZW1lbnQuX3N2Z0ljb24gPSBzdmc7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gaWNvbiBmcm9tIHRoZSBnaXZlbiBlbGVtZW50IGJ5IHVuZG9pbmcgdGhlIGNoYW5nZXMgZWZmZWN0ZWRcbiAgICogYnkgYGFwcGx5SWNvbmAuXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCBmcm9tIHdoaWNoIHRoZSBpY29uIGlzIHJlbW92ZWQuXG4gICAqL1xuICByZW1vdmVJY29uOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgLy8gUmVtb3ZlIG9sZCBzdmcgZWxlbWVudFxuICAgIGlmIChlbGVtZW50Ll9zdmdJY29uKSB7XG4gICAgICBkb20oZWxlbWVudC5yb290IHx8IGVsZW1lbnQpLnJlbW92ZUNoaWxkKGVsZW1lbnQuX3N2Z0ljb24pO1xuICAgICAgZWxlbWVudC5fc3ZnSWNvbiA9IG51bGw7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBNZWFzdXJlcyBhbmQgbWVtb2l6ZXMgdGhlIGRpcmVjdGlvbiBvZiB0aGUgZWxlbWVudC4gTm90ZSB0aGF0IHRoaXNcbiAgICogbWVhc3VyZW1lbnQgaXMgb25seSBkb25lIG9uY2UgYW5kIHRoZSByZXN1bHQgaXMgbWVtb2l6ZWQgZm9yIGZ1dHVyZVxuICAgKiBpbnZvY2F0aW9ucy5cbiAgICovXG4gIF90YXJnZXRJc1JUTDogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuX190YXJnZXRJc1JUTCA9PSBudWxsKSB7XG4gICAgICBpZiAodGhpcy51c2VHbG9iYWxSdGxBdHRyaWJ1dGUpIHtcbiAgICAgICAgdmFyIGdsb2JhbEVsZW1lbnQgPVxuICAgICAgICAgICAgKGRvY3VtZW50LmJvZHkgJiYgZG9jdW1lbnQuYm9keS5oYXNBdHRyaWJ1dGUoJ2RpcicpKSA/XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5IDpcbiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICB0aGlzLl9fdGFyZ2V0SXNSVEwgPSBnbG9iYWxFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlyJykgPT09ICdydGwnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0Lmhvc3Q7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9fdGFyZ2V0SXNSVEwgPVxuICAgICAgICAgICAgdGFyZ2V0ICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRhcmdldClbJ2RpcmVjdGlvbiddID09PSAncnRsJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fX3RhcmdldElzUlRMO1xuICB9LFxuXG4gIC8qKlxuICAgKlxuICAgKiBXaGVuIG5hbWUgaXMgY2hhbmdlZCwgcmVnaXN0ZXIgaWNvbnNldCBtZXRhZGF0YVxuICAgKlxuICAgKi9cbiAgX25hbWVDaGFuZ2VkOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9tZXRhLnZhbHVlID0gbnVsbDtcbiAgICB0aGlzLl9tZXRhLmtleSA9IHRoaXMubmFtZTtcbiAgICB0aGlzLl9tZXRhLnZhbHVlID0gdGhpcztcblxuICAgIHRoaXMuYXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmZpcmUoJ2lyb24taWNvbnNldC1hZGRlZCcsIHRoaXMsIHtub2RlOiB3aW5kb3d9KTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbWFwIG9mIGNoaWxkIFNWRyBlbGVtZW50cyBieSBpZC5cbiAgICpcbiAgICogQHJldHVybiB7IU9iamVjdH0gTWFwIG9mIGlkJ3MgdG8gU1ZHIGVsZW1lbnRzLlxuICAgKi9cbiAgX2NyZWF0ZUljb25NYXA6IGZ1bmN0aW9uKCkge1xuICAgIC8vIE9iamVjdHMgY2hhaW5lZCB0byBPYmplY3QucHJvdG90eXBlIChge31gKSBoYXZlIG1lbWJlcnMuIFNwZWNpZmljYWxseSxcbiAgICAvLyBvbiBGRiB0aGVyZSBpcyBhIGB3YXRjaGAgbWV0aG9kIHRoYXQgY29uZnVzZXMgdGhlIGljb24gbWFwLCBzbyB3ZVxuICAgIC8vIG5lZWQgdG8gdXNlIGEgbnVsbC1iYXNlZCBvYmplY3QgaGVyZS5cbiAgICB2YXIgaWNvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGRvbSh0aGlzKS5xdWVyeVNlbGVjdG9yQWxsKCdbaWRdJykuZm9yRWFjaChmdW5jdGlvbihpY29uKSB7XG4gICAgICBpY29uc1tpY29uLmlkXSA9IGljb247XG4gICAgfSk7XG4gICAgcmV0dXJuIGljb25zO1xuICB9LFxuXG4gIC8qKlxuICAgKiBQcm9kdWNlIGluc3RhbGxhYmxlIGNsb25lIG9mIHRoZSBTVkcgZWxlbWVudCBtYXRjaGluZyBgaWRgIGluIHRoaXNcbiAgICogaWNvbnNldCwgb3IgYHVuZGVmaW5lZGAgaWYgdGhlcmUgaXMgbm8gbWF0Y2hpbmcgZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH0gUmV0dXJucyBhbiBpbnN0YWxsYWJsZSBjbG9uZSBvZiB0aGUgU1ZHIGVsZW1lbnRcbiAgICogbWF0Y2hpbmcgYGlkYC5cbiAgICovXG4gIF9jbG9uZUljb246IGZ1bmN0aW9uKGlkLCBtaXJyb3JBbGxvd2VkKSB7XG4gICAgLy8gY3JlYXRlIHRoZSBpY29uIG1hcCBvbi1kZW1hbmQsIHNpbmNlIHRoZSBpY29uc2V0IGl0c2VsZiBoYXMgbm8gZGlzY3JldGVcbiAgICAvLyBzaWduYWwgdG8ga25vdyB3aGVuIGl0J3MgY2hpbGRyZW4gYXJlIGZ1bGx5IHBhcnNlZFxuICAgIHRoaXMuX2ljb25zID0gdGhpcy5faWNvbnMgfHwgdGhpcy5fY3JlYXRlSWNvbk1hcCgpO1xuICAgIHJldHVybiB0aGlzLl9wcmVwYXJlU3ZnQ2xvbmUodGhpcy5faWNvbnNbaWRdLCB0aGlzLnNpemUsIG1pcnJvckFsbG93ZWQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHNvdXJjZVN2Z1xuICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG1pcnJvckFsbG93ZWRcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIF9wcmVwYXJlU3ZnQ2xvbmU6IGZ1bmN0aW9uKHNvdXJjZVN2Zywgc2l6ZSwgbWlycm9yQWxsb3dlZCkge1xuICAgIGlmIChzb3VyY2VTdmcpIHtcbiAgICAgIHZhciBjb250ZW50ID0gc291cmNlU3ZnLmNsb25lTm9kZSh0cnVlKSxcbiAgICAgICAgICBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3N2ZycpLFxuICAgICAgICAgIHZpZXdCb3ggPVxuICAgICAgICAgICAgICBjb250ZW50LmdldEF0dHJpYnV0ZSgndmlld0JveCcpIHx8ICcwIDAgJyArIHNpemUgKyAnICcgKyBzaXplLFxuICAgICAgICAgIGNzc1RleHQgPVxuICAgICAgICAgICAgICAncG9pbnRlci1ldmVudHM6IG5vbmU7IGRpc3BsYXk6IGJsb2NrOyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyc7XG5cbiAgICAgIGlmIChtaXJyb3JBbGxvd2VkICYmIGNvbnRlbnQuaGFzQXR0cmlidXRlKCdtaXJyb3ItaW4tcnRsJykpIHtcbiAgICAgICAgY3NzVGV4dCArPVxuICAgICAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC0xLDEpO3RyYW5zZm9ybTpzY2FsZSgtMSwxKTt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlcjsnO1xuICAgICAgfVxuXG4gICAgICBzdmcuc2V0QXR0cmlidXRlKCd2aWV3Qm94Jywgdmlld0JveCk7XG4gICAgICBzdmcuc2V0QXR0cmlidXRlKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ3hNaWRZTWlkIG1lZXQnKTtcbiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ2ZvY3VzYWJsZScsICdmYWxzZScpO1xuICAgICAgLy8gVE9ETyhkZnJlZWRtKTogYHBvaW50ZXItZXZlbnRzOiBub25lYCB3b3JrcyBhcm91bmRcbiAgICAgIC8vIGh0dHBzOi8vY3JidWcuY29tLzM3MDEzNlxuICAgICAgLy8gVE9ETyhzam1pbGVzKTogaW5saW5lIHN0eWxlIG1heSBub3QgYmUgaWRlYWwsIGJ1dCBhdm9pZHMgcmVxdWlyaW5nIGFcbiAgICAgIC8vIHNoYWRvdy1yb290XG4gICAgICBzdmcuc3R5bGUuY3NzVGV4dCA9IGNzc1RleHQ7XG4gICAgICBzdmcuYXBwZW5kQ2hpbGQoY29udGVudCkucmVtb3ZlQXR0cmlidXRlKCdpZCcpO1xuICAgICAgcmV0dXJuIHN2ZztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTQgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZVxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHQgQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXNcbnBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnRcbmZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnQHBvbHltZXIvaXJvbi1pY29uL2lyb24taWNvbi5qcyc7XG5pbXBvcnQgJ0Bwb2x5bWVyL2lyb24taWNvbnNldC1zdmcvaXJvbi1pY29uc2V0LXN2Zy5qcyc7XG5cbmltcG9ydCB7aHRtbH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvaHRtbC10YWcuanMnO1xuXG4vKipcblxuYGlyb24taWNvbnNgIGlzIGEgdXRpbGl0eSBpbXBvcnQgdGhhdCBpbmNsdWRlcyB0aGUgZGVmaW5pdGlvbiBmb3IgdGhlXG5gaXJvbi1pY29uYCBlbGVtZW50LCBgaXJvbi1pY29uc2V0LXN2Z2AgZWxlbWVudCwgYXMgd2VsbCBhcyBhbiBpbXBvcnQgZm9yIHRoZVxuZGVmYXVsdCBpY29uIHNldC5cblxuVGhlIGBpcm9uLWljb25zYCBkaXJlY3RvcnkgYWxzbyBpbmNsdWRlcyBpbXBvcnRzIGZvciBhZGRpdGlvbmFsIGljb24gc2V0cyB0aGF0XG5jYW4gYmUgbG9hZGVkIGludG8geW91ciBwcm9qZWN0LlxuXG5FeGFtcGxlIGxvYWRpbmcgaWNvbiBzZXQ6XG5cbiAgICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIj5cbiAgICAgIGltcG9ydCAnQHBvbHltZXIvaXJvbi1pY29ucy9tYXBzLWljb25zLmpzJztcbiAgICA8L3NjcmlwdD5cblxuVG8gdXNlIGFuIGljb24gZnJvbSBvbmUgb2YgdGhlc2Ugc2V0cywgZmlyc3QgcHJlZml4IHlvdXIgYGlyb24taWNvbmAgd2l0aCB0aGVcbmljb24gc2V0IG5hbWUsIGZvbGxvd2VkIGJ5IGEgY29sb24sIFwiOlwiLCBhbmQgdGhlbiB0aGUgaWNvbiBpZC5cblxuRXhhbXBsZSB1c2luZyB0aGUgZGlyZWN0aW9ucy1idXMgaWNvbiBmcm9tIHRoZSBtYXBzIGljb24gc2V0OlxuXG4gICAgPGlyb24taWNvbiBpY29uPVwibWFwczpkaXJlY3Rpb25zLWJ1c1wiPjwvaXJvbi1pY29uPlxuXG5TZWUgW2lyb24taWNvbl0oaHR0cHM6Ly93d3cud2ViY29tcG9uZW50cy5vcmcvZWxlbWVudC9AcG9seW1lci9pcm9uLWljb24pIGZvclxubW9yZSBpbmZvcm1hdGlvbiBhYm91dCB3b3JraW5nIHdpdGggaWNvbnMuXG5cblNlZSBbaXJvbi1pY29uc2V0XShodHRwczovL3d3dy53ZWJjb21wb25lbnRzLm9yZy9lbGVtZW50L0Bwb2x5bWVyL2lyb24taWNvbnNldClcbmFuZFxuW2lyb24taWNvbnNldC1zdmddKGh0dHBzOi8vd3d3LndlYmNvbXBvbmVudHMub3JnL2VsZW1lbnQvQHBvbHltZXIvaXJvbi1pY29uc2V0LXN2ZylcbmZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGhvdyB0byBjcmVhdGUgYSBjdXN0b20gaWNvbnNldC5cblxuQGdyb3VwIElyb24gRWxlbWVudHNcbkBwc2V1ZG9FbGVtZW50IGlyb24taWNvbnNcbkBkZW1vIGRlbW8vaW5kZXguaHRtbFxuKi9cblxuY29uc3QgdGVtcGxhdGUgPSBodG1sYDxpcm9uLWljb25zZXQtc3ZnIG5hbWU9XCJpY29uc1wiIHNpemU9XCIyNFwiPlxuPHN2Zz48ZGVmcz5cbjxnIGlkPVwiM2Qtcm90YXRpb25cIj48cGF0aCBkPVwiTTcuNTIgMjEuNDhDNC4yNSAxOS45NCAxLjkxIDE2Ljc2IDEuNTUgMTNILjA1Qy41NiAxOS4xNiA1LjcxIDI0IDEyIDI0bC42Ni0uMDMtMy44MS0zLjgxLTEuMzMgMS4zMnptLjg5LTYuNTJjLS4xOSAwLS4zNy0uMDMtLjUyLS4wOC0uMTYtLjA2LS4yOS0uMTMtLjQtLjI0LS4xMS0uMS0uMi0uMjItLjI2LS4zNy0uMDYtLjE0LS4wOS0uMy0uMDktLjQ3aC0xLjNjMCAuMzYuMDcuNjguMjEuOTUuMTQuMjcuMzMuNS41Ni42OS4yNC4xOC41MS4zMi44Mi40MS4zLjEuNjIuMTUuOTYuMTUuMzcgMCAuNzItLjA1IDEuMDMtLjE1LjMyLS4xLjYtLjI1LjgzLS40NHMuNDItLjQzLjU1LS43MmMuMTMtLjI5LjItLjYxLjItLjk3IDAtLjE5LS4wMi0uMzgtLjA3LS41Ni0uMDUtLjE4LS4xMi0uMzUtLjIzLS41MS0uMS0uMTYtLjI0LS4zLS40LS40My0uMTctLjEzLS4zNy0uMjMtLjYxLS4zMS4yLS4wOS4zNy0uMi41Mi0uMzMuMTUtLjEzLjI3LS4yNy4zNy0uNDIuMS0uMTUuMTctLjMuMjItLjQ2LjA1LS4xNi4wNy0uMzIuMDctLjQ4IDAtLjM2LS4wNi0uNjgtLjE4LS45Ni0uMTItLjI4LS4yOS0uNTEtLjUxLS42OS0uMi0uMTktLjQ3LS4zMy0uNzctLjQzQzkuMSA4LjA1IDguNzYgOCA4LjM5IDhjLS4zNiAwLS42OS4wNS0xIC4xNi0uMy4xMS0uNTcuMjYtLjc5LjQ1LS4yMS4xOS0uMzguNDEtLjUxLjY3LS4xMi4yNi0uMTguNTQtLjE4Ljg1aDEuM2MwLS4xNy4wMy0uMzIuMDktLjQ1cy4xNC0uMjUuMjUtLjM0Yy4xMS0uMDkuMjMtLjE3LjM4LS4yMi4xNS0uMDUuMy0uMDguNDgtLjA4LjQgMCAuNy4xLjg5LjMxLjE5LjIuMjkuNDkuMjkuODYgMCAuMTgtLjAzLjM0LS4wOC40OS0uMDUuMTUtLjE0LjI3LS4yNS4zNy0uMTEuMS0uMjUuMTgtLjQxLjI0LS4xNi4wNi0uMzYuMDktLjU4LjA5SDcuNXYxLjAzaC43N2MuMjIgMCAuNDIuMDIuNi4wN3MuMzMuMTMuNDUuMjNjLjEyLjExLjIyLjI0LjI5LjQuMDcuMTYuMS4zNS4xLjU3IDAgLjQxLS4xMi43Mi0uMzUuOTMtLjIzLjIzLS41NS4zMy0uOTUuMzN6bTguNTUtNS45MmMtLjMyLS4zMy0uNy0uNTktMS4xNC0uNzctLjQzLS4xOC0uOTItLjI3LTEuNDYtLjI3SDEydjhoMi4zYy41NSAwIDEuMDYtLjA5IDEuNTEtLjI3LjQ1LS4xOC44NC0uNDMgMS4xNi0uNzYuMzItLjMzLjU3LS43My43NC0xLjE5LjE3LS40Ny4yNi0uOTkuMjYtMS41N3YtLjRjMC0uNTgtLjA5LTEuMS0uMjYtMS41Ny0uMTgtLjQ3LS40My0uODctLjc1LTEuMnptLS4zOSAzLjE2YzAgLjQyLS4wNS43OS0uMTQgMS4xMy0uMS4zMy0uMjQuNjItLjQzLjg1LS4xOS4yMy0uNDMuNDEtLjcxLjUzLS4yOS4xMi0uNjIuMTgtLjk5LjE4aC0uOTFWOS4xMmguOTdjLjcyIDAgMS4yNy4yMyAxLjY0LjY5LjM4LjQ2LjU3IDEuMTIuNTcgMS45OXYuNHpNMTIgMGwtLjY2LjAzIDMuODEgMy44MSAxLjMzLTEuMzNjMy4yNyAxLjU1IDUuNjEgNC43MiA1Ljk2IDguNDhoMS41QzIzLjQ0IDQuODQgMTguMjkgMCAxMiAwelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImFjY2Vzc2liaWxpdHlcIj48cGF0aCBkPVwiTTEyIDJjMS4xIDAgMiAuOSAyIDJzLS45IDItMiAyLTItLjktMi0yIC45LTIgMi0yem05IDdoLTZ2MTNoLTJ2LTZoLTJ2Nkg5VjlIM1Y3aDE4djJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiYWNjZXNzaWJsZVwiPjxjaXJjbGUgY3g9XCIxMlwiIGN5PVwiNFwiIHI9XCIyXCI+PC9jaXJjbGU+PHBhdGggZD1cIk0xOSAxM3YtMmMtMS41NC4wMi0zLjA5LS43NS00LjA3LTEuODNsLTEuMjktMS40M2MtLjE3LS4xOS0uMzgtLjM0LS42MS0uNDUtLjAxIDAtLjAxLS4wMS0uMDItLjAxSDEzYy0uMzUtLjItLjc1LS4zLTEuMTktLjI2QzEwLjc2IDcuMTEgMTAgOC4wNCAxMCA5LjA5VjE1YzAgMS4xLjkgMiAyIDJoNXY1aDJ2LTUuNWMwLTEuMS0uOS0yLTItMmgtM3YtMy40NWMxLjI5IDEuMDcgMy4yNSAxLjk0IDUgMS45NXptLTYuMTcgNWMtLjQxIDEuMTYtMS41MiAyLTIuODMgMi0xLjY2IDAtMy0xLjM0LTMtMyAwLTEuMzEuODQtMi40MSAyLTIuODNWMTIuMWMtMi4yOC40Ni00IDIuNDgtNCA0LjkgMCAyLjc2IDIuMjQgNSA1IDUgMi40MiAwIDQuNDQtMS43MiA0LjktNGgtMi4wN3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJhY2NvdW50LWJhbGFuY2VcIj48cGF0aCBkPVwiTTQgMTB2N2gzdi03SDR6bTYgMHY3aDN2LTdoLTN6TTIgMjJoMTl2LTNIMnYzem0xNC0xMnY3aDN2LTdoLTN6bS00LjUtOUwyIDZ2MmgxOVY2bC05LjUtNXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJhY2NvdW50LWJhbGFuY2Utd2FsbGV0XCI+PHBhdGggZD1cIk0yMSAxOHYxYzAgMS4xLS45IDItMiAySDVjLTEuMTEgMC0yLS45LTItMlY1YzAtMS4xLjg5LTIgMi0yaDE0YzEuMSAwIDIgLjkgMiAydjFoLTljLTEuMTEgMC0yIC45LTIgMnY4YzAgMS4xLjg5IDIgMiAyaDl6bS05LTJoMTBWOEgxMnY4em00LTIuNWMtLjgzIDAtMS41LS42Ny0xLjUtMS41cy42Ny0xLjUgMS41LTEuNSAxLjUuNjcgMS41IDEuNS0uNjcgMS41LTEuNSAxLjV6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiYWNjb3VudC1ib3hcIj48cGF0aCBkPVwiTTMgNXYxNGMwIDEuMS44OSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMlY1YzAtMS4xLS45LTItMi0ySDVjLTEuMTEgMC0yIC45LTIgMnptMTIgNGMwIDEuNjYtMS4zNCAzLTMgM3MtMy0xLjM0LTMtMyAxLjM0LTMgMy0zIDMgMS4zNCAzIDN6bS05IDhjMC0yIDQtMy4xIDYtMy4xczYgMS4xIDYgMy4xdjFINnYtMXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJhY2NvdW50LWNpcmNsZVwiPjxwYXRoIGQ9XCJNMTIgMkM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptMCAzYzEuNjYgMCAzIDEuMzQgMyAzcy0xLjM0IDMtMyAzLTMtMS4zNC0zLTMgMS4zNC0zIDMtM3ptMCAxNC4yYy0yLjUgMC00LjcxLTEuMjgtNi0zLjIyLjAzLTEuOTkgNC0zLjA4IDYtMy4wOCAxLjk5IDAgNS45NyAxLjA5IDYgMy4wOC0xLjI5IDEuOTQtMy41IDMuMjItNiAzLjIyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImFkZFwiPjxwYXRoIGQ9XCJNMTkgMTNoLTZ2NmgtMnYtNkg1di0yaDZWNWgydjZoNnYyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImFkZC1hbGVydFwiPjxwYXRoIGQ9XCJNMTAuMDEgMjEuMDFjMCAxLjEuODkgMS45OSAxLjk5IDEuOTlzMS45OS0uODkgMS45OS0xLjk5aC0zLjk4em04Ljg3LTQuMTlWMTFjMC0zLjI1LTIuMjUtNS45Ny01LjI5LTYuNjl2LS43MkMxMy41OSAyLjcxIDEyLjg4IDIgMTIgMnMtMS41OS43MS0xLjU5IDEuNTl2LjcyQzcuMzcgNS4wMyA1LjEyIDcuNzUgNS4xMiAxMXY1LjgyTDMgMTguOTRWMjBoMTh2LTEuMDZsLTIuMTItMi4xMnpNMTYgMTMuMDFoLTN2M2gtMnYtM0g4VjExaDNWOGgydjNoM3YyLjAxelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImFkZC1ib3hcIj48cGF0aCBkPVwiTTE5IDNINWMtMS4xMSAwLTIgLjktMiAydjE0YzAgMS4xLjg5IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJ6bS0yIDEwaC00djRoLTJ2LTRIN3YtMmg0VjdoMnY0aDR2MnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJhZGQtY2lyY2xlXCI+PHBhdGggZD1cIk0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem01IDExaC00djRoLTJ2LTRIN3YtMmg0VjdoMnY0aDR2MnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJhZGQtY2lyY2xlLW91dGxpbmVcIj48cGF0aCBkPVwiTTEzIDdoLTJ2NEg3djJoNHY0aDJ2LTRoNHYtMmgtNFY3em0tMS01QzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0wIDE4Yy00LjQxIDAtOC0zLjU5LTgtOHMzLjU5LTggOC04IDggMy41OSA4IDgtMy41OSA4LTggOHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJhZGQtc2hvcHBpbmctY2FydFwiPjxwYXRoIGQ9XCJNMTEgOWgyVjZoM1Y0aC0zVjFoLTJ2M0g4djJoM3Yzem0tNCA5Yy0xLjEgMC0xLjk5LjktMS45OSAyUzUuOSAyMiA3IDIyczItLjkgMi0yLS45LTItMi0yem0xMCAwYy0xLjEgMC0xLjk5LjktMS45OSAycy44OSAyIDEuOTkgMiAyLS45IDItMi0uOS0yLTItMnptLTkuODMtMy4yNWwuMDMtLjEyLjktMS42M2g3LjQ1Yy43NSAwIDEuNDEtLjQxIDEuNzUtMS4wM2wzLjg2LTcuMDFMMTkuNDIgNGgtLjAxbC0xLjEgMi0yLjc2IDVIOC41M2wtLjEzLS4yN0w2LjE2IDZsLS45NS0yLS45NC0ySDF2MmgybDMuNiA3LjU5LTEuMzUgMi40NWMtLjE2LjI4LS4yNS42MS0uMjUuOTYgMCAxLjEuOSAyIDIgMmgxMnYtMkg3LjQyYy0uMTMgMC0uMjUtLjExLS4yNS0uMjV6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiYWxhcm1cIj48cGF0aCBkPVwiTTIyIDUuNzJsLTQuNi0zLjg2LTEuMjkgMS41MyA0LjYgMy44NkwyMiA1Ljcyek03Ljg4IDMuMzlMNi42IDEuODYgMiA1LjcxbDEuMjkgMS41MyA0LjU5LTMuODV6TTEyLjUgOEgxMXY2bDQuNzUgMi44NS43NS0xLjIzLTQtMi4zN1Y4ek0xMiA0Yy00Ljk3IDAtOSA0LjAzLTkgOXM0LjAyIDkgOSA5YzQuOTcgMCA5LTQuMDMgOS05cy00LjAzLTktOS05em0wIDE2Yy0zLjg3IDAtNy0zLjEzLTctN3MzLjEzLTcgNy03IDcgMy4xMyA3IDctMy4xMyA3LTcgN3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJhbGFybS1hZGRcIj48cGF0aCBkPVwiTTcuODggMy4zOUw2LjYgMS44NiAyIDUuNzFsMS4yOSAxLjUzIDQuNTktMy44NXpNMjIgNS43MmwtNC42LTMuODYtMS4yOSAxLjUzIDQuNiAzLjg2TDIyIDUuNzJ6TTEyIDRjLTQuOTcgMC05IDQuMDMtOSA5czQuMDIgOSA5IDljNC45NyAwIDktNC4wMyA5LTlzLTQuMDMtOS05LTl6bTAgMTZjLTMuODcgMC03LTMuMTMtNy03czMuMTMtNyA3LTcgNyAzLjEzIDcgNy0zLjEzIDctNyA3em0xLTExaC0ydjNIOHYyaDN2M2gydi0zaDN2LTJoLTNWOXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJhbGFybS1vZmZcIj48cGF0aCBkPVwiTTEyIDZjMy44NyAwIDcgMy4xMyA3IDcgMCAuODQtLjE2IDEuNjUtLjQzIDIuNGwxLjUyIDEuNTJjLjU4LTEuMTkuOTEtMi41MS45MS0zLjkyIDAtNC45Ny00LjAzLTktOS05LTEuNDEgMC0yLjczLjMzLTMuOTIuOTFMOS42IDYuNDNDMTAuMzUgNi4xNiAxMS4xNiA2IDEyIDZ6bTEwLS4yOGwtNC42LTMuODYtMS4yOSAxLjUzIDQuNiAzLjg2TDIyIDUuNzJ6TTIuOTIgMi4yOUwxLjY1IDMuNTcgMi45OCA0LjlsLTEuMTEuOTMgMS40MiAxLjQyIDEuMTEtLjk0LjguOEMzLjgzIDguNjkgMyAxMC43NSAzIDEzYzAgNC45NyA0LjAyIDkgOSA5IDIuMjUgMCA0LjMxLS44MyA1Ljg5LTIuMmwyLjIgMi4yIDEuMjctMS4yN0wzLjg5IDMuMjdsLS45Ny0uOTh6bTEzLjU1IDE2LjFDMTUuMjYgMTkuMzkgMTMuNyAyMCAxMiAyMGMtMy44NyAwLTctMy4xMy03LTcgMC0xLjcuNjEtMy4yNiAxLjYxLTQuNDdsOS44NiA5Ljg2ek04LjAyIDMuMjhMNi42IDEuODZsLS44Ni43MSAxLjQyIDEuNDIuODYtLjcxelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImFsYXJtLW9uXCI+PHBhdGggZD1cIk0yMiA1LjcybC00LjYtMy44Ni0xLjI5IDEuNTMgNC42IDMuODZMMjIgNS43MnpNNy44OCAzLjM5TDYuNiAxLjg2IDIgNS43MWwxLjI5IDEuNTMgNC41OS0zLjg1ek0xMiA0Yy00Ljk3IDAtOSA0LjAzLTkgOXM0LjAyIDkgOSA5YzQuOTcgMCA5LTQuMDMgOS05cy00LjAzLTktOS05em0wIDE2Yy0zLjg3IDAtNy0zLjEzLTctN3MzLjEzLTcgNy03IDcgMy4xMyA3IDctMy4xMyA3LTcgN3ptLTEuNDYtNS40N0w4LjQxIDEyLjRsLTEuMDYgMS4wNiAzLjE4IDMuMTggNi02LTEuMDYtMS4wNi00LjkzIDQuOTV6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiYWxsLW91dFwiPjxwYXRoIGQ9XCJNMTYuMjEgNC4xNmw0IDR2LTR6bTQgMTJsLTQgNGg0em0tMTIgNGwtNC00djR6bS00LTEybDQtNGgtNHptMTIuOTUtLjk1Yy0yLjczLTIuNzMtNy4xNy0yLjczLTkuOSAwcy0yLjczIDcuMTcgMCA5LjkgNy4xNyAyLjczIDkuOSAwIDIuNzMtNy4xNiAwLTkuOXptLTEuMSA4LjhjLTIuMTMgMi4xMy01LjU3IDIuMTMtNy43IDBzLTIuMTMtNS41NyAwLTcuNyA1LjU3LTIuMTMgNy43IDAgMi4xMyA1LjU3IDAgNy43elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImFuZHJvaWRcIj48cGF0aCBkPVwiTTYgMThjMCAuNTUuNDUgMSAxIDFoMXYzLjVjMCAuODMuNjcgMS41IDEuNSAxLjVzMS41LS42NyAxLjUtMS41VjE5aDJ2My41YzAgLjgzLjY3IDEuNSAxLjUgMS41czEuNS0uNjcgMS41LTEuNVYxOWgxYy41NSAwIDEtLjQ1IDEtMVY4SDZ2MTB6TTMuNSA4QzIuNjcgOCAyIDguNjcgMiA5LjV2N2MwIC44My42NyAxLjUgMS41IDEuNVM1IDE3LjMzIDUgMTYuNXYtN0M1IDguNjcgNC4zMyA4IDMuNSA4em0xNyAwYy0uODMgMC0xLjUuNjctMS41IDEuNXY3YzAgLjgzLjY3IDEuNSAxLjUgMS41czEuNS0uNjcgMS41LTEuNXYtN2MwLS44My0uNjctMS41LTEuNS0xLjV6bS00Ljk3LTUuODRsMS4zLTEuM2MuMi0uMi4yLS41MSAwLS43MS0uMi0uMi0uNTEtLjItLjcxIDBsLTEuNDggMS40OEMxMy44NSAxLjIzIDEyLjk1IDEgMTIgMWMtLjk2IDAtMS44Ni4yMy0yLjY2LjYzTDcuODUuMTVjLS4yLS4yLS41MS0uMi0uNzEgMC0uMi4yLS4yLjUxIDAgLjcxbDEuMzEgMS4zMUM2Ljk3IDMuMjYgNiA1LjAxIDYgN2gxMmMwLTEuOTktLjk3LTMuNzUtMi40Ny00Ljg0ek0xMCA1SDlWNGgxdjF6bTUgMGgtMVY0aDF2MXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJhbm5vdW5jZW1lbnRcIj48cGF0aCBkPVwiTTIwIDJINGMtMS4xIDAtMS45OS45LTEuOTkgMkwyIDIybDQtNGgxNGMxLjEgMCAyLS45IDItMlY0YzAtMS4xLS45LTItMi0yem0tNyA5aC0yVjVoMnY2em0wIDRoLTJ2LTJoMnYyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImFwcHNcIj48cGF0aCBkPVwiTTQgOGg0VjRINHY0em02IDEyaDR2LTRoLTR2NHptLTYgMGg0di00SDR2NHptMC02aDR2LTRINHY0em02IDBoNHYtNGgtNHY0em02LTEwdjRoNFY0aC00em0tNiA0aDRWNGgtNHY0em02IDZoNHYtNGgtNHY0em0wIDZoNHYtNGgtNHY0elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImFyY2hpdmVcIj48cGF0aCBkPVwiTTIwLjU0IDUuMjNsLTEuMzktMS42OEMxOC44OCAzLjIxIDE4LjQ3IDMgMTggM0g2Yy0uNDcgMC0uODguMjEtMS4xNi41NUwzLjQ2IDUuMjNDMy4xNyA1LjU3IDMgNi4wMiAzIDYuNVYxOWMwIDEuMS45IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjYuNWMwLS40OC0uMTctLjkzLS40Ni0xLjI3ek0xMiAxNy41TDYuNSAxMkgxMHYtMmg0djJoMy41TDEyIDE3LjV6TTUuMTIgNWwuODEtMWgxMmwuOTQgMUg1LjEyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImFycm93LWJhY2tcIj48cGF0aCBkPVwiTTIwIDExSDcuODNsNS41OS01LjU5TDEyIDRsLTggOCA4IDggMS40MS0xLjQxTDcuODMgMTNIMjB2LTJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiYXJyb3ctZG93bndhcmRcIj48cGF0aCBkPVwiTTIwIDEybC0xLjQxLTEuNDFMMTMgMTYuMTdWNGgtMnYxMi4xN2wtNS41OC01LjU5TDQgMTJsOCA4IDgtOHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJhcnJvdy1kcm9wLWRvd25cIj48cGF0aCBkPVwiTTcgMTBsNSA1IDUtNXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJhcnJvdy1kcm9wLWRvd24tY2lyY2xlXCI+PHBhdGggZD1cIk0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0wIDEybC00LTRoOGwtNCA0elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImFycm93LWRyb3AtdXBcIj48cGF0aCBkPVwiTTcgMTRsNS01IDUgNXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJhcnJvdy1mb3J3YXJkXCI+PHBhdGggZD1cIk0xMiA0bC0xLjQxIDEuNDFMMTYuMTcgMTFINHYyaDEyLjE3bC01LjU4IDUuNTlMMTIgMjBsOC04elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImFycm93LXVwd2FyZFwiPjxwYXRoIGQ9XCJNNCAxMmwxLjQxIDEuNDFMMTEgNy44M1YyMGgyVjcuODNsNS41OCA1LjU5TDIwIDEybC04LTgtOCA4elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImFzcGVjdC1yYXRpb1wiPjxwYXRoIGQ9XCJNMTkgMTJoLTJ2M2gtM3YyaDV2LTV6TTcgOWgzVjdINXY1aDJWOXptMTQtNkgzYy0xLjEgMC0yIC45LTIgMnYxNGMwIDEuMS45IDIgMiAyaDE4YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJ6bTAgMTYuMDFIM1Y0Ljk5aDE4djE0LjAyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImFzc2Vzc21lbnRcIj48cGF0aCBkPVwiTTE5IDNINWMtMS4xIDAtMiAuOS0yIDJ2MTRjMCAxLjEuOSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMlY1YzAtMS4xLS45LTItMi0yek05IDE3SDd2LTdoMnY3em00IDBoLTJWN2gydjEwem00IDBoLTJ2LTRoMnY0elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImFzc2lnbm1lbnRcIj48cGF0aCBkPVwiTTE5IDNoLTQuMThDMTQuNCAxLjg0IDEzLjMgMSAxMiAxYy0xLjMgMC0yLjQuODQtMi44MiAySDVjLTEuMSAwLTIgLjktMiAydjE0YzAgMS4xLjkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMnptLTcgMGMuNTUgMCAxIC40NSAxIDFzLS40NSAxLTEgMS0xLS40NS0xLTEgLjQ1LTEgMS0xem0yIDE0SDd2LTJoN3Yyem0zLTRIN3YtMmgxMHYyem0wLTRIN1Y3aDEwdjJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiYXNzaWdubWVudC1pbmRcIj48cGF0aCBkPVwiTTE5IDNoLTQuMThDMTQuNCAxLjg0IDEzLjMgMSAxMiAxYy0xLjMgMC0yLjQuODQtMi44MiAySDVjLTEuMSAwLTIgLjktMiAydjE0YzAgMS4xLjkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMnptLTcgMGMuNTUgMCAxIC40NSAxIDFzLS40NSAxLTEgMS0xLS40NS0xLTEgLjQ1LTEgMS0xem0wIDRjMS42NiAwIDMgMS4zNCAzIDNzLTEuMzQgMy0zIDMtMy0xLjM0LTMtMyAxLjM0LTMgMy0zem02IDEySDZ2LTEuNGMwLTIgNC0zLjEgNi0zLjFzNiAxLjEgNiAzLjFWMTl6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiYXNzaWdubWVudC1sYXRlXCI+PHBhdGggZD1cIk0xOSAzaC00LjE4QzE0LjQgMS44NCAxMy4zIDEgMTIgMWMtMS4zIDAtMi40Ljg0LTIuODIgMkg1Yy0xLjEgMC0yIC45LTIgMnYxNGMwIDEuMS45IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJ6bS02IDE1aC0ydi0yaDJ2MnptMC00aC0yVjhoMnY2em0tMS05Yy0uNTUgMC0xLS40NS0xLTFzLjQ1LTEgMS0xIDEgLjQ1IDEgMS0uNDUgMS0xIDF6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiYXNzaWdubWVudC1yZXR1cm5cIj48cGF0aCBkPVwiTTE5IDNoLTQuMThDMTQuNCAxLjg0IDEzLjMgMSAxMiAxYy0xLjMgMC0yLjQuODQtMi44MiAySDVjLTEuMSAwLTIgLjktMiAydjE0YzAgMS4xLjkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMnptLTcgMGMuNTUgMCAxIC40NSAxIDFzLS40NSAxLTEgMS0xLS40NS0xLTEgLjQ1LTEgMS0xem00IDEyaC00djNsLTUtNSA1LTV2M2g0djR6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiYXNzaWdubWVudC1yZXR1cm5lZFwiPjxwYXRoIGQ9XCJNMTkgM2gtNC4xOEMxNC40IDEuODQgMTMuMyAxIDEyIDFjLTEuMyAwLTIuNC44NC0yLjgyIDJINWMtMS4xIDAtMiAuOS0yIDJ2MTRjMCAxLjEuOSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMlY1YzAtMS4xLS45LTItMi0yem0tNyAwYy41NSAwIDEgLjQ1IDEgMXMtLjQ1IDEtMSAxLTEtLjQ1LTEtMSAuNDUtMSAxLTF6bTAgMTVsLTUtNWgzVjloNHY0aDNsLTUgNXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJhc3NpZ25tZW50LXR1cm5lZC1pblwiPjxwYXRoIGQ9XCJNMTkgM2gtNC4xOEMxNC40IDEuODQgMTMuMyAxIDEyIDFjLTEuMyAwLTIuNC44NC0yLjgyIDJINWMtMS4xIDAtMiAuOS0yIDJ2MTRjMCAxLjEuOSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMlY1YzAtMS4xLS45LTItMi0yem0tNyAwYy41NSAwIDEgLjQ1IDEgMXMtLjQ1IDEtMSAxLTEtLjQ1LTEtMSAuNDUtMSAxLTF6bS0yIDE0bC00LTQgMS40MS0xLjQxTDEwIDE0LjE3bDYuNTktNi41OUwxOCA5bC04IDh6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiYXR0YWNobWVudFwiPjxwYXRoIGQ9XCJNMiAxMi41QzIgOS40NiA0LjQ2IDcgNy41IDdIMThjMi4yMSAwIDQgMS43OSA0IDRzLTEuNzkgNC00IDRIOS41QzguMTIgMTUgNyAxMy44OCA3IDEyLjVTOC4xMiAxMCA5LjUgMTBIMTd2Mkg5LjQxYy0uNTUgMC0uNTUgMSAwIDFIMThjMS4xIDAgMi0uOSAyLTJzLS45LTItMi0ySDcuNUM1LjU3IDkgNCAxMC41NyA0IDEyLjVTNS41NyAxNiA3LjUgMTZIMTd2Mkg3LjVDNC40NiAxOCAyIDE1LjU0IDIgMTIuNXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJhdXRvcmVuZXdcIj48cGF0aCBkPVwiTTEyIDZ2M2w0LTQtNC00djNjLTQuNDIgMC04IDMuNTgtOCA4IDAgMS41Ny40NiAzLjAzIDEuMjQgNC4yNkw2LjcgMTQuOGMtLjQ1LS44My0uNy0xLjc5LS43LTIuOCAwLTMuMzEgMi42OS02IDYtNnptNi43NiAxLjc0TDE3LjMgOS4yYy40NC44NC43IDEuNzkuNyAyLjggMCAzLjMxLTIuNjkgNi02IDZ2LTNsLTQgNCA0IDR2LTNjNC40MiAwIDgtMy41OCA4LTggMC0xLjU3LS40Ni0zLjAzLTEuMjQtNC4yNnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJiYWNrc3BhY2VcIj48cGF0aCBkPVwiTTIyIDNIN2MtLjY5IDAtMS4yMy4zNS0xLjU5Ljg4TDAgMTJsNS40MSA4LjExYy4zNi41My45Ljg5IDEuNTkuODloMTVjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMnptLTMgMTIuNTlMMTcuNTkgMTcgMTQgMTMuNDEgMTAuNDEgMTcgOSAxNS41OSAxMi41OSAxMiA5IDguNDEgMTAuNDEgNyAxNCAxMC41OSAxNy41OSA3IDE5IDguNDEgMTUuNDEgMTIgMTkgMTUuNTl6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiYmFja3VwXCI+PHBhdGggZD1cIk0xOS4zNSAxMC4wNEMxOC42NyA2LjU5IDE1LjY0IDQgMTIgNCA5LjExIDQgNi42IDUuNjQgNS4zNSA4LjA0IDIuMzQgOC4zNiAwIDEwLjkxIDAgMTRjMCAzLjMxIDIuNjkgNiA2IDZoMTNjMi43NiAwIDUtMi4yNCA1LTUgMC0yLjY0LTIuMDUtNC43OC00LjY1LTQuOTZ6TTE0IDEzdjRoLTR2LTRIN2w1LTUgNSA1aC0zelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImJsb2NrXCI+PHBhdGggZD1cIk0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyek00IDEyYzAtNC40MiAzLjU4LTggOC04IDEuODUgMCAzLjU1LjYzIDQuOSAxLjY5TDUuNjkgMTYuOUM0LjYzIDE1LjU1IDQgMTMuODUgNCAxMnptOCA4Yy0xLjg1IDAtMy41NS0uNjMtNC45LTEuNjlMMTguMzEgNy4xQzE5LjM3IDguNDUgMjAgMTAuMTUgMjAgMTJjMCA0LjQyLTMuNTggOC04IDh6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiYm9va1wiPjxwYXRoIGQ9XCJNMTggMkg2Yy0xLjEgMC0yIC45LTIgMnYxNmMwIDEuMS45IDIgMiAyaDEyYzEuMSAwIDItLjkgMi0yVjRjMC0xLjEtLjktMi0yLTJ6TTYgNGg1djhsLTIuNS0xLjVMNiAxMlY0elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImJvb2ttYXJrXCI+PHBhdGggZD1cIk0xNyAzSDdjLTEuMSAwLTEuOTkuOS0xLjk5IDJMNSAyMWw3LTMgNyAzVjVjMC0xLjEtLjktMi0yLTJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiYm9va21hcmstYm9yZGVyXCI+PHBhdGggZD1cIk0xNyAzSDdjLTEuMSAwLTEuOTkuOS0xLjk5IDJMNSAyMWw3LTMgNyAzVjVjMC0xLjEtLjktMi0yLTJ6bTAgMTVsLTUtMi4xOEw3IDE4VjVoMTB2MTN6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiYnVnLXJlcG9ydFwiPjxwYXRoIGQ9XCJNMjAgOGgtMi44MWMtLjQ1LS43OC0xLjA3LTEuNDUtMS44Mi0xLjk2TDE3IDQuNDEgMTUuNTkgM2wtMi4xNyAyLjE3QzEyLjk2IDUuMDYgMTIuNDkgNSAxMiA1Yy0uNDkgMC0uOTYuMDYtMS40MS4xN0w4LjQxIDMgNyA0LjQxbDEuNjIgMS42M0M3Ljg4IDYuNTUgNy4yNiA3LjIyIDYuODEgOEg0djJoMi4wOWMtLjA1LjMzLS4wOS42Ni0uMDkgMXYxSDR2MmgydjFjMCAuMzQuMDQuNjcuMDkgMUg0djJoMi44MWMxLjA0IDEuNzkgMi45NyAzIDUuMTkgM3M0LjE1LTEuMjEgNS4xOS0zSDIwdi0yaC0yLjA5Yy4wNS0uMzMuMDktLjY2LjA5LTF2LTFoMnYtMmgtMnYtMWMwLS4zNC0uMDQtLjY3LS4wOS0xSDIwVjh6bS02IDhoLTR2LTJoNHYyem0wLTRoLTR2LTJoNHYyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImJ1aWxkXCI+PHBhdGggZD1cIk0yMi43IDE5bC05LjEtOS4xYy45LTIuMy40LTUtMS41LTYuOS0yLTItNS0yLjQtNy40LTEuM0w5IDYgNiA5IDEuNiA0LjdDLjQgNy4xLjkgMTAuMSAyLjkgMTIuMWMxLjkgMS45IDQuNiAyLjQgNi45IDEuNWw5LjEgOS4xYy40LjQgMSAuNCAxLjQgMGwyLjMtMi4zYy41LS40LjUtMS4xLjEtMS40elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImNhY2hlZFwiPjxwYXRoIGQ9XCJNMTkgOGwtNCA0aDNjMCAzLjMxLTIuNjkgNi02IDYtMS4wMSAwLTEuOTctLjI1LTIuOC0uN2wtMS40NiAxLjQ2QzguOTcgMTkuNTQgMTAuNDMgMjAgMTIgMjBjNC40MiAwIDgtMy41OCA4LThoM2wtNC00ek02IDEyYzAtMy4zMSAyLjY5LTYgNi02IDEuMDEgMCAxLjk3LjI1IDIuOC43bDEuNDYtMS40NkMxNS4wMyA0LjQ2IDEzLjU3IDQgMTIgNGMtNC40MiAwLTggMy41OC04IDhIMWw0IDQgNC00SDZ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiY2FtZXJhLWVuaGFuY2VcIj48cGF0aCBkPVwiTTkgM0w3LjE3IDVINGMtMS4xIDAtMiAuOS0yIDJ2MTJjMCAxLjEuOSAyIDIgMmgxNmMxLjEgMCAyLS45IDItMlY3YzAtMS4xLS45LTItMi0yaC0zLjE3TDE1IDNIOXptMyAxNWMtMi43NiAwLTUtMi4yNC01LTVzMi4yNC01IDUtNSA1IDIuMjQgNSA1LTIuMjQgNS01IDV6bTAtMWwxLjI1LTIuNzVMMTYgMTNsLTIuNzUtMS4yNUwxMiA5bC0xLjI1IDIuNzVMOCAxM2wyLjc1IDEuMjV6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiY2FuY2VsXCI+PHBhdGggZD1cIk0xMiAyQzYuNDcgMiAyIDYuNDcgMiAxMnM0LjQ3IDEwIDEwIDEwIDEwLTQuNDcgMTAtMTBTMTcuNTMgMiAxMiAyem01IDEzLjU5TDE1LjU5IDE3IDEyIDEzLjQxIDguNDEgMTcgNyAxNS41OSAxMC41OSAxMiA3IDguNDEgOC40MSA3IDEyIDEwLjU5IDE1LjU5IDcgMTcgOC40MSAxMy40MSAxMiAxNyAxNS41OXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJjYXJkLWdpZnRjYXJkXCI+PHBhdGggZD1cIk0yMCA2aC0yLjE4Yy4xMS0uMzEuMTgtLjY1LjE4LTEgMC0xLjY2LTEuMzQtMy0zLTMtMS4wNSAwLTEuOTYuNTQtMi41IDEuMzVsLS41LjY3LS41LS42OEMxMC45NiAyLjU0IDEwLjA1IDIgOSAyIDcuMzQgMiA2IDMuMzQgNiA1YzAgLjM1LjA3LjY5LjE4IDFINGMtMS4xMSAwLTEuOTkuODktMS45OSAyTDIgMTljMCAxLjExLjg5IDIgMiAyaDE2YzEuMTEgMCAyLS44OSAyLTJWOGMwLTEuMTEtLjg5LTItMi0yem0tNS0yYy41NSAwIDEgLjQ1IDEgMXMtLjQ1IDEtMSAxLTEtLjQ1LTEtMSAuNDUtMSAxLTF6TTkgNGMuNTUgMCAxIC40NSAxIDFzLS40NSAxLTEgMS0xLS40NS0xLTEgLjQ1LTEgMS0xem0xMSAxNUg0di0yaDE2djJ6bTAtNUg0VjhoNS4wOEw3IDEwLjgzIDguNjIgMTIgMTEgOC43NmwxLTEuMzYgMSAxLjM2TDE1LjM4IDEyIDE3IDEwLjgzIDE0LjkyIDhIMjB2NnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJjYXJkLW1lbWJlcnNoaXBcIj48cGF0aCBkPVwiTTIwIDJINGMtMS4xMSAwLTIgLjg5LTIgMnYxMWMwIDEuMTEuODkgMiAyIDJoNHY1bDQtMiA0IDJ2LTVoNGMxLjExIDAgMi0uODkgMi0yVjRjMC0xLjExLS44OS0yLTItMnptMCAxM0g0di0yaDE2djJ6bTAtNUg0VjRoMTZ2NnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJjYXJkLXRyYXZlbFwiPjxwYXRoIGQ9XCJNMjAgNmgtM1Y0YzAtMS4xMS0uODktMi0yLTJIOWMtMS4xMSAwLTIgLjg5LTIgMnYySDRjLTEuMTEgMC0yIC44OS0yIDJ2MTFjMCAxLjExLjg5IDIgMiAyaDE2YzEuMTEgMCAyLS44OSAyLTJWOGMwLTEuMTEtLjg5LTItMi0yek05IDRoNnYySDlWNHptMTEgMTVINHYtMmgxNnYyem0wLTVINFY4aDN2MmgyVjhoNnYyaDJWOGgzdjZ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiY2hhbmdlLWhpc3RvcnlcIj48cGF0aCBkPVwiTTEyIDcuNzdMMTguMzkgMThINS42MUwxMiA3Ljc3TTEyIDRMMiAyMGgyMEwxMiA0elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImNoZWNrXCI+PHBhdGggZD1cIk05IDE2LjE3TDQuODMgMTJsLTEuNDIgMS40MUw5IDE5IDIxIDdsLTEuNDEtMS40MXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJjaGVjay1ib3hcIj48cGF0aCBkPVwiTTE5IDNINWMtMS4xMSAwLTIgLjktMiAydjE0YzAgMS4xLjg5IDIgMiAyaDE0YzEuMTEgMCAyLS45IDItMlY1YzAtMS4xLS44OS0yLTItMnptLTkgMTRsLTUtNSAxLjQxLTEuNDFMMTAgMTQuMTdsNy41OS03LjU5TDE5IDhsLTkgOXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJjaGVjay1ib3gtb3V0bGluZS1ibGFua1wiPjxwYXRoIGQ9XCJNMTkgNXYxNEg1VjVoMTRtMC0ySDVjLTEuMSAwLTIgLjktMiAydjE0YzAgMS4xLjkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJjaGVjay1jaXJjbGVcIj48cGF0aCBkPVwiTTEyIDJDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bS0yIDE1bC01LTUgMS40MS0xLjQxTDEwIDE0LjE3bDcuNTktNy41OUwxOSA4bC05IDl6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiY2hldnJvbi1sZWZ0XCI+PHBhdGggZD1cIk0xNS40MSA3LjQxTDE0IDZsLTYgNiA2IDYgMS40MS0xLjQxTDEwLjgzIDEyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImNoZXZyb24tcmlnaHRcIj48cGF0aCBkPVwiTTEwIDZMOC41OSA3LjQxIDEzLjE3IDEybC00LjU4IDQuNTlMMTAgMThsNi02elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImNocm9tZS1yZWFkZXItbW9kZVwiPjxwYXRoIGQ9XCJNMTMgMTJoN3YxLjVoLTd6bTAtMi41aDdWMTFoLTd6bTAgNWg3VjE2aC03ek0yMSA0SDNjLTEuMSAwLTIgLjktMiAydjEzYzAgMS4xLjkgMiAyIDJoMThjMS4xIDAgMi0uOSAyLTJWNmMwLTEuMS0uOS0yLTItMnptMCAxNWgtOVY2aDl2MTN6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiY2xhc3NcIj48cGF0aCBkPVwiTTE4IDJINmMtMS4xIDAtMiAuOS0yIDJ2MTZjMCAxLjEuOSAyIDIgMmgxMmMxLjEgMCAyLS45IDItMlY0YzAtMS4xLS45LTItMi0yek02IDRoNXY4bC0yLjUtMS41TDYgMTJWNHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJjbGVhclwiPjxwYXRoIGQ9XCJNMTkgNi40MUwxNy41OSA1IDEyIDEwLjU5IDYuNDEgNSA1IDYuNDEgMTAuNTkgMTIgNSAxNy41OSA2LjQxIDE5IDEyIDEzLjQxIDE3LjU5IDE5IDE5IDE3LjU5IDEzLjQxIDEyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImNsb3NlXCI+PHBhdGggZD1cIk0xOSA2LjQxTDE3LjU5IDUgMTIgMTAuNTkgNi40MSA1IDUgNi40MSAxMC41OSAxMiA1IDE3LjU5IDYuNDEgMTkgMTIgMTMuNDEgMTcuNTkgMTkgMTkgMTcuNTkgMTMuNDEgMTJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiY2xvdWRcIj48cGF0aCBkPVwiTTE5LjM1IDEwLjA0QzE4LjY3IDYuNTkgMTUuNjQgNCAxMiA0IDkuMTEgNCA2LjYgNS42NCA1LjM1IDguMDQgMi4zNCA4LjM2IDAgMTAuOTEgMCAxNGMwIDMuMzEgMi42OSA2IDYgNmgxM2MyLjc2IDAgNS0yLjI0IDUtNSAwLTIuNjQtMi4wNS00Ljc4LTQuNjUtNC45NnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJjbG91ZC1jaXJjbGVcIj48cGF0aCBkPVwiTTEyIDJDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bTQuNSAxNEg4Yy0xLjY2IDAtMy0xLjM0LTMtM3MxLjM0LTMgMy0zbC4xNC4wMUM4LjU4IDguMjggMTAuMTMgNyAxMiA3YzIuMjEgMCA0IDEuNzkgNCA0aC41YzEuMzggMCAyLjUgMS4xMiAyLjUgMi41UzE3Ljg4IDE2IDE2LjUgMTZ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiY2xvdWQtZG9uZVwiPjxwYXRoIGQ9XCJNMTkuMzUgMTAuMDRDMTguNjcgNi41OSAxNS42NCA0IDEyIDQgOS4xMSA0IDYuNiA1LjY0IDUuMzUgOC4wNCAyLjM0IDguMzYgMCAxMC45MSAwIDE0YzAgMy4zMSAyLjY5IDYgNiA2aDEzYzIuNzYgMCA1LTIuMjQgNS01IDAtMi42NC0yLjA1LTQuNzgtNC42NS00Ljk2ek0xMCAxN2wtMy41LTMuNSAxLjQxLTEuNDFMMTAgMTQuMTcgMTUuMTggOWwxLjQxIDEuNDFMMTAgMTd6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiY2xvdWQtZG93bmxvYWRcIj48cGF0aCBkPVwiTTE5LjM1IDEwLjA0QzE4LjY3IDYuNTkgMTUuNjQgNCAxMiA0IDkuMTEgNCA2LjYgNS42NCA1LjM1IDguMDQgMi4zNCA4LjM2IDAgMTAuOTEgMCAxNGMwIDMuMzEgMi42OSA2IDYgNmgxM2MyLjc2IDAgNS0yLjI0IDUtNSAwLTIuNjQtMi4wNS00Ljc4LTQuNjUtNC45NnpNMTcgMTNsLTUgNS01LTVoM1Y5aDR2NGgzelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImNsb3VkLW9mZlwiPjxwYXRoIGQ9XCJNMTkuMzUgMTAuMDRDMTguNjcgNi41OSAxNS42NCA0IDEyIDRjLTEuNDggMC0yLjg1LjQzLTQuMDEgMS4xN2wxLjQ2IDEuNDZDMTAuMjEgNi4yMyAxMS4wOCA2IDEyIDZjMy4wNCAwIDUuNSAyLjQ2IDUuNSA1LjV2LjVIMTljMS42NiAwIDMgMS4zNCAzIDMgMCAxLjEzLS42NCAyLjExLTEuNTYgMi42MmwxLjQ1IDEuNDVDMjMuMTYgMTguMTYgMjQgMTYuNjggMjQgMTVjMC0yLjY0LTIuMDUtNC43OC00LjY1LTQuOTZ6TTMgNS4yN2wyLjc1IDIuNzRDMi41NiA4LjE1IDAgMTAuNzcgMCAxNGMwIDMuMzEgMi42OSA2IDYgNmgxMS43M2wyIDJMMjEgMjAuNzMgNC4yNyA0IDMgNS4yN3pNNy43MyAxMGw4IDhINmMtMi4yMSAwLTQtMS43OS00LTRzMS43OS00IDQtNGgxLjczelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImNsb3VkLXF1ZXVlXCI+PHBhdGggZD1cIk0xOS4zNSAxMC4wNEMxOC42NyA2LjU5IDE1LjY0IDQgMTIgNCA5LjExIDQgNi42IDUuNjQgNS4zNSA4LjA0IDIuMzQgOC4zNiAwIDEwLjkxIDAgMTRjMCAzLjMxIDIuNjkgNiA2IDZoMTNjMi43NiAwIDUtMi4yNCA1LTUgMC0yLjY0LTIuMDUtNC43OC00LjY1LTQuOTZ6TTE5IDE4SDZjLTIuMjEgMC00LTEuNzktNC00czEuNzktNCA0LTRoLjcxQzcuMzcgNy42OSA5LjQ4IDYgMTIgNmMzLjA0IDAgNS41IDIuNDYgNS41IDUuNXYuNUgxOWMxLjY2IDAgMyAxLjM0IDMgM3MtMS4zNCAzLTMgM3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJjbG91ZC11cGxvYWRcIj48cGF0aCBkPVwiTTE5LjM1IDEwLjA0QzE4LjY3IDYuNTkgMTUuNjQgNCAxMiA0IDkuMTEgNCA2LjYgNS42NCA1LjM1IDguMDQgMi4zNCA4LjM2IDAgMTAuOTEgMCAxNGMwIDMuMzEgMi42OSA2IDYgNmgxM2MyLjc2IDAgNS0yLjI0IDUtNSAwLTIuNjQtMi4wNS00Ljc4LTQuNjUtNC45NnpNMTQgMTN2NGgtNHYtNEg3bDUtNSA1IDVoLTN6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiY29kZVwiPjxwYXRoIGQ9XCJNOS40IDE2LjZMNC44IDEybDQuNi00LjZMOCA2bC02IDYgNiA2IDEuNC0xLjR6bTUuMiAwbDQuNi00LjYtNC42LTQuNkwxNiA2bDYgNi02IDYtMS40LTEuNHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJjb21wYXJlLWFycm93c1wiPjxwYXRoIGQ9XCJNOS4wMSAxNEgydjJoNy4wMXYzTDEzIDE1bC0zLjk5LTR2M3ptNS45OC0xdi0zSDIyVjhoLTcuMDFWNUwxMSA5bDMuOTkgNHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJjb250ZW50LWNvcHlcIj48cGF0aCBkPVwiTTE2IDFINGMtMS4xIDAtMiAuOS0yIDJ2MTRoMlYzaDEyVjF6bTMgNEg4Yy0xLjEgMC0yIC45LTIgMnYxNGMwIDEuMS45IDIgMiAyaDExYzEuMSAwIDItLjkgMi0yVjdjMC0xLjEtLjktMi0yLTJ6bTAgMTZIOFY3aDExdjE0elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImNvbnRlbnQtY3V0XCI+PHBhdGggZD1cIk05LjY0IDcuNjRjLjIzLS41LjM2LTEuMDUuMzYtMS42NCAwLTIuMjEtMS43OS00LTQtNFMyIDMuNzkgMiA2czEuNzkgNCA0IDRjLjU5IDAgMS4xNC0uMTMgMS42NC0uMzZMMTAgMTJsLTIuMzYgMi4zNkM3LjE0IDE0LjEzIDYuNTkgMTQgNiAxNGMtMi4yMSAwLTQgMS43OS00IDRzMS43OSA0IDQgNCA0LTEuNzkgNC00YzAtLjU5LS4xMy0xLjE0LS4zNi0xLjY0TDEyIDE0bDcgN2gzdi0xTDkuNjQgNy42NHpNNiA4Yy0xLjEgMC0yLS44OS0yLTJzLjktMiAyLTIgMiAuODkgMiAyLS45IDItMiAyem0wIDEyYy0xLjEgMC0yLS44OS0yLTJzLjktMiAyLTIgMiAuODkgMiAyLS45IDItMiAyem02LTcuNWMtLjI4IDAtLjUtLjIyLS41LS41cy4yMi0uNS41LS41LjUuMjIuNS41LS4yMi41LS41LjV6TTE5IDNsLTYgNiAyIDIgNy03VjN6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiY29udGVudC1wYXN0ZVwiPjxwYXRoIGQ9XCJNMTkgMmgtNC4xOEMxNC40Ljg0IDEzLjMgMCAxMiAwYy0xLjMgMC0yLjQuODQtMi44MiAySDVjLTEuMSAwLTIgLjktMiAydjE2YzAgMS4xLjkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNGMwLTEuMS0uOS0yLTItMnptLTcgMGMuNTUgMCAxIC40NSAxIDFzLS40NSAxLTEgMS0xLS40NS0xLTEgLjQ1LTEgMS0xem03IDE4SDVWNGgydjNoMTBWNGgydjE2elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImNvcHlyaWdodFwiPjxwYXRoIGQ9XCJNMTAuMDggMTAuODZjLjA1LS4zMy4xNi0uNjIuMy0uODdzLjM0LS40Ni41OS0uNjJjLjI0LS4xNS41NC0uMjIuOTEtLjIzLjIzLjAxLjQ0LjA1LjYzLjEzLjIuMDkuMzguMjEuNTIuMzZzLjI1LjMzLjM0LjUzLjEzLjQyLjE0LjY0aDEuNzljLS4wMi0uNDctLjExLS45LS4yOC0xLjI5cy0uNC0uNzMtLjctMS4wMS0uNjYtLjUtMS4wOC0uNjYtLjg4LS4yMy0xLjM5LS4yM2MtLjY1IDAtMS4yMi4xMS0xLjcuMzRzLS44OC41My0xLjIuOTItLjU2Ljg0LS43MSAxLjM2UzggMTEuMjkgOCAxMS44N3YuMjdjMCAuNTguMDggMS4xMi4yMyAxLjY0cy4zOS45Ny43MSAxLjM1LjcyLjY5IDEuMi45MSAxLjA1LjM0IDEuNy4zNGMuNDcgMCAuOTEtLjA4IDEuMzItLjIzcy43Ny0uMzYgMS4wOC0uNjMuNTYtLjU4Ljc0LS45NC4yOS0uNzQuMy0xLjE1aC0xLjc5Yy0uMDEuMjEtLjA2LjQtLjE1LjU4cy0uMjEuMzMtLjM2LjQ2LS4zMi4yMy0uNTIuM2MtLjE5LjA3LS4zOS4wOS0uNi4xLS4zNi0uMDEtLjY2LS4wOC0uODktLjIzLS4yNS0uMTYtLjQ1LS4zNy0uNTktLjYycy0uMjUtLjU1LS4zLS44OC0uMDgtLjY3LS4wOC0xdi0uMjdjMC0uMzUuMDMtLjY4LjA4LTEuMDF6TTEyIDJDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bTAgMThjLTQuNDEgMC04LTMuNTktOC04czMuNTktOCA4LTggOCAzLjU5IDggOC0zLjU5IDgtOCA4elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImNyZWF0ZVwiPjxwYXRoIGQ9XCJNMyAxNy4yNVYyMWgzLjc1TDE3LjgxIDkuOTRsLTMuNzUtMy43NUwzIDE3LjI1ek0yMC43MSA3LjA0Yy4zOS0uMzkuMzktMS4wMiAwLTEuNDFsLTIuMzQtMi4zNGMtLjM5LS4zOS0xLjAyLS4zOS0xLjQxIDBsLTEuODMgMS44MyAzLjc1IDMuNzUgMS44My0xLjgzelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImNyZWF0ZS1uZXctZm9sZGVyXCI+PHBhdGggZD1cIk0yMCA2aC04bC0yLTJINGMtMS4xMSAwLTEuOTkuODktMS45OSAyTDIgMThjMCAxLjExLjg5IDIgMiAyaDE2YzEuMTEgMCAyLS44OSAyLTJWOGMwLTEuMTEtLjg5LTItMi0yem0tMSA4aC0zdjNoLTJ2LTNoLTN2LTJoM1Y5aDJ2M2gzdjJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiY3JlZGl0LWNhcmRcIj48cGF0aCBkPVwiTTIwIDRINGMtMS4xMSAwLTEuOTkuODktMS45OSAyTDIgMThjMCAxLjExLjg5IDIgMiAyaDE2YzEuMTEgMCAyLS44OSAyLTJWNmMwLTEuMTEtLjg5LTItMi0yem0wIDE0SDR2LTZoMTZ2NnptMC0xMEg0VjZoMTZ2MnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJkYXNoYm9hcmRcIj48cGF0aCBkPVwiTTMgMTNoOFYzSDN2MTB6bTAgOGg4di02SDN2NnptMTAgMGg4VjExaC04djEwem0wLTE4djZoOFYzaC04elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImRhdGUtcmFuZ2VcIj48cGF0aCBkPVwiTTkgMTFIN3YyaDJ2LTJ6bTQgMGgtMnYyaDJ2LTJ6bTQgMGgtMnYyaDJ2LTJ6bTItN2gtMVYyaC0ydjJIOFYySDZ2Mkg1Yy0xLjExIDAtMS45OS45LTEuOTkgMkwzIDIwYzAgMS4xLjg5IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjZjMC0xLjEtLjktMi0yLTJ6bTAgMTZINVY5aDE0djExelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImRlbGV0ZVwiPjxwYXRoIGQ9XCJNNiAxOWMwIDEuMS45IDIgMiAyaDhjMS4xIDAgMi0uOSAyLTJWN0g2djEyek0xOSA0aC0zLjVsLTEtMWgtNWwtMSAxSDV2MmgxNFY0elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImRlbGV0ZS1mb3JldmVyXCI+PHBhdGggZD1cIk02IDE5YzAgMS4xLjkgMiAyIDJoOGMxLjEgMCAyLS45IDItMlY3SDZ2MTJ6bTIuNDYtNy4xMmwxLjQxLTEuNDFMMTIgMTIuNTlsMi4xMi0yLjEyIDEuNDEgMS40MUwxMy40MSAxNGwyLjEyIDIuMTItMS40MSAxLjQxTDEyIDE1LjQxbC0yLjEyIDIuMTItMS40MS0xLjQxTDEwLjU5IDE0bC0yLjEzLTIuMTJ6TTE1LjUgNGwtMS0xaC01bC0xIDFINXYyaDE0VjR6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZGVsZXRlLXN3ZWVwXCI+PHBhdGggZD1cIk0xNSAxNmg0djJoLTR6bTAtOGg3djJoLTd6bTAgNGg2djJoLTZ6TTMgMThjMCAxLjEuOSAyIDIgMmg2YzEuMSAwIDItLjkgMi0yVjhIM3YxMHpNMTQgNWgtM2wtMS0xSDZMNSA1SDJ2MmgxMnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJkZXNjcmlwdGlvblwiPjxwYXRoIGQ9XCJNMTQgMkg2Yy0xLjEgMC0xLjk5LjktMS45OSAyTDQgMjBjMCAxLjEuODkgMiAxLjk5IDJIMThjMS4xIDAgMi0uOSAyLTJWOGwtNi02em0yIDE2SDh2LTJoOHYyem0wLTRIOHYtMmg4djJ6bS0zLTVWMy41TDE4LjUgOUgxM3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJkbnNcIj48cGF0aCBkPVwiTTIwIDEzSDRjLS41NSAwLTEgLjQ1LTEgMXY2YzAgLjU1LjQ1IDEgMSAxaDE2Yy41NSAwIDEtLjQ1IDEtMXYtNmMwLS41NS0uNDUtMS0xLTF6TTcgMTljLTEuMSAwLTItLjktMi0ycy45LTIgMi0yIDIgLjkgMiAyLS45IDItMiAyek0yMCAzSDRjLS41NSAwLTEgLjQ1LTEgMXY2YzAgLjU1LjQ1IDEgMSAxaDE2Yy41NSAwIDEtLjQ1IDEtMVY0YzAtLjU1LS40NS0xLTEtMXpNNyA5Yy0xLjEgMC0yLS45LTItMnMuOS0yIDItMiAyIC45IDIgMi0uOSAyLTIgMnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJkb25lXCI+PHBhdGggZD1cIk05IDE2LjJMNC44IDEybC0xLjQgMS40TDkgMTkgMjEgN2wtMS40LTEuNEw5IDE2LjJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZG9uZS1hbGxcIj48cGF0aCBkPVwiTTE4IDdsLTEuNDEtMS40MS02LjM0IDYuMzQgMS40MSAxLjQxTDE4IDd6bTQuMjQtMS40MUwxMS42NiAxNi4xNyA3LjQ4IDEybC0xLjQxIDEuNDFMMTEuNjYgMTlsMTItMTItMS40Mi0xLjQxek0uNDEgMTMuNDFMNiAxOWwxLjQxLTEuNDFMMS44MyAxMiAuNDEgMTMuNDF6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZG9udXQtbGFyZ2VcIj48cGF0aCBkPVwiTTExIDUuMDhWMmMtNSAuNS05IDQuODEtOSAxMHM0IDkuNSA5IDEwdi0zLjA4Yy0zLS40OC02LTMuNC02LTYuOTJzMy02LjQ0IDYtNi45MnpNMTguOTcgMTFIMjJjLS40Ny01LTQtOC41My05LTl2My4wOEMxNiA1LjUxIDE4LjU0IDggMTguOTcgMTF6TTEzIDE4LjkyVjIyYzUtLjQ3IDguNTMtNCA5LTloLTMuMDNjLS40MyAzLTIuOTcgNS40OS01Ljk3IDUuOTJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZG9udXQtc21hbGxcIj48cGF0aCBkPVwiTTExIDkuMTZWMmMtNSAuNS05IDQuNzktOSAxMHM0IDkuNSA5IDEwdi03LjE2Yy0xLS40MS0yLTEuNTItMi0yLjg0czEtMi40MyAyLTIuODR6TTE0Ljg2IDExSDIyYy0uNDgtNC43NS00LTguNTMtOS05djcuMTZjMSAuMyAxLjUyLjk4IDEuODYgMS44NHpNMTMgMTQuODRWMjJjNS0uNDcgOC41Mi00LjI1IDktOWgtNy4xNGMtLjM0Ljg2LS44NiAxLjU0LTEuODYgMS44NHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJkcmFmdHNcIj48cGF0aCBkPVwiTTIxLjk5IDhjMC0uNzItLjM3LTEuMzUtLjk0LTEuN0wxMiAxIDIuOTUgNi4zQzIuMzggNi42NSAyIDcuMjggMiA4djEwYzAgMS4xLjkgMiAyIDJoMTZjMS4xIDAgMi0uOSAyLTJsLS4wMS0xMHpNMTIgMTNMMy43NCA3Ljg0IDEyIDNsOC4yNiA0Ljg0TDEyIDEzelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImVqZWN0XCI+PHBhdGggZD1cIk01IDE3aDE0djJINXptNy0xMkw1LjMzIDE1aDEzLjM0elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImVycm9yXCI+PHBhdGggZD1cIk0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0xIDE1aC0ydi0yaDJ2MnptMC00aC0yVjdoMnY2elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImVycm9yLW91dGxpbmVcIj48cGF0aCBkPVwiTTExIDE1aDJ2MmgtMnptMC04aDJ2NmgtMnptLjk5LTVDNi40NyAyIDIgNi40OCAyIDEyczQuNDcgMTAgOS45OSAxMEMxNy41MiAyMiAyMiAxNy41MiAyMiAxMlMxNy41MiAyIDExLjk5IDJ6TTEyIDIwYy00LjQyIDAtOC0zLjU4LTgtOHMzLjU4LTggOC04IDggMy41OCA4IDgtMy41OCA4LTggOHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJldXJvLXN5bWJvbFwiPjxwYXRoIGQ9XCJNMTUgMTguNWMtMi41MSAwLTQuNjgtMS40Mi01Ljc2LTMuNUgxNXYtMkg4LjU4Yy0uMDUtLjMzLS4wOC0uNjYtLjA4LTFzLjAzLS42Ny4wOC0xSDE1VjlIOS4yNEMxMC4zMiA2LjkyIDEyLjUgNS41IDE1IDUuNWMxLjYxIDAgMy4wOS41OSA0LjIzIDEuNTdMMjEgNS4zQzE5LjQxIDMuODcgMTcuMyAzIDE1IDNjLTMuOTIgMC03LjI0IDIuNTEtOC40OCA2SDN2MmgzLjA2Yy0uMDQuMzMtLjA2LjY2LS4wNiAxIDAgLjM0LjAyLjY3LjA2IDFIM3YyaDMuNTJjMS4yNCAzLjQ5IDQuNTYgNiA4LjQ4IDYgMi4zMSAwIDQuNDEtLjg3IDYtMi4zbC0xLjc4LTEuNzdjLTEuMTMuOTgtMi42IDEuNTctNC4yMiAxLjU3elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImV2ZW50XCI+PHBhdGggZD1cIk0xNyAxMmgtNXY1aDV2LTV6TTE2IDF2Mkg4VjFINnYySDVjLTEuMTEgMC0xLjk5LjktMS45OSAyTDMgMTljMCAxLjEuODkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMmgtMVYxaC0yem0zIDE4SDVWOGgxNHYxMXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJldmVudC1zZWF0XCI+PHBhdGggZD1cIk00IDE4djNoM3YtM2gxMHYzaDN2LTZINHptMTUtOGgzdjNoLTN6TTIgMTBoM3YzSDJ6bTE1IDNIN1Y1YzAtMS4xLjktMiAyLTJoNmMxLjEgMCAyIC45IDIgMnY4elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImV4aXQtdG8tYXBwXCI+PHBhdGggZD1cIk0xMC4wOSAxNS41OUwxMS41IDE3bDUtNS01LTUtMS40MSAxLjQxTDEyLjY3IDExSDN2Mmg5LjY3bC0yLjU4IDIuNTl6TTE5IDNINWMtMS4xMSAwLTIgLjktMiAydjRoMlY1aDE0djE0SDV2LTRIM3Y0YzAgMS4xLjg5IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZXhwYW5kLWxlc3NcIj48cGF0aCBkPVwiTTEyIDhsLTYgNiAxLjQxIDEuNDFMMTIgMTAuODNsNC41OSA0LjU4TDE4IDE0elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImV4cGFuZC1tb3JlXCI+PHBhdGggZD1cIk0xNi41OSA4LjU5TDEyIDEzLjE3IDcuNDEgOC41OSA2IDEwbDYgNiA2LTZ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZXhwbG9yZVwiPjxwYXRoIGQ9XCJNMTIgMTAuOWMtLjYxIDAtMS4xLjQ5LTEuMSAxLjFzLjQ5IDEuMSAxLjEgMS4xYy42MSAwIDEuMS0uNDkgMS4xLTEuMXMtLjQ5LTEuMS0xLjEtMS4xek0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0yLjE5IDEyLjE5TDYgMThsMy44MS04LjE5TDE4IDZsLTMuODEgOC4xOXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJleHRlbnNpb25cIj48cGF0aCBkPVwiTTIwLjUgMTFIMTlWN2MwLTEuMS0uOS0yLTItMmgtNFYzLjVDMTMgMi4xMiAxMS44OCAxIDEwLjUgMVM4IDIuMTIgOCAzLjVWNUg0Yy0xLjEgMC0xLjk5LjktMS45OSAydjMuOEgzLjVjMS40OSAwIDIuNyAxLjIxIDIuNyAyLjdzLTEuMjEgMi43LTIuNyAyLjdIMlYyMGMwIDEuMS45IDIgMiAyaDMuOHYtMS41YzAtMS40OSAxLjIxLTIuNyAyLjctMi43IDEuNDkgMCAyLjcgMS4yMSAyLjcgMi43VjIySDE3YzEuMSAwIDItLjkgMi0ydi00aDEuNWMxLjM4IDAgMi41LTEuMTIgMi41LTIuNVMyMS44OCAxMSAyMC41IDExelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImZhY2VcIj48cGF0aCBkPVwiTTkgMTEuNzVjLS42OSAwLTEuMjUuNTYtMS4yNSAxLjI1cy41NiAxLjI1IDEuMjUgMS4yNSAxLjI1LS41NiAxLjI1LTEuMjUtLjU2LTEuMjUtMS4yNS0xLjI1em02IDBjLS42OSAwLTEuMjUuNTYtMS4yNSAxLjI1cy41NiAxLjI1IDEuMjUgMS4yNSAxLjI1LS41NiAxLjI1LTEuMjUtLjU2LTEuMjUtMS4yNS0xLjI1ek0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0wIDE4Yy00LjQxIDAtOC0zLjU5LTgtOCAwLS4yOS4wMi0uNTguMDUtLjg2IDIuMzYtMS4wNSA0LjIzLTIuOTggNS4yMS01LjM3QzExLjA3IDguMzMgMTQuMDUgMTAgMTcuNDIgMTBjLjc4IDAgMS41My0uMDkgMi4yNS0uMjYuMjEuNzEuMzMgMS40Ny4zMyAyLjI2IDAgNC40MS0zLjU5IDgtOCA4elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImZhdm9yaXRlXCI+PHBhdGggZD1cIk0xMiAyMS4zNWwtMS40NS0xLjMyQzUuNCAxNS4zNiAyIDEyLjI4IDIgOC41IDIgNS40MiA0LjQyIDMgNy41IDNjMS43NCAwIDMuNDEuODEgNC41IDIuMDlDMTMuMDkgMy44MSAxNC43NiAzIDE2LjUgMyAxOS41OCAzIDIyIDUuNDIgMjIgOC41YzAgMy43OC0zLjQgNi44Ni04LjU1IDExLjU0TDEyIDIxLjM1elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImZhdm9yaXRlLWJvcmRlclwiPjxwYXRoIGQ9XCJNMTYuNSAzYy0xLjc0IDAtMy40MS44MS00LjUgMi4wOUMxMC45MSAzLjgxIDkuMjQgMyA3LjUgMyA0LjQyIDMgMiA1LjQyIDIgOC41YzAgMy43OCAzLjQgNi44NiA4LjU1IDExLjU0TDEyIDIxLjM1bDEuNDUtMS4zMkMxOC42IDE1LjM2IDIyIDEyLjI4IDIyIDguNSAyMiA1LjQyIDE5LjU4IDMgMTYuNSAzem0tNC40IDE1LjU1bC0uMS4xLS4xLS4xQzcuMTQgMTQuMjQgNCAxMS4zOSA0IDguNSA0IDYuNSA1LjUgNSA3LjUgNWMxLjU0IDAgMy4wNC45OSAzLjU3IDIuMzZoMS44N0MxMy40NiA1Ljk5IDE0Ljk2IDUgMTYuNSA1YzIgMCAzLjUgMS41IDMuNSAzLjUgMCAyLjg5LTMuMTQgNS43NC03LjkgMTAuMDV6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZmVlZGJhY2tcIj48cGF0aCBkPVwiTTIwIDJINGMtMS4xIDAtMS45OS45LTEuOTkgMkwyIDIybDQtNGgxNGMxLjEgMCAyLS45IDItMlY0YzAtMS4xLS45LTItMi0yem0tNyAxMmgtMnYtMmgydjJ6bTAtNGgtMlY2aDJ2NHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJmaWxlLWRvd25sb2FkXCI+PHBhdGggZD1cIk0xOSA5aC00VjNIOXY2SDVsNyA3IDctN3pNNSAxOHYyaDE0di0ySDV6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZmlsZS11cGxvYWRcIj48cGF0aCBkPVwiTTkgMTZoNnYtNmg0bC03LTctNyA3aDR6bS00IDJoMTR2Mkg1elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImZpbHRlci1saXN0XCI+PHBhdGggZD1cIk0xMCAxOGg0di0yaC00djJ6TTMgNnYyaDE4VjZIM3ptMyA3aDEydi0ySDZ2MnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJmaW5kLWluLXBhZ2VcIj48cGF0aCBkPVwiTTIwIDE5LjU5VjhsLTYtNkg2Yy0xLjEgMC0xLjk5LjktMS45OSAyTDQgMjBjMCAxLjEuODkgMiAxLjk5IDJIMThjLjQ1IDAgLjg1LS4xNSAxLjE5LS40bC00LjQzLTQuNDNjLS44LjUyLTEuNzQuODMtMi43Ni44My0yLjc2IDAtNS0yLjI0LTUtNXMyLjI0LTUgNS01IDUgMi4yNCA1IDVjMCAxLjAyLS4zMSAxLjk2LS44MyAyLjc1TDIwIDE5LjU5ek05IDEzYzAgMS42NiAxLjM0IDMgMyAzczMtMS4zNCAzLTMtMS4zNC0zLTMtMy0zIDEuMzQtMyAzelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImZpbmQtcmVwbGFjZVwiPjxwYXRoIGQ9XCJNMTEgNmMxLjM4IDAgMi42My41NiAzLjU0IDEuNDZMMTIgMTBoNlY0bC0yLjA1IDIuMDVDMTQuNjggNC43OCAxMi45MyA0IDExIDRjLTMuNTMgMC02LjQzIDIuNjEtNi45MiA2SDYuMWMuNDYtMi4yOCAyLjQ4LTQgNC45LTR6bTUuNjQgOS4xNGMuNjYtLjkgMS4xMi0xLjk3IDEuMjgtMy4xNEgxNS45Yy0uNDYgMi4yOC0yLjQ4IDQtNC45IDQtMS4zOCAwLTIuNjMtLjU2LTMuNTQtMS40NkwxMCAxMkg0djZsMi4wNS0yLjA1QzcuMzIgMTcuMjIgOS4wNyAxOCAxMSAxOGMxLjU1IDAgMi45OC0uNTEgNC4xNC0xLjM2TDIwIDIxLjQ5IDIxLjQ5IDIwbC00Ljg1LTQuODZ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZmluZ2VycHJpbnRcIj48cGF0aCBkPVwiTTE3LjgxIDQuNDdjLS4wOCAwLS4xNi0uMDItLjIzLS4wNkMxNS42NiAzLjQyIDE0IDMgMTIuMDEgM2MtMS45OCAwLTMuODYuNDctNS41NyAxLjQxLS4yNC4xMy0uNTQuMDQtLjY4LS4yLS4xMy0uMjQtLjA0LS41NS4yLS42OEM3LjgyIDIuNTIgOS44NiAyIDEyLjAxIDJjMi4xMyAwIDMuOTkuNDcgNi4wMyAxLjUyLjI1LjEzLjM0LjQzLjIxLjY3LS4wOS4xOC0uMjYuMjgtLjQ0LjI4ek0zLjUgOS43MmMtLjEgMC0uMi0uMDMtLjI5LS4wOS0uMjMtLjE2LS4yOC0uNDctLjEyLS43Ljk5LTEuNCAyLjI1LTIuNSAzLjc1LTMuMjdDOS45OCA0LjA0IDE0IDQuMDMgMTcuMTUgNS42NWMxLjUuNzcgMi43NiAxLjg2IDMuNzUgMy4yNS4xNi4yMi4xMS41NC0uMTIuNy0uMjMuMTYtLjU0LjExLS43LS4xMi0uOS0xLjI2LTIuMDQtMi4yNS0zLjM5LTIuOTQtMi44Ny0xLjQ3LTYuNTQtMS40Ny05LjQuMDEtMS4zNi43LTIuNSAxLjctMy40IDIuOTYtLjA4LjE0LS4yMy4yMS0uMzkuMjF6bTYuMjUgMTIuMDdjLS4xMyAwLS4yNi0uMDUtLjM1LS4xNS0uODctLjg3LTEuMzQtMS40My0yLjAxLTIuNjQtLjY5LTEuMjMtMS4wNS0yLjczLTEuMDUtNC4zNCAwLTIuOTcgMi41NC01LjM5IDUuNjYtNS4zOXM1LjY2IDIuNDIgNS42NiA1LjM5YzAgLjI4LS4yMi41LS41LjVzLS41LS4yMi0uNS0uNWMwLTIuNDItMi4wOS00LjM5LTQuNjYtNC4zOS0yLjU3IDAtNC42NiAxLjk3LTQuNjYgNC4zOSAwIDEuNDQuMzIgMi43Ny45MyAzLjg1LjY0IDEuMTUgMS4wOCAxLjY0IDEuODUgMi40Mi4xOS4yLjE5LjUxIDAgLjcxLS4xMS4xLS4yNC4xNS0uMzcuMTV6bTcuMTctMS44NWMtMS4xOSAwLTIuMjQtLjMtMy4xLS44OS0xLjQ5LTEuMDEtMi4zOC0yLjY1LTIuMzgtNC4zOSAwLS4yOC4yMi0uNS41LS41cy41LjIyLjUuNWMwIDEuNDEuNzIgMi43NCAxLjk0IDMuNTYuNzEuNDggMS41NC43MSAyLjU0LjcxLjI0IDAgLjY0LS4wMyAxLjA0LS4xLjI3LS4wNS41My4xMy41OC40MS4wNS4yNy0uMTMuNTMtLjQxLjU4LS41Ny4xMS0xLjA3LjEyLTEuMjEuMTJ6TTE0LjkxIDIyYy0uMDQgMC0uMDktLjAxLS4xMy0uMDItMS41OS0uNDQtMi42My0xLjAzLTMuNzItMi4xLTEuNC0xLjM5LTIuMTctMy4yNC0yLjE3LTUuMjIgMC0xLjYyIDEuMzgtMi45NCAzLjA4LTIuOTQgMS43IDAgMy4wOCAxLjMyIDMuMDggMi45NCAwIDEuMDcuOTMgMS45NCAyLjA4IDEuOTRzMi4wOC0uODcgMi4wOC0xLjk0YzAtMy43Ny0zLjI1LTYuODMtNy4yNS02LjgzLTIuODQgMC01LjQ0IDEuNTgtNi42MSA0LjAzLS4zOS44MS0uNTkgMS43Ni0uNTkgMi44IDAgLjc4LjA3IDIuMDEuNjcgMy42MS4xLjI2LS4wMy41NS0uMjkuNjQtLjI2LjEtLjU1LS4wNC0uNjQtLjI5LS40OS0xLjMxLS43My0yLjYxLS43My0zLjk2IDAtMS4yLjIzLTIuMjkuNjgtMy4yNCAxLjMzLTIuNzkgNC4yOC00LjYgNy41MS00LjYgNC41NSAwIDguMjUgMy41MSA4LjI1IDcuODMgMCAxLjYyLTEuMzggMi45NC0zLjA4IDIuOTRzLTMuMDgtMS4zMi0zLjA4LTIuOTRjMC0xLjA3LS45My0xLjk0LTIuMDgtMS45NHMtMi4wOC44Ny0yLjA4IDEuOTRjMCAxLjcxLjY2IDMuMzEgMS44NyA0LjUxLjk1Ljk0IDEuODYgMS40NiAzLjI3IDEuODUuMjcuMDcuNDIuMzUuMzUuNjEtLjA1LjIzLS4yNi4zOC0uNDcuMzh6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZmlyc3QtcGFnZVwiPjxwYXRoIGQ9XCJNMTguNDEgMTYuNTlMMTMuODIgMTJsNC41OS00LjU5TDE3IDZsLTYgNiA2IDZ6TTYgNmgydjEySDZ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZmxhZ1wiPjxwYXRoIGQ9XCJNMTQuNCA2TDE0IDRINXYxN2gydi03aDUuNmwuNCAyaDdWNnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJmbGlnaHQtbGFuZFwiPjxwYXRoIGQ9XCJNMi41IDE5aDE5djJoLTE5em03LjE4LTUuNzNsNC4zNSAxLjE2IDUuMzEgMS40MmMuOC4yMSAxLjYyLS4yNiAxLjg0LTEuMDYuMjEtLjgtLjI2LTEuNjItMS4wNi0xLjg0bC01LjMxLTEuNDItMi43Ni05LjAyTDEwLjEyIDJ2OC4yOEw1LjE1IDguOTVsLS45My0yLjMyLTEuNDUtLjM5djUuMTdsMS42LjQzIDUuMzEgMS40M3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJmbGlnaHQtdGFrZW9mZlwiPjxwYXRoIGQ9XCJNMi41IDE5aDE5djJoLTE5em0xOS41Ny05LjM2Yy0uMjEtLjgtMS4wNC0xLjI4LTEuODQtMS4wNkwxNC45MiAxMGwtNi45LTYuNDMtMS45My41MSA0LjE0IDcuMTctNC45NyAxLjMzLTEuOTctMS41NC0xLjQ1LjM5IDEuODIgMy4xNi43NyAxLjMzIDEuNi0uNDMgNS4zMS0xLjQyIDQuMzUtMS4xNkwyMSAxMS40OWMuODEtLjIzIDEuMjgtMS4wNSAxLjA3LTEuODV6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZmxpcC10by1iYWNrXCI+PHBhdGggZD1cIk05IDdIN3YyaDJWN3ptMCA0SDd2Mmgydi0yem0wLThjLTEuMTEgMC0yIC45LTIgMmgyVjN6bTQgMTJoLTJ2Mmgydi0yem02LTEydjJoMmMwLTEuMS0uOS0yLTItMnptLTYgMGgtMnYyaDJWM3pNOSAxN3YtMkg3YzAgMS4xLjg5IDIgMiAyem0xMC00aDJ2LTJoLTJ2MnptMC00aDJWN2gtMnYyem0wIDhjMS4xIDAgMi0uOSAyLTJoLTJ2MnpNNSA3SDN2MTJjMCAxLjEuODkgMiAyIDJoMTJ2LTJINVY3em0xMC0yaDJWM2gtMnYyem0wIDEyaDJ2LTJoLTJ2MnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJmbGlwLXRvLWZyb250XCI+PHBhdGggZD1cIk0zIDEzaDJ2LTJIM3Yyem0wIDRoMnYtMkgzdjJ6bTIgNHYtMkgzYzAgMS4xLjg5IDIgMiAyek0zIDloMlY3SDN2MnptMTIgMTJoMnYtMmgtMnYyem00LTE4SDljLTEuMTEgMC0yIC45LTIgMnYxMGMwIDEuMS44OSAyIDIgMmgxMGMxLjEgMCAyLS45IDItMlY1YzAtMS4xLS45LTItMi0yem0wIDEySDlWNWgxMHYxMHptLTggNmgydi0yaC0ydjJ6bS00IDBoMnYtMkg3djJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZm9sZGVyXCI+PHBhdGggZD1cIk0xMCA0SDRjLTEuMSAwLTEuOTkuOS0xLjk5IDJMMiAxOGMwIDEuMS45IDIgMiAyaDE2YzEuMSAwIDItLjkgMi0yVjhjMC0xLjEtLjktMi0yLTJoLThsLTItMnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJmb2xkZXItb3BlblwiPjxwYXRoIGQ9XCJNMjAgNmgtOGwtMi0ySDRjLTEuMSAwLTEuOTkuOS0xLjk5IDJMMiAxOGMwIDEuMS45IDIgMiAyaDE2YzEuMSAwIDItLjkgMi0yVjhjMC0xLjEtLjktMi0yLTJ6bTAgMTJINFY4aDE2djEwelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImZvbGRlci1zaGFyZWRcIj48cGF0aCBkPVwiTTIwIDZoLThsLTItMkg0Yy0xLjEgMC0xLjk5LjktMS45OSAyTDIgMThjMCAxLjEuOSAyIDIgMmgxNmMxLjEgMCAyLS45IDItMlY4YzAtMS4xLS45LTItMi0yem0tNSAzYzEuMSAwIDIgLjkgMiAycy0uOSAyLTIgMi0yLS45LTItMiAuOS0yIDItMnptNCA4aC04di0xYzAtMS4zMyAyLjY3LTIgNC0yczQgLjY3IDQgMnYxelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImZvbnQtZG93bmxvYWRcIj48cGF0aCBkPVwiTTkuOTMgMTMuNWg0LjE0TDEyIDcuOTh6TTIwIDJINGMtMS4xIDAtMiAuOS0yIDJ2MTZjMCAxLjEuOSAyIDIgMmgxNmMxLjEgMCAyLS45IDItMlY0YzAtMS4xLS45LTItMi0yem0tNC4wNSAxNi41bC0xLjE0LTNIOS4xN2wtMS4xMiAzSDUuOTZsNS4xMS0xM2gxLjg2bDUuMTEgMTNoLTIuMDl6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZm9yd2FyZFwiPjxwYXRoIGQ9XCJNMTIgOFY0bDggOC04IDh2LTRINFY4elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImZ1bGxzY3JlZW5cIj48cGF0aCBkPVwiTTcgMTRINXY1aDV2LTJIN3YtM3ptLTItNGgyVjdoM1Y1SDV2NXptMTIgN2gtM3YyaDV2LTVoLTJ2M3pNMTQgNXYyaDN2M2gyVjVoLTV6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZnVsbHNjcmVlbi1leGl0XCI+PHBhdGggZD1cIk01IDE2aDN2M2gydi01SDV2MnptMy04SDV2Mmg1VjVIOHYzem02IDExaDJ2LTNoM3YtMmgtNXY1em0yLTExVjVoLTJ2NWg1VjhoLTN6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZy10cmFuc2xhdGVcIj48cGF0aCBkPVwiTTIwIDVoLTkuMTJMMTAgMkg0Yy0xLjEgMC0yIC45LTIgMnYxM2MwIDEuMS45IDIgMiAyaDdsMSAzaDhjMS4xIDAgMi0uOSAyLTJWN2MwLTEuMS0uOS0yLTItMnpNNy4xNyAxNC41OWMtMi4yNSAwLTQuMDktMS44My00LjA5LTQuMDlzMS44My00LjA5IDQuMDktNC4wOWMxLjA0IDAgMS45OS4zNyAyLjc0IDEuMDdsLjA3LjA2LTEuMjMgMS4xOC0uMDYtLjA1Yy0uMjktLjI3LS43OC0uNTktMS41Mi0uNTktMS4zMSAwLTIuMzggMS4wOS0yLjM4IDIuNDJzMS4wNyAyLjQyIDIuMzggMi40MmMxLjM3IDAgMS45Ni0uODcgMi4xMi0xLjQ2SDcuMDhWOS45MWgzLjk1bC4wMS4wN2MuMDQuMjEuMDUuNC4wNS42MSAwIDIuMzUtMS42MSA0LTMuOTIgNHptNi4wMy0xLjcxYy4zMy42Ljc0IDEuMTggMS4xOSAxLjdsLS41NC41My0uNjUtMi4yM3ptLjc3LS43NmgtLjk5bC0uMzEtMS4wNGgzLjk5cy0uMzQgMS4zMS0xLjU2IDIuNzRjLS41Mi0uNjItLjg5LTEuMjMtMS4xMy0xLjd6TTIxIDIwYzAgLjU1LS40NSAxLTEgMWgtN2wyLTItLjgxLTIuNzcuOTItLjkyTDE3Ljc5IDE4bC43My0uNzMtMi43MS0yLjY4Yy45LTEuMDMgMS42LTIuMjUgMS45Mi0zLjUxSDE5di0xLjA0aC0zLjY0VjloLTEuMDR2MS4wNGgtMS45NkwxMS4xOCA2SDIwYy41NSAwIDEgLjQ1IDEgMXYxM3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJnYXZlbFwiPjxwYXRoIGQ9XCJNMSAyMWgxMnYySDF6TTUuMjQ1IDguMDdsMi44My0yLjgyNyAxNC4xNCAxNC4xNDItMi44MjggMi44Mjh6TTEyLjMxNyAxbDUuNjU3IDUuNjU2LTIuODMgMi44My01LjY1NC01LjY2ek0zLjgyNSA5LjQ4NWw1LjY1NyA1LjY1Ny0yLjgyOCAyLjgyOC01LjY1Ny01LjY1N3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJnZXN0dXJlXCI+PHBhdGggZD1cIk00LjU5IDYuODljLjctLjcxIDEuNC0xLjM1IDEuNzEtMS4yMi41LjIgMCAxLjAzLS4zIDEuNTItLjI1LjQyLTIuODYgMy44OS0yLjg2IDYuMzEgMCAxLjI4LjQ4IDIuMzQgMS4zNCAyLjk4Ljc1LjU2IDEuNzQuNzMgMi42NC40NiAxLjA3LS4zMSAxLjk1LTEuNCAzLjA2LTIuNzcgMS4yMS0xLjQ5IDIuODMtMy40NCA0LjA4LTMuNDQgMS42MyAwIDEuNjUgMS4wMSAxLjc2IDEuNzktMy43OC42NC01LjM4IDMuNjctNS4zOCA1LjM3IDAgMS43IDEuNDQgMy4wOSAzLjIxIDMuMDkgMS42MyAwIDQuMjktMS4zMyA0LjY5LTYuMUgyMXYtMi41aC0yLjQ3Yy0uMTUtMS42NS0xLjA5LTQuMi00LjAzLTQuMi0yLjI1IDAtNC4xOCAxLjkxLTQuOTQgMi44NC0uNTguNzMtMi4wNiAyLjQ4LTIuMjkgMi43Mi0uMjUuMy0uNjguODQtMS4xMS44NC0uNDUgMC0uNzItLjgzLS4zNi0xLjkyLjM1LTEuMDkgMS40LTIuODYgMS44NS0zLjUyLjc4LTEuMTQgMS4zLTEuOTIgMS4zLTMuMjhDOC45NSAzLjY5IDcuMzEgMyA2LjQ0IDMgNS4xMiAzIDMuOTcgNCAzLjcyIDQuMjVjLS4zNi4zNi0uNjYuNjYtLjg4LjkzbDEuNzUgMS43MXptOS4yOSAxMS42NmMtLjMxIDAtLjc0LS4yNi0uNzQtLjcyIDAtLjYuNzMtMi4yIDIuODctMi43Ni0uMyAyLjY5LTEuNDMgMy40OC0yLjEzIDMuNDh6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZ2V0LWFwcFwiPjxwYXRoIGQ9XCJNMTkgOWgtNFYzSDl2Nkg1bDcgNyA3LTd6TTUgMTh2MmgxNHYtMkg1elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImdpZlwiPjxwYXRoIGQ9XCJNMTEuNSA5SDEzdjZoLTEuNXpNOSA5SDZjLS42IDAtMSAuNS0xIDF2NGMwIC41LjQgMSAxIDFoM2MuNiAwIDEtLjUgMS0xdi0ySDguNXYxLjVoLTJ2LTNIMTBWMTBjMC0uNS0uNC0xLTEtMXptMTAgMS41VjloLTQuNXY2SDE2di0yaDJ2LTEuNWgtMnYtMXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJncmFkZVwiPjxwYXRoIGQ9XCJNMTIgMTcuMjdMMTguMTggMjFsLTEuNjQtNy4wM0wyMiA5LjI0bC03LjE5LS42MUwxMiAyIDkuMTkgOC42MyAyIDkuMjRsNS40NiA0LjczTDUuODIgMjF6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiZ3JvdXAtd29ya1wiPjxwYXRoIGQ9XCJNMTIgMkM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnpNOCAxNy41Yy0xLjM4IDAtMi41LTEuMTItMi41LTIuNXMxLjEyLTIuNSAyLjUtMi41IDIuNSAxLjEyIDIuNSAyLjUtMS4xMiAyLjUtMi41IDIuNXpNOS41IDhjMC0xLjM4IDEuMTItMi41IDIuNS0yLjVzMi41IDEuMTIgMi41IDIuNS0xLjEyIDIuNS0yLjUgMi41UzkuNSA5LjM4IDkuNSA4em02LjUgOS41Yy0xLjM4IDAtMi41LTEuMTItMi41LTIuNXMxLjEyLTIuNSAyLjUtMi41IDIuNSAxLjEyIDIuNSAyLjUtMS4xMiAyLjUtMi41IDIuNXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJoZWxwXCI+PHBhdGggZD1cIk0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0xIDE3aC0ydi0yaDJ2MnptMi4wNy03Ljc1bC0uOS45MkMxMy40NSAxMi45IDEzIDEzLjUgMTMgMTVoLTJ2LS41YzAtMS4xLjQ1LTIuMSAxLjE3LTIuODNsMS4yNC0xLjI2Yy4zNy0uMzYuNTktLjg2LjU5LTEuNDEgMC0xLjEtLjktMi0yLTJzLTIgLjktMiAySDhjMC0yLjIxIDEuNzktNCA0LTRzNCAxLjc5IDQgNGMwIC44OC0uMzYgMS42OC0uOTMgMi4yNXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJoZWxwLW91dGxpbmVcIj48cGF0aCBkPVwiTTExIDE4aDJ2LTJoLTJ2MnptMS0xNkM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptMCAxOGMtNC40MSAwLTgtMy41OS04LThzMy41OS04IDgtOCA4IDMuNTkgOCA4LTMuNTkgOC04IDh6bTAtMTRjLTIuMjEgMC00IDEuNzktNCA0aDJjMC0xLjEuOS0yIDItMnMyIC45IDIgMmMwIDItMyAxLjc1LTMgNWgyYzAtMi4yNSAzLTIuNSAzLTUgMC0yLjIxLTEuNzktNC00LTR6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiaGlnaGxpZ2h0LW9mZlwiPjxwYXRoIGQ9XCJNMTQuNTkgOEwxMiAxMC41OSA5LjQxIDggOCA5LjQxIDEwLjU5IDEyIDggMTQuNTkgOS40MSAxNiAxMiAxMy40MSAxNC41OSAxNiAxNiAxNC41OSAxMy40MSAxMiAxNiA5LjQxIDE0LjU5IDh6TTEyIDJDNi40NyAyIDIgNi40NyAyIDEyczQuNDcgMTAgMTAgMTAgMTAtNC40NyAxMC0xMFMxNy41MyAyIDEyIDJ6bTAgMThjLTQuNDEgMC04LTMuNTktOC04czMuNTktOCA4LTggOCAzLjU5IDggOC0zLjU5IDgtOCA4elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImhpc3RvcnlcIj48cGF0aCBkPVwiTTEzIDNjLTQuOTcgMC05IDQuMDMtOSA5SDFsMy44OSAzLjg5LjA3LjE0TDkgMTJINmMwLTMuODcgMy4xMy03IDctN3M3IDMuMTMgNyA3LTMuMTMgNy03IDdjLTEuOTMgMC0zLjY4LS43OS00Ljk0LTIuMDZsLTEuNDIgMS40MkM4LjI3IDE5Ljk5IDEwLjUxIDIxIDEzIDIxYzQuOTcgMCA5LTQuMDMgOS05cy00LjAzLTktOS05em0tMSA1djVsNC4yOCAyLjU0LjcyLTEuMjEtMy41LTIuMDhWOEgxMnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJob21lXCI+PHBhdGggZD1cIk0xMCAyMHYtNmg0djZoNXYtOGgzTDEyIDMgMiAxMmgzdjh6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiaG91cmdsYXNzLWVtcHR5XCI+PHBhdGggZD1cIk02IDJ2NmguMDFMNiA4LjAxIDEwIDEybC00IDQgLjAxLjAxSDZWMjJoMTJ2LTUuOTloLS4wMUwxOCAxNmwtNC00IDQtMy45OS0uMDEtLjAxSDE4VjJINnptMTAgMTQuNVYyMEg4di0zLjVsNC00IDQgNHptLTQtNWwtNC00VjRoOHYzLjVsLTQgNHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJob3VyZ2xhc3MtZnVsbFwiPjxwYXRoIGQ9XCJNNiAydjZoLjAxTDYgOC4wMSAxMCAxMmwtNCA0IC4wMS4wMUg2VjIyaDEydi01Ljk5aC0uMDFMMTggMTZsLTQtNCA0LTMuOTktLjAxLS4wMUgxOFYySDZ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiaHR0cFwiPjxwYXRoIGQ9XCJNNC41IDExaC0yVjlIMXY2aDEuNXYtMi41aDJWMTVINlY5SDQuNXYyem0yLjUtLjVoMS41VjE1SDEwdi00LjVoMS41VjlIN3YxLjV6bTUuNSAwSDE0VjE1aDEuNXYtNC41SDE3VjloLTQuNXYxLjV6bTktMS41SDE4djZoMS41di0yaDJjLjggMCAxLjUtLjcgMS41LTEuNXYtMWMwLS44LS43LTEuNS0xLjUtMS41em0wIDIuNWgtMnYtMWgydjF6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiaHR0cHNcIj48cGF0aCBkPVwiTTE4IDhoLTFWNmMwLTIuNzYtMi4yNC01LTUtNVM3IDMuMjQgNyA2djJINmMtMS4xIDAtMiAuOS0yIDJ2MTBjMCAxLjEuOSAyIDIgMmgxMmMxLjEgMCAyLS45IDItMlYxMGMwLTEuMS0uOS0yLTItMnptLTYgOWMtMS4xIDAtMi0uOS0yLTJzLjktMiAyLTIgMiAuOSAyIDItLjkgMi0yIDJ6bTMuMS05SDguOVY2YzAtMS43MSAxLjM5LTMuMSAzLjEtMy4xIDEuNzEgMCAzLjEgMS4zOSAzLjEgMy4xdjJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiaW1wb3J0YW50LWRldmljZXNcIj48cGF0aCBkPVwiTTIzIDExLjAxTDE4IDExYy0uNTUgMC0xIC40NS0xIDF2OWMwIC41NS40NSAxIDEgMWg1Yy41NSAwIDEtLjQ1IDEtMXYtOWMwLS41NS0uNDUtLjk5LTEtLjk5ek0yMyAyMGgtNXYtN2g1djd6TTIwIDJIMkMuODkgMiAwIDIuODkgMCA0djEyYzAgMS4xLjg5IDIgMiAyaDd2Mkg3djJoOHYtMmgtMnYtMmgydi0ySDJWNGgxOHY1aDJWNGMwLTEuMTEtLjktMi0yLTJ6bS04LjAzIDdMMTEgNmwtLjk3IDNIN2wyLjQ3IDEuNzYtLjk0IDIuOTEgMi40Ny0xLjggMi40NyAxLjgtLjk0LTIuOTFMMTUgOWgtMy4wM3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJpbmJveFwiPjxwYXRoIGQ9XCJNMTkgM0g0Ljk5Yy0xLjExIDAtMS45OC44OS0xLjk4IDJMMyAxOWMwIDEuMS44OCAyIDEuOTkgMkgxOWMxLjEgMCAyLS45IDItMlY1YzAtMS4xMS0uOS0yLTItMnptMCAxMmgtNGMwIDEuNjYtMS4zNSAzLTMgM3MtMy0xLjM0LTMtM0g0Ljk5VjVIMTl2MTB6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiaW5kZXRlcm1pbmF0ZS1jaGVjay1ib3hcIj48cGF0aCBkPVwiTTE5IDNINWMtMS4xIDAtMiAuOS0yIDJ2MTRjMCAxLjEuOSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMlY1YzAtMS4xLS45LTItMi0yem0tMiAxMEg3di0yaDEwdjJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiaW5mb1wiPjxwYXRoIGQ9XCJNMTIgMkM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptMSAxNWgtMnYtNmgydjZ6bTAtOGgtMlY3aDJ2MnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJpbmZvLW91dGxpbmVcIj48cGF0aCBkPVwiTTExIDE3aDJ2LTZoLTJ2NnptMS0xNUM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptMCAxOGMtNC40MSAwLTgtMy41OS04LThzMy41OS04IDgtOCA4IDMuNTkgOCA4LTMuNTkgOC04IDh6TTExIDloMlY3aC0ydjJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiaW5wdXRcIj48cGF0aCBkPVwiTTIxIDMuMDFIM2MtMS4xIDAtMiAuOS0yIDJWOWgyVjQuOTloMTh2MTQuMDNIM1YxNUgxdjQuMDFjMCAxLjEuOSAxLjk4IDIgMS45OGgxOGMxLjEgMCAyLS44OCAyLTEuOTh2LTE0YzAtMS4xMS0uOS0yLTItMnpNMTEgMTZsNC00LTQtNHYzSDF2MmgxMHYzelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImludmVydC1jb2xvcnNcIj48cGF0aCBkPVwiTTE3LjY2IDcuOTNMMTIgMi4yNyA2LjM0IDcuOTNjLTMuMTIgMy4xMi0zLjEyIDguMTkgMCAxMS4zMUM3LjkgMjAuOCA5Ljk1IDIxLjU4IDEyIDIxLjU4YzIuMDUgMCA0LjEtLjc4IDUuNjYtMi4zNCAzLjEyLTMuMTIgMy4xMi04LjE5IDAtMTEuMzF6TTEyIDE5LjU5Yy0xLjYgMC0zLjExLS42Mi00LjI0LTEuNzZDNi42MiAxNi42OSA2IDE1LjE5IDYgMTMuNTlzLjYyLTMuMTEgMS43Ni00LjI0TDEyIDUuMXYxNC40OXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJsYWJlbFwiPjxwYXRoIGQ9XCJNMTcuNjMgNS44NEMxNy4yNyA1LjMzIDE2LjY3IDUgMTYgNUw1IDUuMDFDMy45IDUuMDEgMyA1LjkgMyA3djEwYzAgMS4xLjkgMS45OSAyIDEuOTlMMTYgMTljLjY3IDAgMS4yNy0uMzMgMS42My0uODRMMjIgMTJsLTQuMzctNi4xNnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJsYWJlbC1vdXRsaW5lXCI+PHBhdGggZD1cIk0xNy42MyA1Ljg0QzE3LjI3IDUuMzMgMTYuNjcgNSAxNiA1TDUgNS4wMUMzLjkgNS4wMSAzIDUuOSAzIDd2MTBjMCAxLjEuOSAxLjk5IDIgMS45OUwxNiAxOWMuNjcgMCAxLjI3LS4zMyAxLjYzLS44NEwyMiAxMmwtNC4zNy02LjE2ek0xNiAxN0g1VjdoMTFsMy41NSA1TDE2IDE3elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImxhbmd1YWdlXCI+PHBhdGggZD1cIk0xMS45OSAyQzYuNDcgMiAyIDYuNDggMiAxMnM0LjQ3IDEwIDkuOTkgMTBDMTcuNTIgMjIgMjIgMTcuNTIgMjIgMTJTMTcuNTIgMiAxMS45OSAyem02LjkzIDZoLTIuOTVjLS4zMi0xLjI1LS43OC0yLjQ1LTEuMzgtMy41NiAxLjg0LjYzIDMuMzcgMS45MSA0LjMzIDMuNTZ6TTEyIDQuMDRjLjgzIDEuMiAxLjQ4IDIuNTMgMS45MSAzLjk2aC0zLjgyYy40My0xLjQzIDEuMDgtMi43NiAxLjkxLTMuOTZ6TTQuMjYgMTRDNC4xIDEzLjM2IDQgMTIuNjkgNCAxMnMuMS0xLjM2LjI2LTJoMy4zOGMtLjA4LjY2LS4xNCAxLjMyLS4xNCAyIDAgLjY4LjA2IDEuMzQuMTQgMkg0LjI2em0uODIgMmgyLjk1Yy4zMiAxLjI1Ljc4IDIuNDUgMS4zOCAzLjU2LTEuODQtLjYzLTMuMzctMS45LTQuMzMtMy41NnptMi45NS04SDUuMDhjLjk2LTEuNjYgMi40OS0yLjkzIDQuMzMtMy41NkM4LjgxIDUuNTUgOC4zNSA2Ljc1IDguMDMgOHpNMTIgMTkuOTZjLS44My0xLjItMS40OC0yLjUzLTEuOTEtMy45NmgzLjgyYy0uNDMgMS40My0xLjA4IDIuNzYtMS45MSAzLjk2ek0xNC4zNCAxNEg5LjY2Yy0uMDktLjY2LS4xNi0xLjMyLS4xNi0yIDAtLjY4LjA3LTEuMzUuMTYtMmg0LjY4Yy4wOS42NS4xNiAxLjMyLjE2IDIgMCAuNjgtLjA3IDEuMzQtLjE2IDJ6bS4yNSA1LjU2Yy42LTEuMTEgMS4wNi0yLjMxIDEuMzgtMy41NmgyLjk1Yy0uOTYgMS42NS0yLjQ5IDIuOTMtNC4zMyAzLjU2ek0xNi4zNiAxNGMuMDgtLjY2LjE0LTEuMzIuMTQtMiAwLS42OC0uMDYtMS4zNC0uMTQtMmgzLjM4Yy4xNi42NC4yNiAxLjMxLjI2IDJzLS4xIDEuMzYtLjI2IDJoLTMuMzh6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwibGFzdC1wYWdlXCI+PHBhdGggZD1cIk01LjU5IDcuNDFMMTAuMTggMTJsLTQuNTkgNC41OUw3IDE4bDYtNi02LTZ6TTE2IDZoMnYxMmgtMnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJsYXVuY2hcIj48cGF0aCBkPVwiTTE5IDE5SDVWNWg3VjNINWMtMS4xMSAwLTIgLjktMiAydjE0YzAgMS4xLjg5IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0ydi03aC0ydjd6TTE0IDN2MmgzLjU5bC05LjgzIDkuODMgMS40MSAxLjQxTDE5IDYuNDFWMTBoMlYzaC03elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImxpZ2h0YnVsYi1vdXRsaW5lXCI+PHBhdGggZD1cIk05IDIxYzAgLjU1LjQ1IDEgMSAxaDRjLjU1IDAgMS0uNDUgMS0xdi0xSDl2MXptMy0xOUM4LjE0IDIgNSA1LjE0IDUgOWMwIDIuMzggMS4xOSA0LjQ3IDMgNS43NFYxN2MwIC41NS40NSAxIDEgMWg2Yy41NSAwIDEtLjQ1IDEtMXYtMi4yNmMxLjgxLTEuMjcgMy0zLjM2IDMtNS43NCAwLTMuODYtMy4xNC03LTctN3ptMi44NSAxMS4xbC0uODUuNlYxNmgtNHYtMi4zbC0uODUtLjZDNy44IDEyLjE2IDcgMTAuNjMgNyA5YzAtMi43NiAyLjI0LTUgNS01czUgMi4yNCA1IDVjMCAxLjYzLS44IDMuMTYtMi4xNSA0LjF6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwibGluZS1zdHlsZVwiPjxwYXRoIGQ9XCJNMyAxNmg1di0ySDN2MnptNi41IDBoNXYtMmgtNXYyem02LjUgMGg1di0yaC01djJ6TTMgMjBoMnYtMkgzdjJ6bTQgMGgydi0ySDd2MnptNCAwaDJ2LTJoLTJ2MnptNCAwaDJ2LTJoLTJ2MnptNCAwaDJ2LTJoLTJ2MnpNMyAxMmg4di0ySDN2MnptMTAgMGg4di0yaC04djJ6TTMgNHY0aDE4VjRIM3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJsaW5lLXdlaWdodFwiPjxwYXRoIGQ9XCJNMyAxN2gxOHYtMkgzdjJ6bTAgM2gxOHYtMUgzdjF6bTAtN2gxOHYtM0gzdjN6bTAtOXY0aDE4VjRIM3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJsaW5rXCI+PHBhdGggZD1cIk0zLjkgMTJjMC0xLjcxIDEuMzktMy4xIDMuMS0zLjFoNFY3SDdjLTIuNzYgMC01IDIuMjQtNSA1czIuMjQgNSA1IDVoNHYtMS45SDdjLTEuNzEgMC0zLjEtMS4zOS0zLjEtMy4xek04IDEzaDh2LTJIOHYyem05LTZoLTR2MS45aDRjMS43MSAwIDMuMSAxLjM5IDMuMSAzLjFzLTEuMzkgMy4xLTMuMSAzLjFoLTRWMTdoNGMyLjc2IDAgNS0yLjI0IDUtNXMtMi4yNC01LTUtNXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJsaXN0XCI+PHBhdGggZD1cIk0zIDEzaDJ2LTJIM3Yyem0wIDRoMnYtMkgzdjJ6bTAtOGgyVjdIM3Yyem00IDRoMTR2LTJIN3Yyem0wIDRoMTR2LTJIN3Yyek03IDd2MmgxNFY3SDd6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwibG9ja1wiPjxwYXRoIGQ9XCJNMTggOGgtMVY2YzAtMi43Ni0yLjI0LTUtNS01UzcgMy4yNCA3IDZ2Mkg2Yy0xLjEgMC0yIC45LTIgMnYxMGMwIDEuMS45IDIgMiAyaDEyYzEuMSAwIDItLjkgMi0yVjEwYzAtMS4xLS45LTItMi0yem0tNiA5Yy0xLjEgMC0yLS45LTItMnMuOS0yIDItMiAyIC45IDIgMi0uOSAyLTIgMnptMy4xLTlIOC45VjZjMC0xLjcxIDEuMzktMy4xIDMuMS0zLjEgMS43MSAwIDMuMSAxLjM5IDMuMSAzLjF2MnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJsb2NrLW9wZW5cIj48cGF0aCBkPVwiTTEyIDE3YzEuMSAwIDItLjkgMi0ycy0uOS0yLTItMi0yIC45LTIgMiAuOSAyIDIgMnptNi05aC0xVjZjMC0yLjc2LTIuMjQtNS01LTVTNyAzLjI0IDcgNmgxLjljMC0xLjcxIDEuMzktMy4xIDMuMS0zLjEgMS43MSAwIDMuMSAxLjM5IDMuMSAzLjF2Mkg2Yy0xLjEgMC0yIC45LTIgMnYxMGMwIDEuMS45IDIgMiAyaDEyYzEuMSAwIDItLjkgMi0yVjEwYzAtMS4xLS45LTItMi0yem0wIDEySDZWMTBoMTJ2MTB6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwibG9jay1vdXRsaW5lXCI+PHBhdGggZD1cIk0xMiAxN2MxLjEgMCAyLS45IDItMnMtLjktMi0yLTItMiAuOS0yIDIgLjkgMiAyIDJ6bTYtOWgtMVY2YzAtMi43Ni0yLjI0LTUtNS01UzcgMy4yNCA3IDZ2Mkg2Yy0xLjEgMC0yIC45LTIgMnYxMGMwIDEuMS45IDIgMiAyaDEyYzEuMSAwIDItLjkgMi0yVjEwYzAtMS4xLS45LTItMi0yek04LjkgNmMwLTEuNzEgMS4zOS0zLjEgMy4xLTMuMXMzLjEgMS4zOSAzLjEgMy4xdjJIOC45VjZ6TTE4IDIwSDZWMTBoMTJ2MTB6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwibG93LXByaW9yaXR5XCI+PHBhdGggZD1cIk0xNCA1aDh2MmgtOHptMCA1LjVoOHYyaC04em0wIDUuNWg4djJoLTh6TTIgMTEuNUMyIDE1LjA4IDQuOTIgMTggOC41IDE4SDl2MmwzLTMtMy0zdjJoLS41QzYuMDIgMTYgNCAxMy45OCA0IDExLjVTNi4wMiA3IDguNSA3SDEyVjVIOC41QzQuOTIgNSAyIDcuOTIgMiAxMS41elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cImxveWFsdHlcIj48cGF0aCBkPVwiTTIxLjQxIDExLjU4bC05LTlDMTIuMDUgMi4yMiAxMS41NSAyIDExIDJINGMtMS4xIDAtMiAuOS0yIDJ2N2MwIC41NS4yMiAxLjA1LjU5IDEuNDJsOSA5Yy4zNi4zNi44Ni41OCAxLjQxLjU4LjU1IDAgMS4wNS0uMjIgMS40MS0uNTlsNy03Yy4zNy0uMzYuNTktLjg2LjU5LTEuNDEgMC0uNTUtLjIzLTEuMDYtLjU5LTEuNDJ6TTUuNSA3QzQuNjcgNyA0IDYuMzMgNCA1LjVTNC42NyA0IDUuNSA0IDcgNC42NyA3IDUuNSA2LjMzIDcgNS41IDd6bTExLjc3IDguMjdMMTMgMTkuNTRsLTQuMjctNC4yN0M4LjI4IDE0LjgxIDggMTQuMTkgOCAxMy41YzAtMS4zOCAxLjEyLTIuNSAyLjUtMi41LjY5IDAgMS4zMi4yOCAxLjc3Ljc0bC43My43Mi43My0uNzNjLjQ1LS40NSAxLjA4LS43MyAxLjc3LS43MyAxLjM4IDAgMi41IDEuMTIgMi41IDIuNSAwIC42OS0uMjggMS4zMi0uNzMgMS43N3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJtYWlsXCI+PHBhdGggZD1cIk0yMCA0SDRjLTEuMSAwLTEuOTkuOS0xLjk5IDJMMiAxOGMwIDEuMS45IDIgMiAyaDE2YzEuMSAwIDItLjkgMi0yVjZjMC0xLjEtLjktMi0yLTJ6bTAgNGwtOCA1LTgtNVY2bDggNSA4LTV2MnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJtYXJrdW5yZWFkXCI+PHBhdGggZD1cIk0yMCA0SDRjLTEuMSAwLTEuOTkuOS0xLjk5IDJMMiAxOGMwIDEuMS45IDIgMiAyaDE2YzEuMSAwIDItLjkgMi0yVjZjMC0xLjEtLjktMi0yLTJ6bTAgNGwtOCA1LTgtNVY2bDggNSA4LTV2MnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJtYXJrdW5yZWFkLW1haWxib3hcIj48cGF0aCBkPVwiTTIwIDZIMTB2Nkg4VjRoNlYwSDZ2Nkg0Yy0xLjEgMC0yIC45LTIgMnYxMmMwIDEuMS45IDIgMiAyaDE2YzEuMSAwIDItLjkgMi0yVjhjMC0xLjEtLjktMi0yLTJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwibWVudVwiPjxwYXRoIGQ9XCJNMyAxOGgxOHYtMkgzdjJ6bTAtNWgxOHYtMkgzdjJ6bTAtN3YyaDE4VjZIM3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJtb3JlLWhvcml6XCI+PHBhdGggZD1cIk02IDEwYy0xLjEgMC0yIC45LTIgMnMuOSAyIDIgMiAyLS45IDItMi0uOS0yLTItMnptMTIgMGMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6bS02IDBjLTEuMSAwLTIgLjktMiAycy45IDIgMiAyIDItLjkgMi0yLS45LTItMi0yelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cIm1vcmUtdmVydFwiPjxwYXRoIGQ9XCJNMTIgOGMxLjEgMCAyLS45IDItMnMtLjktMi0yLTItMiAuOS0yIDIgLjkgMiAyIDJ6bTAgMmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6bTAgNmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwibW90b3JjeWNsZVwiPjxwYXRoIGQ9XCJNMTkuNDQgOS4wM0wxNS40MSA1SDExdjJoMy41OWwyIDJINWMtMi44IDAtNSAyLjItNSA1czIuMiA1IDUgNWMyLjQ2IDAgNC40NS0xLjY5IDQuOS00aDEuNjVsMi43Ny0yLjc3Yy0uMjEuNTQtLjMyIDEuMTQtLjMyIDEuNzcgMCAyLjggMi4yIDUgNSA1czUtMi4yIDUtNWMwLTIuNjUtMS45Ny00Ljc3LTQuNTYtNC45N3pNNy44MiAxNUM3LjQgMTYuMTUgNi4yOCAxNyA1IDE3Yy0xLjYzIDAtMy0xLjM3LTMtM3MxLjM3LTMgMy0zYzEuMjggMCAyLjQuODUgMi44MiAySDV2MmgyLjgyek0xOSAxN2MtMS42NiAwLTMtMS4zNC0zLTNzMS4zNC0zIDMtMyAzIDEuMzQgMyAzLTEuMzQgMy0zIDN6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwibW92ZS10by1pbmJveFwiPjxwYXRoIGQ9XCJNMTkgM0g0Ljk5Yy0xLjExIDAtMS45OC45LTEuOTggMkwzIDE5YzAgMS4xLjg4IDIgMS45OSAySDE5YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJ6bTAgMTJoLTRjMCAxLjY2LTEuMzUgMy0zIDNzLTMtMS4zNC0zLTNINC45OVY1SDE5djEwem0tMy01aC0yVjdoLTR2M0g4bDQgNCA0LTR6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwibmV4dC13ZWVrXCI+PHBhdGggZD1cIk0yMCA3aC00VjVjMC0uNTUtLjIyLTEuMDUtLjU5LTEuNDFDMTUuMDUgMy4yMiAxNC41NSAzIDE0IDNoLTRjLTEuMSAwLTIgLjktMiAydjJINGMtMS4xIDAtMiAuOS0yIDJ2MTFjMCAxLjEuOSAyIDIgMmgxNmMxLjEgMCAyLS45IDItMlY5YzAtMS4xLS45LTItMi0yek0xMCA1aDR2MmgtNFY1em0xIDEzLjVsLTEtMSAzLTMtMy0zIDEtMSA0IDQtNCA0elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cIm5vdGUtYWRkXCI+PHBhdGggZD1cIk0xNCAySDZjLTEuMSAwLTEuOTkuOS0xLjk5IDJMNCAyMGMwIDEuMS44OSAyIDEuOTkgMkgxOGMxLjEgMCAyLS45IDItMlY4bC02LTZ6bTIgMTRoLTN2M2gtMnYtM0g4di0yaDN2LTNoMnYzaDN2MnptLTMtN1YzLjVMMTguNSA5SDEzelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cIm9mZmxpbmUtcGluXCI+PHBhdGggZD1cIk0xMiAyQzYuNSAyIDIgNi41IDIgMTJzNC41IDEwIDEwIDEwIDEwLTQuNSAxMC0xMFMxNy41IDIgMTIgMnptNSAxNkg3di0yaDEwdjJ6bS02LjctNEw3IDEwLjdsMS40LTEuNCAxLjkgMS45IDUuMy01LjNMMTcgNy4zIDEwLjMgMTR6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwib3BhY2l0eVwiPjxwYXRoIGQ9XCJNMTcuNjYgOEwxMiAyLjM1IDYuMzQgOEM0Ljc4IDkuNTYgNCAxMS42NCA0IDEzLjY0cy43OCA0LjExIDIuMzQgNS42NyAzLjYxIDIuMzUgNS42NiAyLjM1IDQuMS0uNzkgNS42Ni0yLjM1UzIwIDE1LjY0IDIwIDEzLjY0IDE5LjIyIDkuNTYgMTcuNjYgOHpNNiAxNGMuMDEtMiAuNjItMy4yNyAxLjc2LTQuNEwxMiA1LjI3bDQuMjQgNC4zOEMxNy4zOCAxMC43NyAxNy45OSAxMiAxOCAxNEg2elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cIm9wZW4taW4tYnJvd3NlclwiPjxwYXRoIGQ9XCJNMTkgNEg1Yy0xLjExIDAtMiAuOS0yIDJ2MTJjMCAxLjEuODkgMiAyIDJoNHYtMkg1VjhoMTR2MTBoLTR2Mmg0YzEuMSAwIDItLjkgMi0yVjZjMC0xLjEtLjg5LTItMi0yem0tNyA2bC00IDRoM3Y2aDJ2LTZoM2wtNC00elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cIm9wZW4taW4tbmV3XCI+PHBhdGggZD1cIk0xOSAxOUg1VjVoN1YzSDVjLTEuMTEgMC0yIC45LTIgMnYxNGMwIDEuMS44OSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMnYtN2gtMnY3ek0xNCAzdjJoMy41OWwtOS44MyA5LjgzIDEuNDEgMS40MUwxOSA2LjQxVjEwaDJWM2gtN3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJvcGVuLXdpdGhcIj48cGF0aCBkPVwiTTEwIDloNFY2aDNsLTUtNS01IDVoM3Yzem0tMSAxSDZWN2wtNSA1IDUgNXYtM2gzdi00em0xNCAybC01LTV2M2gtM3Y0aDN2M2w1LTV6bS05IDNoLTR2M0g3bDUgNSA1LTVoLTN2LTN6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicGFnZXZpZXdcIj48cGF0aCBkPVwiTTExLjUgOUMxMC4xMiA5IDkgMTAuMTIgOSAxMS41czEuMTIgMi41IDIuNSAyLjUgMi41LTEuMTIgMi41LTIuNVMxMi44OCA5IDExLjUgOXpNMjAgNEg0Yy0xLjEgMC0yIC45LTIgMnYxMmMwIDEuMS45IDIgMiAyaDE2YzEuMSAwIDItLjkgMi0yVjZjMC0xLjEtLjktMi0yLTJ6bS0zLjIxIDE0LjIxbC0yLjkxLTIuOTFjLS42OS40NC0xLjUxLjctMi4zOS43QzkuMDEgMTYgNyAxMy45OSA3IDExLjVTOS4wMSA3IDExLjUgNyAxNiA5LjAxIDE2IDExLjVjMCAuODgtLjI2IDEuNjktLjcgMi4zOWwyLjkxIDIuOS0xLjQyIDEuNDJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicGFuLXRvb2xcIj48cGF0aCBkPVwiTTIzIDUuNVYyMGMwIDIuMi0xLjggNC00IDRoLTcuM2MtMS4wOCAwLTIuMS0uNDMtMi44NS0xLjE5TDEgMTQuODNzMS4yNi0xLjIzIDEuMy0xLjI1Yy4yMi0uMTkuNDktLjI5Ljc5LS4yOS4yMiAwIC40Mi4wNi42LjE2LjA0LjAxIDQuMzEgMi40NiA0LjMxIDIuNDZWNGMwLS44My42Ny0xLjUgMS41LTEuNVMxMSAzLjE3IDExIDR2N2gxVjEuNWMwLS44My42Ny0xLjUgMS41LTEuNVMxNSAuNjcgMTUgMS41VjExaDFWMi41YzAtLjgzLjY3LTEuNSAxLjUtMS41czEuNS42NyAxLjUgMS41VjExaDFWNS41YzAtLjgzLjY3LTEuNSAxLjUtMS41czEuNS42NyAxLjUgMS41elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInBheW1lbnRcIj48cGF0aCBkPVwiTTIwIDRINGMtMS4xMSAwLTEuOTkuODktMS45OSAyTDIgMThjMCAxLjExLjg5IDIgMiAyaDE2YzEuMTEgMCAyLS44OSAyLTJWNmMwLTEuMTEtLjg5LTItMi0yem0wIDE0SDR2LTZoMTZ2NnptMC0xMEg0VjZoMTZ2MnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJwZXJtLWNhbWVyYS1taWNcIj48cGF0aCBkPVwiTTIwIDVoLTMuMTdMMTUgM0g5TDcuMTcgNUg0Yy0xLjEgMC0yIC45LTIgMnYxMmMwIDEuMS45IDIgMiAyaDd2LTIuMDljLTIuODMtLjQ4LTUtMi45NC01LTUuOTFoMmMwIDIuMjEgMS43OSA0IDQgNHM0LTEuNzkgNC00aDJjMCAyLjk3LTIuMTcgNS40My01IDUuOTFWMjFoN2MxLjEgMCAyLS45IDItMlY3YzAtMS4xLS45LTItMi0yem0tNiA4YzAgMS4xLS45IDItMiAycy0yLS45LTItMlY5YzAtMS4xLjktMiAyLTJzMiAuOSAyIDJ2NHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJwZXJtLWNvbnRhY3QtY2FsZW5kYXJcIj48cGF0aCBkPVwiTTE5IDNoLTFWMWgtMnYySDhWMUg2djJINWMtMS4xMSAwLTIgLjktMiAydjE0YzAgMS4xLjg5IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJ6bS03IDNjMS42NiAwIDMgMS4zNCAzIDNzLTEuMzQgMy0zIDMtMy0xLjM0LTMtMyAxLjM0LTMgMy0zem02IDEySDZ2LTFjMC0yIDQtMy4xIDYtMy4xczYgMS4xIDYgMy4xdjF6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicGVybS1kYXRhLXNldHRpbmdcIj48cGF0aCBkPVwiTTE4Ljk5IDExLjVjLjM0IDAgLjY3LjAzIDEgLjA3TDIwIDAgMCAyMGgxMS41NmMtLjA0LS4zMy0uMDctLjY2LS4wNy0xIDAtNC4xNCAzLjM2LTcuNSA3LjUtNy41em0zLjcxIDcuOTljLjAyLS4xNi4wNC0uMzIuMDQtLjQ5IDAtLjE3LS4wMS0uMzMtLjA0LS40OWwxLjA2LS44M2MuMDktLjA4LjEyLS4yMS4wNi0uMzJsLTEtMS43M2MtLjA2LS4xMS0uMTktLjE1LS4zMS0uMTFsLTEuMjQuNWMtLjI2LS4yLS41NC0uMzctLjg1LS40OWwtLjE5LTEuMzJjLS4wMS0uMTItLjEyLS4yMS0uMjQtLjIxaC0yYy0uMTIgMC0uMjMuMDktLjI1LjIxbC0uMTkgMS4zMmMtLjMuMTMtLjU5LjI5LS44NS40OWwtMS4yNC0uNWMtLjExLS4wNC0uMjQgMC0uMzEuMTFsLTEgMS43M2MtLjA2LjExLS4wNC4yNC4wNi4zMmwxLjA2LjgzYy0uMDIuMTYtLjAzLjMyLS4wMy40OSAwIC4xNy4wMS4zMy4wMy40OWwtMS4wNi44M2MtLjA5LjA4LS4xMi4yMS0uMDYuMzJsMSAxLjczYy4wNi4xMS4xOS4xNS4zMS4xMWwxLjI0LS41Yy4yNi4yLjU0LjM3Ljg1LjQ5bC4xOSAxLjMyYy4wMi4xMi4xMi4yMS4yNS4yMWgyYy4xMiAwIC4yMy0uMDkuMjUtLjIxbC4xOS0xLjMyYy4zLS4xMy41OS0uMjkuODQtLjQ5bDEuMjUuNWMuMTEuMDQuMjQgMCAuMzEtLjExbDEtMS43M2MuMDYtLjExLjAzLS4yNC0uMDYtLjMybC0xLjA3LS44M3ptLTMuNzEgMS4wMWMtLjgzIDAtMS41LS42Ny0xLjUtMS41cy42Ny0xLjUgMS41LTEuNSAxLjUuNjcgMS41IDEuNS0uNjcgMS41LTEuNSAxLjV6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicGVybS1kZXZpY2UtaW5mb3JtYXRpb25cIj48cGF0aCBkPVwiTTEzIDdoLTJ2MmgyVjd6bTAgNGgtMnY2aDJ2LTZ6bTQtOS45OUw3IDFjLTEuMSAwLTIgLjktMiAydjE4YzAgMS4xLjkgMiAyIDJoMTBjMS4xIDAgMi0uOSAyLTJWM2MwLTEuMS0uOS0xLjk5LTItMS45OXpNMTcgMTlIN1Y1aDEwdjE0elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInBlcm0taWRlbnRpdHlcIj48cGF0aCBkPVwiTTEyIDUuOWMxLjE2IDAgMi4xLjk0IDIuMSAyLjFzLS45NCAyLjEtMi4xIDIuMVM5LjkgOS4xNiA5LjkgOHMuOTQtMi4xIDIuMS0yLjFtMCA5YzIuOTcgMCA2LjEgMS40NiA2LjEgMi4xdjEuMUg1LjlWMTdjMC0uNjQgMy4xMy0yLjEgNi4xLTIuMU0xMiA0QzkuNzkgNCA4IDUuNzkgOCA4czEuNzkgNCA0IDQgNC0xLjc5IDQtNC0xLjc5LTQtNC00em0wIDljLTIuNjcgMC04IDEuMzQtOCA0djNoMTZ2LTNjMC0yLjY2LTUuMzMtNC04LTR6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicGVybS1tZWRpYVwiPjxwYXRoIGQ9XCJNMiA2SDB2NWguMDFMMCAyMGMwIDEuMS45IDIgMiAyaDE4di0ySDJWNnptMjAtMmgtOGwtMi0ySDZjLTEuMSAwLTEuOTkuOS0xLjk5IDJMNCAxNmMwIDEuMS45IDIgMiAyaDE2YzEuMSAwIDItLjkgMi0yVjZjMC0xLjEtLjktMi0yLTJ6TTcgMTVsNC41LTYgMy41IDQuNTEgMi41LTMuMDFMMjEgMTVIN3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJwZXJtLXBob25lLW1zZ1wiPjxwYXRoIGQ9XCJNMjAgMTUuNWMtMS4yNSAwLTIuNDUtLjItMy41Ny0uNTctLjM1LS4xMS0uNzQtLjAzLTEuMDIuMjRsLTIuMiAyLjJjLTIuODMtMS40NC01LjE1LTMuNzUtNi41OS02LjU4bDIuMi0yLjIxYy4yOC0uMjcuMzYtLjY2LjI1LTEuMDFDOC43IDYuNDUgOC41IDUuMjUgOC41IDRjMC0uNTUtLjQ1LTEtMS0xSDRjLS41NSAwLTEgLjQ1LTEgMSAwIDkuMzkgNy42MSAxNyAxNyAxNyAuNTUgMCAxLS40NSAxLTF2LTMuNWMwLS41NS0uNDUtMS0xLTF6TTEyIDN2MTBsMy0zaDZWM2gtOXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJwZXJtLXNjYW4td2lmaVwiPjxwYXRoIGQ9XCJNMTIgM0M2Ljk1IDMgMy4xNSA0Ljg1IDAgNy4yM0wxMiAyMiAyNCA3LjI1QzIwLjg1IDQuODcgMTcuMDUgMyAxMiAzem0xIDEzaC0ydi02aDJ2NnptLTItOFY2aDJ2MmgtMnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJwZXRzXCI+PGNpcmNsZSBjeD1cIjQuNVwiIGN5PVwiOS41XCIgcj1cIjIuNVwiPjwvY2lyY2xlPjxjaXJjbGUgY3g9XCI5XCIgY3k9XCI1LjVcIiByPVwiMi41XCI+PC9jaXJjbGU+PGNpcmNsZSBjeD1cIjE1XCIgY3k9XCI1LjVcIiByPVwiMi41XCI+PC9jaXJjbGU+PGNpcmNsZSBjeD1cIjE5LjVcIiBjeT1cIjkuNVwiIHI9XCIyLjVcIj48L2NpcmNsZT48cGF0aCBkPVwiTTE3LjM0IDE0Ljg2Yy0uODctMS4wMi0xLjYtMS44OS0yLjQ4LTIuOTEtLjQ2LS41NC0xLjA1LTEuMDgtMS43NS0xLjMyLS4xMS0uMDQtLjIyLS4wNy0uMzMtLjA5LS4yNS0uMDQtLjUyLS4wNC0uNzgtLjA0cy0uNTMgMC0uNzkuMDVjLS4xMS4wMi0uMjIuMDUtLjMzLjA5LS43LjI0LTEuMjguNzgtMS43NSAxLjMyLS44NyAxLjAyLTEuNiAxLjg5LTIuNDggMi45MS0xLjMxIDEuMzEtMi45MiAyLjc2LTIuNjIgNC43OS4yOSAxLjAyIDEuMDIgMi4wMyAyLjMzIDIuMzIuNzMuMTUgMy4wNi0uNDQgNS41NC0uNDRoLjE4YzIuNDggMCA0LjgxLjU4IDUuNTQuNDQgMS4zMS0uMjkgMi4wNC0xLjMxIDIuMzMtMi4zMi4zMS0yLjA0LTEuMy0zLjQ5LTIuNjEtNC44elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInBpY3R1cmUtaW4tcGljdHVyZVwiPjxwYXRoIGQ9XCJNMTkgN2gtOHY2aDhWN3ptMi00SDNjLTEuMSAwLTIgLjktMiAydjE0YzAgMS4xLjkgMS45OCAyIDEuOThoMThjMS4xIDAgMi0uODggMi0xLjk4VjVjMC0xLjEtLjktMi0yLTJ6bTAgMTYuMDFIM1Y0Ljk4aDE4djE0LjAzelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInBpY3R1cmUtaW4tcGljdHVyZS1hbHRcIj48cGF0aCBkPVwiTTE5IDExaC04djZoOHYtNnptNCA4VjQuOThDMjMgMy44OCAyMi4xIDMgMjEgM0gzYy0xLjEgMC0yIC44OC0yIDEuOThWMTljMCAxLjEuOSAyIDIgMmgxOGMxLjEgMCAyLS45IDItMnptLTIgLjAySDNWNC45N2gxOHYxNC4wNXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJwbGF5LWZvci13b3JrXCI+PHBhdGggZD1cIk0xMSA1djUuNTlINy41bDQuNSA0LjUgNC41LTQuNUgxM1Y1aC0yem0tNSA5YzAgMy4zMSAyLjY5IDYgNiA2czYtMi42OSA2LTZoLTJjMCAyLjIxLTEuNzkgNC00IDRzLTQtMS43OS00LTRINnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJwb2x5bWVyXCI+PHBhdGggZD1cIk0xOSA0aC00TDcuMTEgMTYuNjMgNC41IDEyIDkgNEg1TC41IDEyIDUgMjBoNGw3Ljg5LTEyLjYzTDE5LjUgMTIgMTUgMjBoNGw0LjUtOHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJwb3dlci1zZXR0aW5ncy1uZXdcIj48cGF0aCBkPVwiTTEzIDNoLTJ2MTBoMlYzem00LjgzIDIuMTdsLTEuNDIgMS40MkMxNy45OSA3Ljg2IDE5IDkuODEgMTkgMTJjMCAzLjg3LTMuMTMgNy03IDdzLTctMy4xMy03LTdjMC0yLjE5IDEuMDEtNC4xNCAyLjU4LTUuNDJMNi4xNyA1LjE3QzQuMjMgNi44MiAzIDkuMjYgMyAxMmMwIDQuOTcgNC4wMyA5IDkgOXM5LTQuMDMgOS05YzAtMi43NC0xLjIzLTUuMTgtMy4xNy02LjgzelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInByZWduYW50LXdvbWFuXCI+PHBhdGggZD1cIk05IDRjMC0xLjExLjg5LTIgMi0yczIgLjg5IDIgMi0uODkgMi0yIDItMi0uODktMi0yem03IDljLS4wMS0xLjM0LS44My0yLjUxLTItMyAwLTEuNjYtMS4zNC0zLTMtM3MtMyAxLjM0LTMgM3Y3aDJ2NWgzdi01aDN2LTR6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicHJpbnRcIj48cGF0aCBkPVwiTTE5IDhINWMtMS42NiAwLTMgMS4zNC0zIDN2Nmg0djRoMTJ2LTRoNHYtNmMwLTEuNjYtMS4zNC0zLTMtM3ptLTMgMTFIOHYtNWg4djV6bTMtN2MtLjU1IDAtMS0uNDUtMS0xcy40NS0xIDEtMSAxIC40NSAxIDEtLjQ1IDEtMSAxem0tMS05SDZ2NGgxMlYzelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInF1ZXJ5LWJ1aWxkZXJcIj48cGF0aCBkPVwiTTExLjk5IDJDNi40NyAyIDIgNi40OCAyIDEyczQuNDcgMTAgOS45OSAxMEMxNy41MiAyMiAyMiAxNy41MiAyMiAxMlMxNy41MiAyIDExLjk5IDJ6TTEyIDIwYy00LjQyIDAtOC0zLjU4LTgtOHMzLjU4LTggOC04IDggMy41OCA4IDgtMy41OCA4LTggOHptLjUtMTNIMTF2Nmw1LjI1IDMuMTUuNzUtMS4yMy00LjUtMi42N3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJxdWVzdGlvbi1hbnN3ZXJcIj48cGF0aCBkPVwiTTIxIDZoLTJ2OUg2djJjMCAuNTUuNDUgMSAxIDFoMTFsNCA0VjdjMC0uNTUtLjQ1LTEtMS0xem0tNCA2VjNjMC0uNTUtLjQ1LTEtMS0xSDNjLS41NSAwLTEgLjQ1LTEgMXYxNGw0LTRoMTBjLjU1IDAgMS0uNDUgMS0xelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInJhZGlvLWJ1dHRvbi1jaGVja2VkXCI+PHBhdGggZD1cIk0xMiA3Yy0yLjc2IDAtNSAyLjI0LTUgNXMyLjI0IDUgNSA1IDUtMi4yNCA1LTUtMi4yNC01LTUtNXptMC01QzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0wIDE4Yy00LjQyIDAtOC0zLjU4LTgtOHMzLjU4LTggOC04IDggMy41OCA4IDgtMy41OCA4LTggOHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJyYWRpby1idXR0b24tdW5jaGVja2VkXCI+PHBhdGggZD1cIk0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0wIDE4Yy00LjQyIDAtOC0zLjU4LTgtOHMzLjU4LTggOC04IDggMy41OCA4IDgtMy41OCA4LTggOHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJyZWNlaXB0XCI+PHBhdGggZD1cIk0xOCAxN0g2di0yaDEydjJ6bTAtNEg2di0yaDEydjJ6bTAtNEg2VjdoMTJ2MnpNMyAyMmwxLjUtMS41TDYgMjJsMS41LTEuNUw5IDIybDEuNS0xLjVMMTIgMjJsMS41LTEuNUwxNSAyMmwxLjUtMS41TDE4IDIybDEuNS0xLjVMMjEgMjJWMmwtMS41IDEuNUwxOCAybC0xLjUgMS41TDE1IDJsLTEuNSAxLjVMMTIgMmwtMS41IDEuNUw5IDIgNy41IDMuNSA2IDIgNC41IDMuNSAzIDJ2MjB6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicmVjb3JkLXZvaWNlLW92ZXJcIj48Y2lyY2xlIGN4PVwiOVwiIGN5PVwiOVwiIHI9XCI0XCI+PC9jaXJjbGU+PHBhdGggZD1cIk05IDE1Yy0yLjY3IDAtOCAxLjM0LTggNHYyaDE2di0yYzAtMi42Ni01LjMzLTQtOC00em03Ljc2LTkuNjRsLTEuNjggMS42OWMuODQgMS4xOC44NCAyLjcxIDAgMy44OWwxLjY4IDEuNjljMi4wMi0yLjAyIDIuMDItNS4wNyAwLTcuMjd6TTIwLjA3IDJsLTEuNjMgMS42M2MyLjc3IDMuMDIgMi43NyA3LjU2IDAgMTAuNzRMMjAuMDcgMTZjMy45LTMuODkgMy45MS05Ljk1IDAtMTR6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicmVkZWVtXCI+PHBhdGggZD1cIk0yMCA2aC0yLjE4Yy4xMS0uMzEuMTgtLjY1LjE4LTEgMC0xLjY2LTEuMzQtMy0zLTMtMS4wNSAwLTEuOTYuNTQtMi41IDEuMzVsLS41LjY3LS41LS42OEMxMC45NiAyLjU0IDEwLjA1IDIgOSAyIDcuMzQgMiA2IDMuMzQgNiA1YzAgLjM1LjA3LjY5LjE4IDFINGMtMS4xMSAwLTEuOTkuODktMS45OSAyTDIgMTljMCAxLjExLjg5IDIgMiAyaDE2YzEuMTEgMCAyLS44OSAyLTJWOGMwLTEuMTEtLjg5LTItMi0yem0tNS0yYy41NSAwIDEgLjQ1IDEgMXMtLjQ1IDEtMSAxLTEtLjQ1LTEtMSAuNDUtMSAxLTF6TTkgNGMuNTUgMCAxIC40NSAxIDFzLS40NSAxLTEgMS0xLS40NS0xLTEgLjQ1LTEgMS0xem0xMSAxNUg0di0yaDE2djJ6bTAtNUg0VjhoNS4wOEw3IDEwLjgzIDguNjIgMTIgMTEgOC43NmwxLTEuMzYgMSAxLjM2TDE1LjM4IDEyIDE3IDEwLjgzIDE0LjkyIDhIMjB2NnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJyZWRvXCI+PHBhdGggZD1cIk0xOC40IDEwLjZDMTYuNTUgOC45OSAxNC4xNSA4IDExLjUgOGMtNC42NSAwLTguNTggMy4wMy05Ljk2IDcuMjJMMy45IDE2YzEuMDUtMy4xOSA0LjA1LTUuNSA3LjYtNS41IDEuOTUgMCAzLjczLjcyIDUuMTIgMS44OEwxMyAxNmg5VjdsLTMuNiAzLjZ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicmVmcmVzaFwiPjxwYXRoIGQ9XCJNMTcuNjUgNi4zNUMxNi4yIDQuOSAxNC4yMSA0IDEyIDRjLTQuNDIgMC03Ljk5IDMuNTgtNy45OSA4czMuNTcgOCA3Ljk5IDhjMy43MyAwIDYuODQtMi41NSA3LjczLTZoLTIuMDhjLS44MiAyLjMzLTMuMDQgNC01LjY1IDQtMy4zMSAwLTYtMi42OS02LTZzMi42OS02IDYtNmMxLjY2IDAgMy4xNC42OSA0LjIyIDEuNzhMMTMgMTFoN1Y0bC0yLjM1IDIuMzV6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicmVtb3ZlXCI+PHBhdGggZD1cIk0xOSAxM0g1di0yaDE0djJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicmVtb3ZlLWNpcmNsZVwiPjxwYXRoIGQ9XCJNMTIgMkM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptNSAxMUg3di0yaDEwdjJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicmVtb3ZlLWNpcmNsZS1vdXRsaW5lXCI+PHBhdGggZD1cIk03IDExdjJoMTB2LTJIN3ptNS05QzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0wIDE4Yy00LjQxIDAtOC0zLjU5LTgtOHMzLjU5LTggOC04IDggMy41OSA4IDgtMy41OSA4LTggOHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJyZW1vdmUtc2hvcHBpbmctY2FydFwiPjxwYXRoIGQ9XCJNMjIuNzMgMjIuNzNMMi43NyAyLjc3IDIgMmwtLjczLS43M0wwIDIuNTRsNC4zOSA0LjM5IDIuMjEgNC42Ni0xLjM1IDIuNDVjLS4xNi4yOC0uMjUuNjEtLjI1Ljk2IDAgMS4xLjkgMiAyIDJoNy40NmwxLjM4IDEuMzhjLS41LjM2LS44My45NS0uODMgMS42MiAwIDEuMS44OSAyIDEuOTkgMiAuNjcgMCAxLjI2LS4zMyAxLjYyLS44NEwyMS40NiAyNGwxLjI3LTEuMjd6TTcuNDIgMTVjLS4xNCAwLS4yNS0uMTEtLjI1LS4yNWwuMDMtLjEyLjktMS42M2gyLjM2bDIgMkg3LjQyem04LjEzLTJjLjc1IDAgMS40MS0uNDEgMS43NS0xLjAzbDMuNTgtNi40OWMuMDgtLjE0LjEyLS4zMS4xMi0uNDggMC0uNTUtLjQ1LTEtMS0xSDYuNTRsOS4wMSA5ek03IDE4Yy0xLjEgMC0xLjk5LjktMS45OSAyUzUuOSAyMiA3IDIyczItLjkgMi0yLS45LTItMi0yelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInJlb3JkZXJcIj48cGF0aCBkPVwiTTMgMTVoMTh2LTJIM3Yyem0wIDRoMTh2LTJIM3Yyem0wLThoMThWOUgzdjJ6bTAtNnYyaDE4VjVIM3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJyZXBseVwiPjxwYXRoIGQ9XCJNMTAgOVY1bC03IDcgNyA3di00LjFjNSAwIDguNSAxLjYgMTEgNS4xLTEtNS00LTEwLTExLTExelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInJlcGx5LWFsbFwiPjxwYXRoIGQ9XCJNNyA4VjVsLTcgNyA3IDd2LTNsLTQtNCA0LTR6bTYgMVY1bC03IDcgNyA3di00LjFjNSAwIDguNSAxLjYgMTEgNS4xLTEtNS00LTEwLTExLTExelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInJlcG9ydFwiPjxwYXRoIGQ9XCJNMTUuNzMgM0g4LjI3TDMgOC4yN3Y3LjQ2TDguMjcgMjFoNy40NkwyMSAxNS43M1Y4LjI3TDE1LjczIDN6TTEyIDE3LjNjLS43MiAwLTEuMy0uNTgtMS4zLTEuMyAwLS43Mi41OC0xLjMgMS4zLTEuMy43MiAwIDEuMy41OCAxLjMgMS4zIDAgLjcyLS41OCAxLjMtMS4zIDEuM3ptMS00LjNoLTJWN2gydjZ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicmVwb3J0LXByb2JsZW1cIj48cGF0aCBkPVwiTTEgMjFoMjJMMTIgMiAxIDIxem0xMi0zaC0ydi0yaDJ2MnptMC00aC0ydi00aDJ2NHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJyZXN0b3JlXCI+PHBhdGggZD1cIk0xMyAzYy00Ljk3IDAtOSA0LjAzLTkgOUgxbDMuODkgMy44OS4wNy4xNEw5IDEySDZjMC0zLjg3IDMuMTMtNyA3LTdzNyAzLjEzIDcgNy0zLjEzIDctNyA3Yy0xLjkzIDAtMy42OC0uNzktNC45NC0yLjA2bC0xLjQyIDEuNDJDOC4yNyAxOS45OSAxMC41MSAyMSAxMyAyMWM0Ljk3IDAgOS00LjAzIDktOXMtNC4wMy05LTktOXptLTEgNXY1bDQuMjggMi41NC43Mi0xLjIxLTMuNS0yLjA4VjhIMTJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicmVzdG9yZS1wYWdlXCI+PHBhdGggZD1cIk0xNCAySDZjLTEuMSAwLTEuOTkuOS0xLjk5IDJMNCAyMGMwIDEuMS44OSAyIDEuOTkgMkgxOGMxLjEgMCAyLS45IDItMlY4bC02LTZ6bS0yIDE2Yy0yLjA1IDAtMy44MS0xLjI0LTQuNTgtM2gxLjcxYy42My45IDEuNjggMS41IDIuODcgMS41IDEuOTMgMCAzLjUtMS41NyAzLjUtMy41UzEzLjkzIDkuNSAxMiA5LjVjLTEuMzUgMC0yLjUyLjc4LTMuMSAxLjlsMS42IDEuNmgtNFY5bDEuMyAxLjNDOC42OSA4LjkyIDEwLjIzIDggMTIgOGMyLjc2IDAgNSAyLjI0IDUgNXMtMi4yNCA1LTUgNXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJyb29tXCI+PHBhdGggZD1cIk0xMiAyQzguMTMgMiA1IDUuMTMgNSA5YzAgNS4yNSA3IDEzIDcgMTNzNy03Ljc1IDctMTNjMC0zLjg3LTMuMTMtNy03LTd6bTAgOS41Yy0xLjM4IDAtMi41LTEuMTItMi41LTIuNXMxLjEyLTIuNSAyLjUtMi41IDIuNSAxLjEyIDIuNSAyLjUtMS4xMiAyLjUtMi41IDIuNXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJyb3VuZGVkLWNvcm5lclwiPjxwYXRoIGQ9XCJNMTkgMTloMnYyaC0ydi0yem0wLTJoMnYtMmgtMnYyek0zIDEzaDJ2LTJIM3Yyem0wIDRoMnYtMkgzdjJ6bTAtOGgyVjdIM3Yyem0wLTRoMlYzSDN2MnptNCAwaDJWM0g3djJ6bTggMTZoMnYtMmgtMnYyem0tNCAwaDJ2LTJoLTJ2MnptNCAwaDJ2LTJoLTJ2MnptLTggMGgydi0ySDd2MnptLTQgMGgydi0ySDN2MnpNMjEgOGMwLTIuNzYtMi4yNC01LTUtNWgtNXYyaDVjMS42NSAwIDMgMS4zNSAzIDN2NWgyVjh6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwicm93aW5nXCI+PHBhdGggZD1cIk04LjUgMTQuNUw0IDE5bDEuNSAxLjVMOSAxN2gybC0yLjUtMi41ek0xNSAxYy0xLjEgMC0yIC45LTIgMnMuOSAyIDIgMiAyLS45IDItMi0uOS0yLTItMnptNiAyMC4wMUwxOCAyNGwtMi45OS0zLjAxVjE5LjVsLTcuMS03LjA5Yy0uMzEuMDUtLjYxLjA3LS45MS4wN3YtMi4xNmMxLjY2LjAzIDMuNjEtLjg3IDQuNjctMi4wNGwxLjQtMS41NWMuMTktLjIxLjQzLS4zOC42OS0uNS4yOS0uMTQuNjItLjIzLjk2LS4yM2guMDNDMTUuOTkgNi4wMSAxNyA3LjAyIDE3IDguMjZ2NS43NWMwIC44NC0uMzUgMS42MS0uOTIgMi4xNmwtMy41OC0zLjU4di0yLjI3Yy0uNjMuNTItMS40MyAxLjAyLTIuMjkgMS4zOUwxNi41IDE4SDE4bDMgMy4wMXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzYXZlXCI+PHBhdGggZD1cIk0xNyAzSDVjLTEuMTEgMC0yIC45LTIgMnYxNGMwIDEuMS44OSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMlY3bC00LTR6bS01IDE2Yy0xLjY2IDAtMy0xLjM0LTMtM3MxLjM0LTMgMy0zIDMgMS4zNCAzIDMtMS4zNCAzLTMgM3ptMy0xMEg1VjVoMTB2NHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzY2hlZHVsZVwiPjxwYXRoIGQ9XCJNMTEuOTkgMkM2LjQ3IDIgMiA2LjQ4IDIgMTJzNC40NyAxMCA5Ljk5IDEwQzE3LjUyIDIyIDIyIDE3LjUyIDIyIDEyUzE3LjUyIDIgMTEuOTkgMnpNMTIgMjBjLTQuNDIgMC04LTMuNTgtOC04czMuNTgtOCA4LTggOCAzLjU4IDggOC0zLjU4IDgtOCA4em0uNS0xM0gxMXY2bDUuMjUgMy4xNS43NS0xLjIzLTQuNS0yLjY3elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInNlYXJjaFwiPjxwYXRoIGQ9XCJNMTUuNSAxNGgtLjc5bC0uMjgtLjI3QzE1LjQxIDEyLjU5IDE2IDExLjExIDE2IDkuNSAxNiA1LjkxIDEzLjA5IDMgOS41IDNTMyA1LjkxIDMgOS41IDUuOTEgMTYgOS41IDE2YzEuNjEgMCAzLjA5LS41OSA0LjIzLTEuNTdsLjI3LjI4di43OWw1IDQuOTlMMjAuNDkgMTlsLTQuOTktNXptLTYgMEM3LjAxIDE0IDUgMTEuOTkgNSA5LjVTNy4wMSA1IDkuNSA1IDE0IDcuMDEgMTQgOS41IDExLjk5IDE0IDkuNSAxNHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzZWxlY3QtYWxsXCI+PHBhdGggZD1cIk0zIDVoMlYzYy0xLjEgMC0yIC45LTIgMnptMCA4aDJ2LTJIM3Yyem00IDhoMnYtMkg3djJ6TTMgOWgyVjdIM3Yyem0xMC02aC0ydjJoMlYzem02IDB2MmgyYzAtMS4xLS45LTItMi0yek01IDIxdi0ySDNjMCAxLjEuOSAyIDIgMnptLTItNGgydi0ySDN2MnpNOSAzSDd2MmgyVjN6bTIgMThoMnYtMmgtMnYyem04LThoMnYtMmgtMnYyem0wIDhjMS4xIDAgMi0uOSAyLTJoLTJ2MnptMC0xMmgyVjdoLTJ2MnptMCA4aDJ2LTJoLTJ2MnptLTQgNGgydi0yaC0ydjJ6bTAtMTZoMlYzaC0ydjJ6TTcgMTdoMTBWN0g3djEwem0yLThoNnY2SDlWOXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzZW5kXCI+PHBhdGggZD1cIk0yLjAxIDIxTDIzIDEyIDIuMDEgMyAyIDEwbDE1IDItMTUgMnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzZXR0aW5nc1wiPjxwYXRoIGQ9XCJNMTkuNDMgMTIuOThjLjA0LS4zMi4wNy0uNjQuMDctLjk4cy0uMDMtLjY2LS4wNy0uOThsMi4xMS0xLjY1Yy4xOS0uMTUuMjQtLjQyLjEyLS42NGwtMi0zLjQ2Yy0uMTItLjIyLS4zOS0uMy0uNjEtLjIybC0yLjQ5IDFjLS41Mi0uNC0xLjA4LS43My0xLjY5LS45OGwtLjM4LTIuNjVDMTQuNDYgMi4xOCAxNC4yNSAyIDE0IDJoLTRjLS4yNSAwLS40Ni4xOC0uNDkuNDJsLS4zOCAyLjY1Yy0uNjEuMjUtMS4xNy41OS0xLjY5Ljk4bC0yLjQ5LTFjLS4yMy0uMDktLjQ5IDAtLjYxLjIybC0yIDMuNDZjLS4xMy4yMi0uMDcuNDkuMTIuNjRsMi4xMSAxLjY1Yy0uMDQuMzItLjA3LjY1LS4wNy45OHMuMDMuNjYuMDcuOThsLTIuMTEgMS42NWMtLjE5LjE1LS4yNC40Mi0uMTIuNjRsMiAzLjQ2Yy4xMi4yMi4zOS4zLjYxLjIybDIuNDktMWMuNTIuNCAxLjA4LjczIDEuNjkuOThsLjM4IDIuNjVjLjAzLjI0LjI0LjQyLjQ5LjQyaDRjLjI1IDAgLjQ2LS4xOC40OS0uNDJsLjM4LTIuNjVjLjYxLS4yNSAxLjE3LS41OSAxLjY5LS45OGwyLjQ5IDFjLjIzLjA5LjQ5IDAgLjYxLS4yMmwyLTMuNDZjLjEyLS4yMi4wNy0uNDktLjEyLS42NGwtMi4xMS0xLjY1ek0xMiAxNS41Yy0xLjkzIDAtMy41LTEuNTctMy41LTMuNXMxLjU3LTMuNSAzLjUtMy41IDMuNSAxLjU3IDMuNSAzLjUtMS41NyAzLjUtMy41IDMuNXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzZXR0aW5ncy1hcHBsaWNhdGlvbnNcIj48cGF0aCBkPVwiTTEyIDEwYy0xLjEgMC0yIC45LTIgMnMuOSAyIDIgMiAyLS45IDItMi0uOS0yLTItMnptNy03SDVjLTEuMTEgMC0yIC45LTIgMnYxNGMwIDEuMS44OSAyIDIgMmgxNGMxLjExIDAgMi0uOSAyLTJWNWMwLTEuMS0uODktMi0yLTJ6bS0xLjc1IDljMCAuMjMtLjAyLjQ2LS4wNS42OGwxLjQ4IDEuMTZjLjEzLjExLjE3LjMuMDguNDVsLTEuNCAyLjQyYy0uMDkuMTUtLjI3LjIxLS40My4xNWwtMS43NC0uN2MtLjM2LjI4LS43Ni41MS0xLjE4LjY5bC0uMjYgMS44NWMtLjAzLjE3LS4xOC4zLS4zNS4zaC0yLjhjLS4xNyAwLS4zMi0uMTMtLjM1LS4yOWwtLjI2LTEuODVjLS40My0uMTgtLjgyLS40MS0xLjE4LS42OWwtMS43NC43Yy0uMTYuMDYtLjM0IDAtLjQzLS4xNWwtMS40LTIuNDJjLS4wOS0uMTUtLjA1LS4zNC4wOC0uNDVsMS40OC0xLjE2Yy0uMDMtLjIzLS4wNS0uNDYtLjA1LS42OSAwLS4yMy4wMi0uNDYuMDUtLjY4bC0xLjQ4LTEuMTZjLS4xMy0uMTEtLjE3LS4zLS4wOC0uNDVsMS40LTIuNDJjLjA5LS4xNS4yNy0uMjEuNDMtLjE1bDEuNzQuN2MuMzYtLjI4Ljc2LS41MSAxLjE4LS42OWwuMjYtMS44NWMuMDMtLjE3LjE4LS4zLjM1LS4zaDIuOGMuMTcgMCAuMzIuMTMuMzUuMjlsLjI2IDEuODVjLjQzLjE4LjgyLjQxIDEuMTguNjlsMS43NC0uN2MuMTYtLjA2LjM0IDAgLjQzLjE1bDEuNCAyLjQyYy4wOS4xNS4wNS4zNC0uMDguNDVsLTEuNDggMS4xNmMuMDMuMjMuMDUuNDYuMDUuNjl6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwic2V0dGluZ3MtYmFja3VwLXJlc3RvcmVcIj48cGF0aCBkPVwiTTE0IDEyYzAtMS4xLS45LTItMi0ycy0yIC45LTIgMiAuOSAyIDIgMiAyLS45IDItMnptLTItOWMtNC45NyAwLTkgNC4wMy05IDlIMGw0IDQgNC00SDVjMC0zLjg3IDMuMTMtNyA3LTdzNyAzLjEzIDcgNy0zLjEzIDctNyA3Yy0xLjUxIDAtMi45MS0uNDktNC4wNi0xLjNsLTEuNDIgMS40NEM4LjA0IDIwLjMgOS45NCAyMSAxMiAyMWM0Ljk3IDAgOS00LjAzIDktOXMtNC4wMy05LTktOXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzZXR0aW5ncy1ibHVldG9vdGhcIj48cGF0aCBkPVwiTTExIDI0aDJ2LTJoLTJ2MnptLTQgMGgydi0ySDd2MnptOCAwaDJ2LTJoLTJ2MnptMi43MS0xOC4yOUwxMiAwaC0xdjcuNTlMNi40MSAzIDUgNC40MSAxMC41OSAxMCA1IDE1LjU5IDYuNDEgMTcgMTEgMTIuNDFWMjBoMWw1LjcxLTUuNzEtNC4zLTQuMjkgNC4zLTQuMjl6TTEzIDMuODNsMS44OCAxLjg4TDEzIDcuNTlWMy44M3ptMS44OCAxMC40NkwxMyAxNi4xN3YtMy43NmwxLjg4IDEuODh6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwic2V0dGluZ3MtYnJpZ2h0bmVzc1wiPjxwYXRoIGQ9XCJNMjEgM0gzYy0xLjEgMC0yIC45LTIgMnYxNGMwIDEuMS45IDIgMiAyaDE4YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJ6bTAgMTYuMDFIM1Y0Ljk5aDE4djE0LjAyek04IDE2aDIuNWwxLjUgMS41IDEuNS0xLjVIMTZ2LTIuNWwxLjUtMS41LTEuNS0xLjVWOGgtMi41TDEyIDYuNSAxMC41IDhIOHYyLjVMNi41IDEyIDggMTMuNVYxNnptNC03YzEuNjYgMCAzIDEuMzQgMyAzcy0xLjM0IDMtMyAzVjl6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwic2V0dGluZ3MtY2VsbFwiPjxwYXRoIGQ9XCJNNyAyNGgydi0ySDd2MnptNCAwaDJ2LTJoLTJ2MnptNCAwaDJ2LTJoLTJ2MnpNMTYgLjAxTDggMEM2LjkgMCA2IC45IDYgMnYxNmMwIDEuMS45IDIgMiAyaDhjMS4xIDAgMi0uOSAyLTJWMmMwLTEuMS0uOS0xLjk5LTItMS45OXpNMTYgMTZIOFY0aDh2MTJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwic2V0dGluZ3MtZXRoZXJuZXRcIj48cGF0aCBkPVwiTTcuNzcgNi43Nkw2LjIzIDUuNDguODIgMTJsNS40MSA2LjUyIDEuNTQtMS4yOEwzLjQyIDEybDQuMzUtNS4yNHpNNyAxM2gydi0ySDd2MnptMTAtMmgtMnYyaDJ2LTJ6bS02IDJoMnYtMmgtMnYyem02Ljc3LTcuNTJsLTEuNTQgMS4yOEwyMC41OCAxMmwtNC4zNSA1LjI0IDEuNTQgMS4yOEwyMy4xOCAxMmwtNS40MS02LjUyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInNldHRpbmdzLWlucHV0LWFudGVubmFcIj48cGF0aCBkPVwiTTEyIDVjLTMuODcgMC03IDMuMTMtNyA3aDJjMC0yLjc2IDIuMjQtNSA1LTVzNSAyLjI0IDUgNWgyYzAtMy44Ny0zLjEzLTctNy03em0xIDkuMjljLjg4LS4zOSAxLjUtMS4yNiAxLjUtMi4yOSAwLTEuMzgtMS4xMi0yLjUtMi41LTIuNVM5LjUgMTAuNjIgOS41IDEyYzAgMS4wMi42MiAxLjkgMS41IDIuMjl2My4zTDcuNTkgMjEgOSAyMi40MWwzLTMgMyAzTDE2LjQxIDIxIDEzIDE3LjU5di0zLjN6TTEyIDFDNS45MyAxIDEgNS45MyAxIDEyaDJjMC00Ljk3IDQuMDMtOSA5LTlzOSA0LjAzIDkgOWgyYzAtNi4wNy00LjkzLTExLTExLTExelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInNldHRpbmdzLWlucHV0LWNvbXBvbmVudFwiPjxwYXRoIGQ9XCJNNSAyYzAtLjU1LS40NS0xLTEtMXMtMSAuNDUtMSAxdjRIMXY2aDZWNkg1VjJ6bTQgMTRjMCAxLjMuODQgMi40IDIgMi44MlYyM2gydi00LjE4YzEuMTYtLjQxIDItMS41MSAyLTIuODJ2LTJIOXYyem0tOCAwYzAgMS4zLjg0IDIuNCAyIDIuODJWMjNoMnYtNC4xOEM2LjE2IDE4LjQgNyAxNy4zIDcgMTZ2LTJIMXYyek0yMSA2VjJjMC0uNTUtLjQ1LTEtMS0xcy0xIC40NS0xIDF2NGgtMnY2aDZWNmgtMnptLTgtNGMwLS41NS0uNDUtMS0xLTFzLTEgLjQ1LTEgMXY0SDl2Nmg2VjZoLTJWMnptNCAxNGMwIDEuMy44NCAyLjQgMiAyLjgyVjIzaDJ2LTQuMThjMS4xNi0uNDEgMi0xLjUxIDItMi44MnYtMmgtNnYyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInNldHRpbmdzLWlucHV0LWNvbXBvc2l0ZVwiPjxwYXRoIGQ9XCJNNSAyYzAtLjU1LS40NS0xLTEtMXMtMSAuNDUtMSAxdjRIMXY2aDZWNkg1VjJ6bTQgMTRjMCAxLjMuODQgMi40IDIgMi44MlYyM2gydi00LjE4YzEuMTYtLjQxIDItMS41MSAyLTIuODJ2LTJIOXYyem0tOCAwYzAgMS4zLjg0IDIuNCAyIDIuODJWMjNoMnYtNC4xOEM2LjE2IDE4LjQgNyAxNy4zIDcgMTZ2LTJIMXYyek0yMSA2VjJjMC0uNTUtLjQ1LTEtMS0xcy0xIC40NS0xIDF2NGgtMnY2aDZWNmgtMnptLTgtNGMwLS41NS0uNDUtMS0xLTFzLTEgLjQ1LTEgMXY0SDl2Nmg2VjZoLTJWMnptNCAxNGMwIDEuMy44NCAyLjQgMiAyLjgyVjIzaDJ2LTQuMThjMS4xNi0uNDEgMi0xLjUxIDItMi44MnYtMmgtNnYyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInNldHRpbmdzLWlucHV0LWhkbWlcIj48cGF0aCBkPVwiTTE4IDdWNGMwLTEuMS0uOS0yLTItMkg4Yy0xLjEgMC0yIC45LTIgMnYzSDV2NmwzIDZ2M2g4di0zbDMtNlY3aC0xek04IDRoOHYzaC0yVjVoLTF2MmgtMlY1aC0xdjJIOFY0elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInNldHRpbmdzLWlucHV0LXN2aWRlb1wiPjxwYXRoIGQ9XCJNOCAxMS41YzAtLjgzLS42Ny0xLjUtMS41LTEuNVM1IDEwLjY3IDUgMTEuNSA1LjY3IDEzIDYuNSAxMyA4IDEyLjMzIDggMTEuNXptNy01YzAtLjgzLS42Ny0xLjUtMS41LTEuNWgtM0M5LjY3IDUgOSA1LjY3IDkgNi41UzkuNjcgOCAxMC41IDhoM2MuODMgMCAxLjUtLjY3IDEuNS0xLjV6TTguNSAxNWMtLjgzIDAtMS41LjY3LTEuNSAxLjVTNy42NyAxOCA4LjUgMThzMS41LS42NyAxLjUtMS41UzkuMzMgMTUgOC41IDE1ek0xMiAxQzUuOTMgMSAxIDUuOTMgMSAxMnM0LjkzIDExIDExIDExIDExLTQuOTMgMTEtMTFTMTguMDcgMSAxMiAxem0wIDIwYy00Ljk2IDAtOS00LjA0LTktOXM0LjA0LTkgOS05IDkgNC4wNCA5IDktNC4wNCA5LTkgOXptNS41LTExYy0uODMgMC0xLjUuNjctMS41IDEuNXMuNjcgMS41IDEuNSAxLjUgMS41LS42NyAxLjUtMS41LS42Ny0xLjUtMS41LTEuNXptLTIgNWMtLjgzIDAtMS41LjY3LTEuNSAxLjVzLjY3IDEuNSAxLjUgMS41IDEuNS0uNjcgMS41LTEuNS0uNjctMS41LTEuNS0xLjV6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwic2V0dGluZ3Mtb3ZlcnNjYW5cIj48cGF0aCBkPVwiTTEyLjAxIDUuNUwxMCA4aDRsLTEuOTktMi41ek0xOCAxMHY0bDIuNS0xLjk5TDE4IDEwek02IDEwbC0yLjUgMi4wMUw2IDE0di00em04IDZoLTRsMi4wMSAyLjVMMTQgMTZ6bTctMTNIM2MtMS4xIDAtMiAuOS0yIDJ2MTRjMCAxLjEuOSAyIDIgMmgxOGMxLjEgMCAyLS45IDItMlY1YzAtMS4xLS45LTItMi0yem0wIDE2LjAxSDNWNC45OWgxOHYxNC4wMnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzZXR0aW5ncy1waG9uZVwiPjxwYXRoIGQ9XCJNMTMgOWgtMnYyaDJWOXptNCAwaC0ydjJoMlY5em0zIDYuNWMtMS4yNSAwLTIuNDUtLjItMy41Ny0uNTctLjM1LS4xMS0uNzQtLjAzLTEuMDIuMjRsLTIuMiAyLjJjLTIuODMtMS40NC01LjE1LTMuNzUtNi41OS02LjU4bDIuMi0yLjIxYy4yOC0uMjcuMzYtLjY2LjI1LTEuMDFDOC43IDYuNDUgOC41IDUuMjUgOC41IDRjMC0uNTUtLjQ1LTEtMS0xSDRjLS41NSAwLTEgLjQ1LTEgMSAwIDkuMzkgNy42MSAxNyAxNyAxNyAuNTUgMCAxLS40NSAxLTF2LTMuNWMwLS41NS0uNDUtMS0xLTF6TTE5IDl2MmgyVjloLTJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwic2V0dGluZ3MtcG93ZXJcIj48cGF0aCBkPVwiTTcgMjRoMnYtMkg3djJ6bTQgMGgydi0yaC0ydjJ6bTItMjJoLTJ2MTBoMlYyem0zLjU2IDIuNDRsLTEuNDUgMS40NUMxNi44NCA2Ljk0IDE4IDguODMgMTggMTFjMCAzLjMxLTIuNjkgNi02IDZzLTYtMi42OS02LTZjMC0yLjE3IDEuMTYtNC4wNiAyLjg4LTUuMTJMNy40NCA0LjQ0QzUuMzYgNS44OCA0IDguMjggNCAxMWMwIDQuNDIgMy41OCA4IDggOHM4LTMuNTggOC04YzAtMi43Mi0xLjM2LTUuMTItMy40NC02LjU2ek0xNSAyNGgydi0yaC0ydjJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwic2V0dGluZ3MtcmVtb3RlXCI+PHBhdGggZD1cIk0xNSA5SDljLS41NSAwLTEgLjQ1LTEgMXYxMmMwIC41NS40NSAxIDEgMWg2Yy41NSAwIDEtLjQ1IDEtMVYxMGMwLS41NS0uNDUtMS0xLTF6bS0zIDZjLTEuMSAwLTItLjktMi0ycy45LTIgMi0yIDIgLjkgMiAyLS45IDItMiAyek03LjA1IDYuMDVsMS40MSAxLjQxQzkuMzcgNi41NiAxMC42MiA2IDEyIDZzMi42My41NiAzLjU0IDEuNDZsMS40MS0xLjQxQzE1LjY4IDQuNzggMTMuOTMgNCAxMiA0cy0zLjY4Ljc4LTQuOTUgMi4wNXpNMTIgMEM4Ljk2IDAgNi4yMSAxLjIzIDQuMjIgMy4yMmwxLjQxIDEuNDFDNy4yNiAzLjAxIDkuNTEgMiAxMiAyczQuNzQgMS4wMSA2LjM2IDIuNjRsMS40MS0xLjQxQzE3Ljc5IDEuMjMgMTUuMDQgMCAxMiAwelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInNldHRpbmdzLXZvaWNlXCI+PHBhdGggZD1cIk03IDI0aDJ2LTJIN3Yyem01LTExYzEuNjYgMCAyLjk5LTEuMzQgMi45OS0zTDE1IDRjMC0xLjY2LTEuMzQtMy0zLTNTOSAyLjM0IDkgNHY2YzAgMS42NiAxLjM0IDMgMyAzem0tMSAxMWgydi0yaC0ydjJ6bTQgMGgydi0yaC0ydjJ6bTQtMTRoLTEuN2MwIDMtMi41NCA1LjEtNS4zIDUuMVM2LjcgMTMgNi43IDEwSDVjMCAzLjQxIDIuNzIgNi4yMyA2IDYuNzJWMjBoMnYtMy4yOGMzLjI4LS40OSA2LTMuMzEgNi02LjcyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInNob3BcIj48cGF0aCBkPVwiTTE2IDZWNGMwLTEuMTEtLjg5LTItMi0yaC00Yy0xLjExIDAtMiAuODktMiAydjJIMnYxM2MwIDEuMTEuODkgMiAyIDJoMTZjMS4xMSAwIDItLjg5IDItMlY2aC02em0tNi0yaDR2MmgtNFY0ek05IDE4VjlsNy41IDRMOSAxOHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzaG9wLXR3b1wiPjxwYXRoIGQ9XCJNMyA5SDF2MTFjMCAxLjExLjg5IDIgMiAyaDE0YzEuMTEgMCAyLS44OSAyLTJIM1Y5em0xNS00VjNjMC0xLjExLS44OS0yLTItMmgtNGMtMS4xMSAwLTIgLjg5LTIgMnYySDV2MTFjMCAxLjExLjg5IDIgMiAyaDE0YzEuMTEgMCAyLS44OSAyLTJWNWgtNXptLTYtMmg0djJoLTRWM3ptMCAxMlY4bDUuNSAzLTUuNSA0elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInNob3BwaW5nLWJhc2tldFwiPjxwYXRoIGQ9XCJNMTcuMjEgOWwtNC4zOC02LjU2Yy0uMTktLjI4LS41MS0uNDItLjgzLS40Mi0uMzIgMC0uNjQuMTQtLjgzLjQzTDYuNzkgOUgyYy0uNTUgMC0xIC40NS0xIDEgMCAuMDkuMDEuMTguMDQuMjdsMi41NCA5LjI3Yy4yMy44NCAxIDEuNDYgMS45MiAxLjQ2aDEzYy45MiAwIDEuNjktLjYyIDEuOTMtMS40NmwyLjU0LTkuMjdMMjMgMTBjMC0uNTUtLjQ1LTEtMS0xaC00Ljc5ek05IDlsMy00LjRMMTUgOUg5em0zIDhjLTEuMSAwLTItLjktMi0ycy45LTIgMi0yIDIgLjkgMiAyLS45IDItMiAyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInNob3BwaW5nLWNhcnRcIj48cGF0aCBkPVwiTTcgMThjLTEuMSAwLTEuOTkuOS0xLjk5IDJTNS45IDIyIDcgMjJzMi0uOSAyLTItLjktMi0yLTJ6TTEgMnYyaDJsMy42IDcuNTktMS4zNSAyLjQ1Yy0uMTYuMjgtLjI1LjYxLS4yNS45NiAwIDEuMS45IDIgMiAyaDEydi0ySDcuNDJjLS4xNCAwLS4yNS0uMTEtLjI1LS4yNWwuMDMtLjEyLjktMS42M2g3LjQ1Yy43NSAwIDEuNDEtLjQxIDEuNzUtMS4wM2wzLjU4LTYuNDljLjA4LS4xNC4xMi0uMzEuMTItLjQ4IDAtLjU1LS40NS0xLTEtMUg1LjIxbC0uOTQtMkgxem0xNiAxNmMtMS4xIDAtMS45OS45LTEuOTkgMnMuODkgMiAxLjk5IDIgMi0uOSAyLTItLjktMi0yLTJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwic29ydFwiPjxwYXRoIGQ9XCJNMyAxOGg2di0ySDN2MnpNMyA2djJoMThWNkgzem0wIDdoMTJ2LTJIM3YyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInNwZWFrZXItbm90ZXNcIj48cGF0aCBkPVwiTTIwIDJINGMtMS4xIDAtMS45OS45LTEuOTkgMkwyIDIybDQtNGgxNGMxLjEgMCAyLS45IDItMlY0YzAtMS4xLS45LTItMi0yek04IDE0SDZ2LTJoMnYyem0wLTNINlY5aDJ2MnptMC0zSDZWNmgydjJ6bTcgNmgtNXYtMmg1djJ6bTMtM2gtOFY5aDh2MnptMC0zaC04VjZoOHYyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInNwZWFrZXItbm90ZXMtb2ZmXCI+PHBhdGggZD1cIk0xMC41NCAxMWwtLjU0LS41NEw3LjU0IDggNiA2LjQ2IDIuMzggMi44NCAxLjI3IDEuNzMgMCAzbDIuMDEgMi4wMUwyIDIybDQtNGg5bDUuNzMgNS43M0wyMiAyMi40NiAxNy41NCAxOGwtNy03ek04IDE0SDZ2LTJoMnYyem0tMi0zVjlsMiAySDZ6bTE0LTlINC4wOEwxMCA3LjkyVjZoOHYyaC03LjkybDEgMUgxOHYyaC00LjkybDYuOTkgNi45OUMyMS4xNCAxNy45NSAyMiAxNy4wOCAyMiAxNlY0YzAtMS4xLS45LTItMi0yelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInNwZWxsY2hlY2tcIj48cGF0aCBkPVwiTTEyLjQ1IDE2aDIuMDlMOS40MyAzSDcuNTdMMi40NiAxNmgyLjA5bDEuMTItM2g1LjY0bDEuMTQgM3ptLTYuMDItNUw4LjUgNS40OCAxMC41NyAxMUg2LjQzem0xNS4xNi41OWwtOC4wOSA4LjA5TDkuODMgMTZsLTEuNDEgMS40MSA1LjA5IDUuMDlMMjMgMTNsLTEuNDEtMS40MXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzdGFyXCI+PHBhdGggZD1cIk0xMiAxNy4yN0wxOC4xOCAyMWwtMS42NC03LjAzTDIyIDkuMjRsLTcuMTktLjYxTDEyIDIgOS4xOSA4LjYzIDIgOS4yNGw1LjQ2IDQuNzNMNS44MiAyMXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzdGFyLWJvcmRlclwiPjxwYXRoIGQ9XCJNMjIgOS4yNGwtNy4xOS0uNjJMMTIgMiA5LjE5IDguNjMgMiA5LjI0bDUuNDYgNC43M0w1LjgyIDIxIDEyIDE3LjI3IDE4LjE4IDIxbC0xLjYzLTcuMDNMMjIgOS4yNHpNMTIgMTUuNGwtMy43NiAyLjI3IDEtNC4yOC0zLjMyLTIuODggNC4zOC0uMzhMMTIgNi4xbDEuNzEgNC4wNCA0LjM4LjM4LTMuMzIgMi44OCAxIDQuMjhMMTIgMTUuNHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzdGFyLWhhbGZcIj48cGF0aCBkPVwiTTIyIDkuMjRsLTcuMTktLjYyTDEyIDIgOS4xOSA4LjYzIDIgOS4yNGw1LjQ2IDQuNzNMNS44MiAyMSAxMiAxNy4yNyAxOC4xOCAyMWwtMS42My03LjAzTDIyIDkuMjR6TTEyIDE1LjRWNi4xbDEuNzEgNC4wNCA0LjM4LjM4LTMuMzIgMi44OCAxIDQuMjhMMTIgMTUuNHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzdGFyc1wiPjxwYXRoIGQ9XCJNMTEuOTkgMkM2LjQ3IDIgMiA2LjQ4IDIgMTJzNC40NyAxMCA5Ljk5IDEwQzE3LjUyIDIyIDIyIDE3LjUyIDIyIDEyUzE3LjUyIDIgMTEuOTkgMnptNC4yNCAxNkwxMiAxNS40NSA3Ljc3IDE4bDEuMTItNC44MS0zLjczLTMuMjMgNC45Mi0uNDJMMTIgNWwxLjkyIDQuNTMgNC45Mi40Mi0zLjczIDMuMjNMMTYuMjMgMTh6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwic3RvcmVcIj48cGF0aCBkPVwiTTIwIDRINHYyaDE2VjR6bTEgMTB2LTJsLTEtNUg0bC0xIDV2MmgxdjZoMTB2LTZoNHY2aDJ2LTZoMXptLTkgNEg2di00aDZ2NHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzdWJkaXJlY3RvcnktYXJyb3ctbGVmdFwiPjxwYXRoIGQ9XCJNMTEgOWwxLjQyIDEuNDJMOC44MyAxNEgxOFY0aDJ2MTJIOC44M2wzLjU5IDMuNThMMTEgMjFsLTYtNiA2LTZ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwic3ViZGlyZWN0b3J5LWFycm93LXJpZ2h0XCI+PHBhdGggZD1cIk0xOSAxNWwtNiA2LTEuNDItMS40MkwxNS4xNyAxNkg0VjRoMnYxMGg5LjE3bC0zLjU5LTMuNThMMTMgOWw2IDZ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwic3ViamVjdFwiPjxwYXRoIGQ9XCJNMTQgMTdINHYyaDEwdi0yem02LThINHYyaDE2Vjl6TTQgMTVoMTZ2LTJINHYyek00IDV2MmgxNlY1SDR6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwic3VwZXJ2aXNvci1hY2NvdW50XCI+PHBhdGggZD1cIk0xNi41IDEyYzEuMzggMCAyLjQ5LTEuMTIgMi40OS0yLjVTMTcuODggNyAxNi41IDdDMTUuMTIgNyAxNCA4LjEyIDE0IDkuNXMxLjEyIDIuNSAyLjUgMi41ek05IDExYzEuNjYgMCAyLjk5LTEuMzQgMi45OS0zUzEwLjY2IDUgOSA1QzcuMzQgNSA2IDYuMzQgNiA4czEuMzQgMyAzIDN6bTcuNSAzYy0xLjgzIDAtNS41LjkyLTUuNSAyLjc1VjE5aDExdi0yLjI1YzAtMS44My0zLjY3LTIuNzUtNS41LTIuNzV6TTkgMTNjLTIuMzMgMC03IDEuMTctNyAzLjVWMTloN3YtMi4yNWMwLS44NS4zMy0yLjM0IDIuMzctMy40N0MxMC41IDEzLjEgOS42NiAxMyA5IDEzelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInN3YXAtaG9yaXpcIj48cGF0aCBkPVwiTTYuOTkgMTFMMyAxNWwzLjk5IDR2LTNIMTR2LTJINi45OXYtM3pNMjEgOWwtMy45OS00djNIMTB2Mmg3LjAxdjNMMjEgOXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzd2FwLXZlcnRcIj48cGF0aCBkPVwiTTE2IDE3LjAxVjEwaC0ydjcuMDFoLTNMMTUgMjFsNC0zLjk5aC0zek05IDNMNSA2Ljk5aDNWMTRoMlY2Ljk5aDNMOSAzelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInN3YXAtdmVydGljYWwtY2lyY2xlXCI+PHBhdGggZD1cIk0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyek02LjUgOUwxMCA1LjUgMTMuNSA5SDExdjRIOVY5SDYuNXptMTEgNkwxNCAxOC41IDEwLjUgMTVIMTN2LTRoMnY0aDIuNXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJzeXN0ZW0tdXBkYXRlLWFsdFwiPjxwYXRoIGQ9XCJNMTIgMTYuNWw0LTRoLTN2LTloLTJ2OUg4bDQgNHptOS0xM2gtNnYxLjk5aDZ2MTQuMDNIM1Y1LjQ5aDZWMy41SDNjLTEuMSAwLTIgLjktMiAydjE0YzAgMS4xLjkgMiAyIDJoMThjMS4xIDAgMi0uOSAyLTJ2LTE0YzAtMS4xLS45LTItMi0yelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInRhYlwiPjxwYXRoIGQ9XCJNMjEgM0gzYy0xLjEgMC0yIC45LTIgMnYxNGMwIDEuMS45IDIgMiAyaDE4YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJ6bTAgMTZIM1Y1aDEwdjRoOHYxMHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ0YWItdW5zZWxlY3RlZFwiPjxwYXRoIGQ9XCJNMSA5aDJWN0gxdjJ6bTAgNGgydi0ySDF2MnptMC04aDJWM2MtMS4xIDAtMiAuOS0yIDJ6bTggMTZoMnYtMkg5djJ6bS04LTRoMnYtMkgxdjJ6bTIgNHYtMkgxYzAgMS4xLjkgMiAyIDJ6TTIxIDNoLTh2NmgxMFY1YzAtMS4xLS45LTItMi0yem0wIDE0aDJ2LTJoLTJ2MnpNOSA1aDJWM0g5djJ6TTUgMjFoMnYtMkg1djJ6TTUgNWgyVjNINXYyem0xNiAxNmMxLjEgMCAyLS45IDItMmgtMnYyem0wLThoMnYtMmgtMnYyem0tOCA4aDJ2LTJoLTJ2MnptNCAwaDJ2LTJoLTJ2MnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ0ZXh0LWZvcm1hdFwiPjxwYXRoIGQ9XCJNNSAxN3YyaDE0di0ySDV6bTQuNS00LjJoNWwuOSAyLjJoMi4xTDEyLjc1IDRoLTEuNUw2LjUgMTVoMi4xbC45LTIuMnpNMTIgNS45OEwxMy44NyAxMWgtMy43NEwxMiA1Ljk4elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInRoZWF0ZXJzXCI+PHBhdGggZD1cIk0xOCAzdjJoLTJWM0g4djJINlYzSDR2MThoMnYtMmgydjJoOHYtMmgydjJoMlYzaC0yek04IDE3SDZ2LTJoMnYyem0wLTRINnYtMmgydjJ6bTAtNEg2VjdoMnYyem0xMCA4aC0ydi0yaDJ2MnptMC00aC0ydi0yaDJ2MnptMC00aC0yVjdoMnYyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInRodW1iLWRvd25cIj48cGF0aCBkPVwiTTE1IDNINmMtLjgzIDAtMS41NC41LTEuODQgMS4yMmwtMy4wMiA3LjA1Yy0uMDkuMjMtLjE0LjQ3LS4xNC43M3YxLjkxbC4wMS4wMUwxIDE0YzAgMS4xLjkgMiAyIDJoNi4zMWwtLjk1IDQuNTctLjAzLjMyYzAgLjQxLjE3Ljc5LjQ0IDEuMDZMOS44MyAyM2w2LjU5LTYuNTljLjM2LS4zNi41OC0uODYuNTgtMS40MVY1YzAtMS4xLS45LTItMi0yem00IDB2MTJoNFYzaC00elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInRodW1iLXVwXCI+PHBhdGggZD1cIk0xIDIxaDRWOUgxdjEyem0yMi0xMWMwLTEuMS0uOS0yLTItMmgtNi4zMWwuOTUtNC41Ny4wMy0uMzJjMC0uNDEtLjE3LS43OS0uNDQtMS4wNkwxNC4xNyAxIDcuNTkgNy41OUM3LjIyIDcuOTUgNyA4LjQ1IDcgOXYxMGMwIDEuMS45IDIgMiAyaDljLjgzIDAgMS41NC0uNSAxLjg0LTEuMjJsMy4wMi03LjA1Yy4wOS0uMjMuMTQtLjQ3LjE0LS43M3YtMS45MWwtLjAxLS4wMUwyMyAxMHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ0aHVtYnMtdXAtZG93blwiPjxwYXRoIGQ9XCJNMTIgNmMwLS41NS0uNDUtMS0xLTFINS44MmwuNjYtMy4xOC4wMi0uMjNjMC0uMzEtLjEzLS41OS0uMzMtLjhMNS4zOCAwIC40NCA0Ljk0Qy4xNyA1LjIxIDAgNS41OSAwIDZ2Ni41YzAgLjgzLjY3IDEuNSAxLjUgMS41aDYuNzVjLjYyIDAgMS4xNS0uMzggMS4zOC0uOTFsMi4yNi01LjI5Yy4wNy0uMTcuMTEtLjM2LjExLS41NVY2em0xMC41IDRoLTYuNzVjLS42MiAwLTEuMTUuMzgtMS4zOC45MWwtMi4yNiA1LjI5Yy0uMDcuMTctLjExLjM2LS4xMS41NVYxOGMwIC41NS40NSAxIDEgMWg1LjE4bC0uNjYgMy4xOC0uMDIuMjRjMCAuMzEuMTMuNTkuMzMuOGwuNzkuNzggNC45NC00Ljk0Yy4yNy0uMjcuNDQtLjY1LjQ0LTEuMDZ2LTYuNWMwLS44My0uNjctMS41LTEuNS0xLjV6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidGltZWxpbmVcIj48cGF0aCBkPVwiTTIzIDhjMCAxLjEtLjkgMi0yIDItLjE4IDAtLjM1LS4wMi0uNTEtLjA3bC0zLjU2IDMuNTVjLjA1LjE2LjA3LjM0LjA3LjUyIDAgMS4xLS45IDItMiAycy0yLS45LTItMmMwLS4xOC4wMi0uMzYuMDctLjUybC0yLjU1LTIuNTVjLS4xNi4wNS0uMzQuMDctLjUyLjA3cy0uMzYtLjAyLS41Mi0uMDdsLTQuNTUgNC41NmMuMDUuMTYuMDcuMzMuMDcuNTEgMCAxLjEtLjkgMi0yIDJzLTItLjktMi0yIC45LTIgMi0yYy4xOCAwIC4zNS4wMi41MS4wN2w0LjU2LTQuNTVDOC4wMiA5LjM2IDggOS4xOCA4IDljMC0xLjEuOS0yIDItMnMyIC45IDIgMmMwIC4xOC0uMDIuMzYtLjA3LjUybDIuNTUgMi41NWMuMTYtLjA1LjM0LS4wNy41Mi0uMDdzLjM2LjAyLjUyLjA3bDMuNTUtMy41NkMxOS4wMiA4LjM1IDE5IDguMTggMTkgOGMwLTEuMS45LTIgMi0yczIgLjkgMiAyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInRvY1wiPjxwYXRoIGQ9XCJNMyA5aDE0VjdIM3Yyem0wIDRoMTR2LTJIM3Yyem0wIDRoMTR2LTJIM3Yyem0xNiAwaDJ2LTJoLTJ2MnptMC0xMHYyaDJWN2gtMnptMCA2aDJ2LTJoLTJ2MnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ0b2RheVwiPjxwYXRoIGQ9XCJNMTkgM2gtMVYxaC0ydjJIOFYxSDZ2Mkg1Yy0xLjExIDAtMS45OS45LTEuOTkgMkwzIDE5YzAgMS4xLjg5IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJ6bTAgMTZINVY4aDE0djExek03IDEwaDV2NUg3elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInRvbGxcIj48cGF0aCBkPVwiTTE1IDRjLTQuNDIgMC04IDMuNTgtOCA4czMuNTggOCA4IDggOC0zLjU4IDgtOC0zLjU4LTgtOC04em0wIDE0Yy0zLjMxIDAtNi0yLjY5LTYtNnMyLjY5LTYgNi02IDYgMi42OSA2IDYtMi42OSA2LTYgNnpNMyAxMmMwLTIuNjEgMS42Ny00LjgzIDQtNS42NVY0LjI2QzMuNTUgNS4xNSAxIDguMjcgMSAxMnMyLjU1IDYuODUgNiA3Ljc0di0yLjA5Yy0yLjMzLS44Mi00LTMuMDQtNC01LjY1elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInRvdWNoLWFwcFwiPjxwYXRoIGQ9XCJNOSAxMS4yNFY3LjVDOSA2LjEyIDEwLjEyIDUgMTEuNSA1UzE0IDYuMTIgMTQgNy41djMuNzRjMS4yMS0uODEgMi0yLjE4IDItMy43NEMxNiA1LjAxIDEzLjk5IDMgMTEuNSAzUzcgNS4wMSA3IDcuNWMwIDEuNTYuNzkgMi45MyAyIDMuNzR6bTkuODQgNC42M2wtNC41NC0yLjI2Yy0uMTctLjA3LS4zNS0uMTEtLjU0LS4xMUgxM3YtNmMwLS44My0uNjctMS41LTEuNS0xLjVTMTAgNi42NyAxMCA3LjV2MTAuNzRsLTMuNDMtLjcyYy0uMDgtLjAxLS4xNS0uMDMtLjI0LS4wMy0uMzEgMC0uNTkuMTMtLjc5LjMzbC0uNzkuOCA0Ljk0IDQuOTRjLjI3LjI3LjY1LjQ0IDEuMDYuNDRoNi43OWMuNzUgMCAxLjMzLS41NSAxLjQ0LTEuMjhsLjc1LTUuMjdjLjAxLS4wNy4wMi0uMTQuMDItLjIgMC0uNjItLjM4LTEuMTYtLjkxLTEuMzh6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidHJhY2stY2hhbmdlc1wiPjxwYXRoIGQ9XCJNMTkuMDcgNC45M2wtMS40MSAxLjQxQzE5LjEgNy43OSAyMCA5Ljc5IDIwIDEyYzAgNC40Mi0zLjU4IDgtOCA4cy04LTMuNTgtOC04YzAtNC4wOCAzLjA1LTcuNDQgNy03LjkzdjIuMDJDOC4xNiA2LjU3IDYgOS4wMyA2IDEyYzAgMy4zMSAyLjY5IDYgNiA2czYtMi42OSA2LTZjMC0xLjY2LS42Ny0zLjE2LTEuNzYtNC4yNGwtMS40MSAxLjQxQzE1LjU1IDkuOSAxNiAxMC45IDE2IDEyYzAgMi4yMS0xLjc5IDQtNCA0cy00LTEuNzktNC00YzAtMS44NiAxLjI4LTMuNDEgMy0zLjg2djIuMTRjLS42LjM1LTEgLjk4LTEgMS43MiAwIDEuMS45IDIgMiAyczItLjkgMi0yYzAtLjc0LS40LTEuMzgtMS0xLjcyVjJoLTFDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMGMwLTIuNzYtMS4xMi01LjI2LTIuOTMtNy4wN3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ0cmFuc2xhdGVcIj48cGF0aCBkPVwiTTEyLjg3IDE1LjA3bC0yLjU0LTIuNTEuMDMtLjAzYzEuNzQtMS45NCAyLjk4LTQuMTcgMy43MS02LjUzSDE3VjRoLTdWMkg4djJIMXYxLjk5aDExLjE3QzExLjUgNy45MiAxMC40NCA5Ljc1IDkgMTEuMzUgOC4wNyAxMC4zMiA3LjMgOS4xOSA2LjY5IDhoLTJjLjczIDEuNjMgMS43MyAzLjE3IDIuOTggNC41NmwtNS4wOSA1LjAyTDQgMTlsNS01IDMuMTEgMy4xMS43Ni0yLjA0ek0xOC41IDEwaC0yTDEyIDIyaDJsMS4xMi0zaDQuNzVMMjEgMjJoMmwtNC41LTEyem0tMi42MiA3bDEuNjItNC4zM0wxOS4xMiAxN2gtMy4yNHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ0cmVuZGluZy1kb3duXCI+PHBhdGggZD1cIk0xNiAxOGwyLjI5LTIuMjktNC44OC00Ljg4LTQgNEwyIDcuNDEgMy40MSA2bDYgNiA0LTQgNi4zIDYuMjlMMjIgMTJ2NnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ0cmVuZGluZy1mbGF0XCI+PHBhdGggZD1cIk0yMiAxMmwtNC00djNIM3YyaDE1djN6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidHJlbmRpbmctdXBcIj48cGF0aCBkPVwiTTE2IDZsMi4yOSAyLjI5LTQuODggNC44OC00LTRMMiAxNi41OSAzLjQxIDE4bDYtNiA0IDQgNi4zLTYuMjlMMjIgMTJWNnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ0dXJuZWQtaW5cIj48cGF0aCBkPVwiTTE3IDNIN2MtMS4xIDAtMS45OS45LTEuOTkgMkw1IDIxbDctMyA3IDNWNWMwLTEuMS0uOS0yLTItMnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ0dXJuZWQtaW4tbm90XCI+PHBhdGggZD1cIk0xNyAzSDdjLTEuMSAwLTEuOTkuOS0xLjk5IDJMNSAyMWw3LTMgNyAzVjVjMC0xLjEtLjktMi0yLTJ6bTAgMTVsLTUtMi4xOEw3IDE4VjVoMTB2MTN6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidW5hcmNoaXZlXCI+PHBhdGggZD1cIk0yMC41NSA1LjIybC0xLjM5LTEuNjhDMTguODggMy4yMSAxOC40NyAzIDE4IDNINmMtLjQ3IDAtLjg4LjIxLTEuMTUuNTVMMy40NiA1LjIyQzMuMTcgNS41NyAzIDYuMDEgMyA2LjVWMTljMCAxLjEuODkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNi41YzAtLjQ5LS4xNy0uOTMtLjQ1LTEuMjh6TTEyIDkuNWw1LjUgNS41SDE0djJoLTR2LTJINi41TDEyIDkuNXpNNS4xMiA1bC44Mi0xaDEybC45MyAxSDUuMTJ6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidW5kb1wiPjxwYXRoIGQ9XCJNMTIuNSA4Yy0yLjY1IDAtNS4wNS45OS02LjkgMi42TDIgN3Y5aDlsLTMuNjItMy42MmMxLjM5LTEuMTYgMy4xNi0xLjg4IDUuMTItMS44OCAzLjU0IDAgNi41NSAyLjMxIDcuNiA1LjVsMi4zNy0uNzhDMjEuMDggMTEuMDMgMTcuMTUgOCAxMi41IDh6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidW5mb2xkLWxlc3NcIj48cGF0aCBkPVwiTTcuNDEgMTguNTlMOC44MyAyMCAxMiAxNi44MyAxNS4xNyAyMGwxLjQxLTEuNDFMMTIgMTRsLTQuNTkgNC41OXptOS4xOC0xMy4xOEwxNS4xNyA0IDEyIDcuMTcgOC44MyA0IDcuNDEgNS40MSAxMiAxMGw0LjU5LTQuNTl6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidW5mb2xkLW1vcmVcIj48cGF0aCBkPVwiTTEyIDUuODNMMTUuMTcgOWwxLjQxLTEuNDFMMTIgMyA3LjQxIDcuNTkgOC44MyA5IDEyIDUuODN6bTAgMTIuMzRMOC44MyAxNWwtMS40MSAxLjQxTDEyIDIxbDQuNTktNC41OUwxNS4xNyAxNSAxMiAxOC4xN3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ1cGRhdGVcIj48cGF0aCBkPVwiTTIxIDEwLjEyaC02Ljc4bDIuNzQtMi44MmMtMi43My0yLjctNy4xNS0yLjgtOS44OC0uMS0yLjczIDIuNzEtMi43MyA3LjA4IDAgOS43OSAyLjczIDIuNzEgNy4xNSAyLjcxIDkuODggMEMxOC4zMiAxNS42NSAxOSAxNC4wOCAxOSAxMi4xaDJjMCAxLjk4LS44OCA0LjU1LTIuNjQgNi4yOS0zLjUxIDMuNDgtOS4yMSAzLjQ4LTEyLjcyIDAtMy41LTMuNDctMy41My05LjExLS4wMi0xMi41OCAzLjUxLTMuNDcgOS4xNC0zLjQ3IDEyLjY1IDBMMjEgM3Y3LjEyek0xMi41IDh2NC4yNWwzLjUgMi4wOC0uNzIgMS4yMUwxMSAxM1Y4aDEuNXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ2ZXJpZmllZC11c2VyXCI+PHBhdGggZD1cIk0xMiAxTDMgNXY2YzAgNS41NSAzLjg0IDEwLjc0IDkgMTIgNS4xNi0xLjI2IDktNi40NSA5LTEyVjVsLTktNHptLTIgMTZsLTQtNCAxLjQxLTEuNDFMMTAgMTQuMTdsNi41OS02LjU5TDE4IDlsLTggOHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ2aWV3LWFnZW5kYVwiPjxwYXRoIGQ9XCJNMjAgMTNIM2MtLjU1IDAtMSAuNDUtMSAxdjZjMCAuNTUuNDUgMSAxIDFoMTdjLjU1IDAgMS0uNDUgMS0xdi02YzAtLjU1LS40NS0xLTEtMXptMC0xMEgzYy0uNTUgMC0xIC40NS0xIDF2NmMwIC41NS40NSAxIDEgMWgxN2MuNTUgMCAxLS40NSAxLTFWNGMwLS41NS0uNDUtMS0xLTF6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidmlldy1hcnJheVwiPjxwYXRoIGQ9XCJNNCAxOGgzVjVINHYxM3pNMTggNXYxM2gzVjVoLTN6TTggMThoOVY1SDh2MTN6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidmlldy1jYXJvdXNlbFwiPjxwYXRoIGQ9XCJNNyAxOWgxMFY0SDd2MTV6bS01LTJoNFY2SDJ2MTF6TTE4IDZ2MTFoNFY2aC00elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInZpZXctY29sdW1uXCI+PHBhdGggZD1cIk0xMCAxOGg1VjVoLTV2MTN6bS02IDBoNVY1SDR2MTN6TTE2IDV2MTNoNVY1aC01elwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInZpZXctZGF5XCI+PHBhdGggZD1cIk0yIDIxaDE5di0zSDJ2M3pNMjAgOEgzYy0uNTUgMC0xIC40NS0xIDF2NmMwIC41NS40NSAxIDEgMWgxN2MuNTUgMCAxLS40NSAxLTFWOWMwLS41NS0uNDUtMS0xLTF6TTIgM3YzaDE5VjNIMnpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ2aWV3LWhlYWRsaW5lXCI+PHBhdGggZD1cIk00IDE1aDE2di0ySDR2MnptMCA0aDE2di0ySDR2MnptMC04aDE2VjlINHYyem0wLTZ2MmgxNlY1SDR6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidmlldy1saXN0XCI+PHBhdGggZD1cIk00IDE0aDR2LTRINHY0em0wIDVoNHYtNEg0djR6TTQgOWg0VjVINHY0em01IDVoMTJ2LTRIOXY0em0wIDVoMTJ2LTRIOXY0ek05IDV2NGgxMlY1SDl6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidmlldy1tb2R1bGVcIj48cGF0aCBkPVwiTTQgMTFoNVY1SDR2NnptMCA3aDV2LTZINHY2em02IDBoNXYtNmgtNXY2em02IDBoNXYtNmgtNXY2em0tNi03aDVWNWgtNXY2em02LTZ2Nmg1VjVoLTV6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidmlldy1xdWlsdFwiPjxwYXRoIGQ9XCJNMTAgMThoNXYtNmgtNXY2em0tNiAwaDVWNUg0djEzem0xMiAwaDV2LTZoLTV2NnpNMTAgNXY2aDExVjVIMTB6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidmlldy1zdHJlYW1cIj48cGF0aCBkPVwiTTQgMThoMTd2LTZINHY2ek00IDV2NmgxN1Y1SDR6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidmlldy13ZWVrXCI+PHBhdGggZD1cIk02IDVIM2MtLjU1IDAtMSAuNDUtMSAxdjEyYzAgLjU1LjQ1IDEgMSAxaDNjLjU1IDAgMS0uNDUgMS0xVjZjMC0uNTUtLjQ1LTEtMS0xem0xNCAwaC0zYy0uNTUgMC0xIC40NS0xIDF2MTJjMCAuNTUuNDUgMSAxIDFoM2MuNTUgMCAxLS40NSAxLTFWNmMwLS41NS0uNDUtMS0xLTF6bS03IDBoLTNjLS41NSAwLTEgLjQ1LTEgMXYxMmMwIC41NS40NSAxIDEgMWgzYy41NSAwIDEtLjQ1IDEtMVY2YzAtLjU1LS40NS0xLTEtMXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ2aXNpYmlsaXR5XCI+PHBhdGggZD1cIk0xMiA0LjVDNyA0LjUgMi43MyA3LjYxIDEgMTJjMS43MyA0LjM5IDYgNy41IDExIDcuNXM5LjI3LTMuMTEgMTEtNy41Yy0xLjczLTQuMzktNi03LjUtMTEtNy41ek0xMiAxN2MtMi43NiAwLTUtMi4yNC01LTVzMi4yNC01IDUtNSA1IDIuMjQgNSA1LTIuMjQgNS01IDV6bTAtOGMtMS42NiAwLTMgMS4zNC0zIDNzMS4zNCAzIDMgMyAzLTEuMzQgMy0zLTEuMzQtMy0zLTN6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwidmlzaWJpbGl0eS1vZmZcIj48cGF0aCBkPVwiTTEyIDdjMi43NiAwIDUgMi4yNCA1IDUgMCAuNjUtLjEzIDEuMjYtLjM2IDEuODNsMi45MiAyLjkyYzEuNTEtMS4yNiAyLjctMi44OSAzLjQzLTQuNzUtMS43My00LjM5LTYtNy41LTExLTcuNS0xLjQgMC0yLjc0LjI1LTMuOTguN2wyLjE2IDIuMTZDMTAuNzQgNy4xMyAxMS4zNSA3IDEyIDd6TTIgNC4yN2wyLjI4IDIuMjguNDYuNDZDMy4wOCA4LjMgMS43OCAxMC4wMiAxIDEyYzEuNzMgNC4zOSA2IDcuNSAxMSA3LjUgMS41NSAwIDMuMDMtLjMgNC4zOC0uODRsLjQyLjQyTDE5LjczIDIyIDIxIDIwLjczIDMuMjcgMyAyIDQuMjd6TTcuNTMgOS44bDEuNTUgMS41NWMtLjA1LjIxLS4wOC40My0uMDguNjUgMCAxLjY2IDEuMzQgMyAzIDMgLjIyIDAgLjQ0LS4wMy42NS0uMDhsMS41NSAxLjU1Yy0uNjcuMzMtMS40MS41My0yLjIuNTMtMi43NiAwLTUtMi4yNC01LTUgMC0uNzkuMi0xLjUzLjUzLTIuMnptNC4zMS0uNzhsMy4xNSAzLjE1LjAyLS4xNmMwLTEuNjYtMS4zNC0zLTMtM2wtLjE3LjAxelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cIndhcm5pbmdcIj48cGF0aCBkPVwiTTEgMjFoMjJMMTIgMiAxIDIxem0xMi0zaC0ydi0yaDJ2MnptMC00aC0ydi00aDJ2NHpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ3YXRjaC1sYXRlclwiPjxwYXRoIGQ9XCJNMTIgMkM2LjUgMiAyIDYuNSAyIDEyczQuNSAxMCAxMCAxMCAxMC00LjUgMTAtMTBTMTcuNSAyIDEyIDJ6bTQuMiAxNC4yTDExIDEzVjdoMS41djUuMmw0LjUgMi43LS44IDEuM3pcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ3ZWVrZW5kXCI+PHBhdGggZD1cIk0yMSAxMGMtMS4xIDAtMiAuOS0yIDJ2M0g1di0zYzAtMS4xLS45LTItMi0ycy0yIC45LTIgMnY1YzAgMS4xLjkgMiAyIDJoMThjMS4xIDAgMi0uOSAyLTJ2LTVjMC0xLjEtLjktMi0yLTJ6bS0zLTVINmMtMS4xIDAtMiAuOS0yIDJ2Mi4xNWMxLjE2LjQxIDIgMS41MSAyIDIuODJWMTRoMTJ2LTIuMDNjMC0xLjMuODQtMi40IDItMi44MlY3YzAtMS4xLS45LTItMi0yelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cIndvcmtcIj48cGF0aCBkPVwiTTIwIDZoLTRWNGMwLTEuMTEtLjg5LTItMi0yaC00Yy0xLjExIDAtMiAuODktMiAydjJINGMtMS4xMSAwLTEuOTkuODktMS45OSAyTDIgMTljMCAxLjExLjg5IDIgMiAyaDE2YzEuMTEgMCAyLS44OSAyLTJWOGMwLTEuMTEtLjg5LTItMi0yem0tNiAwaC00VjRoNHYyelwiPjwvcGF0aD48L2c+XG48ZyBpZD1cInlvdXR1YmUtc2VhcmNoZWQtZm9yXCI+PHBhdGggZD1cIk0xNy4wMSAxNGgtLjhsLS4yNy0uMjdjLjk4LTEuMTQgMS41Ny0yLjYxIDEuNTctNC4yMyAwLTMuNTktMi45MS02LjUtNi41LTYuNXMtNi41IDMtNi41IDYuNUgybDMuODQgNCA0LjE2LTRINi41MUM2LjUxIDcgOC41MyA1IDExLjAxIDVzNC41IDIuMDEgNC41IDQuNWMwIDIuNDgtMi4wMiA0LjUtNC41IDQuNS0uNjUgMC0xLjI2LS4xNC0xLjgyLS4zOEw3LjcxIDE1LjFjLjk3LjU3IDIuMDkuOSAzLjMuOSAxLjYxIDAgMy4wOC0uNTkgNC4yMi0xLjU3bC4yNy4yN3YuNzlsNS4wMSA0Ljk5TDIyIDE5bC00Ljk5LTV6XCI+PC9wYXRoPjwvZz5cbjxnIGlkPVwiem9vbS1pblwiPjxwYXRoIGQ9XCJNMTUuNSAxNGgtLjc5bC0uMjgtLjI3QzE1LjQxIDEyLjU5IDE2IDExLjExIDE2IDkuNSAxNiA1LjkxIDEzLjA5IDMgOS41IDNTMyA1LjkxIDMgOS41IDUuOTEgMTYgOS41IDE2YzEuNjEgMCAzLjA5LS41OSA0LjIzLTEuNTdsLjI3LjI4di43OWw1IDQuOTlMMjAuNDkgMTlsLTQuOTktNXptLTYgMEM3LjAxIDE0IDUgMTEuOTkgNSA5LjVTNy4wMSA1IDkuNSA1IDE0IDcuMDEgMTQgOS41IDExLjk5IDE0IDkuNSAxNHptMi41LTRoLTJ2Mkg5di0ySDdWOWgyVjdoMXYyaDJ2MXpcIj48L3BhdGg+PC9nPlxuPGcgaWQ9XCJ6b29tLW91dFwiPjxwYXRoIGQ9XCJNMTUuNSAxNGgtLjc5bC0uMjgtLjI3QzE1LjQxIDEyLjU5IDE2IDExLjExIDE2IDkuNSAxNiA1LjkxIDEzLjA5IDMgOS41IDNTMyA1LjkxIDMgOS41IDUuOTEgMTYgOS41IDE2YzEuNjEgMCAzLjA5LS41OSA0LjIzLTEuNTdsLjI3LjI4di43OWw1IDQuOTlMMjAuNDkgMTlsLTQuOTktNXptLTYgMEM3LjAxIDE0IDUgMTEuOTkgNSA5LjVTNy4wMSA1IDkuNSA1IDE0IDcuMDEgMTQgOS41IDExLjk5IDE0IDkuNSAxNHpNNyA5aDV2MUg3elwiPjwvcGF0aD48L2c+XG48L2RlZnM+PC9zdmc+XG48L2lyb24taWNvbnNldC1zdmc+YDtcblxuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0ZW1wbGF0ZS5jb250ZW50KTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IEF0dHJpYnV0ZVBhcnQsIGRpcmVjdGl2ZSB9IGZyb20gJy4uL2xpdC1odG1sLmpzJztcbmNvbnN0IHByZXZpb3VzVmFsdWVzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogRm9yIEF0dHJpYnV0ZVBhcnRzLCBzZXRzIHRoZSBhdHRyaWJ1dGUgaWYgdGhlIHZhbHVlIGlzIGRlZmluZWQgYW5kIHJlbW92ZXNcbiAqIHRoZSBhdHRyaWJ1dGUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZC5cbiAqXG4gKiBGb3Igb3RoZXIgcGFydCB0eXBlcywgdGhpcyBkaXJlY3RpdmUgaXMgYSBuby1vcC5cbiAqL1xuZXhwb3J0IGNvbnN0IGlmRGVmaW5lZCA9IGRpcmVjdGl2ZSgodmFsdWUpID0+IChwYXJ0KSA9PiB7XG4gICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IHByZXZpb3VzVmFsdWVzLmdldChwYXJ0KTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBwYXJ0IGluc3RhbmNlb2YgQXR0cmlidXRlUGFydCkge1xuICAgICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCByZW1vdmUgdGhlIGF0dHJpYnV0ZSwgYnV0IG9ubHkgaWYgdGhlIHZhbHVlXG4gICAgICAgIC8vIHdhcyBwcmV2aW91c2x5IGRlZmluZWQuXG4gICAgICAgIGlmIChwcmV2aW91c1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgIXByZXZpb3VzVmFsdWVzLmhhcyhwYXJ0KSkge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHBhcnQuY29tbWl0dGVyLm5hbWU7XG4gICAgICAgICAgICBwYXJ0LmNvbW1pdHRlci5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZSAhPT0gcHJldmlvdXNWYWx1ZSkge1xuICAgICAgICBwYXJ0LnNldFZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgcHJldmlvdXNWYWx1ZXMuc2V0KHBhcnQsIHZhbHVlKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWYtZGVmaW5lZC5qcy5tYXAiLCJpbXBvcnQgeyBCbG9jIH0gZnJvbSAnYmxvYy10aGVtJztcbmltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQgeyBXaWRnZXRCdWlsZGVyIH0gZnJvbSAnLi4vdXRpbHMvYmxvY3MuanMnO1xudmFyIEdFU1RVUkU7XG4oZnVuY3Rpb24gKEdFU1RVUkUpIHtcbiAgICBHRVNUVVJFW0dFU1RVUkVbXCJOT19BQ1RJT05cIl0gPSAwXSA9IFwiTk9fQUNUSU9OXCI7XG4gICAgR0VTVFVSRVtHRVNUVVJFW1wiVEFQXCJdID0gMV0gPSBcIlRBUFwiO1xuICAgIEdFU1RVUkVbR0VTVFVSRVtcIlNXSVBFX0xFRlRcIl0gPSAyXSA9IFwiU1dJUEVfTEVGVFwiO1xuICAgIEdFU1RVUkVbR0VTVFVSRVtcIlNXSVBFX1JJR0hUXCJdID0gM10gPSBcIlNXSVBFX1JJR0hUXCI7XG4gICAgR0VTVFVSRVtHRVNUVVJFW1wiU1dJUEVfVVBcIl0gPSA0XSA9IFwiU1dJUEVfVVBcIjtcbiAgICBHRVNUVVJFW0dFU1RVUkVbXCJTV0lQRV9ET1dOXCJdID0gNV0gPSBcIlNXSVBFX0RPV05cIjsgLy81XG59KShHRVNUVVJFIHx8IChHRVNUVVJFID0ge30pKTtcbi8qKlxuICogU3dpcGUgSG9yaXpvbnRhbCBpcyBnaXZlbiBwcmVmZXJlbmNlIG92ZXIgVmVydGljYWwgc3dpcGUuXG4gKi9cbmNsYXNzIEdlc3R1cmVEZXRlY3RvckJsb2MgZXh0ZW5kcyBCbG9jIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkcmFnX3NlbnNpdGl2aXR5IG51bWJlciBiZXR3ZWVuIDAgdG8gMSwgaXRzIHJhdGlvbiBvZiBzdGFydCB0byBjdXJyZW50IGRpc3RhbmNlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRyYWdfc2Vuc2l0aXZpdHksIG1pbkRpc3RhbmNlSW5QeCkge1xuICAgICAgICBzdXBlcihHRVNUVVJFLk5PX0FDVElPTik7XG4gICAgICAgIHRoaXMuZHJhZ19zZW5zaXRpdml0eSA9IGRyYWdfc2Vuc2l0aXZpdHk7XG4gICAgICAgIHRoaXMubWluRGlzdGFuY2VJblB4ID0gbWluRGlzdGFuY2VJblB4O1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFggcG9zaXRpb24gYXQgc3RhcnQgb2YgdG91Y2hcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3Bvc1N0YXJ0WCA9IC0xO1xuICAgICAgICAvKipcbiAgICAgICAgICogWCBwb3NpdGlvbiBhdCBlbmQgb2YgdG91Y2hcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3Bvc1N0YXJ0WSA9IC0xO1xuICAgICAgICB0aGlzLl9wb3NFbmRYID0gLTE7XG4gICAgICAgIHRoaXMuX3Bvc0VuZFkgPSAtMTtcbiAgICAgICAgdGhpcy5fcG9zQ3VyclggPSAtMTtcbiAgICAgICAgdGhpcy5fcG9zQ3VyclkgPSAtMTtcbiAgICAgICAgaWYgKGRyYWdfc2Vuc2l0aXZpdHkgPiAxKSB7XG4gICAgICAgICAgICBkcmFnX3NlbnNpdGl2aXR5ID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkcmFnX3NlbnNpdGl2aXR5IDwgMCkge1xuICAgICAgICAgICAgZHJhZ19zZW5zaXRpdml0eSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbkRpc3RhbmNlSW5QeCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMubWluRGlzdGFuY2VJblB4ID0gTWF0aC5hYnMobWluRGlzdGFuY2VJblB4KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvblN0YXJ0KHBvc1gsIHBvc1kpIHtcbiAgICAgICAgdGhpcy5fcG9zU3RhcnRYID0gcG9zWDtcbiAgICAgICAgdGhpcy5fcG9zU3RhcnRZID0gcG9zWTtcbiAgICB9XG4gICAgb25Nb3ZlKHBvc1gsIHBvc1kpIHtcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcG9zQ3VyclggPSBwb3NYO1xuICAgICAgICB0aGlzLl9wb3NDdXJyWSA9IHBvc1k7XG4gICAgfVxuICAgIG9uRW5kKHBvc1gsIHBvc1kpIHtcbiAgICAgICAgdGhpcy5fcG9zRW5kWCA9IHBvc1g7XG4gICAgICAgIHRoaXMuX3Bvc0VuZFkgPSBwb3NZO1xuICAgICAgICBpZiAoIXRoaXMuaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgdGhpcy5lbWl0KEdFU1RVUkUuVEFQKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgLy9uZWVkIHRvIHJlc29sdmUgdG8gb3RoZXIgZ2VzdHVyZXMgaW4gaGVyZVxuICAgICAgICAgICAgbGV0IGggPSAodGhpcy5fcG9zRW5kWCAtIHRoaXMuX3Bvc1N0YXJ0WCkgKiB0aGlzLmRyYWdfc2Vuc2l0aXZpdHk7XG4gICAgICAgICAgICBsZXQgdiA9ICh0aGlzLl9wb3NFbmRZIC0gdGhpcy5fcG9zU3RhcnRZKSAqIHRoaXMuZHJhZ19zZW5zaXRpdml0eTtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhoKSA+PSBNYXRoLmFicyh2KSkge1xuICAgICAgICAgICAgICAgIC8vaG9yaXpvbnRhbCBtb3ZlbWVudFxuICAgICAgICAgICAgICAgIGlmIChoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAvL3JpZ2h0IG1vdmVtZW50XG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhoKSA+IHRoaXMubWluRGlzdGFuY2VJblB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoR0VTVFVSRS5TV0lQRV9SSUdIVCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoR0VTVFVSRS5OT19BQ1RJT04pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL2xlZnQgbW92ZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGgpID4gdGhpcy5taW5EaXN0YW5jZUluUHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChHRVNUVVJFLlNXSVBFX0xFRlQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KEdFU1RVUkUuTk9fQUNUSU9OKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vdmVydGljYWwgbW92ZW1lbnRcbiAgICAgICAgICAgICAgICBpZiAodiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy91cCBtb3ZlbWVudFxuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnModikgPiB0aGlzLm1pbkRpc3RhbmNlSW5QeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KEdFU1RVUkUuU1dJUEVfRE9XTik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoR0VTVFVSRS5OT19BQ1RJT04pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL2xlZnQgbW92ZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHYpID4gdGhpcy5taW5EaXN0YW5jZUluUHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChHRVNUVVJFLlNXSVBFX1VQKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChHRVNUVVJFLk5PX0FDVElPTik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgR2VzdHVyZURldGVjdG9yIGV4dGVuZHMgV2lkZ2V0QnVpbGRlciB7XG4gICAgY29uc3RydWN0b3IoZHJhZ19zZW5zaXRpdml0eSA9IDEsIG1pbkRpc3RhbmNlSW5QeCA9IDEwMCkge1xuICAgICAgICBzdXBlcihHZXN0dXJlRGV0ZWN0b3JCbG9jLCB7XG4gICAgICAgICAgICB1c2VUaGlzQmxvYzogbmV3IEdlc3R1cmVEZXRlY3RvckJsb2MoZHJhZ19zZW5zaXRpdml0eSwgbWluRGlzdGFuY2VJblB4KSxcbiAgICAgICAgICAgIGJ1aWxkV2hlbjogKG8sIG4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobiA9PT0gR0VTVFVSRS5OT19BQ1RJT04pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kcmFnX3NlbnNpdGl2aXR5ID0gZHJhZ19zZW5zaXRpdml0eTtcbiAgICAgICAgdGhpcy5taW5EaXN0YW5jZUluUHggPSBtaW5EaXN0YW5jZUluUHg7XG4gICAgICAgIHRoaXMuX29uVG91Y2hTdGFydCA9IHtcbiAgICAgICAgICAgIGhhbmRsZUV2ZW50OiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLmJsb2MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vblN0YXJ0KGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCwgZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX29uVG91Y2hFbmQgPSB7XG4gICAgICAgICAgICBoYW5kbGVFdmVudDogKGUpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5ibG9jKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub25FbmQoZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYLCBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fb25Ub3VjaE1vdmUgPSB7XG4gICAgICAgICAgICBoYW5kbGVFdmVudDogKGUpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5ibG9jKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub25Nb3ZlKGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCwgZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25Td2lwZVVwID0gKCkgPT4geyB9O1xuICAgICAgICB0aGlzLm9uU3dpcGVEb3duID0gKCkgPT4geyB9O1xuICAgICAgICB0aGlzLm9uU3dpcGVMZWZ0ID0gKCkgPT4geyB9O1xuICAgICAgICB0aGlzLm9uU3dpcGVSaWdodCA9ICgpID0+IHsgfTtcbiAgICAgICAgdGhpcy5vblRhcCA9ICgpID0+IHsgfTtcbiAgICB9XG4gICAgYnVpbGRlcihzdGF0ZSkge1xuICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIEdFU1RVUkUuTk9fQUNUSU9OOiBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR0VTVFVSRS5UQVA6XG4gICAgICAgICAgICAgICAgdGhpcy5vblRhcCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHRVNUVVJFLlNXSVBFX0xFRlQ6XG4gICAgICAgICAgICAgICAgdGhpcy5vblN3aXBlTGVmdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHRVNUVVJFLlNXSVBFX1JJR0hUOlxuICAgICAgICAgICAgICAgIHRoaXMub25Td2lwZVJpZ2h0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdFU1RVUkUuU1dJUEVfVVA6XG4gICAgICAgICAgICAgICAgdGhpcy5vblN3aXBlVXAoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR0VTVFVSRS5TV0lQRV9ET1dOOlxuICAgICAgICAgICAgICAgIHRoaXMub25Td2lwZURvd24oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6IGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBodG1sIGA8ZGl2IHN0eWxlPVwid2lkdGg6MTAwJTsgaGVpZ2h0OiAxMDAlO1wiIFxuICAgICAgICBAdG91Y2hzdGFydD0ke3RoaXMuX29uVG91Y2hTdGFydH1cbiAgICAgICAgQHRvdWNoZW5kPSR7dGhpcy5fb25Ub3VjaEVuZH1cbiAgICAgICAgQHRvdWNobW92ZT0ke3RoaXMuX29uVG91Y2hNb3ZlfT48c2xvdD48L3Nsb3Q+PC9kaXY+YDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXN0dXJlZGV0ZWN0b3IuanMubWFwIiwiaW1wb3J0IHsgRm9ybUlucHV0QnVpbGRlciB9IGZyb20gJy4uL2Zvcm1zJztcbmltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQgeyBCbG9jc1Byb3ZpZGVyIH0gZnJvbSAnYmxvYy10aGVtJztcbmltcG9ydCAnQHBvbHltZXIvaXJvbi1pY29ucyc7XG5pbXBvcnQgeyBJMThOQmxvYyB9IGZyb20gJy4uL3RleHQnO1xuaW1wb3J0IHsgaWZEZWZpbmVkIH0gZnJvbSAnbGl0LWh0bWwvZGlyZWN0aXZlcy9pZi1kZWZpbmVkJztcbmV4cG9ydCBjbGFzcyBTaW5nbGVMaW5lSW5wdXQgZXh0ZW5kcyBGb3JtSW5wdXRCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCB2YWx1ZUxpc3QpIHtcbiAgICAgICAgc3VwZXIodHlwZSk7XG4gICAgICAgIHRoaXMudmFsdWVMaXN0ID0gdmFsdWVMaXN0O1xuICAgICAgICB0aGlzLl9kZWxlZ2F0ZUNoYW5nZSA9IChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRJbnB1dE1vZGUgPSAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgaW5wdXRtb2RlID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJpbnB1dG1vZGVcIik7XG4gICAgICAgICAgICBpZiAoaW5wdXRtb2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0bW9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBcInRleHRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXREYXRhTGlzdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlTGlzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBodG1sIGBcbjxkYXRhbGlzdCBpZD1cImRhdGFMaXN0XCI+XG4gICAgJHt0aGlzLnZhbHVlTGlzdC5tYXAoaSA9PiBodG1sIGA8b3B0aW9uIHZhbHVlPVwiJHtpfVwiPmApfVxuPC9kYXRhbGlzdD5cbiAgICAgICAgYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRJY29uID0gKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGljb24gPSB0aGlzLmdldEF0dHJpYnV0ZShcImljb25cIik7XG4gICAgICAgICAgICBpZiAoaWNvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBodG1sIGA8ZGl2IGNsYXNzPVwiaWNvbkN0cmxcIj48aXJvbi1pY29uIGljb249XCIke2ljb259XCIgc3R5bGU9XCJmaWxsOiAke3RoaXMudGhlbWUuaW5wdXRfaWNvbl9jb2xvcn07XCI+PC9pcm9uLWljb24+PC9kaXY+YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRWYWx1ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0UGxhY2VIb2xkZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgcGxhY2Vob2xkZXIgPSB0aGlzLmdldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIpO1xuICAgICAgICAgICAgaWYgKHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2kxOG4pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQgPSB0aGlzLl9pMThuLmdldFRleHQocGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA/IHQgOiBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldElucHV0VHlwZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGxldCB0eXBlID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuICAgICAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBcInRleHRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5faTE4biA9IEJsb2NzUHJvdmlkZXIub2YoSTE4TkJsb2MsIHRoaXMpO1xuICAgIH1cbiAgICBidWlsZGVyKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBodG1sIGBcbiAgICAgICAgPHN0eWxlPlxuICAgICAgICAgICAgLmdsYXNze1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dGhpcy50aGVtZS5pbnB1dF9iZ19jb2xvcn07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuc2xpLWJne1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgIG1pbi1oZWlnaHQ6ICR7dGhpcy50aGVtZS5pbnB1dF9oZWlnaHR9O1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7dGhpcy50aGVtZS5jb3JuZXJSYWRpdXN9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlucHV0e1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDFlbTtcbiAgICAgICAgICAgICAgICBjYXJldC1jb2xvcjogJHt0aGlzLnRoZW1lLmlucHV0X2N1cnNvcl9jb2xvcn07XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7dGhpcy50aGVtZS5pbnB1dF90ZXh0X2NvbG9yfTtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAke3RoaXMudGhlbWUuaW5wdXRfcGFkZGluZ307XG4gICAgICAgICAgICAgICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiBTYWZhcmkvQ2hyb21lLCBvdGhlciBXZWJLaXQgKi9cbiAgICAgICAgICAgICAgICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7ICAgIC8qIEZpcmVmb3gsIG90aGVyIEdlY2tvICovXG4gICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlucHV0OmZvY3Vze1xuICAgICAgICAgICAgICAgIG91dGxpbmUtd2lkdGg6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnB1dDo6cGxhY2Vob2xkZXJ7XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7dGhpcy50aGVtZS5pbnB1dF9wbGFjZV9ob2xkZXJfY29sb3J9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmljb25DdHJse1xuICAgICAgICAgICAgICAgIC0taXJvbi1pY29uLWhlaWdodDogMzBweDtcbiAgICAgICAgICAgICAgICAtLWlyb24taWNvbi13aWR0aDogMzBweDtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDVweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgPC9zdHlsZT5cbiAgICAgICAgJHt0aGlzLmdldERhdGFMaXN0KCl9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzbGktYmcgZ2xhc3NcIj5cbiAgICAgICAgICAgIDxsYXktdGhlbSBpbj1cInJvd1wiPlxuICAgICAgICAgICAgICAgICR7dGhpcy5nZXRJY29uKCl9XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImZsZXg6IDFcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0ID9kaXNhYmxlZD0ke3RoaXMuZGlzYWJsZWR9IEBpbnB1dD0ke3RoaXMuX2RlbGVnYXRlQ2hhbmdlfSBsaXN0PVwiJHtpZkRlZmluZWQodGhpcy5kYXRhTGlzdCl9XCIgIGlucHV0bW9kZT1cIiR7dGhpcy5nZXRJbnB1dE1vZGUoKX1cIiB2YWx1ZT1cIiR7aWZEZWZpbmVkKHRoaXMuZ2V0VmFsdWUoKSl9XCIgY2xhc3M9XCJzbGktYmdcIiBwbGFjZWhvbGRlcj1cIiR7dGhpcy5nZXRQbGFjZUhvbGRlcigpfVwiIHR5cGU9XCIke3RoaXMuZ2V0SW5wdXRUeXBlKCl9XCI+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2xheS10aGVtPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICB9XG4gICAgZ2V0IGRhdGFMaXN0KCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZUxpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBcImRhdGFMaXN0XCI7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0aW5wdXRzLmpzLm1hcCIsImltcG9ydCB7IEZvcm1CbG9jLCBGb3JtQmxvY1Byb3ZpZGVyIH0gZnJvbSAnLi9mb3Jtcyc7XG5pbXBvcnQgeyBUb2dnbGVCdXR0b24gfSBmcm9tICcuL2lucHV0cy90b2dnbGVidXR0b24nO1xuaW1wb3J0IHsgUmFuZ2VTZWxlY3RvciB9IGZyb20gJy4vaW5wdXRzL3Jhbmdlc2VsZWN0b3InO1xuaW1wb3J0IHsgUmFpc2VkQnV0dG9uIH0gZnJvbSAnLi9idXR0b25zJztcbmltcG9ydCB7IFNjYWZmb2xkQmxvYyB9IGZyb20gJy4vc2NhZmZvbGQnO1xuaW1wb3J0IHsgU2luZ2xlTGluZUlucHV0IH0gZnJvbSAnLi9pbnB1dHMvdGV4dGlucHV0cyc7XG5leHBvcnQgY2xhc3MgTXlGb3JtQmxvYyBleHRlbmRzIEZvcm1CbG9jIHtcbiAgICBwb3N0T25DaGFuZ2VGdW5jdGlvbkdpdmVyKG5hbWVPZklucHV0KSB7XG4gICAgICAgIHN3aXRjaCAobmFtZU9mSW5wdXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ3VzZXJDaG9pY2UnOlxuICAgICAgICAgICAgICAgIHJldHVybiAobnYsIHZhbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInVzZXIgY2hvaWNlIGlzIDogXCIsIG52KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICB1c2VyQ2hvaWNlOiB0cnVlLFxuICAgICAgICAgICAgcHJpY2VSYW5nZTogeyBzdGFydDogMjAwLCBlbmQ6IDcwMCB9LFxuICAgICAgICAgICAgYXJlRGlzYWJsZWQ6IG5ldyBTZXQoW10pXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB2YWxpZGF0b3JGdW5jdGlvbkdpdmVyKG5hbWVPZklucHV0KSB7XG4gICAgICAgIHN3aXRjaCAobmFtZU9mSW5wdXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ3VzZXJDaG9pY2UnOlxuICAgICAgICAgICAgICAgIHJldHVybiAobmV3VmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndmFsdWUgZm9yIHVzZXJDaG9pY2UgY2Fubm90IGJlIHVuZGVmaW5lZCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAncHJpY2VSYW5nZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChuZXdWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYHZhbHVlIGNhbm5vdCBiZSBudWxsIGZvciBwcmljZVJhbmdlYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICd1c2VySW5wdXQnOlxuICAgICAgICAgICAgICAgIHJldHVybiAobmV3VmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGB2YWx1ZSBjYW5ub3QgYmUgbnVsbCBmb3IgcHJpY2VSYW5nZWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlID0gL1tBLVphLXpdLztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZS50ZXN0KG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiT25seSBhbHBoYWJldHMgYWxsb3dlZFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTXlUb2dnbGVCdXR0b24gZXh0ZW5kcyBUb2dnbGVCdXR0b24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihNeUZvcm1CbG9jKTtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJteS10b2dnbGUtYnV0dG9uXCIsIE15VG9nZ2xlQnV0dG9uKTtcbmV4cG9ydCBjbGFzcyBNeUZvcm0gZXh0ZW5kcyBGb3JtQmxvY1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIobmV3IE15Rm9ybUJsb2MoKSk7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwibXktZm9ybVwiLCBNeUZvcm0pO1xuZXhwb3J0IGNsYXNzIFByaWNlUmFuZ2UgZXh0ZW5kcyBSYW5nZVNlbGVjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoTXlGb3JtQmxvYyk7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwicHJpY2UtcmFuZ2VcIiwgUHJpY2VSYW5nZSk7XG4vL1lvdSBjYW4gbWFrZSBpdCA6IE15Rm9ybUJsb2MgdG9vIGlmIG5lZWRlZFxuZXhwb3J0IGNsYXNzIE15QnV0dG9uIGV4dGVuZHMgUmFpc2VkQnV0dG9uIHtcbiAgICBvblByZXNzKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuYmxvYykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBvc3RNZXNzYWdlVG9TbmFja0JhcihcIkhpIHRoaXMgaXMgYSBtZXNzYWdlIGZvciB5b3UhXCIpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoU2NhZmZvbGRCbG9jKTtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJteS1idXR0b25cIiwgTXlCdXR0b24pO1xuZXhwb3J0IGNsYXNzIFVzZXJQYXNzd29yZCBleHRlbmRzIFNpbmdsZUxpbmVJbnB1dCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKE15Rm9ybUJsb2MpO1xuICAgIH1cbn1cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcInVzZXItcGFzc3dvcmRcIiwgVXNlclBhc3N3b3JkKTtcbmV4cG9ydCBjbGFzcyBTZWxlY3RMYW5nIGV4dGVuZHMgU2luZ2xlTGluZUlucHV0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoTXlGb3JtQmxvYywgW1wiRW5nbGlzaFwiLCBcIkhpbmRpXCIsIFwiR2VybWFuXCJdKTtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJzZWxlY3QtbGFuZ1wiLCBTZWxlY3RMYW5nKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlc3QuanMubWFwIiwiaW1wb3J0IHsgV2lkZ2V0QnVpbGRlciwgQm9ndXNCbG9jIH0gZnJvbSAnLi4vdXRpbHMvYmxvY3MnO1xuaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJztcbmV4cG9ydCBjbGFzcyBBbmltYXRlZEdyYWRpZW50QmFja2dyb3VuZCBleHRlbmRzIFdpZGdldEJ1aWxkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihCb2d1c0Jsb2MsIHtcbiAgICAgICAgICAgIHVzZVRoaXNCbG9jOiBuZXcgQm9ndXNCbG9jKClcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ3JhZGllbnRfY29sb3JzID0gYCMke3RoaXMudGhlbWUucHJpbWFyeUNvbG9yfSwjJHt0aGlzLnRoZW1lLnNlY29uZGFyeUNvbG9yfWA7XG4gICAgICAgIGlmICh0aGlzLnVzZUF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgbGV0IHQgPSB0aGlzLnVzZUF0dHJpYnV0ZVtcImdyYWRpZW50c1wiXTtcbiAgICAgICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ncmFkaWVudF9jb2xvcnMgPSB0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGJ1aWxkZXIoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgYFxuICAgICAgICAgICAgPHN0eWxlPlxuICAgICAgICAgICAgICAgIC5hbmltYXRlZC1ncmFkaWVudCB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgtNDVkZWcsICR7dGhpcy5ncmFkaWVudF9jb2xvcnN9KTtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiA0MDAlIDQwMCU7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogZ3JhZGllbnQgMTVzIGVhc2UgaW5maW5pdGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgQGtleWZyYW1lcyBncmFkaWVudCB7XG4gICAgICAgICAgICAgICAgICAgIDAlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAlIDUwJTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA1MCUge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMTAwJSA1MCU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgMTAwJSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwJSA1MCU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLmV4cGFuZGVke1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA8L3N0eWxlPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZWQtZ3JhZGllbnQgZXhwYW5kZWRcIj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgIH1cbn1cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcImFuaW1hdGVkLWdyYWQtYmdcIiwgQW5pbWF0ZWRHcmFkaWVudEJhY2tncm91bmQpO1xuZXhwb3J0IGNsYXNzIEltYWdlQmFja2dyb3VuZCBleHRlbmRzIFdpZGdldEJ1aWxkZXIge1xuICAgIGJ1aWxkZXIoc3RhdGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihCb2d1c0Jsb2MsIHtcbiAgICAgICAgICAgIHVzZVRoaXNCbG9jOiBuZXcgQm9ndXNCbG9jKClcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFja2dyb3VuZHMuanMubWFwIiwiLy8gZXhwb3J0IGludGVyZmFjZSBQYXRoVHJlZXtcbi8vICAgICBba2V5Om51bWJlcl06UGF0aFR5cGVzXG4vLyB9XG5leHBvcnQgY2xhc3MgQ29tcGFzcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucGF0aF90cmVlID0ge307XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHVzZSB0byBkZWZpbmUgbmV3IHBhdGhzLCB0byBsYXRlciBmaW5kIHRoZW0gd2l0aCBmaW5kIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogeW91IGNhbiB1c2UgcGF0aCBwYXJhbXMgd2l0aCBhIGNvbG9uLiBPbmx5IHNpbXBsZSBwYXRoIHBhdHRlcm5zIHN1cHBvcnRlZC5cbiAgICAgKiBAcGFyYW0gcGF0aF9wYXR0ZXJuXG4gICAgICovXG4gICAgZGVmaW5lKHBhdGhfcGF0dGVybikge1xuICAgICAgICBjb25zdCBwYXJ0cyA9IHBhdGhfcGF0dGVybi5zcGxpdChcIi9cIik7XG4gICAgICAgIC8vdGhpcyBoYXBwZW5zIHdoZW4gcGF0aCBzdGFydHMgd2l0aCAnLycsIHdoaWNoIGNyZWF0ZXMgYSBibGFuayBzdHJpbmcsIHdlIHdpbGwgc2ltcGx5IHJlbW92ZSBpdFxuICAgICAgICB3aGlsZSAocGFydHNbMF0gPT09IFwiXCIpIHtcbiAgICAgICAgICAgIHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9mb3Igcm9vdCBjYXNlXG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5wYXRoX3RyZWUudmFsdWUgPSBcIi9cIjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvL0ZpcnN0IGtleSB3bGwgYmUgbnVtYmVyIG9mIHBhcnRzXG4gICAgICAgIGxldCBzID0gdGhpcy5wYXRoX3RyZWU7IC8vc3RhcnQgbm9kZVxuICAgICAgICBsZXQgYyA9IDA7XG4gICAgICAgIGZvciAobGV0IHAgb2YgcGFydHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzUGxhaW4gPSAhKHAuc3RhcnRzV2l0aChcIjpcIikpO1xuICAgICAgICAgICAgbGV0IHQ7IC8vdHlwZVxuICAgICAgICAgICAgaWYgKGlzUGxhaW4pIHtcbiAgICAgICAgICAgICAgICB0ID0gcy5wbGFpbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHQgPSBzLnBhcmFtZXRlcml6ZWQ7XG4gICAgICAgICAgICAgICAgcCA9IHAuc2xpY2UoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNQbGFpbikge1xuICAgICAgICAgICAgICAgICAgICBzLnBsYWluID0ge307XG4gICAgICAgICAgICAgICAgICAgIHQgPSBzLnBsYWluO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcy5wYXJhbWV0ZXJpemVkID0ge307XG4gICAgICAgICAgICAgICAgICAgIHQgPSBzLnBhcmFtZXRlcml6ZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdiA9IHRbcF07IC8vdmFsdWVcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlX3R5cGUgPSB0eXBlb2YgKCh2ICYmIHYudmFsdWUpID8gdi52YWx1ZSA6IHYpO1xuICAgICAgICAgICAgaWYgKHZhbHVlX3R5cGUgPT09IFwic3RyaW5nXCIgJiYgYyA9PT0gcGFydHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlX3R5cGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoIC0gMSA9PT0gYykge1xuICAgICAgICAgICAgICAgICAgICAvL2lzIGxhc3QgZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgdFtwXSA9IHsgdmFsdWU6IHBhdGhfcGF0dGVybiB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0W3BdID0ge307XG4gICAgICAgICAgICAgICAgICAgIHMgPSB0W3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHMgPSB0W3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYysrO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gZmluZCB0aGUgZGVmaW5lZCBwYXRoLCBpZiBub3QgZm91bmQgaXQgc2ltcGx5IHJldHVybnMgdW5kZWZpbmVkLlxuICAgICAqXG4gICAgICogaWYgZm91bmQgdGhlIHJlc3VsdCBvYmplY3QgaGFzIHR3byBrZXlzIHBhdGhfcGFyYW1zIG9iamVjdCBjb250YWluaW5nXG4gICAgICogcGF0aCBwYXJhbWV0ZXIgYW5kIHRoZWlyIHZhbHVlLCBhbmQgYSBtYXRjaGVkX3BhdHRlcm4ga2V5LCB3aGljaCBzaWduaWZ5XG4gICAgICogd2hpY2ggcGF0aCBpdCBoYXMgbWF0Y2hlZCBhZ2FpbnN0XG4gICAgICogQHBhcmFtIHVybF9wYXRoXG4gICAgICovXG4gICAgZmluZCh1cmxfcGF0aCkge1xuICAgICAgICBjb25zdCBwYXJ0cyA9IHVybF9wYXRoLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgLy90aGlzIGhhcHBlbnMgd2hlbiBwYXRoIHN0YXJ0cyB3aXRoICcvJywgd2hpY2ggY3JlYXRlcyBhIGJsYW5rIHN0cmluZyxcbiAgICAgICAgLy8gd2Ugd2lsbCBzaW1wbHkgcmVtb3ZlIGl0XG4gICAgICAgIHdoaWxlIChwYXJ0c1swXSA9PT0gXCJcIikge1xuICAgICAgICAgICAgcGFydHMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICAvL2ZvciByb290XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucGF0aF90cmVlLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcGF0aF9wYXJhbXM6IHt9LCBtYXRjaGVkX3BhdHRlcm46IFwiL1wiLCBwYXJlbnRfbWF0Y2hlczogW10gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgcyA9IHRoaXMucGF0aF90cmVlO1xuICAgICAgICAvL25vIGVudHJ5IHdpdGggdGhlIGdpdmVuIGxlbmd0aCBzaW1wbHkgcmV0dXJuXG4gICAgICAgIGlmICghcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IHBhdGhfcGFyYW1zID0ge307XG4gICAgICAgICAgICBsZXQgcGFyZW50X21hdGNoZXMgPSBbXTtcbiAgICAgICAgICAgIGlmIChzLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50X21hdGNoZXMucHVzaChcIi9cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmluZCgwLCBwYXJ0cywgcywgcGF0aF9wYXJhbXMsIHBhcmVudF9tYXRjaGVzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZmluZChkLCBwYXJ0cywgcywgcGF0aF9wYXJhbXMsIHBhcmVudF9tYXRjaGVzKSB7XG4gICAgICAgIGxldCBwID0gcGFydHNbZF07XG4gICAgICAgIGxldCB0ID0gcy5wbGFpbiA/IHMucGxhaW5bcF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGxldCB2ID0gKHQgJiYgdC52YWx1ZSkgPyB0LnZhbHVlIDogdW5kZWZpbmVkO1xuICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlmIChkID09PSBwYXJ0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhdGhfcGFyYW1zLCBtYXRjaGVkX3BhdHRlcm46IHYsIHBhcmVudF9tYXRjaGVzOiBwYXJlbnRfbWF0Y2hlcyB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZCsrO1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRfbWF0Y2hlcy5wdXNoKHYpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZmluZChkLCBwYXJ0cywgdCwgcGF0aF9wYXJhbXMsIHBhcmVudF9tYXRjaGVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkKys7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbmQoZCwgcGFydHMsIHQsIHBhdGhfcGFyYW1zLCBwYXJlbnRfbWF0Y2hlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodCkge1xuICAgICAgICAgICAgZCsrO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbmQoZCwgcGFydHMsIHQsIHBhdGhfcGFyYW1zLCBwYXJlbnRfbWF0Y2hlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocy5wYXJhbWV0ZXJpemVkKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpIG9mIE9iamVjdC5rZXlzKHMucGFyYW1ldGVyaXplZCkpIHtcbiAgICAgICAgICAgICAgICB0ID0gcy5wYXJhbWV0ZXJpemVkW2ldO1xuICAgICAgICAgICAgICAgIGxldCB2ID0gKHQgJiYgdC52YWx1ZSkgPyB0LnZhbHVlIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHBhdGhfcGFyYW1zW2ldID0gcDtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkID09PSBwYXJ0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXRoX3BhcmFtcywgbWF0Y2hlZF9wYXR0ZXJuOiB2LCBwYXJlbnRfbWF0Y2hlczogcGFyZW50X21hdGNoZXMgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudF9tYXRjaGVzLnB1c2godik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZmluZChkLCBwYXJ0cywgdCwgcGF0aF9wYXJhbXMsIHBhcmVudF9tYXRjaGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy90IGlzIGVpdGhlciB1bmRlZmluZWQgb3Igb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIGQrKztcbiAgICAgICAgICAgICAgICAgICAgbGV0IHogPSB0aGlzLl9maW5kKGQsIHBhcnRzLCB0LCBwYXRoX3BhcmFtcywgcGFyZW50X21hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoeikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHo7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoX3BhcmFtcyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBwYXRoMTogL25hbWVfb2YvOnVzcm5hbWUvaW5mb1xuICogcGF0aDI6IC86ZG9jaWQvbWV0YS86cGFyYW1fbmFtZVxuICogcGF0aDM6IC86cGlyYXRlcy9vZi86c2VhXG57XG4gICAgMzp7XG4gICAgICAgIHBhcmFtZXRlcml6ZWQ6e1xuICAgICAgICAgICAgXCJkb2NpZFwiOntcbiAgICAgICAgICAgICAgICBwbGFpbjp7XG4gICAgICAgICAgICAgICAgICAgIG1ldGE6e1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyaXplZDp7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhcmFtX25hbWVcIjpcIi86ZG9jaWQvbWV0YS86cGFyYW1fbmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJwaXJhdGVzXCI6e1xuICAgICAgICAgICAgICAgIHBsYWluOntcbiAgICAgICAgICAgICAgICAgICAgXCJvZlwiOntcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcml6ZWQ6e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VhXCI6IFwiLzpwaXJhdGVzL29mLzpzZWFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwbGFpbjp7XG4gICAgICAgICAgICBuYW1lX29mOntcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJpemVkOntcbiAgICAgICAgICAgICAgICAgICAgXCJ1c3JuYW1lXCI6e1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxhaW46e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm86IFwiL25hbWVfb2YvOnVzcm5hbWUvaW5mb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4qL1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGFzcy5qcy5tYXAiLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHsgQmxvYywgQmxvY3NQcm92aWRlciwgQmxvY0J1aWxkZXIgfSBmcm9tICdibG9jLXRoZW0nO1xuaW1wb3J0IHsgQ29tcGFzcyB9IGZyb20gJy4vY29tcGFzcyc7XG5leHBvcnQgY2xhc3MgUm91dGVUaGVtQmxvYyBleHRlbmRzIEJsb2Mge1xuICAgIGNvbnN0cnVjdG9yKGluaXRTdGF0ZSA9IHsgdXJsX3BhdGg6IFwiL1wiLCBwYXRoRGlyZWN0aW9uOiB7IHBhdGhfcGFyYW1zOiB7fSwgbWF0Y2hlZF9wYXR0ZXJuOiBcIi9cIiwgcGFyZW50X21hdGNoZXM6IFtdIH0gfSkge1xuICAgICAgICBzdXBlcihpbml0U3RhdGUpO1xuICAgICAgICB0aGlzLl9jb21wYXNzID0gbmV3IENvbXBhc3MoKTtcbiAgICAgICAgdGhpcy5fY29tcGFzcy5kZWZpbmUoXCIvXCIpO1xuICAgICAgICBsZXQgdCA9IGRvY3VtZW50LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgICAgICB0aGlzLl9pbml0X3BhdGggPSB0LnN1YnN0cmluZygwLCB0Lmxlbmd0aCAtIDEpO1xuICAgICAgICB3aW5kb3cub25wb3BzdGF0ZSA9IChlKSA9PiB7XG4gICAgICAgICAgICBsZXQgb2xkU3RhdGUgPSBlLnN0YXRlO1xuICAgICAgICAgICAgdGhpcy5lbWl0KHsgLi4ub2xkU3RhdGUgfSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGRlZmluZShyb3V0ZVBhdGgpIHtcbiAgICAgICAgdGhpcy5fY29tcGFzcy5kZWZpbmUocm91dGVQYXRoKTtcbiAgICB9XG4gICAgcG9wT3V0T2ZDdXJyZW50UGFnZSgpIHtcbiAgICAgICAgaGlzdG9yeS5iYWNrKCk7XG4gICAgfVxuICAgIGdvVG9QYWdlKHVybF9wYXRoLCBvcHRpb25zID0geyBzYXZlVG9Ccm93c2VySGlzdG9yeTogdHJ1ZSwgdGl0bGU6IFwiXCIgfSkge1xuICAgICAgICBsZXQgciA9IHRoaXMuX2NvbXBhc3MuZmluZCh1cmxfcGF0aCk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICBsZXQgbmV3Um91dGVTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICB1cmxfcGF0aDogdXJsX3BhdGgsXG4gICAgICAgICAgICAgICAgZGF0YTogb3B0aW9ucy5kYXRhLFxuICAgICAgICAgICAgICAgIHBhdGhEaXJlY3Rpb246IHJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmVtaXQobmV3Um91dGVTdGF0ZSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zYXZlVG9Ccm93c2VySGlzdG9yeSkge1xuICAgICAgICAgICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKG5ld1JvdXRlU3RhdGUsIG9wdGlvbnMudGl0bGUsIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyB0aGlzLl9pbml0X3BhdGggKyB1cmxfcGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgTm8gcm91dGUgZXhpc3RzIGZvciBwYXRoOiAke3VybF9wYXRofWApO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJvdXRlVGhlbUNvbnRyb2xsZXIgZXh0ZW5kcyBCbG9jc1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoW1xuICAgICAgICAgICAgbmV3IFJvdXRlVGhlbUJsb2MoKVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgYnVpbGRlcigpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgYDxkaXY+PHNsb3Q+PC9zbG90PjwvZGl2PmA7XG4gICAgfVxufVxuY2xhc3MgX0JvZ3VzQmxvYyBleHRlbmRzIEJsb2Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigwKTtcbiAgICB9XG59XG4vKipcbiAqIEF0IGZpcnN0IHRoaXMgbWF5IHNlZW1zIHJlZHVuZGFudCwgYnV0IGl0cyByZXF1aXJlZCB0byBlbmNhcHN1bGF0ZSBwYWdlcy5cbiAqIFdpdGhvdXQgdGhpcyBtYW4gY29udGVudCB3aWxsIGJlIHZpc2libGUgdW5jb250cm9sbGFibHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3V0ZVRoZW0gZXh0ZW5kcyBCbG9jQnVpbGRlciB7XG4gICAgY29uc3RydWN0b3IocGFnZVRhZ05hbWUgPSBcImEtcGFnZVwiLCByb3V0ZUJsb2NUeXBlID0gUm91dGVUaGVtQmxvYykge1xuICAgICAgICBzdXBlcihfQm9ndXNCbG9jLCB7XG4gICAgICAgICAgICB1c2VUaGlzQmxvYzogbmV3IF9Cb2d1c0Jsb2MoKVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wYWdlVGFnTmFtZSA9IHBhZ2VUYWdOYW1lO1xuICAgICAgICB0aGlzLnJvdXRlQmxvY1R5cGUgPSByb3V0ZUJsb2NUeXBlO1xuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgbGV0IHJvdXRlQmxvYyA9IEJsb2NzUHJvdmlkZXIub2YodGhpcy5yb3V0ZUJsb2NUeXBlLCB0aGlzKTtcbiAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHRoaXMucGFnZVRhZ05hbWUpLmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgICBsZXQgciA9IGUuZ2V0QXR0cmlidXRlKFwicm91dGVcIik7XG4gICAgICAgICAgICBpZiAoIXIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBgTm8gcm91dGUgZGVmaW5lZCBmb3IgYSBwYWdlYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvdXRlQmxvYyA9PT0gbnVsbCB8fCByb3V0ZUJsb2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJvdXRlQmxvYy5kZWZpbmUocik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBidWlsZGVyKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBodG1sIGA8ZGl2PjxzbG90Pjwvc2xvdD48L2Rpdj5gO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBUGFnZSBleHRlbmRzIEJsb2NCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihibG9jVHlwZSA9IFJvdXRlVGhlbUJsb2MpIHtcbiAgICAgICAgc3VwZXIoYmxvY1R5cGUpO1xuICAgICAgICB0aGlzLl9sb2FkZWRfb25jZSA9IGZhbHNlO1xuICAgIH1cbiAgICBnZXQgcm91dGUoKSB7XG4gICAgICAgIGxldCByID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJyb3V0ZVwiKTtcbiAgICAgICAgaWYgKCFyKSB7XG4gICAgICAgICAgICB0aHJvdyBgTm8gcm91dGUgZGVmaW5lZCBmb3IgYSBwYWdlYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgYmVoYXZpb3IgaXMgbGF6eWhpZGVcbiAgICAgKi9cbiAgICBnZXRCZWhhdmlvcigpIHtcbiAgICAgICAgbGV0IHIgPSB0aGlzLmdldEF0dHJpYnV0ZShcImJlaGF2ZXNcIik7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICByID0gci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgaWYgKEFQYWdlLl9hbGxvd2VkQmVoYXZpb3IuaGFzKHIpKSB7XG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwibGF6eWhpZGVcIjtcbiAgICB9XG4gICAgdG9CZUhpZGRlbihzdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUucGF0aERpcmVjdGlvbi5tYXRjaGVkX3BhdHRlcm4gPT09IHRoaXMucm91dGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGJ1aWxkZXIoc3RhdGUpIHtcbiAgICAgICAgbGV0IGRvSGlkZSA9IHRoaXMudG9CZUhpZGRlbihzdGF0ZSk7XG4gICAgICAgIHN3aXRjaCAodGhpcy5nZXRCZWhhdmlvcigpKSB7XG4gICAgICAgICAgICBjYXNlIFwiaGlkZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRCYXNlVGVtcGxhdGUoZG9IaWRlKTtcbiAgICAgICAgICAgIGNhc2UgXCJyZWxvYWRcIjpcbiAgICAgICAgICAgICAgICBpZiAoZG9IaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBodG1sIGBgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldEJhc2VUZW1wbGF0ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImxhenloaWRlXCI6IHtcbiAgICAgICAgICAgICAgICAvL2lmIGl0cyBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2xvYWRlZF9vbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb0hpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBodG1sIGBgO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGF0IG1lYW5zIHdlIG5lZWQgdG8gc2hvdztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRlZF9vbmNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRCYXNlVGVtcGxhdGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL2l0cyBhbHJlYWR5IGxvYWRlZCBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldEJhc2VUZW1wbGF0ZShkb0hpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfZ2V0QmFzZVRlbXBsYXRlKGRvSGlkZSkge1xuICAgICAgICByZXR1cm4gaHRtbCBgXG4gICAgPHN0eWxlPlxuICAgICAgLmhpZGV7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICB9XG4gICAgICAuc2hvd3tcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB9XG4gICAgPC9zdHlsZT5cbiAgICA8ZGl2IGNsYXNzPVwiJHtkb0hpZGUgPyAnaGlkZScgOiAnc2hvdyd9XCI+XG4gICAgPHNsb3Q+PC9zbG90PlxuICAgIDwvZGl2PlxuICAgIGA7XG4gICAgfVxufVxuQVBhZ2UuX2FsbG93ZWRCZWhhdmlvciA9IG5ldyBTZXQoW1wiaGlkZVwiLCBcImxhenloaWRlXCIsIFwicmVsb2FkXCJdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJvdXRlVGhlbS5qcy5tYXAiLCJpbXBvcnQgeyBCbG9jc1Byb3ZpZGVyIH0gZnJvbSAnYmxvYy10aGVtJztcbmltcG9ydCB7IGh0bWwsIHJlbmRlciB9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7IEFQYWdlLCBSb3V0ZVRoZW0sIFJvdXRlVGhlbUJsb2MgfSBmcm9tICdyb3V0ZS10aGVtJztcbmltcG9ydCB7IFdpZGdldEJ1aWxkZXIgfSBmcm9tICcuLi91dGlscy9ibG9jcyc7XG5pbXBvcnQgeyBHZXN0dXJlRGV0ZWN0b3IgfSBmcm9tICcuL2dlc3R1cmVkZXRlY3Rvcic7XG5jbGFzcyBUYWJSb3V0ZXJCbG9jIGV4dGVuZHMgUm91dGVUaGVtQmxvYyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX251bWJlcl9vZl9yb3V0ZXMgPSAwO1xuICAgIH1cbiAgICBkZWZpbmUocm91dGVQYXRoKSB7XG4gICAgICAgIHN1cGVyLmRlZmluZShyb3V0ZVBhdGgpO1xuICAgICAgICB0aGlzLl9udW1iZXJfb2Zfcm91dGVzKys7XG4gICAgfVxuICAgIGdldCBudW1iZXJfb2Zfcm91dGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbnVtYmVyX29mX3JvdXRlcztcbiAgICB9XG4gICAgZ2V0IGN1cnJlbnRfaW5kZXgoKSB7XG4gICAgICAgIGxldCB0ID0gdGhpcy5zdGF0ZS51cmxfcGF0aDtcbiAgICAgICAgaWYgKHQgPT09IFwiL1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0LnN1YnN0cmluZygxKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVGFiSGVhZGVyIGV4dGVuZHMgV2lkZ2V0QnVpbGRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFRhYlJvdXRlckJsb2MpO1xuICAgIH1cbiAgICBnZXQgaWNvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pY29uKSB7XG4gICAgICAgICAgICBsZXQgdCA9IHRoaXMuZ2V0QXR0cmlidXRlKFwiaWNvblwiKTtcbiAgICAgICAgICAgIGlmICghdCkge1xuICAgICAgICAgICAgICAgIHRocm93IGBObyBpY29uIGF0dHJpYnV0ZSBwcm92aWRlZCBmb3IgdGFiIGhlYWRlcmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pY29uID0gdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5faWNvbjtcbiAgICB9XG4gICAgZ2V0IGluZGV4cGF0aCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pbmRleHBhdGgpIHtcbiAgICAgICAgICAgIGxldCB0MSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwiaW5kZXhwYXRoXCIpO1xuICAgICAgICAgICAgaWYgKCF0MSkge1xuICAgICAgICAgICAgICAgIHRocm93IFwibm8gaW5kZXhwYXRoIGF0dHJpYnV0ZSBwcm92aWRlZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5kZXhwYXRoID0gdDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2luZGV4cGF0aDtcbiAgICB9XG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgdGhpcy5pY29uO1xuICAgICAgICB0aGlzLmluZGV4cGF0aDtcbiAgICAgICAgcmVuZGVyKHRoaXMuYnVpbGRlcigoX2EgPSB0aGlzLmJsb2MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdGF0ZSksIHRoaXMuc2hhZG93Um9vdCk7XG4gICAgfVxuICAgIGJ1aWxkZXIoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgYFxuICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgICAuaWNvbntcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3N0YXRlLnVybF9wYXRoID09PSB0aGlzLmluZGV4cGF0aCA/IFwiI2ZhZmFmYVwiIDogdGhpcy50aGVtZS50YWJfaW5hY3RpdmVfY29sb3J9O1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgICAgIG1pbi13aWR0aDogNTBweDtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAtLWlyb24taWNvbi1oZWlnaHQ6IDMwcHg7XG4gICAgICAgICAgICAgICAgLS1pcm9uLWljb24td2lkdGg6IDMwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIDwvc3R5bGU+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpY29uXCIgQGNsaWNrPSR7KCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgKF9hID0gdGhpcy5ibG9jKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ29Ub1BhZ2UodGhpcy5faW5kZXhwYXRoLCB7IHNhdmVUb0Jyb3dzZXJIaXN0b3J5OiBmYWxzZSwgdGl0bGU6IFwiXCIgfSk7XG4gICAgICAgIH19Pjxpcm9uLWljb24gaWNvbj1cIiR7dGhpcy5faWNvbn1cIiBzdHlsZT1cImZpbGw6ICR7c3RhdGUudXJsX3BhdGggPT09IHRoaXMuaW5kZXhwYXRoID8gXCJibGFja1wiIDogdGhpcy50aGVtZS50YWJfaW5hY3RpdmVfaWNvbl9jb2xvcn1cIj48L2lyb24taWNvbj48L2Rpdj5cbiAgICAgICAgYDtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJ1dC10YWItaGVhZGVyXCIsIFRhYkhlYWRlcik7XG5jbGFzcyBfVGFic0dlc3R1cmVEZXRlY3RvciBleHRlbmRzIEdlc3R1cmVEZXRlY3RvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKDEsIDEwMCk7XG4gICAgICAgIHRoaXMub25Td2lwZUxlZnQgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcm91dGVCbG9jKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHRfaW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3JvdXRlQmxvYy5jdXJyZW50X2luZGV4ID49IHRoaXMuX3JvdXRlQmxvYy5udW1iZXJfb2Zfcm91dGVzIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0X2luZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRfaW5kZXggPSB0aGlzLl9yb3V0ZUJsb2MuY3VycmVudF9pbmRleCArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3JvdXRlQmxvYy5nb1RvUGFnZShgLyR7bmV4dF9pbmRleCA9PT0gMCA/IFwiXCIgOiBuZXh0X2luZGV4fWAsIHsgc2F2ZVRvQnJvd3Nlckhpc3Rvcnk6IGZhbHNlLCB0aXRsZTogXCJcIiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vblN3aXBlUmlnaHQgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcm91dGVCbG9jKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHRfaW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3JvdXRlQmxvYy5jdXJyZW50X2luZGV4IDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dF9pbmRleCA9IHRoaXMuX3JvdXRlQmxvYy5udW1iZXJfb2Zfcm91dGVzIC0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRfaW5kZXggPSB0aGlzLl9yb3V0ZUJsb2MuY3VycmVudF9pbmRleCAtIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3JvdXRlQmxvYy5nb1RvUGFnZShgLyR7bmV4dF9pbmRleCA9PT0gMCA/IFwiXCIgOiBuZXh0X2luZGV4fWAsIHsgc2F2ZVRvQnJvd3Nlckhpc3Rvcnk6IGZhbHNlLCB0aXRsZTogXCJcIiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIGxldCB0ID0gQmxvY3NQcm92aWRlci5vZihUYWJSb3V0ZXJCbG9jLCB0aGlzKTtcbiAgICAgICAgaWYgKCF0KSB7XG4gICAgICAgICAgICB0aHJvdyBgTm8gVGFiUm91dGVyQmxvYyBmb3VuZCBmb3IgZ2VzdHVyZSBkZXRlY3RvciBmb3IgdGFic2A7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yb3V0ZUJsb2MgPSB0O1xuICAgICAgICB9XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwidGFicy1nZXN0dXJlLWRldGVjdG9yXCIsIF9UYWJzR2VzdHVyZURldGVjdG9yKTtcbmV4cG9ydCBjbGFzcyBUYWJDb250cm9sbGVyIGV4dGVuZHMgQmxvY3NQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFtuZXcgVGFiUm91dGVyQmxvYygpXSk7XG4gICAgfVxuICAgIGdldEhlYWRlcnMoKSB7XG4gICAgICAgIGlmICghdGhpcy5faGVhZGVycykge1xuICAgICAgICAgICAgbGV0IHRhYnMgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoXCJ1dC10YWJzID4gdXQtdGFiXCIpO1xuICAgICAgICAgICAgaWYgKHRhYnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCBsaXN0T2ZJY29ucyA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFicy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAvL2xpc3RPZkljb25zLnB1c2goKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQgPSB0YWJzW2ldO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaWNvbiA9IHQuZ2V0QXR0cmlidXRlKFwiaWNvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpY29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIk5vIGljb24gZGVmaW5lZCBmb3IgdGFiIGluZGV4OiAke2l9XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcm91dGUgPSB0LmdldEF0dHJpYnV0ZShcInJvdXRlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyb3V0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFwiTm8gcm91dGUgYXR0cmlidXRlIHByZXNlbnRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RPZkljb25zW2ljb25dID0gKGkgPT09IDAgPyBcIi9cIiA6IGAvJHtpfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBodG1sIGA8bGF5LXRoZW0gaW49XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgJHtPYmplY3Qua2V5cyhsaXN0T2ZJY29ucykubWFwKGUgPT4gaHRtbCBgPGRpdiBjbGFzcz1cImljb25cIj48dXQtdGFiLWhlYWRlciBpY29uPSR7ZX0gaW5kZXhwYXRoPVwiJHtsaXN0T2ZJY29uc1tlXX1cIj48L3V0LXRhYi1oZWFkZXI+PC9kaXY+YCl9XG4gICAgICAgICAgICAgICAgPC9sYXktdGhlbT5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgYE5vIFRhYnMgZGVmaW5lZCBmb3IgdGFicyBjb250cm9sbGVyYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oZWFkZXJzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEJvZHkoKSB7XG4gICAgICAgIGxldCB0ID0gdGhpcy5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlc3dpcGVcIik7XG4gICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gaHRtbCBgPHNsb3Q+PC9zbG90PmA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaHRtbCBgXG4gICAgICAgICAgICA8dGFicy1nZXN0dXJlLWRldGVjdG9yPlxuICAgICAgICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgICAgIDwvdGFicy1nZXN0dXJlLWRldGVjdG9yPmA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYnVpbGRlcigpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgYFxuICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgICAuaGVhZGVyc3tcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDUwcHg7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuaWNvbntcbiAgICAgICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICA8L3N0eWxlPlxuICAgICAgICA8bGF5LXRoZW0gIG1hPVwic3RhcnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJzXCI+XG4gICAgICAgICAgICAgICAgJHt0aGlzLmdldEhlYWRlcnMoKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiAgY2xhc3M9XCJib2R5XCIgc3R5bGU9XCJmbGV4OiAxO1wiPlxuICAgICAgICAgICAgICAgICR7dGhpcy5nZXRCb2R5KCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9sYXktdGhlbT5cbiAgICAgICAgYDtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJ1dC10YWItY29udHJvbGxlclwiLCBUYWJDb250cm9sbGVyKTtcbmV4cG9ydCBjbGFzcyBUYWJzIGV4dGVuZHMgUm91dGVUaGVtIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJ1dC10YWJcIiwgVGFiUm91dGVyQmxvYyk7XG4gICAgfVxuICAgIGJ1aWxkZXIoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgYDxkaXYgc3R5bGU9XCJ3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlO1wiPjxzbG90Pjwvc2xvdD48L2Rpdj5gO1xuICAgIH1cbn1cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcInV0LXRhYnNcIiwgVGFicyk7XG5leHBvcnQgY2xhc3MgVGFiIGV4dGVuZHMgQVBhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihUYWJSb3V0ZXJCbG9jKTtcbiAgICAgICAgdGhpcy5pbmRleCA9IC0xO1xuICAgICAgICAvL2xldHMgc2V0IHJvdXRlIGF0dHJpYnV0ZSBmb3IgdGhlIGluZGV4IG1lbnRpb25lZC5cbiAgICAgICAgbGV0IHQgPSB0aGlzLmdldEF0dHJpYnV0ZShcImluZGV4XCIpO1xuICAgICAgICBpZiAoIXQpIHtcbiAgICAgICAgICAgIHRocm93IGBObyBhdHRyaWJ1dGUgaW5kZXggYXR0cmlidXRlIGdpdmVuIG9uIHRoZSB0YWJgO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbmRleCA9IHBhcnNlSW50KHQpO1xuICAgICAgICAgICAgbGV0IHIgPSB0ID09PSBcIjBcIiA/IFwiL1wiIDogYC8ke3R9YDtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKFwicm91dGVcIiwgcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2dldEJhc2VUZW1wbGF0ZShkb0hpZGUpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgYFxuICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgLmhpZGV7XG4gICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuc2hvd3tcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuZXhwYW5kZWR7XG4gICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgfVxuICAgICAgICA8L3N0eWxlPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZXhwYW5kZWQgJHtkb0hpZGUgPyAnaGlkZScgOiAnc2hvdyd9XCI+XG4gICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwidXQtdGFiXCIsIFRhYik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWJzLmpzLm1hcCIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQgeyBCb2d1c0Jsb2MsIEkxOE5CbG9jUHJvdmlkZXIsIFRoZW1lLCBUaGVtZVByb3ZpZGVyLCBXaWRnZXRCdWlsZGVyIH0gZnJvbSAndXNlLXRoZW0nO1xuaW1wb3J0ICd1c2UtdGhlbSc7XG4vKipcbiAqIENsYXNzIHRvIHByb3ZpZGUgSTE4TiB0byB5b3VyIGFwcC5cbiAqL1xuY2xhc3MgQXBwSTE4TlByb3ZpZGVyIGV4dGVuZHMgSTE4TkJsb2NQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIGFwcF9uYW1lOiBcIlNhbXBsZVB3YVwiLFxuICAgICAgICAgICAgd2VsY29tZV9tc2c6IFwiSGkgdGhlcmUhXCJcbiAgICAgICAgfSk7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwiaTE4bi1wcm92aWRlclwiLCBBcHBJMThOUHJvdmlkZXIpO1xuLyoqXG4gKiBDaGFuZ2UgYXBwIHRoZW1lIGZyb20gaGVyZVxuICovXG5jbGFzcyBBcHBUaGVtZVByb3ZpZGVyIGV4dGVuZHMgVGhlbWVQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCgoKSA9PiB7XG4gICAgICAgICAgICBsZXQgdGhlbWUgPSBuZXcgVGhlbWUoKTtcbiAgICAgICAgICAgIHRoZW1lLnByaW1hcnlDb2xvciA9IFwiI2ZmMjA1MlwiO1xuICAgICAgICAgICAgdGhlbWUuc2Vjb25kYXJ5Q29sb3IgPSBcIiM0ZTAwZWNcIjtcbiAgICAgICAgICAgIHRoZW1lLmJhY2tncm91bmRDb2xvciA9IFwiI2VkZWRlZFwiO1xuICAgICAgICAgICAgcmV0dXJuIHRoZW1lO1xuICAgICAgICB9KSgpKTtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJhcHAtdGhlbWUtcHJvdmlkZXJcIiwgQXBwVGhlbWVQcm92aWRlcik7XG5leHBvcnQgY2xhc3MgU2FtcGxlUHdhIGV4dGVuZHMgV2lkZ2V0QnVpbGRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKEJvZ3VzQmxvYywgeyB1c2VUaGlzQmxvYzogbmV3IEJvZ3VzQmxvYygpIH0pO1xuICAgIH1cbiAgICBidWlsZGVyKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBodG1sIGBcbiAgICAgIDxpMThuLXByb3ZpZGVyPlxuICAgICAgICA8YXBwLXRoZW1lLXByb3ZpZGVyPlxuICAgICAgICAgICAgPHV0LXNjYWZmb2xkPlxuICAgICAgICAgICAgICAgIDxkaXYgc2xvdD1cInRpdGxlXCI+PHV0LWgxIHVzZT1cImNvbG9yOiB3aGl0ZVwiPmFwcF9uYW1lPC91dC1oMT48L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IHNsb3Q9XCJib2R5XCIgc3R5bGU9XCJoZWlnaHQ6IDEwMCVcIj5cbiAgICAgICAgICAgICAgICA8dXQtdGFiLWNvbnRyb2xsZXI+XG4gICAgICAgICAgICAgICAgICAgIDx1dC10YWJzPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHV0LXRhYiBpbmRleD1cIjBcIiBpY29uPVwiYWNjb3VudC1jaXJjbGVcIj48dXQtaDE+d2VsY29tZV9tc2c8L3V0LWgxPjwvdXQtdGFiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHV0LXRhYiBpbmRleD1cIjFcIiBpY29uPVwiYWNjb3VudC1iYWxhbmNlXCI+PHV0LWgxPlNvbWUgb3RoZXIgc2NyZWVuczE8L3V0LWgxPjwvdXQtdGFiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHV0LXRhYiBpbmRleD1cIjJcIiBpY29uPVwiY2FyZC10cmF2ZWxcIj48dXQtaDE+U29tZSBvdGhlciBzY3JlZW4yPC91dC1oMT48L3V0LXRhYj5cbiAgICAgICAgICAgICAgICAgICAgPC91dC10YWJzPlxuICAgICAgICAgICAgICAgIDwvdXQtdGFiLWNvbnRyb2xsZXI+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBzbG90PVwibWVudVwiPlxuICAgICAgICAgICAgICAgICAgICA8dXQtaDM+YXBwX25hbWU8L3V0LWgzPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC91dC1zY2FmZm9sZD5cbiAgICAgICAgPC9hcHAtdGhlbWUtcHJvdmlkZXI+XG4gICAgPC9pMThuLXByb3ZpZGVyPlxuICAgIGA7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwic2FtcGxlLXB3YVwiLCBTYW1wbGVQd2EpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==